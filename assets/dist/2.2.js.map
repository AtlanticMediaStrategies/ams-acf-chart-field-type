{"version":3,"sources":["webpack:///2.2.js","webpack:///./~/stream-http/index.js","webpack:///./~/stream-http/lib/capability.js","webpack:///./~/url/url.js","webpack:///./~/builtin-status-codes/browser.js","webpack:///./~/fabric-webpack/dist/fabric.js","webpack:///./~/https-browserify/index.js","webpack:///./~/querystring/decode.js","webpack:///./~/querystring/encode.js","webpack:///./~/querystring/index.js","webpack:///./~/stream-http/lib/request.js","webpack:///./~/stream-http/lib/response.js","webpack:///./~/to-arraybuffer/index.js","webpack:///./~/url/~/punycode/punycode.js","webpack:///./~/url/util.js","webpack:///./~/xtend/immutable.js"],"names":["webpackJsonp","1768","1804","module","exports","__webpack_require__","global","ClientRequest","extend","statusCodes","url","http","request","opts","cb","parse","defaultProtocol","location","protocol","search","host","hostname","port","path","indexOf","method","toUpperCase","headers","req","on","get","end","Agent","defaultMaxSockets","STATUS_CODES","METHODS","call","this","1805","getXHR","undefined","xhr","XMLHttpRequest","open","XDomainRequest","e","checkTypeSupport","type","responseType","isFunction","value","fetch","ReadableStream","blobConstructor","Blob","ArrayBuffer","haveArrayBuffer","haveSlice","prototype","slice","arraybuffer","msstream","mozchunkedarraybuffer","overrideMimeType","vbArray","VBArray","1806","Url","slashes","auth","hash","query","pathname","href","urlParse","parseQueryString","slashesDenoteHost","util","isObject","u","urlFormat","obj","isString","format","urlResolve","source","relative","resolve","urlResolveObject","resolveObject","punycode","protocolPattern","portPattern","simplePathPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","javascript","javascript:","hostlessProtocol","slashedProtocol","https","ftp","gopher","file","http:","https:","ftp:","gopher:","file:","querystring","TypeError","queryIndex","splitter","uSplit","split","slashRegex","replace","join","rest","trim","length","simplePath","exec","substr","proto","lowerProto","toLowerCase","match","hostEnd","i","hec","atSign","lastIndexOf","decodeURIComponent","parseHost","ipv6Hostname","hostparts","l","part","newpart","j","k","charCodeAt","validParts","notHost","bit","push","unshift","toASCII","p","h","ae","esc","encodeURIComponent","escape","qm","s","Object","keys","stringify","charAt","rel","result","tkeys","tk","tkey","rkeys","rk","rkey","v","relPath","shift","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","isNullOrUndefined","authInHost","isNull","last","hasTrailingSlash","up","splice","isAbsolute","1818","100","101","102","200","201","202","203","204","205","206","207","208","226","300","301","302","303","304","305","307","308","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","421","422","423","424","425","426","428","429","431","451","500","501","502","503","504","505","506","507","508","509","510","511","1828","Buffer","process","fabric","version","document","window","jsdom","createWindow","parentWindow","isTouchSupported","documentElement","isLikelyNode","SHARED_ATTRIBUTES","DPI","reNum","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","_removeEventListener","eventName","handler","__eventListeners","removeFromArray","observe","arguments","prop","stopObserving","fire","options","listenersForEvent","len","Observable","off","trigger","Collection","add","_objects","apply","_onObjectAdded","renderOnAddRemove","renderAll","insertAt","object","index","nonSplicing","objects","getObjects","remove","_onObjectRemoved","forEachObject","callback","context","filter","o","item","isEmpty","size","contains","complexity","reduce","memo","current","sqrt","Math","atan2","PiBy180","PI","array","idx","getRandomInt","min","max","floor","random","degreesToRadians","degrees","radiansToDegrees","radians","rotatePoint","point","origin","subtractEquals","sin","cos","rx","x","y","ry","Point","addEquals","transformPoint","t","ignoreOffset","invertTransform","a","r","toFixed","number","fractionDigits","parseFloat","Number","parseUnit","fontSize","unit","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","resolveNamespace","parts","loadImage","crossOrigin","img","createImage","onload","onerror","log","src","enlivenObjects","reviver","onLoaded","numLoadedObjects","numTotalObjects","enlivenedObjects","forEach","klass","async","fromObject","error","groupSVGElements","elements","PathGroup","setSourcePath","populateWithProperties","destination","properties","toString","drawDashedLine","ctx","x2","y2","da","dx","dy","rot","dc","di","draw","save","translate","moveTo","rotate","restore","createCanvasElement","canvasEl","createElement","getContext","G_vmlCanvasManager","initElement","createAccessors","stateProperties","propName","capitalizedPropName","setterName","getterName","property","Function","clipContext","receiver","beginPath","clipTo","clip","multiplyTransformMatrices","b","getFunctionBody","fn","String","isTransparent","tolerance","_isTransparent","imageData","getImageData","data","temp","arcToSegments","toX","toY","large","sweep","rotateX","argsString","_join","arcToSegmentsCache","th","sinTh","cosTh","fromX","fromY","abs","px","py","rx2","ry2","py2","px2","pl","root","cx","cy","cx1","cy1","mTheta","calcVectorAngle","dtheta","segments","ceil","mDelta","mT","th3","segmentToBezier","th2","argsString2","segmentToBezierCache","costh2","sinth2","costh3","sinth3","cp1X","cp1Y","cp2X","cp2Y","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","x0","y0","x1","y1","x3","y3","boundsOfCurveCache","c","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","Array","drawArc","fx","fy","coords","tx","ty","segs","segsNorm","bezierCurveTo","getBoundsOfArc","bound","boundCopy","invoke","args","byProperty","find","value1","value2","condition","searchElement","n","POSITIVE_INFINITY","NEGATIVE_INFINITY","map","every","some","val","rv","clone","character","capitalize","firstLetterOnly","escapeXml","Dummy","bind","thisArg","_this","Subclass","callSuper","methodName","constructor","superclass","createClass","initialize","parent","subclasses","addMethods","emptyFunction","IS_DONTENUM_BUGGY","returnValue","valueOf","areHostMethods","methodNames","test","createListener","uid","wrappedHandler","createWrappedHandler","getElement","event","createDispatcher","handlers","handlersForEvent","getPointer","element","target","srcElement","unknown","scroll","getScrollLeftTop","pointerX","left","pointerY","top","_getPointer","pageProp","clientProp","touchProp","setElement","getUniqueId","__uniqueID","addListener","removeListener","shouldUseAddListenerRemoveListener","shouldUseAttachEventDetachEvent","listeners","addEventListener","removeEventListener","listener","attachEvent","detachEvent","existingHandler","clientX","clientY","setStyle","styles","elementStyle","style","cssText","setOpacity","normalizedProperty","styleFloat","parseEl","supportsOpacity","opacity","supportsFilters","reOpacity","es","currentStyle","hasLayout","zoom","getById","id","getElementById","makeElement","tagName","attributes","el","className","htmlFor","setAttribute","addClass","wrapElement","wrapper","parentNode","replaceChild","appendChild","docElement","body","scrollLeft","scrollTop","nodeType","getElementStyle","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offset","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","attr","parseInt","getBoundingClientRect","clientLeft","clientTop","sliceCanConvertNodelists","_slice","toArray","arrayLike","childNodes","err","arr","defaultView","getComputedStyle","makeElementUnselectable","onselectstart","selectProp","unselectable","makeElementSelectable","getScript","headEl","getElementsByTagName","scriptEl","loading","onreadystatechange","readyState","addParamToUrl","param","emptyFn","onComplete","makeXHR","parameters","setRequestHeader","send","factories","ActiveXObject","warn","console","animate","requestAnimFrame","timestamp","time","start","Date","duration","finish","onChange","abort","easing","d","startValue","endValue","byValue","onStart","tick","ticktime","currentTime","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","normalize","asin","elastic","pow","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","ease","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","normalizeAttr","attributesMap","normalizeValue","parentAttributes","parsed","isArray","transformMatrix","parseTransformAttribute","visible","isNaN","_setStrokeFillOpacity","colorAttributes","color","Color","setAlpha","getAlpha","toRgba","parseStyleString","oStyle","chunk","pair","parseStyleObject","getGlobalStylesForElement","svgUid","rule","cssRules","elementMatchesRule","selectors","firstMatching","parentMatching","selectorMatches","doesSomeParentMatch","selector","matcher","nodeName","classNames","getAttribute","RegExp","elementById","node","idAttr","nodelist","parseUseDirectives","attrs","xlink","el2","cloneNode","currentTrans","oldLength","applyViewboxTransform","el3","nodeValue","firstChild","removeAttribute","viewBoxWidth","viewBoxHeight","matrix","viewBoxAttr","scaleX","scaleY","minX","minY","widthAttr","heightAttr","missingViewBox","reViewBoxTagNames","reViewBoxAttrValue","missingDimAttr","toBeParsed","parsedDim","width","height","_enlivenCachedObject","cachedObject","_createSVGPattern","markup","canvas","toSVG","reAllowedSVGTagNames","reNotAllowedAncestors","reAllowedParents","display","visibility","transform","fill-opacity","fill-rule","font-family","font-size","font-style","font-weight","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-decoration","text-anchor","stroke","fill","gradientDefs","rotateMatrix","angle","scaleMatrix","multiplierX","multiplierY","skewXMatrix","tan","skewYMatrix","translateMatrix","iMatrix","commaWsp","skewX","skewY","scale","transforms","transformList","reTransformList","reTransform","attributeValue","matrices","m","operation","combinedMatrix","parseSVGDocument","hasAncestorWithNodeName","startTime","__uid","descendants","selectNodes","getGradientDefs","getCSSRules","parseElements","instances","documentParsingTime","svgCache","has","name","set","reFontDeclaration","parseFontDeclaration","fontStyle","fontWeight","lineHeight","fontFamily","linearGradientEls","radialGradientEls","elList","idsToXlinkMap","parseAttributes","ownAttributes","parseStyleAttribute","font","ElementsParser","parsePointsAttribute","points","parsedPoints","rules","allRules","styleContents","textContent","ruleObj","declaration","propertyValuePairs","_rule","loadSVGFromURL","xml","responseXML","responseText","loadXML","results","hasUrl","enlivedRecord","loadSVGFromString","DOMParser","parser","parseFromString","createSVGFontFacesMarkup","createSVGRefElementsMarkup","numElements","createObjects","createObject","fromElement","_createObject","checkIfDone","createCallback","resolveGradient","instanceFillValue","gradientId","Gradient","that","scalarAdd","scalar","scalarAddEquals","subtract","scalarSubtract","scalarSubtractEquals","multiply","multiplyEquals","divide","divideEquals","eq","lt","lte","gt","gte","lerp","distanceFrom","midPointFrom","setXY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","q","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","round","getSource","_source","toRgb","toHsl","hsl","toHsla","toHex","alpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherAlpha","otherSource","reRGBa","reHSLa","reHex","aqua","black","blue","fuchsia","gray","green","lime","maroon","navy","olive","orange","purple","red","silver","teal","white","yellow","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","substring","oColor","getColorStop","colorAlpha","keyValuePairs","key","getLinearCoords","getRadialCoords","_convertPercentUnitsToValues","gradientUnits","propValue","addFactor","multFactor","ellipseMatrix","scaleFactor","offsetX","offsetY","colorStops","gradientTransform","addColorStop","colorStop","position","toObject","commonAttributes","sort","group","toLive","gradient","createLinearGradient","createRadialGradient","instance","colorStopEls","forObject","Pattern","repeat","toDataURL","patternSource","patternWidth","getWidth","patternHeight","getHeight","patternOffsetX","patternOffsetY","patternImgSrc","complete","naturalWidth","naturalHeight","createPattern","Shadow","blur","affectStroke","includeDefaultValues","_parseShadow","shadow","shadowStr","offsetsAndBlur","reOffsetsAndBlur","fBoxX","fBoxY","StaticCanvas","CANVAS_INIT_ERROR","Error","_initStatic","activeInstance","backgroundColor","backgroundImage","overlayColor","overlayImage","stateful","controlsAboveOverlay","allowTouchScrolling","imageSmoothingEnabled","preserveObjectStacking","viewportTransform","onBeforeScaleRotate","enableRetinaScaling","_createLowerCanvas","_initOptions","_setImageSmoothing","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setBackgroundColor","setOverlayColor","calcOffset","lowerCanvasEl","contextContainer","_offset","image","__setBgOverlayImage","__setBgOverlayColor","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","Image","setOptions","_createCanvasElement","_initCanvasElement","_applyCanvasStyle","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","backstoreOnly","_setCssDimension","upperCanvasEl","cacheCanvasEl","wrapperEl","getZoom","setViewportTransform","vpt","activeGroup","getActiveGroup","setCoords","zoomToPoint","before","after","setZoom","absolutePan","relativePan","getActiveObject","_draw","_shouldRenderObject","render","_renderControls","setupState","_set","_discardActiveObject","clearContext","clearRect","clear","discardActiveGroup","discardActiveObject","contextTop","allOnTop","canvasToDrawOn","selection","_groupSelector","_renderBackground","_renderObjects","_renderActiveGroup","_renderOverlay","drawControls","sortedObjects","reverse","fillStyle","fillRect","renderTop","_drawSelection","getCenter","centerObjectH","_centerObject","getCenterPoint","centerObjectV","centerObject","center","setPositionByOrigin","toDatalessJSON","propertiesToInclude","toDatalessObject","_toObjectMethod","_toObjects","__serializeBgOverlay","_toObject","originalValue","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","layoutProps","originalValues","realizeTransform","background","overlay","svgViewportTransformation","_setSVGPreamble","_setSVGHeader","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","sendToBack","bringToFront","sendBackwards","intersecting","newIdx","_findNewLowerIndex","isIntersecting","intersectsWithObject","isContainedWithinObject","bringForward","_findNewUpperIndex","dispose","removeListeners","DataURLExporter","EMPTY_JSON","supports","setLineDash","toJSON","BaseBrush","strokeLineCap","strokeLineJoin","strokeDashArray","setShadow","_setBrushStyles","strokeStyle","lineWidth","lineCap","lineJoin","_setShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","_resetShadow","PencilBrush","_points","onMouseDown","pointer","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","p1","p2","midPoint","quadraticCurveTo","lineTo","convertPointsToSVGPath","createPath","pathData","Path","strokeWidth","originX","originY","closePath","CircleBrush","drawDot","addPoint","arc","radius","originalRenderOnAddRemove","circles","circle","Circle","Group","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","sprayChunkPoints","globalAlpha","PatternBrush","getPatternSrc","dotDistance","patternCanvas","patternCtx","getPatternSrcFunction","getPattern","STROKE_OFFSET","Canvas","_initInteractive","_createCacheCanvas","uniScaleTransform","centeredScaling","centeredRotation","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","hoverCursor","moveCursor","defaultCursor","freeDrawingCursor","rotationCursor","containerClass","perPixelTargetFind","targetFindTolerance","skipTargetFind","isDrawingMode","_currentTransform","_initWrapperElement","_createUpperCanvas","_initEventListeners","freeDrawingBrush","_resetCurrentTransform","original","_shouldCenterTransform","action","_setOriginToCenter","mouseXSign","mouseYSign","containsPoint","xy","_normalizePointer","_findTargetCorner","isObjectInGroup","isTargetTransparent","hasBorders","transparentCorners","contextCache","_shouldClearSelection","activeObject","shiftKey","evented","selectable","centerTransform","altKey","_getOriginFromCorner","corner","_getActionFromCorner","_setupCurrentTransform","ex","ey","theta","_translateObject","_scaleObject","by","lockScalingX","lockScalingY","lockScalingFlip","constraintPosition","translateToOriginPoint","localMouse","toLocalPoint","_setLocalMouse","_setObjectScale","forbidScalingX","forbidScalingY","dim","_getNonTransformedDimensions","newScaleX","newScaleY","_scaleObjectEqually","_flipObject","dist","lastDist","padding","_rotateObject","lastAngle","curAngle","setCursor","cursor","_resetObjectTransform","setAngle","groupSelector","aleft","atop","strokeRect","_isLastRenderedObject","lastRenderedObjectWithControlsAboveOverlay","findTarget","skipGroup","_searchPossibleTargets","_fireOverOutEvents","_hoveredTarget","_checkTarget","isEditing","relatedTarget","ignoreZoom","cssScale","boundsWidth","boundsHeight","bottom","right","lowerCanvasClass","_copyCanvasStyle","class","fromEl","toEl","getSelectionContext","getSelectionElement","_setActiveObject","_activeObject","setActiveObject","_setActiveGroup","_activeGroup","setActiveGroup","_discardActiveGroup","destroy","deactivateAll","allObjects","deactivateAllWithDispatch","_drawGroupControls","_drawObjectsControls","active","_setCursorFromEvent","Element","cursorOffset","tr","mr","br","mb","bl","ml","tl","cursorMap","_bindEvents","_onResize","_onMouseDown","_onMouseMove","_onMouseWheel","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","self","__onTransformGesture","__onDrag","__onMouseWheel","__onOrientationChange","__onShake","__onLongPress","__onMouseDown","__onMouseUp","preventDefault","__onMouseMove","_shouldRender","isMoving","_previousPointer","_isCurrentlyDrawing","_onMouseUpInDrawingMode","_finalizeCurrentTransform","shouldRender","_maybeGroupObjects","_handleCursorAndEvent","_scaling","hasStateChanged","_restoreOriginXY","_previousOriginX","_previousOriginY","originPoint","_onMouseDownInDrawingMode","ivt","_onMouseMoveInDrawingMode","isLeftClick","which","button","shouldGroup","_shouldGroup","_clearSelection","_handleGrouping","_beforeTransform","saveState","_setCenterToOrigin","touches","_transformObject","reset","_beforeScaleTransform","_performTransformAction","_fire","_onScale","currentAction","_setCornerCursor","_getRotatedCornerCursor","hasRotatingPoint","getAngle","isType","_updateActiveGroup","_createActiveGroup","saveCoords","removeWithUpdate","addWithUpdate","_createGroup","isActiveLower","groupObjects","_groupSelectedObjects","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","isClick","intersectsWithRect","isContainedWithinRect","setObjectsCoords","quality","multiplier","cropping","__toDataURLWithMultiplier","__toDataURL","croppedCanvasEl","__getCroppedCanvas","croppedCtx","shouldCrop","drawImage","origWidth","origHeight","scaledWidth","scaledHeight","_tempRemoveBordersControlsFromGroup","_restoreBordersControlsOnGroup","toDataURLWithMultiplier","origHasControls","hasControls","origBorderColor","borderColor","hideControls","origHideControls","loadFromDatalessJSON","json","loadFromJSON","serialized","JSON","_enlivenObjects","_setBgOverlay","loaded","cbIfLoaded","__setBgOverlay","_toDataURL","_toDataURLWithMultiplier","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","supportsLineDash","flipX","flipY","cornerSize","cornerColor","fillRule","globalCompositeOperation","strokeMiterLimit","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","rotatingPointOffset","lockMovementX","lockMovementY","lockRotation","lockUniScaling","_initGradient","_initPattern","_initClipping","functionBody","fromLeft","_getLeftTopCoords","NUM_FRACTION_DIGITS","_removeDefaultValues","_setObject","shouldConstrainValue","_constrainScale","setOnGroup","toggle","sourcePath","getViewportTransform","noTransform","_setupCompositeOperation","_setStrokeStyles","_setFillStyles","_setOpacity","miterLimit","drawBorders","multX","multY","_removeShadow","_renderFill","_renderStroke","_stroke","_renderDashedStroke","cloneAsImage","dataUrl","boundingRect","getBoundingRect","origParams","getLeft","getTop","originalCanvas","setGradient","setPatternFill","setColor","shouldCenterOrigin","_resetOrigin","centerH","centerV","getLocalPointer","pClicked","objectLeftTop","originXOffset","originYOffset","translateToGivenOrigin","fromOriginX","fromOriginY","toOriginX","toOriginY","_getTransformedDimensions","translateToCenterPoint","leftTop","getPointByOrigin","pos","adjustPosition","to","hypotFull","xFull","yFull","_originalOriginX","_originalOriginY","oCoords","pointTL","pointBR","intersection","other","getCoords","thisCoords","otherCoords","point1","point2","lines","_getImageLines","xPoints","_findCrossPoints","topline","rightline","bottomline","leftline","xi","yi","iLine","xcount","lineKey","getBoundingRectWidth","getBoundingRectHeight","xCoords","maxX","yCoords","maxY","scaleToWidth","boundingRectFactor","scaleToHeight","_calculateCurrentDimensions","currentWidth","currentHeight","_angle","atan","_hypotenuse","mtr","_setCornerCoords","_calcDimensionsTransformMatrix","getSvgStyles","getSvgTransform","translatePart","anglePart","scalePart","addTranslateX","flipXPart","addTranslateY","flipYPart","getSvgTransformMatrix","_createBaseSVGMarkup","originalState","isVML","_controlsVisibility","isControlVisible","__corner","newTheta","cornerHypotenuse","cosHalfOffset","sinHalfOffset","w","capped","vLine","hLine","sLine","strokeW","strokeH","shouldTransform","wh","rotateHeight","scaleOffset","_drawControl","control","controlName","_getControlsVisibility","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","skipCallbacks","propsToAnimate","_animate","propPair","currentValue","from","makeEdgeToOriginGetter","propertyNames","originValues","axis1","axis2","dimension","nearest","farthest","coordProps","Line","_setWidthHeight","_getLeftToOriginX","_getTopToOriginY","cp","calcLinePoints","origStrokeStyle","xMult","yMult","ATTRIBUTE_NAMES","parsedAttributes","isValidRadius","pi","startAngle","endAngle","setRadius","startX","startY","endX","endY","largeFlag","getRadiusX","getRadiusY","Triangle","widthBy2","heightBy2","piBy2","Ellipse","getRx","getRy","ellipse","_initRxRy","isRounded","Polyline","Polygon","_calcDimensions","_applyPointOffset","commonRender","_toString","commandLengths","repeatedCommands","M","fromArray","_parsePath","_setPositionDimensions","calcDim","_parseDimensions","pathOffset","tempX","tempY","previous","subpathStartX","subpathStartY","controlX","controlY","chunks","addTransform","currentPath","coordsStr","coordsParsed","re","command","commandLength","repeatedCommand","klen","aX","aY","deltaX","deltaY","pathUrl","parentToObject","paths","parseDimensionsFromPaths","xC","yC","isSameColor","firstPathFill","total","pathGroup","_lockProperties","isAlreadyGrouped","_updateObjectsCoords","_calcBounds","skipCoordsChange","_updateObjectCoords","__origHasControls","objectLeft","objectTop","originalLeft","originalTop","_restoreObjectsState","_setObjectActive","_moveFlippedObject","delegatedProperties","textDecoration","textAlign","_renderObject","originalHasRotatingPoint","_restoreObjectState","_setObjectPosition","oldOriginX","oldOriginY","_toggleFlipping","newOrigin","rotated","_getRotatedLeftTop","groupAngle","_originalLeft","_originalTop","hasMoved","onlyWidthHeight","props","iLen","jLen","_getBounds","minXY","maxXY","alignX","alignY","meetOrSlice","_lastScaleX","_lastScaleY","filters","resizeFilters","_initElement","_element","_originalElement","_initConfig","applyFilters","setCrossOrigin","getOriginalSize","filterObj","_src","preserveAspectRatio","getSvgSrc","origFill","getSrc","setSrc","imgElement","forResizing","imgEl","replacement","applyTo","toBuffer","pngCompression","_filteredEl","elementToDraw","imageMargins","_findMargins","_needsResize","marginX","marginY","scales","_resetWidthHeight","CSS_CANVAS","_initFilters","fromURL","imgOptions","aspectRatioAttrs","align","_getAngleValueForStraighten","straighten","fxStraighten","straightenObject","fxStraightenObject","BaseFilter","Brightness","brightness","putImageData","Convolute","opaque","tmpCtx","_createImageData","createImageData","weights","pixels","side","halfSide","sw","sh","output","dst","alphaFac","sy","sx","dstOff","scy","scx","srcOff","wt","GradientTransparency","Grayscale","Invert","Mask","mask","channel","maskEl","maskCanvasEl","maskImageData","maskData","Noise","noise","rand","Pixelate","blocksize","_i","_ilen","_j","_jlen","RemoveWhite","distance","limit","Sepia","avg","Sepia2","Tint","tintR","tintG","tintB","alpha1","Multiply","Blend","mode","tg","_r","_g","_b","isImage","_el","tmpCanvas","context2","Resize","resizeType","lanczosLobes","rcpScaleX","rcpScaleY","oW","oH","dW","dH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","newWidth","newHeight","multW","multH","signW","signH","doneW","doneH","stepW","stepH","lanczosCreate","lobes","xx","weight","fX","fY","ratioX","icenter","ratioY","range2X","cacheLanc","range2Y","lanczos","rcpRatioX","rcpRatioY","srcData","destData","destImg","srcImg","w2","h2","xDiff","yDiff","chnl","origPix","w4","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","centerY","yy","centerX","w0","_dimensionAffectingProps","text","_reNewline","_reSpacesAndTabs","textBackgroundColor","_fontSizeFraction","_fontSizeMult","__skipDimension","_initDimensions","_setTextStyles","_textLines","_splitTextIntoLines","_clearCache","_cacheLinesWidth","_getTextWidth","_getTextHeight","_renderTextBackground","_renderText","_renderTextDecoration","_translateForTextAlign","_renderTextFill","_renderTextStroke","back","sign","textBaseline","skipTextAlign","_getFontDeclaration","_getHeightOfLine","maxWidth","_getLineWidth","currentLineWidth","_renderChars","chars","shortM","_renderTextLine","line","lineIndex","totalWidth","words","wordsWidth","_getWidthOfWords","widthDiff","numSpaces","spaceWidth","leftOffset","measureText","_getLeftOffset","_getTopOffset","_skipFillStrokeCheck","lineHeights","heightOfLine","maxHeight","_renderTextBoxBackground","_renderTextLinesBackground","lineLeftOffset","lineTopOffset","_getLineLeftOffset","__lineWidths","__lineHeights","__lineOffsets","_shouldClearCache","shouldClear","_forceClearCache","wordCount","renderLinesAtOffset","offsets","oLen","halfOfVerticalBox","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textBgRects","textSpans","textTopOffset","textLeftOffset","_setSVGBg","_setSVGTextLineBg","_setSVGTextLineText","yPos","_getFillAttributes","fillColor","offX","IText","selectionStart","selectionEnd","editable","editingBorderColor","cursorWidth","cursorColor","cursorDelay","cursorDuration","caching","_reSpace","_currentCursorOpacity","_selectionDirection","_abortCursorAnimation","_charWidthsCache","initBehavior","__maxFontHeights","__widthOfSpace","isEmptyStyles","p3","setSelectionStart","_updateTextarea","setSelectionEnd","getSelectionStyles","startIndex","endIndex","loc","get2DCursorLocation","_getStyleDeclaration","charIndex","setSelectionStyles","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","renderCursorOrSelection","boundaries","_getCursorBoundaries","renderCursor","renderSelection","getCurrentCharStyle","getCurrentCharFontSize","getCurrentCharColor","typeOfBoundaries","_getCursorBoundariesOffsets","lineLeft","topOffset","_getWidthOfChar","_getCachedLineOffset","widthOfLine","cursorLocation","charHeight","__isMousedown","startLine","endLine","lineOffset","boxWidth","j2","j2len","_renderCharsFast","prevStyle","charsToRender","thisStyle","_hasStyleChanged","_renderChar","skipFillStrokeCheck","_char","charWidth","decl","shouldStroke","shouldFill","_applyCharStylesGetWidth","_getHeightOfChar","fillText","strokeText","_renderCharDecoration","styleDeclaration","_getWidthOfCharsAt","_getCacheProp","_applyFontStyles","cacheProp","returnCloneOrEmpty","_deleteStyleDeclaration","_deleteLineStyle","_getWidthOfSpace","_getHeightOfCharAt","currentCharHeight","initAddedHandler","initRemovedHandler","initCursorSelectionHandlers","initDoubleClickSimulation","initSelectedHandler","selected","_hasITextHandlers","_initCanvasHandlers","_iTextInstances","exitEditingOnOthers","_tick","_currentTickState","_animateCursor","targetOpacity","completeMethod","tickState","isAborted","_onTickComplete","_cursorTimeout1","clearTimeout","_currentTickCompleteState","initDelayedCursor","restart","delay","_cursorTimeout2","abortCursorAnimation","selectAll","getSelectedText","findWordBoundaryLeft","startFrom","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","getNumNewLinesInSelectedText","selectedText","numNewLines","searchWordBoundary","direction","reNonWord","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","initHiddenTextarea","hiddenTextarea","focus","_saveEditingProps","_setEditingProps","initMouseMoveHandler","exitEditing","getSelectionStartFromPointer","__selectionStartOnMouseDown","_savedProps","_restoreEditingProps","overCursor","removeChild","_removeExtraneousStyles","_removeCharsFromTo","_removeSingleCharAndStyle","isBeginningOfLine","indexStyle","removeStyleObject","insertChars","_chars","useCopiedStyle","copiedTextStyle","insertChar","skipUpdate","styleObject","isEndOfLine","insertStyleObjects","insertNewlineStyleObject","shiftLineStyles","currentCharStyle","newLineStyles","insertCharStyleObject","currentLineStyles","currentLineStylesCloned","numericIndex","clonedStyles","numericLine","textOnPreviousLine","newCharIndexOnPrevLine","insertNewline","__lastClickTime","__lastLastClickTime","__lastPointer","__newClickTime","newPointer","isTripleClick","_stopEvent","isDoubleClick","__lastIsEditing","__lastSelected","stopPropagation","initMousedownHandler","initMouseupHandler","initClicks","__mousedownX","__mousedownY","setCursorByClick","_isObjectMoved","mouseOffset","prevWidth","_getNewSelectionStartFromOffset","distanceBtwLastCharAndCursor","distanceBtwNextCharAndCursor","onKeyDown","onInput","copy","paste","_clickHandlerInitialized","onClick","_keysMap","8","9","27","13","33","34","35","36","37","38","39","40","46","_ctrlKeysMap","65","88","keyCode","ctrlKey","metaKey","stopImmediatePropagation","_cancelOnInput","textLength","newTextLength","diff","charsToInsert","forwardDelete","moveCursorRight","removeChars","clipboardData","_getClipboardData","setData","copiedText","getData","cut","getDownCursorOffset","isRight","selectionProp","textOnSameLineBeforeCursor","textOnSameLineAfterCursor","textOnNextLine","widthOfSameLineBeforeCursor","widthOfCharsOnSameLineBeforeCursor","indexOnNextLine","_getIndexOnNextLine","foundMatch","widthOfNextLine","widthOfCharsOnNextLine","widthOfChar","leftEdge","rightEdge","offsetFromLeftEdge","offsetFromRightEdge","moveCursorDown","moveCursorDownWithShift","moveCursorDownWithoutShift","swapSelectionPoints","swapSel","getUpCursorOffset","indexOnPrevLine","_getIndexOnPrevLine","widthOfPreviousLine","widthOfCharsOnPreviousLine","moveCursorUp","moveCursorUpWithShift","moveCursorUpWithoutShift","moveCursorLeft","moveCursorLeftWithShift","moveCursorLeftWithoutShift","_move","propMethod","_moveLeft","_moveRight","moveCursorRightWithShift","moveCursorRightWithoutShift","_removeCharsNearCursor","leftLineBoundary","leftWordBoundary","_setSVGTextLineChars","charOffset","_getSVGLineLeftOffset","_getSVGLineTopOffset","styleDecl","_createTextCharSpan","_createTextCharBg","lastHeight","fillStyles","Textbox","minWidth","dynamicMinWidth","__cachedLines","getTextboxControlVisibility","_setLineWidths","_generateStyleMap","realLineCount","realLineCharCount","charCount","_styleMap","_wrapText","wrapped","_wrapLine","_measureText","infix","wordWidth","largestWordWidth","__oldScaleX","numLines","removed","lineLen","lineChars","getMinWidth","setObjectScaleOverridden","_refreshControlsVisibility","_getTextOnPreviousLine","lIndex","override","tmp","oURL","URL","reqHandler","HTTPS","HTTP","response","setEncoding","statusCode","errno","ECONNREFUSED","message","requestFs","fs","readFile","createImageAndCallBack","eval","oImg","createCanvasForNode","nodeCanvasOptions","nodeCanvas","FabricCanvas","fabricCanvas","Font","createPNGStream","createJPEGStream","origSetWidth","origSetHeight","1834","hasOwnProperty","params","scheme","1843","qs","sep","regexp","maxKeys","kstr","vstr","1844","stringifyPrimitive","isFinite","ks","1845","decode","encode","1913","decideMode","preferBinary","useFetch","capability","statusValid","inherits","stream","toArrayBuffer","IncomingMessage","rStates","readyStates","Writable","_opts","_body","_headers","setHeader","_mode","_onFinish","lowerName","unsafeHeaders","getHeader","removeHeader","_destroyed","headersObj","buffer","credentials","withCredentials","then","_fetchResponse","_connect","reason","emit","_xhr","nextTick","timeout","ontimeout","_response","LOADING","DONE","_onXHRProgress","onprogress","_write","flushHeaders","setNoDelay","setSocketKeepAlive","1914","UNSENT","OPENED","HEADERS_RECEIVED","read","reader","done","catch","Readable","rawHeaders","trailers","rawTrailers","statusMessage","statusText","header","getReader","_pos","responseURL","getAllResponseHeaders","matches","_charset","mimeType","charsetMatch","_read","responseBody","newData","Uint8Array","MSStreamReader","byteLength","readAsArrayBuffer","1921","buf","byteOffset","isBuffer","arrayCopy","1923","__WEBPACK_AMD_DEFINE_RESULT__","RangeError","errors","mapDomain","regexSeparators","labels","encoded","ucs2decode","extra","counter","ucs2encode","stringFromCharCode","basicToDigit","codePoint","base","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","damp","baseMinusTMin","tMax","skew","input","out","basic","oldi","baseMinusT","inputLength","initialN","bias","initialBias","delimiter","maxInt","tMin","handledCPCount","basicLength","handledCPCountPlusOne","qMinusT","toUnicode","regexPunycode","regexNonASCII","freeGlobal","overflow","not-basic","invalid-input","fromCharCode","ucs2","1924","arg","1928","1929","1930","1931"],"mappings":"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","file":"2.2.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 1768:\n1932,\n\n/***/ 1804:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(1913)\n\tvar extend = __webpack_require__(1928)\n\tvar statusCodes = __webpack_require__(1818)\n\tvar url = __webpack_require__(1806)\n\t\n\tvar http = exports\n\t\n\thttp.request = function (opts, cb) {\n\t\tif (typeof opts === 'string')\n\t\t\topts = url.parse(opts)\n\t\telse\n\t\t\topts = extend(opts)\n\t\n\t\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t\t// the protocol is something else, like 'file:'\n\t\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\t\n\t\tvar protocol = opts.protocol || defaultProtocol\n\t\tvar host = opts.hostname || opts.host\n\t\tvar port = opts.port\n\t\tvar path = opts.path || '/'\n\t\n\t\t// Necessary for IPv6 addresses\n\t\tif (host && host.indexOf(':') !== -1)\n\t\t\thost = '[' + host + ']'\n\t\n\t\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\t\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\t\topts.method = (opts.method || 'GET').toUpperCase()\n\t\topts.headers = opts.headers || {}\n\t\n\t\t// Also valid opts.auth, opts.mode\n\t\n\t\tvar req = new ClientRequest(opts)\n\t\tif (cb)\n\t\t\treq.on('response', cb)\n\t\treturn req\n\t}\n\t\n\thttp.get = function get (opts, cb) {\n\t\tvar req = http.request(opts, cb)\n\t\treq.end()\n\t\treturn req\n\t}\n\t\n\thttp.Agent = function () {}\n\thttp.Agent.defaultMaxSockets = 4\n\t\n\thttp.STATUS_CODES = statusCodes\n\t\n\thttp.METHODS = [\n\t\t'CHECKOUT',\n\t\t'CONNECT',\n\t\t'COPY',\n\t\t'DELETE',\n\t\t'GET',\n\t\t'HEAD',\n\t\t'LOCK',\n\t\t'M-SEARCH',\n\t\t'MERGE',\n\t\t'MKACTIVITY',\n\t\t'MKCOL',\n\t\t'MOVE',\n\t\t'NOTIFY',\n\t\t'OPTIONS',\n\t\t'PATCH',\n\t\t'POST',\n\t\t'PROPFIND',\n\t\t'PROPPATCH',\n\t\t'PURGE',\n\t\t'PUT',\n\t\t'REPORT',\n\t\t'SEARCH',\n\t\t'SUBSCRIBE',\n\t\t'TRACE',\n\t\t'UNLOCK',\n\t\t'UNSUBSCRIBE'\n\t]\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n\n/***/ 1805:\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\t\n\texports.blobConstructor = false\n\ttry {\n\t\tnew Blob([new ArrayBuffer(1)])\n\t\texports.blobConstructor = true\n\t} catch (e) {}\n\t\n\t// The xhr request to example.com may violate some restrictive CSP configurations,\n\t// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n\t// and assume support for certain features below.\n\tvar xhr\n\tfunction getXHR () {\n\t\t// Cache the xhr value\n\t\tif (xhr !== undefined) return xhr\n\t\n\t\tif (global.XMLHttpRequest) {\n\t\t\txhr = new global.XMLHttpRequest()\n\t\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t\t// Note: this doesn't actually make an http request.\n\t\t\ttry {\n\t\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t\t} catch(e) {\n\t\t\t\txhr = null\n\t\t\t}\n\t\t} else {\n\t\t\t// Service workers don't have XHR\n\t\t\txhr = null\n\t\t}\n\t\treturn xhr\n\t}\n\t\n\tfunction checkTypeSupport (type) {\n\t\tvar xhr = getXHR()\n\t\tif (!xhr) return false\n\t\ttry {\n\t\t\txhr.responseType = type\n\t\t\treturn xhr.responseType === type\n\t\t} catch (e) {}\n\t\treturn false\n\t}\n\t\n\t// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n\t// Safari 7.1 appears to have fixed this bug.\n\tvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'\n\tvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)\n\t\n\t// If fetch is supported, then arraybuffer will be supported too. Skip calling\n\t// checkTypeSupport(), since that calls getXHR().\n\texports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))\n\t\n\t// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n\t// be used if it's available, just return false for these to avoid the warnings.\n\texports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')\n\texports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&\n\t\tcheckTypeSupport('moz-chunked-arraybuffer')\n\t\n\t// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n\t// getXHR().\n\texports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\t\n\texports.vbArray = isFunction(global.VBArray)\n\t\n\tfunction isFunction (value) {\n\t\treturn typeof value === 'function'\n\t}\n\t\n\txhr = null // Help gc\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n\n/***/ 1806:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\t'use strict';\n\t\n\tvar punycode = __webpack_require__(1923);\n\tvar util = __webpack_require__(1924);\n\t\n\texports.parse = urlParse;\n\texports.resolve = urlResolve;\n\texports.resolveObject = urlResolveObject;\n\texports.format = urlFormat;\n\t\n\texports.Url = Url;\n\t\n\tfunction Url() {\n\t  this.protocol = null;\n\t  this.slashes = null;\n\t  this.auth = null;\n\t  this.host = null;\n\t  this.port = null;\n\t  this.hostname = null;\n\t  this.hash = null;\n\t  this.search = null;\n\t  this.query = null;\n\t  this.pathname = null;\n\t  this.path = null;\n\t  this.href = null;\n\t}\n\t\n\t// Reference: RFC 3986, RFC 1808, RFC 2396\n\t\n\t// define these here so at least they only have to be\n\t// compiled once on the first module load.\n\tvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n\t    portPattern = /:[0-9]*$/,\n\t\n\t    // Special case for a simple path URL\n\t    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\t\n\t    // RFC 2396: characters reserved for delimiting URLs.\n\t    // We actually just auto-escape these.\n\t    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\t\n\t    // RFC 2396: characters not allowed for various reasons.\n\t    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\t\n\t    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n\t    autoEscape = ['\\''].concat(unwise),\n\t    // Characters that are never ever allowed in a hostname.\n\t    // Note that any invalid chars are also handled, but these\n\t    // are the ones that are *expected* to be seen, so we fast-path\n\t    // them.\n\t    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n\t    hostEndingChars = ['/', '?', '#'],\n\t    hostnameMaxLen = 255,\n\t    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n\t    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n\t    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n\t    unsafeProtocol = {\n\t      'javascript': true,\n\t      'javascript:': true\n\t    },\n\t    // protocols that never have a hostname.\n\t    hostlessProtocol = {\n\t      'javascript': true,\n\t      'javascript:': true\n\t    },\n\t    // protocols that always contain a // bit.\n\t    slashedProtocol = {\n\t      'http': true,\n\t      'https': true,\n\t      'ftp': true,\n\t      'gopher': true,\n\t      'file': true,\n\t      'http:': true,\n\t      'https:': true,\n\t      'ftp:': true,\n\t      'gopher:': true,\n\t      'file:': true\n\t    },\n\t    querystring = __webpack_require__(1845);\n\t\n\tfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n\t  if (url && util.isObject(url) && url instanceof Url) return url;\n\t\n\t  var u = new Url;\n\t  u.parse(url, parseQueryString, slashesDenoteHost);\n\t  return u;\n\t}\n\t\n\tUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n\t  if (!util.isString(url)) {\n\t    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n\t  }\n\t\n\t  // Copy chrome, IE, opera backslash-handling behavior.\n\t  // Back slashes before the query string get converted to forward slashes\n\t  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n\t  var queryIndex = url.indexOf('?'),\n\t      splitter =\n\t          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n\t      uSplit = url.split(splitter),\n\t      slashRegex = /\\\\/g;\n\t  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n\t  url = uSplit.join(splitter);\n\t\n\t  var rest = url;\n\t\n\t  // trim before proceeding.\n\t  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\t  rest = rest.trim();\n\t\n\t  if (!slashesDenoteHost && url.split('#').length === 1) {\n\t    // Try fast path regexp\n\t    var simplePath = simplePathPattern.exec(rest);\n\t    if (simplePath) {\n\t      this.path = rest;\n\t      this.href = rest;\n\t      this.pathname = simplePath[1];\n\t      if (simplePath[2]) {\n\t        this.search = simplePath[2];\n\t        if (parseQueryString) {\n\t          this.query = querystring.parse(this.search.substr(1));\n\t        } else {\n\t          this.query = this.search.substr(1);\n\t        }\n\t      } else if (parseQueryString) {\n\t        this.search = '';\n\t        this.query = {};\n\t      }\n\t      return this;\n\t    }\n\t  }\n\t\n\t  var proto = protocolPattern.exec(rest);\n\t  if (proto) {\n\t    proto = proto[0];\n\t    var lowerProto = proto.toLowerCase();\n\t    this.protocol = lowerProto;\n\t    rest = rest.substr(proto.length);\n\t  }\n\t\n\t  // figure out if it's got a host\n\t  // user@server is *always* interpreted as a hostname, and url\n\t  // resolution will treat //foo/bar as host=foo,path=bar because that's\n\t  // how the browser resolves relative URLs.\n\t  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n\t    var slashes = rest.substr(0, 2) === '//';\n\t    if (slashes && !(proto && hostlessProtocol[proto])) {\n\t      rest = rest.substr(2);\n\t      this.slashes = true;\n\t    }\n\t  }\n\t\n\t  if (!hostlessProtocol[proto] &&\n\t      (slashes || (proto && !slashedProtocol[proto]))) {\n\t\n\t    // there's a hostname.\n\t    // the first instance of /, ?, ;, or # ends the host.\n\t    //\n\t    // If there is an @ in the hostname, then non-host chars *are* allowed\n\t    // to the left of the last @ sign, unless some host-ending character\n\t    // comes *before* the @-sign.\n\t    // URLs are obnoxious.\n\t    //\n\t    // ex:\n\t    // http://a@b@c/ => user:a@b host:c\n\t    // http://a@b?@c => user:a host:c path:/?@c\n\t\n\t    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n\t    // Review our test case against browsers more comprehensively.\n\t\n\t    // find the first instance of any hostEndingChars\n\t    var hostEnd = -1;\n\t    for (var i = 0; i < hostEndingChars.length; i++) {\n\t      var hec = rest.indexOf(hostEndingChars[i]);\n\t      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n\t        hostEnd = hec;\n\t    }\n\t\n\t    // at this point, either we have an explicit point where the\n\t    // auth portion cannot go past, or the last @ char is the decider.\n\t    var auth, atSign;\n\t    if (hostEnd === -1) {\n\t      // atSign can be anywhere.\n\t      atSign = rest.lastIndexOf('@');\n\t    } else {\n\t      // atSign must be in auth portion.\n\t      // http://a@b/c@d => host:b auth:a path:/c@d\n\t      atSign = rest.lastIndexOf('@', hostEnd);\n\t    }\n\t\n\t    // Now we have a portion which is definitely the auth.\n\t    // Pull that off.\n\t    if (atSign !== -1) {\n\t      auth = rest.slice(0, atSign);\n\t      rest = rest.slice(atSign + 1);\n\t      this.auth = decodeURIComponent(auth);\n\t    }\n\t\n\t    // the host is the remaining to the left of the first non-host char\n\t    hostEnd = -1;\n\t    for (var i = 0; i < nonHostChars.length; i++) {\n\t      var hec = rest.indexOf(nonHostChars[i]);\n\t      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n\t        hostEnd = hec;\n\t    }\n\t    // if we still have not hit it, then the entire thing is a host.\n\t    if (hostEnd === -1)\n\t      hostEnd = rest.length;\n\t\n\t    this.host = rest.slice(0, hostEnd);\n\t    rest = rest.slice(hostEnd);\n\t\n\t    // pull out port.\n\t    this.parseHost();\n\t\n\t    // we've indicated that there is a hostname,\n\t    // so even if it's empty, it has to be present.\n\t    this.hostname = this.hostname || '';\n\t\n\t    // if hostname begins with [ and ends with ]\n\t    // assume that it's an IPv6 address.\n\t    var ipv6Hostname = this.hostname[0] === '[' &&\n\t        this.hostname[this.hostname.length - 1] === ']';\n\t\n\t    // validate a little.\n\t    if (!ipv6Hostname) {\n\t      var hostparts = this.hostname.split(/\\./);\n\t      for (var i = 0, l = hostparts.length; i < l; i++) {\n\t        var part = hostparts[i];\n\t        if (!part) continue;\n\t        if (!part.match(hostnamePartPattern)) {\n\t          var newpart = '';\n\t          for (var j = 0, k = part.length; j < k; j++) {\n\t            if (part.charCodeAt(j) > 127) {\n\t              // we replace non-ASCII char with a temporary placeholder\n\t              // we need this to make sure size of hostname is not\n\t              // broken by replacing non-ASCII by nothing\n\t              newpart += 'x';\n\t            } else {\n\t              newpart += part[j];\n\t            }\n\t          }\n\t          // we test again with ASCII char only\n\t          if (!newpart.match(hostnamePartPattern)) {\n\t            var validParts = hostparts.slice(0, i);\n\t            var notHost = hostparts.slice(i + 1);\n\t            var bit = part.match(hostnamePartStart);\n\t            if (bit) {\n\t              validParts.push(bit[1]);\n\t              notHost.unshift(bit[2]);\n\t            }\n\t            if (notHost.length) {\n\t              rest = '/' + notHost.join('.') + rest;\n\t            }\n\t            this.hostname = validParts.join('.');\n\t            break;\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    if (this.hostname.length > hostnameMaxLen) {\n\t      this.hostname = '';\n\t    } else {\n\t      // hostnames are always lower case.\n\t      this.hostname = this.hostname.toLowerCase();\n\t    }\n\t\n\t    if (!ipv6Hostname) {\n\t      // IDNA Support: Returns a punycoded representation of \"domain\".\n\t      // It only converts parts of the domain name that\n\t      // have non-ASCII characters, i.e. it doesn't matter if\n\t      // you call it with a domain that already is ASCII-only.\n\t      this.hostname = punycode.toASCII(this.hostname);\n\t    }\n\t\n\t    var p = this.port ? ':' + this.port : '';\n\t    var h = this.hostname || '';\n\t    this.host = h + p;\n\t    this.href += this.host;\n\t\n\t    // strip [ and ] from the hostname\n\t    // the host field still retains them, though\n\t    if (ipv6Hostname) {\n\t      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\t      if (rest[0] !== '/') {\n\t        rest = '/' + rest;\n\t      }\n\t    }\n\t  }\n\t\n\t  // now rest is set to the post-host stuff.\n\t  // chop off any delim chars.\n\t  if (!unsafeProtocol[lowerProto]) {\n\t\n\t    // First, make 100% sure that any \"autoEscape\" chars get\n\t    // escaped, even if encodeURIComponent doesn't think they\n\t    // need to be.\n\t    for (var i = 0, l = autoEscape.length; i < l; i++) {\n\t      var ae = autoEscape[i];\n\t      if (rest.indexOf(ae) === -1)\n\t        continue;\n\t      var esc = encodeURIComponent(ae);\n\t      if (esc === ae) {\n\t        esc = escape(ae);\n\t      }\n\t      rest = rest.split(ae).join(esc);\n\t    }\n\t  }\n\t\n\t\n\t  // chop off from the tail first.\n\t  var hash = rest.indexOf('#');\n\t  if (hash !== -1) {\n\t    // got a fragment string.\n\t    this.hash = rest.substr(hash);\n\t    rest = rest.slice(0, hash);\n\t  }\n\t  var qm = rest.indexOf('?');\n\t  if (qm !== -1) {\n\t    this.search = rest.substr(qm);\n\t    this.query = rest.substr(qm + 1);\n\t    if (parseQueryString) {\n\t      this.query = querystring.parse(this.query);\n\t    }\n\t    rest = rest.slice(0, qm);\n\t  } else if (parseQueryString) {\n\t    // no query string, but parseQueryString still requested\n\t    this.search = '';\n\t    this.query = {};\n\t  }\n\t  if (rest) this.pathname = rest;\n\t  if (slashedProtocol[lowerProto] &&\n\t      this.hostname && !this.pathname) {\n\t    this.pathname = '/';\n\t  }\n\t\n\t  //to support http.request\n\t  if (this.pathname || this.search) {\n\t    var p = this.pathname || '';\n\t    var s = this.search || '';\n\t    this.path = p + s;\n\t  }\n\t\n\t  // finally, reconstruct the href based on what has been validated.\n\t  this.href = this.format();\n\t  return this;\n\t};\n\t\n\t// format a parsed object into a url string\n\tfunction urlFormat(obj) {\n\t  // ensure it's an object, and not a string url.\n\t  // If it's an obj, this is a no-op.\n\t  // this way, you can call url_format() on strings\n\t  // to clean up potentially wonky urls.\n\t  if (util.isString(obj)) obj = urlParse(obj);\n\t  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n\t  return obj.format();\n\t}\n\t\n\tUrl.prototype.format = function() {\n\t  var auth = this.auth || '';\n\t  if (auth) {\n\t    auth = encodeURIComponent(auth);\n\t    auth = auth.replace(/%3A/i, ':');\n\t    auth += '@';\n\t  }\n\t\n\t  var protocol = this.protocol || '',\n\t      pathname = this.pathname || '',\n\t      hash = this.hash || '',\n\t      host = false,\n\t      query = '';\n\t\n\t  if (this.host) {\n\t    host = auth + this.host;\n\t  } else if (this.hostname) {\n\t    host = auth + (this.hostname.indexOf(':') === -1 ?\n\t        this.hostname :\n\t        '[' + this.hostname + ']');\n\t    if (this.port) {\n\t      host += ':' + this.port;\n\t    }\n\t  }\n\t\n\t  if (this.query &&\n\t      util.isObject(this.query) &&\n\t      Object.keys(this.query).length) {\n\t    query = querystring.stringify(this.query);\n\t  }\n\t\n\t  var search = this.search || (query && ('?' + query)) || '';\n\t\n\t  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\t\n\t  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n\t  // unless they had them to begin with.\n\t  if (this.slashes ||\n\t      (!protocol || slashedProtocol[protocol]) && host !== false) {\n\t    host = '//' + (host || '');\n\t    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n\t  } else if (!host) {\n\t    host = '';\n\t  }\n\t\n\t  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n\t  if (search && search.charAt(0) !== '?') search = '?' + search;\n\t\n\t  pathname = pathname.replace(/[?#]/g, function(match) {\n\t    return encodeURIComponent(match);\n\t  });\n\t  search = search.replace('#', '%23');\n\t\n\t  return protocol + host + pathname + search + hash;\n\t};\n\t\n\tfunction urlResolve(source, relative) {\n\t  return urlParse(source, false, true).resolve(relative);\n\t}\n\t\n\tUrl.prototype.resolve = function(relative) {\n\t  return this.resolveObject(urlParse(relative, false, true)).format();\n\t};\n\t\n\tfunction urlResolveObject(source, relative) {\n\t  if (!source) return relative;\n\t  return urlParse(source, false, true).resolveObject(relative);\n\t}\n\t\n\tUrl.prototype.resolveObject = function(relative) {\n\t  if (util.isString(relative)) {\n\t    var rel = new Url();\n\t    rel.parse(relative, false, true);\n\t    relative = rel;\n\t  }\n\t\n\t  var result = new Url();\n\t  var tkeys = Object.keys(this);\n\t  for (var tk = 0; tk < tkeys.length; tk++) {\n\t    var tkey = tkeys[tk];\n\t    result[tkey] = this[tkey];\n\t  }\n\t\n\t  // hash is always overridden, no matter what.\n\t  // even href=\"\" will remove it.\n\t  result.hash = relative.hash;\n\t\n\t  // if the relative url is empty, then there's nothing left to do here.\n\t  if (relative.href === '') {\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  // hrefs like //foo/bar always cut to the protocol.\n\t  if (relative.slashes && !relative.protocol) {\n\t    // take everything except the protocol from relative\n\t    var rkeys = Object.keys(relative);\n\t    for (var rk = 0; rk < rkeys.length; rk++) {\n\t      var rkey = rkeys[rk];\n\t      if (rkey !== 'protocol')\n\t        result[rkey] = relative[rkey];\n\t    }\n\t\n\t    //urlParse appends trailing / to urls like http://www.example.com\n\t    if (slashedProtocol[result.protocol] &&\n\t        result.hostname && !result.pathname) {\n\t      result.path = result.pathname = '/';\n\t    }\n\t\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  if (relative.protocol && relative.protocol !== result.protocol) {\n\t    // if it's a known url protocol, then changing\n\t    // the protocol does weird things\n\t    // first, if it's not file:, then we MUST have a host,\n\t    // and if there was a path\n\t    // to begin with, then we MUST have a path.\n\t    // if it is file:, then the host is dropped,\n\t    // because that's known to be hostless.\n\t    // anything else is assumed to be absolute.\n\t    if (!slashedProtocol[relative.protocol]) {\n\t      var keys = Object.keys(relative);\n\t      for (var v = 0; v < keys.length; v++) {\n\t        var k = keys[v];\n\t        result[k] = relative[k];\n\t      }\n\t      result.href = result.format();\n\t      return result;\n\t    }\n\t\n\t    result.protocol = relative.protocol;\n\t    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n\t      var relPath = (relative.pathname || '').split('/');\n\t      while (relPath.length && !(relative.host = relPath.shift()));\n\t      if (!relative.host) relative.host = '';\n\t      if (!relative.hostname) relative.hostname = '';\n\t      if (relPath[0] !== '') relPath.unshift('');\n\t      if (relPath.length < 2) relPath.unshift('');\n\t      result.pathname = relPath.join('/');\n\t    } else {\n\t      result.pathname = relative.pathname;\n\t    }\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    result.host = relative.host || '';\n\t    result.auth = relative.auth;\n\t    result.hostname = relative.hostname || relative.host;\n\t    result.port = relative.port;\n\t    // to support http.request\n\t    if (result.pathname || result.search) {\n\t      var p = result.pathname || '';\n\t      var s = result.search || '';\n\t      result.path = p + s;\n\t    }\n\t    result.slashes = result.slashes || relative.slashes;\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n\t      isRelAbs = (\n\t          relative.host ||\n\t          relative.pathname && relative.pathname.charAt(0) === '/'\n\t      ),\n\t      mustEndAbs = (isRelAbs || isSourceAbs ||\n\t                    (result.host && relative.pathname)),\n\t      removeAllDots = mustEndAbs,\n\t      srcPath = result.pathname && result.pathname.split('/') || [],\n\t      relPath = relative.pathname && relative.pathname.split('/') || [],\n\t      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\t\n\t  // if the url is a non-slashed url, then relative\n\t  // links like ../.. should be able\n\t  // to crawl up to the hostname, as well.  This is strange.\n\t  // result.protocol has already been set by now.\n\t  // Later on, put the first path part into the host field.\n\t  if (psychotic) {\n\t    result.hostname = '';\n\t    result.port = null;\n\t    if (result.host) {\n\t      if (srcPath[0] === '') srcPath[0] = result.host;\n\t      else srcPath.unshift(result.host);\n\t    }\n\t    result.host = '';\n\t    if (relative.protocol) {\n\t      relative.hostname = null;\n\t      relative.port = null;\n\t      if (relative.host) {\n\t        if (relPath[0] === '') relPath[0] = relative.host;\n\t        else relPath.unshift(relative.host);\n\t      }\n\t      relative.host = null;\n\t    }\n\t    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n\t  }\n\t\n\t  if (isRelAbs) {\n\t    // it's absolute.\n\t    result.host = (relative.host || relative.host === '') ?\n\t                  relative.host : result.host;\n\t    result.hostname = (relative.hostname || relative.hostname === '') ?\n\t                      relative.hostname : result.hostname;\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    srcPath = relPath;\n\t    // fall through to the dot-handling below.\n\t  } else if (relPath.length) {\n\t    // it's relative\n\t    // throw away the existing file, and take the new path instead.\n\t    if (!srcPath) srcPath = [];\n\t    srcPath.pop();\n\t    srcPath = srcPath.concat(relPath);\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t  } else if (!util.isNullOrUndefined(relative.search)) {\n\t    // just pull out the search.\n\t    // like href='?foo'.\n\t    // Put this after the other two cases because it simplifies the booleans\n\t    if (psychotic) {\n\t      result.hostname = result.host = srcPath.shift();\n\t      //occationaly the auth can get stuck only in host\n\t      //this especially happens in cases like\n\t      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\t      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n\t                       result.host.split('@') : false;\n\t      if (authInHost) {\n\t        result.auth = authInHost.shift();\n\t        result.host = result.hostname = authInHost.shift();\n\t      }\n\t    }\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    //to support http.request\n\t    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n\t      result.path = (result.pathname ? result.pathname : '') +\n\t                    (result.search ? result.search : '');\n\t    }\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  if (!srcPath.length) {\n\t    // no path at all.  easy.\n\t    // we've already handled the other stuff above.\n\t    result.pathname = null;\n\t    //to support http.request\n\t    if (result.search) {\n\t      result.path = '/' + result.search;\n\t    } else {\n\t      result.path = null;\n\t    }\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  // if a url ENDs in . or .., then it must get a trailing slash.\n\t  // however, if it ends in anything else non-slashy,\n\t  // then it must NOT get a trailing slash.\n\t  var last = srcPath.slice(-1)[0];\n\t  var hasTrailingSlash = (\n\t      (result.host || relative.host || srcPath.length > 1) &&\n\t      (last === '.' || last === '..') || last === '');\n\t\n\t  // strip single dots, resolve double dots to parent dir\n\t  // if the path tries to go above the root, `up` ends up > 0\n\t  var up = 0;\n\t  for (var i = srcPath.length; i >= 0; i--) {\n\t    last = srcPath[i];\n\t    if (last === '.') {\n\t      srcPath.splice(i, 1);\n\t    } else if (last === '..') {\n\t      srcPath.splice(i, 1);\n\t      up++;\n\t    } else if (up) {\n\t      srcPath.splice(i, 1);\n\t      up--;\n\t    }\n\t  }\n\t\n\t  // if the path is allowed to go above the root, restore leading ..s\n\t  if (!mustEndAbs && !removeAllDots) {\n\t    for (; up--; up) {\n\t      srcPath.unshift('..');\n\t    }\n\t  }\n\t\n\t  if (mustEndAbs && srcPath[0] !== '' &&\n\t      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n\t    srcPath.unshift('');\n\t  }\n\t\n\t  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n\t    srcPath.push('');\n\t  }\n\t\n\t  var isAbsolute = srcPath[0] === '' ||\n\t      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\t\n\t  // put the host back\n\t  if (psychotic) {\n\t    result.hostname = result.host = isAbsolute ? '' :\n\t                                    srcPath.length ? srcPath.shift() : '';\n\t    //occationaly the auth can get stuck only in host\n\t    //this especially happens in cases like\n\t    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\t    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n\t                     result.host.split('@') : false;\n\t    if (authInHost) {\n\t      result.auth = authInHost.shift();\n\t      result.host = result.hostname = authInHost.shift();\n\t    }\n\t  }\n\t\n\t  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\t\n\t  if (mustEndAbs && !isAbsolute) {\n\t    srcPath.unshift('');\n\t  }\n\t\n\t  if (!srcPath.length) {\n\t    result.pathname = null;\n\t    result.path = null;\n\t  } else {\n\t    result.pathname = srcPath.join('/');\n\t  }\n\t\n\t  //to support request.http\n\t  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n\t    result.path = (result.pathname ? result.pathname : '') +\n\t                  (result.search ? result.search : '');\n\t  }\n\t  result.auth = relative.auth || result.auth;\n\t  result.slashes = result.slashes || relative.slashes;\n\t  result.href = result.format();\n\t  return result;\n\t};\n\t\n\tUrl.prototype.parseHost = function() {\n\t  var host = this.host;\n\t  var port = portPattern.exec(host);\n\t  if (port) {\n\t    port = port[0];\n\t    if (port !== ':') {\n\t      this.port = port.substr(1);\n\t    }\n\t    host = host.substr(0, host.length - port.length);\n\t  }\n\t  if (host) this.hostname = host;\n\t};\n\n\n/***/ },\n\n/***/ 1818:\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  \"100\": \"Continue\",\n\t  \"101\": \"Switching Protocols\",\n\t  \"102\": \"Processing\",\n\t  \"200\": \"OK\",\n\t  \"201\": \"Created\",\n\t  \"202\": \"Accepted\",\n\t  \"203\": \"Non-Authoritative Information\",\n\t  \"204\": \"No Content\",\n\t  \"205\": \"Reset Content\",\n\t  \"206\": \"Partial Content\",\n\t  \"207\": \"Multi-Status\",\n\t  \"208\": \"Already Reported\",\n\t  \"226\": \"IM Used\",\n\t  \"300\": \"Multiple Choices\",\n\t  \"301\": \"Moved Permanently\",\n\t  \"302\": \"Found\",\n\t  \"303\": \"See Other\",\n\t  \"304\": \"Not Modified\",\n\t  \"305\": \"Use Proxy\",\n\t  \"307\": \"Temporary Redirect\",\n\t  \"308\": \"Permanent Redirect\",\n\t  \"400\": \"Bad Request\",\n\t  \"401\": \"Unauthorized\",\n\t  \"402\": \"Payment Required\",\n\t  \"403\": \"Forbidden\",\n\t  \"404\": \"Not Found\",\n\t  \"405\": \"Method Not Allowed\",\n\t  \"406\": \"Not Acceptable\",\n\t  \"407\": \"Proxy Authentication Required\",\n\t  \"408\": \"Request Timeout\",\n\t  \"409\": \"Conflict\",\n\t  \"410\": \"Gone\",\n\t  \"411\": \"Length Required\",\n\t  \"412\": \"Precondition Failed\",\n\t  \"413\": \"Payload Too Large\",\n\t  \"414\": \"URI Too Long\",\n\t  \"415\": \"Unsupported Media Type\",\n\t  \"416\": \"Range Not Satisfiable\",\n\t  \"417\": \"Expectation Failed\",\n\t  \"418\": \"I'm a teapot\",\n\t  \"421\": \"Misdirected Request\",\n\t  \"422\": \"Unprocessable Entity\",\n\t  \"423\": \"Locked\",\n\t  \"424\": \"Failed Dependency\",\n\t  \"425\": \"Unordered Collection\",\n\t  \"426\": \"Upgrade Required\",\n\t  \"428\": \"Precondition Required\",\n\t  \"429\": \"Too Many Requests\",\n\t  \"431\": \"Request Header Fields Too Large\",\n\t  \"451\": \"Unavailable For Legal Reasons\",\n\t  \"500\": \"Internal Server Error\",\n\t  \"501\": \"Not Implemented\",\n\t  \"502\": \"Bad Gateway\",\n\t  \"503\": \"Service Unavailable\",\n\t  \"504\": \"Gateway Timeout\",\n\t  \"505\": \"HTTP Version Not Supported\",\n\t  \"506\": \"Variant Also Negotiates\",\n\t  \"507\": \"Insufficient Storage\",\n\t  \"508\": \"Loop Detected\",\n\t  \"509\": \"Bandwidth Limit Exceeded\",\n\t  \"510\": \"Not Extended\",\n\t  \"511\": \"Network Authentication Required\"\n\t}\n\n\n/***/ },\n\n/***/ 1828:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, process) {/* build: `node build.js modules=ALL exclude=json,gestures minifier=uglifyjs` */\n\t/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\n\t\n\tvar fabric = fabric || { version: \"1.6.0-rc.1\" };\n\tif (true) {\n\t  exports.fabric = fabric;\n\t}\n\t\n\tif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n\t  fabric.document = document;\n\t  fabric.window = window;\n\t  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\n\t  window.fabric = fabric;\n\t}\n\telse {\n\t  // assume we're running under node.js when document/window are not present\n\t  fabric.document = __webpack_require__(1930)\n\t    .jsdom(\"<!DOCTYPE html><html><head></head><body></body></html>\");\n\t\n\t  if (fabric.document.createWindow) {\n\t    fabric.window = fabric.document.createWindow();\n\t  } else {\n\t    fabric.window = fabric.document.parentWindow;\n\t  }\n\t}\n\t\n\t/**\n\t * True when in environment that supports touch events\n\t * @type boolean\n\t */\n\tfabric.isTouchSupported = \"ontouchstart\" in fabric.document.documentElement;\n\t\n\t/**\n\t * True when in environment that's probably Node.js\n\t * @type boolean\n\t */\n\tfabric.isLikelyNode = typeof Buffer !== 'undefined' &&\n\t                      typeof window === 'undefined';\n\t\n\t/* _FROM_SVG_START_ */\n\t/**\n\t * Attributes parsed from all SVG elements\n\t * @type array\n\t */\n\tfabric.SHARED_ATTRIBUTES = [\n\t  \"display\",\n\t  \"transform\",\n\t  \"fill\", \"fill-opacity\", \"fill-rule\",\n\t  \"opacity\",\n\t  \"stroke\", \"stroke-dasharray\", \"stroke-linecap\",\n\t  \"stroke-linejoin\", \"stroke-miterlimit\",\n\t  \"stroke-opacity\", \"stroke-width\",\n\t  \"id\"\n\t];\n\t/* _FROM_SVG_END_ */\n\t\n\t/**\n\t * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n\t */\n\tfabric.DPI = 96;\n\tfabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)';\n\t\n\t\n\t/**\n\t * Device Pixel Ratio\n\t * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n\t */\n\tfabric.devicePixelRatio = fabric.window.devicePixelRatio ||\n\t                          fabric.window.webkitDevicePixelRatio ||\n\t                          fabric.window.mozDevicePixelRatio ||\n\t                          1;\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} eventName\n\t   * @param {Function} handler\n\t   */\n\t  function _removeEventListener(eventName, handler) {\n\t    if (!this.__eventListeners[eventName]) {\n\t      return;\n\t    }\n\t\n\t    if (handler) {\n\t      fabric.util.removeFromArray(this.__eventListeners[eventName], handler);\n\t    }\n\t    else {\n\t      this.__eventListeners[eventName].length = 0;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Observes specified event\n\t   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\n\t   * @memberOf fabric.Observable\n\t   * @alias on\n\t   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n\t   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  function observe(eventName, handler) {\n\t    if (!this.__eventListeners) {\n\t      this.__eventListeners = { };\n\t    }\n\t    // one object with key/value pairs was passed\n\t    if (arguments.length === 1) {\n\t      for (var prop in eventName) {\n\t        this.on(prop, eventName[prop]);\n\t      }\n\t    }\n\t    else {\n\t      if (!this.__eventListeners[eventName]) {\n\t        this.__eventListeners[eventName] = [ ];\n\t      }\n\t      this.__eventListeners[eventName].push(handler);\n\t    }\n\t    return this;\n\t  }\n\t\n\t  /**\n\t   * Stops event observing for a particular event handler. Calling this method\n\t   * without arguments removes all handlers for all events\n\t   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\n\t   * @memberOf fabric.Observable\n\t   * @alias off\n\t   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n\t   * @param {Function} handler Function to be deleted from EventListeners\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  function stopObserving(eventName, handler) {\n\t    if (!this.__eventListeners) {\n\t      return;\n\t    }\n\t\n\t    // remove all key/value pairs (event name -> event handler)\n\t    if (arguments.length === 0) {\n\t      this.__eventListeners = { };\n\t    }\n\t    // one object with key/value pairs was passed\n\t    else if (arguments.length === 1 && typeof arguments[0] === 'object') {\n\t      for (var prop in eventName) {\n\t        _removeEventListener.call(this, prop, eventName[prop]);\n\t      }\n\t    }\n\t    else {\n\t      _removeEventListener.call(this, eventName, handler);\n\t    }\n\t    return this;\n\t  }\n\t\n\t  /**\n\t   * Fires event with an optional options object\n\t   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\n\t   * @memberOf fabric.Observable\n\t   * @alias trigger\n\t   * @param {String} eventName Event name to fire\n\t   * @param {Object} [options] Options object\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  function fire(eventName, options) {\n\t    if (!this.__eventListeners) {\n\t      return;\n\t    }\n\t\n\t    var listenersForEvent = this.__eventListeners[eventName];\n\t    if (!listenersForEvent) {\n\t      return;\n\t    }\n\t\n\t    for (var i = 0, len = listenersForEvent.length; i < len; i++) {\n\t      // avoiding try/catch for perf. reasons\n\t      listenersForEvent[i].call(this, options || { });\n\t    }\n\t    return this;\n\t  }\n\t\n\t  /**\n\t   * @namespace fabric.Observable\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#events}\n\t   * @see {@link http://fabricjs.com/events/|Events demo}\n\t   */\n\t  fabric.Observable = {\n\t    observe: observe,\n\t    stopObserving: stopObserving,\n\t    fire: fire,\n\t\n\t    on: observe,\n\t    off: stopObserving,\n\t    trigger: fire\n\t  };\n\t})();\n\t\n\t\n\t/**\n\t * @namespace fabric.Collection\n\t */\n\tfabric.Collection = {\n\t\n\t  /**\n\t   * Adds objects to collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n\t   * Objects should be instances of (or inherit from) fabric.Object\n\t   * @param {...fabric.Object} object Zero or more fabric instances\n\t   * @return {Self} thisArg\n\t   */\n\t  add: function () {\n\t    this._objects.push.apply(this._objects, arguments);\n\t    for (var i = 0, length = arguments.length; i < length; i++) {\n\t      this._onObjectAdded(arguments[i]);\n\t    }\n\t    this.renderOnAddRemove && this.renderAll();\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n\t   * An object should be an instance of (or inherit from) fabric.Object\n\t   * @param {Object} object Object to insert\n\t   * @param {Number} index Index to insert object at\n\t   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  insertAt: function (object, index, nonSplicing) {\n\t    var objects = this.getObjects();\n\t    if (nonSplicing) {\n\t      objects[index] = object;\n\t    }\n\t    else {\n\t      objects.splice(index, 0, object);\n\t    }\n\t    this._onObjectAdded(object);\n\t    this.renderOnAddRemove && this.renderAll();\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n\t   * @param {...fabric.Object} object Zero or more fabric instances\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  remove: function() {\n\t    var objects = this.getObjects(),\n\t        index;\n\t\n\t    for (var i = 0, length = arguments.length; i < length; i++) {\n\t      index = objects.indexOf(arguments[i]);\n\t\n\t      // only call onObjectRemoved if an object was actually removed\n\t      if (index !== -1) {\n\t        objects.splice(index, 1);\n\t        this._onObjectRemoved(arguments[i]);\n\t      }\n\t    }\n\t\n\t    this.renderOnAddRemove && this.renderAll();\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Executes given function for each object in this group\n\t   * @param {Function} callback\n\t   *                   Callback invoked with current object as first argument,\n\t   *                   index - as second and an array of all objects - as third.\n\t   *                   Iteration happens in reverse order (for performance reasons).\n\t   *                   Callback is invoked in a context of Global Object (e.g. `window`)\n\t   *                   when no `context` argument is given\n\t   *\n\t   * @param {Object} context Context (aka thisObject)\n\t   * @return {Self} thisArg\n\t   */\n\t  forEachObject: function(callback, context) {\n\t    var objects = this.getObjects(),\n\t        i = objects.length;\n\t    while (i--) {\n\t      callback.call(context, objects[i], i, objects);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Returns an array of children objects of this instance\n\t   * Type parameter introduced in 1.3.10\n\t   * @param {String} [type] When specified, only objects of this type are returned\n\t   * @return {Array}\n\t   */\n\t  getObjects: function(type) {\n\t    if (typeof type === 'undefined') {\n\t      return this._objects;\n\t    }\n\t    return this._objects.filter(function(o) {\n\t      return o.type === type;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Returns object at specified index\n\t   * @param {Number} index\n\t   * @return {Self} thisArg\n\t   */\n\t  item: function (index) {\n\t    return this.getObjects()[index];\n\t  },\n\t\n\t  /**\n\t   * Returns true if collection contains no objects\n\t   * @return {Boolean} true if collection is empty\n\t   */\n\t  isEmpty: function () {\n\t    return this.getObjects().length === 0;\n\t  },\n\t\n\t  /**\n\t   * Returns a size of a collection (i.e: length of an array containing its objects)\n\t   * @return {Number} Collection size\n\t   */\n\t  size: function() {\n\t    return this.getObjects().length;\n\t  },\n\t\n\t  /**\n\t   * Returns true if collection contains an object\n\t   * @param {Object} object Object to check against\n\t   * @return {Boolean} `true` if collection contains an object\n\t   */\n\t  contains: function(object) {\n\t    return this.getObjects().indexOf(object) > -1;\n\t  },\n\t\n\t  /**\n\t   * Returns number representation of a collection complexity\n\t   * @return {Number} complexity\n\t   */\n\t  complexity: function () {\n\t    return this.getObjects().reduce(function (memo, current) {\n\t      memo += current.complexity ? current.complexity() : 0;\n\t      return memo;\n\t    }, 0);\n\t  }\n\t};\n\t\n\t\n\t(function(global) {\n\t\n\t  var sqrt = Math.sqrt,\n\t      atan2 = Math.atan2,\n\t      PiBy180 = Math.PI / 180;\n\t\n\t  /**\n\t   * @namespace fabric.util\n\t   */\n\t  fabric.util = {\n\t\n\t    /**\n\t     * Removes value from an array.\n\t     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Array} array\n\t     * @param {Any} value\n\t     * @return {Array} original array\n\t     */\n\t    removeFromArray: function(array, value) {\n\t      var idx = array.indexOf(value);\n\t      if (idx !== -1) {\n\t        array.splice(idx, 1);\n\t      }\n\t      return array;\n\t    },\n\t\n\t    /**\n\t     * Returns random number between 2 specified ones.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Number} min lower limit\n\t     * @param {Number} max upper limit\n\t     * @return {Number} random value (between min and max)\n\t     */\n\t    getRandomInt: function(min, max) {\n\t      return Math.floor(Math.random() * (max - min + 1)) + min;\n\t    },\n\t\n\t    /**\n\t     * Transforms degrees to radians.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Number} degrees value in degrees\n\t     * @return {Number} value in radians\n\t     */\n\t    degreesToRadians: function(degrees) {\n\t      return degrees * PiBy180;\n\t    },\n\t\n\t    /**\n\t     * Transforms radians to degrees.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Number} radians value in radians\n\t     * @return {Number} value in degrees\n\t     */\n\t    radiansToDegrees: function(radians) {\n\t      return radians / PiBy180;\n\t    },\n\t\n\t    /**\n\t     * Rotates `point` around `origin` with `radians`\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {fabric.Point} point The point to rotate\n\t     * @param {fabric.Point} origin The origin of the rotation\n\t     * @param {Number} radians The radians of the angle for the rotation\n\t     * @return {fabric.Point} The new rotated point\n\t     */\n\t    rotatePoint: function(point, origin, radians) {\n\t      point.subtractEquals(origin);\n\t      var sin = Math.sin(radians),\n\t          cos = Math.cos(radians),\n\t          rx = point.x * cos - point.y * sin,\n\t          ry = point.x * sin + point.y * cos;\n\t      return new fabric.Point(rx, ry).addEquals(origin);\n\t    },\n\t\n\t    /**\n\t     * Apply transform t to point p\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param  {fabric.Point} p The point to transform\n\t     * @param  {Array} t The transform\n\t     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n\t     * @return {fabric.Point} The transformed point\n\t     */\n\t    transformPoint: function(p, t, ignoreOffset) {\n\t      if (ignoreOffset) {\n\t        return new fabric.Point(\n\t          t[0] * p.x + t[2] * p.y,\n\t          t[1] * p.x + t[3] * p.y\n\t        );\n\t      }\n\t      return new fabric.Point(\n\t        t[0] * p.x + t[2] * p.y + t[4],\n\t        t[1] * p.x + t[3] * p.y + t[5]\n\t      );\n\t    },\n\t\n\t    /**\n\t     * Invert transformation t\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Array} t The transform\n\t     * @return {Array} The inverted transform\n\t     */\n\t    invertTransform: function(t) {\n\t      var a = 1 / (t[0] * t[3] - t[1] * t[2]),\n\t          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\n\t          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\n\t      r[4] = -o.x;\n\t      r[5] = -o.y;\n\t      return r;\n\t    },\n\t\n\t    /**\n\t     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Number|String} number number to operate on\n\t     * @param {Number} fractionDigits number of fraction digits to \"leave\"\n\t     * @return {Number}\n\t     */\n\t    toFixed: function(number, fractionDigits) {\n\t      return parseFloat(Number(number).toFixed(fractionDigits));\n\t    },\n\t\n\t    /**\n\t     * Converts from attribute value to pixel value if applicable.\n\t     * Returns converted pixels or original value not converted.\n\t     * @param {Number|String} value number to operate on\n\t     * @return {Number|String}\n\t     */\n\t    parseUnit: function(value, fontSize) {\n\t      var unit = /\\D{0,2}$/.exec(value),\n\t          number = parseFloat(value);\n\t      if (!fontSize) {\n\t        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\t      }\n\t      switch (unit[0]) {\n\t        case 'mm':\n\t          return number * fabric.DPI / 25.4;\n\t\n\t        case 'cm':\n\t          return number * fabric.DPI / 2.54;\n\t\n\t        case 'in':\n\t          return number * fabric.DPI;\n\t\n\t        case 'pt':\n\t          return number * fabric.DPI / 72; // or * 4 / 3\n\t\n\t        case 'pc':\n\t          return number * fabric.DPI / 72 * 12; // or * 16\n\t\n\t        case 'em':\n\t          return number * fontSize;\n\t\n\t        default:\n\t          return number;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Function which always returns `false`.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @return {Boolean}\n\t     */\n\t    falseFunction: function() {\n\t      return false;\n\t    },\n\t\n\t    /**\n\t     * Returns klass \"Class\" object of given namespace\n\t     * @memberOf fabric.util\n\t     * @param {String} type Type of object (eg. 'circle')\n\t     * @param {String} namespace Namespace to get klass \"Class\" object from\n\t     * @return {Object} klass \"Class\"\n\t     */\n\t    getKlass: function(type, namespace) {\n\t      // capitalize first letter only\n\t      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n\t      return fabric.util.resolveNamespace(namespace)[type];\n\t    },\n\t\n\t    /**\n\t     * Returns object of given namespace\n\t     * @memberOf fabric.util\n\t     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n\t     * @return {Object} Object for given namespace (default fabric)\n\t     */\n\t    resolveNamespace: function(namespace) {\n\t      if (!namespace) {\n\t        return fabric;\n\t      }\n\t\n\t      var parts = namespace.split('.'),\n\t          len = parts.length,\n\t          obj = global || fabric.window;\n\t\n\t      for (var i = 0; i < len; ++i) {\n\t        obj = obj[parts[i]];\n\t      }\n\t\n\t      return obj;\n\t    },\n\t\n\t    /**\n\t     * Loads image element from given url and passes it to a callback\n\t     * @memberOf fabric.util\n\t     * @param {String} url URL representing an image\n\t     * @param {Function} callback Callback; invoked with loaded image\n\t     * @param {Any} [context] Context to invoke callback in\n\t     * @param {Object} [crossOrigin] crossOrigin value to set image element to\n\t     */\n\t    loadImage: function(url, callback, context, crossOrigin) {\n\t      if (!url) {\n\t        callback && callback.call(context, url);\n\t        return;\n\t      }\n\t\n\t      var img = fabric.util.createImage();\n\t\n\t      /** @ignore */\n\t      img.onload = function () {\n\t        callback && callback.call(context, img);\n\t        img = img.onload = img.onerror = null;\n\t      };\n\t\n\t      /** @ignore */\n\t      img.onerror = function() {\n\t        fabric.log('Error loading ' + img.src);\n\t        callback && callback.call(context, null, true);\n\t        img = img.onload = img.onerror = null;\n\t      };\n\t\n\t      // data-urls appear to be buggy with crossOrigin\n\t      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n\t      // see https://code.google.com/p/chromium/issues/detail?id=315152\n\t      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n\t      if (url.indexOf('data') !== 0 && typeof crossOrigin !== 'undefined') {\n\t        img.crossOrigin = crossOrigin;\n\t      }\n\t\n\t      img.src = url;\n\t    },\n\t\n\t    /**\n\t     * Creates corresponding fabric instances from their object representations\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Array} objects Objects to enliven\n\t     * @param {Function} callback Callback to invoke when all objects are created\n\t     * @param {String} namespace Namespace to get klass \"Class\" object from\n\t     * @param {Function} reviver Method for further parsing of object elements,\n\t     * called after each fabric object created.\n\t     */\n\t    enlivenObjects: function(objects, callback, namespace, reviver) {\n\t      objects = objects || [ ];\n\t\n\t      function onLoaded() {\n\t        if (++numLoadedObjects === numTotalObjects) {\n\t          callback && callback(enlivenedObjects);\n\t        }\n\t      }\n\t\n\t      var enlivenedObjects = [ ],\n\t          numLoadedObjects = 0,\n\t          numTotalObjects = objects.length;\n\t\n\t      if (!numTotalObjects) {\n\t        callback && callback(enlivenedObjects);\n\t        return;\n\t      }\n\t\n\t      objects.forEach(function (o, index) {\n\t        // if sparse array\n\t        if (!o || !o.type) {\n\t          onLoaded();\n\t          return;\n\t        }\n\t        var klass = fabric.util.getKlass(o.type, namespace);\n\t        if (klass.async) {\n\t          klass.fromObject(o, function (obj, error) {\n\t            if (!error) {\n\t              enlivenedObjects[index] = obj;\n\t              reviver && reviver(o, enlivenedObjects[index]);\n\t            }\n\t            onLoaded();\n\t          });\n\t        }\n\t        else {\n\t          enlivenedObjects[index] = klass.fromObject(o);\n\t          reviver && reviver(o, enlivenedObjects[index]);\n\t          onLoaded();\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Groups SVG elements (usually those retrieved from SVG document)\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Array} elements SVG elements to group\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Object|fabric.PathGroup}\n\t     */\n\t    groupSVGElements: function(elements, options, path) {\n\t      var object;\n\t\n\t      object = new fabric.PathGroup(elements, options);\n\t\n\t      if (typeof path !== 'undefined') {\n\t        object.setSourcePath(path);\n\t      }\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Populates an object with properties of another object\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Object} source Source object\n\t     * @param {Object} destination Destination object\n\t     * @return {Array} properties Propertie names to include\n\t     */\n\t    populateWithProperties: function(source, destination, properties) {\n\t      if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\n\t        for (var i = 0, len = properties.length; i < len; i++) {\n\t          if (properties[i] in source) {\n\t            destination[properties[i]] = source[properties[i]];\n\t          }\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Draws a dashed line between two points\n\t     *\n\t     * This method is used to draw dashed line around selection area.\n\t     * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\n\t     *\n\t     * @param {CanvasRenderingContext2D} ctx context\n\t     * @param {Number} x  start x coordinate\n\t     * @param {Number} y start y coordinate\n\t     * @param {Number} x2 end x coordinate\n\t     * @param {Number} y2 end y coordinate\n\t     * @param {Array} da dash array pattern\n\t     */\n\t    drawDashedLine: function(ctx, x, y, x2, y2, da) {\n\t      var dx = x2 - x,\n\t          dy = y2 - y,\n\t          len = sqrt(dx * dx + dy * dy),\n\t          rot = atan2(dy, dx),\n\t          dc = da.length,\n\t          di = 0,\n\t          draw = true;\n\t\n\t      ctx.save();\n\t      ctx.translate(x, y);\n\t      ctx.moveTo(0, 0);\n\t      ctx.rotate(rot);\n\t\n\t      x = 0;\n\t      while (len > x) {\n\t        x += da[di++ % dc];\n\t        if (x > len) {\n\t          x = len;\n\t        }\n\t        ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\n\t        draw = !draw;\n\t      }\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Creates canvas element and initializes it via excanvas if necessary\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {CanvasElement} [canvasEl] optional canvas element to initialize;\n\t     * when not given, element is created implicitly\n\t     * @return {CanvasElement} initialized canvas element\n\t     */\n\t    createCanvasElement: function(canvasEl) {\n\t      canvasEl || (canvasEl = fabric.document.createElement('canvas'));\n\t      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n\t      if (!canvasEl.getContext && typeof G_vmlCanvasManager !== 'undefined') {\n\t        G_vmlCanvasManager.initElement(canvasEl);\n\t      }\n\t      //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\t      return canvasEl;\n\t    },\n\t\n\t    /**\n\t     * Creates image element (works on client and node)\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @return {HTMLImageElement} HTML image element\n\t     */\n\t    createImage: function() {\n\t      return fabric.isLikelyNode\n\t        ? new (__webpack_require__(1768).Image)()\n\t        : fabric.document.createElement('img');\n\t    },\n\t\n\t    /**\n\t     * Creates accessors (getXXX, setXXX) for a \"class\", based on \"stateProperties\" array\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Object} klass \"Class\" to create accessors for\n\t     */\n\t    createAccessors: function(klass) {\n\t      var proto = klass.prototype;\n\t\n\t      for (var i = proto.stateProperties.length; i--; ) {\n\t\n\t        var propName = proto.stateProperties[i],\n\t            capitalizedPropName = propName.charAt(0).toUpperCase() + propName.slice(1),\n\t            setterName = 'set' + capitalizedPropName,\n\t            getterName = 'get' + capitalizedPropName;\n\t\n\t        // using `new Function` for better introspection\n\t        if (!proto[getterName]) {\n\t          proto[getterName] = (function(property) {\n\t            return new Function('return this.get(\"' + property + '\")');\n\t          })(propName);\n\t        }\n\t        if (!proto[setterName]) {\n\t          proto[setterName] = (function(property) {\n\t            return new Function('value', 'return this.set(\"' + property + '\", value)');\n\t          })(propName);\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {fabric.Object} receiver Object implementing `clipTo` method\n\t     * @param {CanvasRenderingContext2D} ctx Context to clip\n\t     */\n\t    clipContext: function(receiver, ctx) {\n\t      ctx.save();\n\t      ctx.beginPath();\n\t      receiver.clipTo(ctx);\n\t      ctx.clip();\n\t    },\n\t\n\t    /**\n\t     * Multiply matrix A by matrix B to nest transformations\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param  {Array} a First transformMatrix\n\t     * @param  {Array} b Second transformMatrix\n\t     * @return {Array} The product of the two transform matrices\n\t     */\n\t    multiplyTransformMatrices: function(a, b) {\n\t      // Matrix multiply a * b\n\t      return [\n\t        a[0] * b[0] + a[2] * b[1],\n\t        a[1] * b[0] + a[3] * b[1],\n\t        a[0] * b[2] + a[2] * b[3],\n\t        a[1] * b[2] + a[3] * b[3],\n\t        a[0] * b[4] + a[2] * b[5] + a[4],\n\t        a[1] * b[4] + a[3] * b[5] + a[5]\n\t      ];\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of function body\n\t     * @param {Function} fn Function to get body of\n\t     * @return {String} Function body\n\t     */\n\t    getFunctionBody: function(fn) {\n\t      return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\n\t    },\n\t\n\t    /**\n\t     * Returns true if context has transparent pixel\n\t     * at specified location (taking tolerance into account)\n\t     * @param {CanvasRenderingContext2D} ctx context\n\t     * @param {Number} x x coordinate\n\t     * @param {Number} y y coordinate\n\t     * @param {Number} tolerance Tolerance\n\t     */\n\t    isTransparent: function(ctx, x, y, tolerance) {\n\t\n\t      // If tolerance is > 0 adjust start coords to take into account.\n\t      // If moves off Canvas fix to 0\n\t      if (tolerance > 0) {\n\t        if (x > tolerance) {\n\t          x -= tolerance;\n\t        }\n\t        else {\n\t          x = 0;\n\t        }\n\t        if (y > tolerance) {\n\t          y -= tolerance;\n\t        }\n\t        else {\n\t          y = 0;\n\t        }\n\t      }\n\t\n\t      var _isTransparent = true,\n\t          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1);\n\t\n\t      // Split image data - for tolerance > 1, pixelDataSize = 4;\n\t      for (var i = 3, l = imageData.data.length; i < l; i += 4) {\n\t        var temp = imageData.data[i];\n\t        _isTransparent = temp <= 0;\n\t        if (_isTransparent === false) {\n\t          break; // Stop if colour found\n\t        }\n\t      }\n\t\n\t      imageData = null;\n\t\n\t      return _isTransparent;\n\t    }\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  var arcToSegmentsCache = { },\n\t      segmentToBezierCache = { },\n\t      boundsOfCurveCache = { },\n\t      _join = Array.prototype.join;\n\t\n\t  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n\t   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n\t   * http://mozilla.org/MPL/2.0/\n\t   */\n\t  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n\t    var argsString = _join.call(arguments);\n\t    if (arcToSegmentsCache[argsString]) {\n\t      return arcToSegmentsCache[argsString];\n\t    }\n\t\n\t    var PI = Math.PI, th = rotateX * PI / 180,\n\t        sinTh = Math.sin(th),\n\t        cosTh = Math.cos(th),\n\t        fromX = 0, fromY = 0;\n\t\n\t    rx = Math.abs(rx);\n\t    ry = Math.abs(ry);\n\t\n\t    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\n\t        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\n\t        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\n\t        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\n\t        root = 0;\n\t\n\t    if (pl < 0) {\n\t      var s = Math.sqrt(1 - pl/(rx2 * ry2));\n\t      rx *= s;\n\t      ry *= s;\n\t    }\n\t    else {\n\t      root = (large === sweep ? -1.0 : 1.0) *\n\t              Math.sqrt( pl /(rx2 * py2 + ry2 * px2));\n\t    }\n\t\n\t    var cx = root * rx * py / ry,\n\t        cy = -root * ry * px / rx,\n\t        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\n\t        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\n\t        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\n\t        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n\t\n\t    if (sweep === 0 && dtheta > 0) {\n\t      dtheta -= 2 * PI;\n\t    }\n\t    else if (sweep === 1 && dtheta < 0) {\n\t      dtheta += 2 * PI;\n\t    }\n\t\n\t    // Convert into cubic bezier segments <= 90deg\n\t    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\n\t        result = [], mDelta = dtheta / segments,\n\t        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\n\t        th3 = mTheta + mDelta;\n\t\n\t    for (var i = 0; i < segments; i++) {\n\t      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n\t      fromX = result[i][4];\n\t      fromY = result[i][5];\n\t      mTheta = th3;\n\t      th3 += mDelta;\n\t    }\n\t    arcToSegmentsCache[argsString] = result;\n\t    return result;\n\t  }\n\t\n\t  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n\t    var argsString2 = _join.call(arguments);\n\t    if (segmentToBezierCache[argsString2]) {\n\t      return segmentToBezierCache[argsString2];\n\t    }\n\t\n\t    var costh2 = Math.cos(th2),\n\t        sinth2 = Math.sin(th2),\n\t        costh3 = Math.cos(th3),\n\t        sinth3 = Math.sin(th3),\n\t        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\n\t        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\n\t        cp1X = fromX + mT * ( - cosTh * rx * sinth2 - sinTh * ry * costh2),\n\t        cp1Y = fromY + mT * ( - sinTh * rx * sinth2 + cosTh * ry * costh2),\n\t        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\n\t        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\n\t\n\t    segmentToBezierCache[argsString2] = [\n\t      cp1X, cp1Y,\n\t      cp2X, cp2Y,\n\t      toX, toY\n\t    ];\n\t    return segmentToBezierCache[argsString2];\n\t  }\n\t\n\t  /*\n\t   * Private\n\t   */\n\t  function calcVectorAngle(ux, uy, vx, vy) {\n\t    var ta = Math.atan2(uy, ux),\n\t        tb = Math.atan2(vy, vx);\n\t    if (tb >= ta) {\n\t      return tb - ta;\n\t    }\n\t    else {\n\t      return 2 * Math.PI - (ta - tb);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Draws arc\n\t   * @param {CanvasRenderingContext2D} ctx\n\t   * @param {Number} fx\n\t   * @param {Number} fy\n\t   * @param {Array} coords\n\t   */\n\t  fabric.util.drawArc = function(ctx, fx, fy, coords) {\n\t    var rx = coords[0],\n\t        ry = coords[1],\n\t        rot = coords[2],\n\t        large = coords[3],\n\t        sweep = coords[4],\n\t        tx = coords[5],\n\t        ty = coords[6],\n\t        segs = [[ ], [ ], [ ], [ ]],\n\t        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\t\n\t    for (var i = 0, len = segsNorm.length; i < len; i++) {\n\t      segs[i][0] = segsNorm[i][0] + fx;\n\t      segs[i][1] = segsNorm[i][1] + fy;\n\t      segs[i][2] = segsNorm[i][2] + fx;\n\t      segs[i][3] = segsNorm[i][3] + fy;\n\t      segs[i][4] = segsNorm[i][4] + fx;\n\t      segs[i][5] = segsNorm[i][5] + fy;\n\t      ctx.bezierCurveTo.apply(ctx, segs[i]);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Calculate bounding box of a elliptic-arc\n\t   * @param {Number} fx start point of arc\n\t   * @param {Number} fy\n\t   * @param {Number} rx horizontal radius\n\t   * @param {Number} ry vertical radius\n\t   * @param {Number} rot angle of horizontal axe\n\t   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\n\t   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\n\t   * @param {Number} tx end point of arc\n\t   * @param {Number} ty\n\t   */\n\t  fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\n\t\n\t    var fromX = 0, fromY = 0, bound = [ ], bounds = [ ],\n\t    segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot),\n\t    boundCopy = [[ ], [ ]];\n\t\n\t    for (var i = 0, len = segs.length; i < len; i++) {\n\t      bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\n\t      boundCopy[0].x = bound[0].x + fx;\n\t      boundCopy[0].y = bound[0].y + fy;\n\t      boundCopy[1].x = bound[1].x + fx;\n\t      boundCopy[1].y = bound[1].y + fy;\n\t      bounds.push(boundCopy[0]);\n\t      bounds.push(boundCopy[1]);\n\t      fromX = segs[i][4];\n\t      fromY = segs[i][5];\n\t    }\n\t    return bounds;\n\t  };\n\t\n\t  /**\n\t   * Calculate bounding box of a beziercurve\n\t   * @param {Number} x0 starting point\n\t   * @param {Number} y0\n\t   * @param {Number} x1 first control point\n\t   * @param {Number} y1\n\t   * @param {Number} x2 secondo control point\n\t   * @param {Number} y2\n\t   * @param {Number} x3 end of beizer\n\t   * @param {Number} y3\n\t   */\n\t  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n\t  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t    var argsString = _join.call(arguments);\n\t    if (boundsOfCurveCache[argsString]) {\n\t      return boundsOfCurveCache[argsString];\n\t    }\n\t\n\t    var sqrt = Math.sqrt,\n\t        min = Math.min, max = Math.max,\n\t        abs = Math.abs, tvalues = [ ],\n\t        bounds = [[ ], [ ]],\n\t        a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\t\n\t    b = 6 * x0 - 12 * x1 + 6 * x2;\n\t    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t    c = 3 * x1 - 3 * x0;\n\t\n\t    for (var i = 0; i < 2; ++i) {\n\t      if (i > 0) {\n\t        b = 6 * y0 - 12 * y1 + 6 * y2;\n\t        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t        c = 3 * y1 - 3 * y0;\n\t      }\n\t\n\t      if (abs(a) < 1e-12) {\n\t        if (abs(b) < 1e-12) {\n\t          continue;\n\t        }\n\t        t = -c / b;\n\t        if (0 < t && t < 1) {\n\t          tvalues.push(t);\n\t        }\n\t        continue;\n\t      }\n\t      b2ac = b * b - 4 * c * a;\n\t      if (b2ac < 0) {\n\t        continue;\n\t      }\n\t      sqrtb2ac = sqrt(b2ac);\n\t      t1 = (-b + sqrtb2ac) / (2 * a);\n\t      if (0 < t1 && t1 < 1) {\n\t        tvalues.push(t1);\n\t      }\n\t      t2 = (-b - sqrtb2ac) / (2 * a);\n\t      if (0 < t2 && t2 < 1) {\n\t        tvalues.push(t2);\n\t      }\n\t    }\n\t\n\t    var x, y, j = tvalues.length, jlen = j, mt;\n\t    while (j--) {\n\t      t = tvalues[j];\n\t      mt = 1 - t;\n\t      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n\t      bounds[0][j] = x;\n\t\n\t      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n\t      bounds[1][j] = y;\n\t    }\n\t\n\t    bounds[0][jlen] = x0;\n\t    bounds[1][jlen] = y0;\n\t    bounds[0][jlen + 1] = x3;\n\t    bounds[1][jlen + 1] = y3;\n\t    var result = [\n\t      {\n\t        x: min.apply(null, bounds[0]),\n\t        y: min.apply(null, bounds[1])\n\t      },\n\t      {\n\t        x: max.apply(null, bounds[0]),\n\t        y: max.apply(null, bounds[1])\n\t      }\n\t    ];\n\t    boundsOfCurveCache[argsString] = result;\n\t    return result;\n\t  }\n\t\n\t  fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var slice = Array.prototype.slice;\n\t\n\t  /* _ES5_COMPAT_START_ */\n\t\n\t  if (!Array.prototype.indexOf) {\n\t    /**\n\t     * Finds index of an element in an array\n\t     * @param {Any} searchElement\n\t     * @param {Number} [fromIndex]\n\t     * @return {Number}\n\t     */\n\t    Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n\t      if (this === void 0 || this === null) {\n\t        throw new TypeError();\n\t      }\n\t      var t = Object(this), len = t.length >>> 0;\n\t      if (len === 0) {\n\t        return -1;\n\t      }\n\t      var n = 0;\n\t      if (arguments.length > 0) {\n\t        n = Number(arguments[1]);\n\t        if (n !== n) { // shortcut for verifying if it's NaN\n\t          n = 0;\n\t        }\n\t        else if (n !== 0 && n !== Number.POSITIVE_INFINITY && n !== Number.NEGATIVE_INFINITY) {\n\t          n = (n > 0 || -1) * Math.floor(Math.abs(n));\n\t        }\n\t      }\n\t      if (n >= len) {\n\t        return -1;\n\t      }\n\t      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n\t      for (; k < len; k++) {\n\t        if (k in t && t[k] === searchElement) {\n\t          return k;\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.forEach) {\n\t    /**\n\t     * Iterates an array, invoking callback for each element\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Array}\n\t     */\n\t    Array.prototype.forEach = function(fn, context) {\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this) {\n\t          fn.call(context, this[i], i, this);\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.map) {\n\t    /**\n\t     * Returns a result of iterating over an array, invoking callback for each element\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Array}\n\t     */\n\t    Array.prototype.map = function(fn, context) {\n\t      var result = [ ];\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this) {\n\t          result[i] = fn.call(context, this[i], i, this);\n\t        }\n\t      }\n\t      return result;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.every) {\n\t    /**\n\t     * Returns true if a callback returns truthy value for all elements in an array\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Boolean}\n\t     */\n\t    Array.prototype.every = function(fn, context) {\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this && !fn.call(context, this[i], i, this)) {\n\t          return false;\n\t        }\n\t      }\n\t      return true;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.some) {\n\t    /**\n\t     * Returns true if a callback returns truthy value for at least one element in an array\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Boolean}\n\t     */\n\t    Array.prototype.some = function(fn, context) {\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this && fn.call(context, this[i], i, this)) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.filter) {\n\t    /**\n\t     * Returns the result of iterating over elements in an array\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Array}\n\t     */\n\t    Array.prototype.filter = function(fn, context) {\n\t      var result = [ ], val;\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this) {\n\t          val = this[i]; // in case fn mutates this\n\t          if (fn.call(context, val, i, this)) {\n\t            result.push(val);\n\t          }\n\t        }\n\t      }\n\t      return result;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.reduce) {\n\t    /**\n\t     * Returns \"folded\" (reduced) result of iterating over elements in an array\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [initial] Object to use as the first argument to the first call of the callback\n\t     * @return {Any}\n\t     */\n\t    Array.prototype.reduce = function(fn /*, initial*/) {\n\t      var len = this.length >>> 0,\n\t          i = 0,\n\t          rv;\n\t\n\t      if (arguments.length > 1) {\n\t        rv = arguments[1];\n\t      }\n\t      else {\n\t        do {\n\t          if (i in this) {\n\t            rv = this[i++];\n\t            break;\n\t          }\n\t          // if array contains no values, no initial value to return\n\t          if (++i >= len) {\n\t            throw new TypeError();\n\t          }\n\t        }\n\t        while (true);\n\t      }\n\t      for (; i < len; i++) {\n\t        if (i in this) {\n\t          rv = fn.call(null, rv, this[i], i, this);\n\t        }\n\t      }\n\t      return rv;\n\t    };\n\t  }\n\t\n\t  /* _ES5_COMPAT_END_ */\n\t\n\t  /**\n\t   * Invokes method on all items in a given array\n\t   * @memberOf fabric.util.array\n\t   * @param {Array} array Array to iterate over\n\t   * @param {String} method Name of a method to invoke\n\t   * @return {Array}\n\t   */\n\t  function invoke(array, method) {\n\t    var args = slice.call(arguments, 2), result = [ ];\n\t    for (var i = 0, len = array.length; i < len; i++) {\n\t      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Finds maximum value in array (not necessarily \"first\" one)\n\t   * @memberOf fabric.util.array\n\t   * @param {Array} array Array to iterate over\n\t   * @param {String} byProperty\n\t   * @return {Any}\n\t   */\n\t  function max(array, byProperty) {\n\t    return find(array, byProperty, function(value1, value2) {\n\t      return value1 >= value2;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Finds minimum value in array (not necessarily \"first\" one)\n\t   * @memberOf fabric.util.array\n\t   * @param {Array} array Array to iterate over\n\t   * @param {String} byProperty\n\t   * @return {Any}\n\t   */\n\t  function min(array, byProperty) {\n\t    return find(array, byProperty, function(value1, value2) {\n\t      return value1 < value2;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function find(array, byProperty, condition) {\n\t    if (!array || array.length === 0) {\n\t      return;\n\t    }\n\t\n\t    var i = array.length - 1,\n\t        result = byProperty ? array[i][byProperty] : array[i];\n\t    if (byProperty) {\n\t      while (i--) {\n\t        if (condition(array[i][byProperty], result)) {\n\t          result = array[i][byProperty];\n\t        }\n\t      }\n\t    }\n\t    else {\n\t      while (i--) {\n\t        if (condition(array[i], result)) {\n\t          result = array[i];\n\t        }\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * @namespace fabric.util.array\n\t   */\n\t  fabric.util.array = {\n\t    invoke: invoke,\n\t    min: min,\n\t    max: max\n\t  };\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * Copies all enumerable properties of one object to another\n\t   * @memberOf fabric.util.object\n\t   * @param {Object} destination Where to copy to\n\t   * @param {Object} source Where to copy from\n\t   * @return {Object}\n\t   */\n\t  function extend(destination, source) {\n\t    // JScript DontEnum bug is not taken care of\n\t    for (var property in source) {\n\t      destination[property] = source[property];\n\t    }\n\t    return destination;\n\t  }\n\t\n\t  /**\n\t   * Creates an empty object and copies all enumerable properties of another object to it\n\t   * @memberOf fabric.util.object\n\t   * @param {Object} object Object to clone\n\t   * @return {Object}\n\t   */\n\t  function clone(object) {\n\t    return extend({ }, object);\n\t  }\n\t\n\t  /** @namespace fabric.util.object */\n\t  fabric.util.object = {\n\t    extend: extend,\n\t    clone: clone\n\t  };\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  /* _ES5_COMPAT_START_ */\n\t  if (!String.prototype.trim) {\n\t    /**\n\t     * Trims a string (removing whitespace from the beginning and the end)\n\t     * @function external:String#trim\n\t     * @see <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/Trim\">String#trim on MDN</a>\n\t     */\n\t    String.prototype.trim = function () {\n\t      // this trim is not fully ES3 or ES5 compliant, but it should cover most cases for now\n\t      return this.replace(/^[\\s\\xA0]+/, '').replace(/[\\s\\xA0]+$/, '');\n\t    };\n\t  }\n\t  /* _ES5_COMPAT_END_ */\n\t\n\t  /**\n\t   * Camelizes a string\n\t   * @memberOf fabric.util.string\n\t   * @param {String} string String to camelize\n\t   * @return {String} Camelized version of a string\n\t   */\n\t  function camelize(string) {\n\t    return string.replace(/-+(.)?/g, function(match, character) {\n\t      return character ? character.toUpperCase() : '';\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Capitalizes a string\n\t   * @memberOf fabric.util.string\n\t   * @param {String} string String to capitalize\n\t   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n\t   * and other letters stay untouched, if false first letter is capitalized\n\t   * and other letters are converted to lowercase.\n\t   * @return {String} Capitalized version of a string\n\t   */\n\t  function capitalize(string, firstLetterOnly) {\n\t    return string.charAt(0).toUpperCase() +\n\t      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n\t  }\n\t\n\t  /**\n\t   * Escapes XML in a string\n\t   * @memberOf fabric.util.string\n\t   * @param {String} string String to escape\n\t   * @return {String} Escaped version of a string\n\t   */\n\t  function escapeXml(string) {\n\t    return string.replace(/&/g, '&amp;')\n\t       .replace(/\"/g, '&quot;')\n\t       .replace(/'/g, '&apos;')\n\t       .replace(/</g, '&lt;')\n\t       .replace(/>/g, '&gt;');\n\t  }\n\t\n\t  /**\n\t   * String utilities\n\t   * @namespace fabric.util.string\n\t   */\n\t  fabric.util.string = {\n\t    camelize: camelize,\n\t    capitalize: capitalize,\n\t    escapeXml: escapeXml\n\t  };\n\t}());\n\t\n\t\n\t/* _ES5_COMPAT_START_ */\n\t(function() {\n\t\n\t  var slice = Array.prototype.slice,\n\t      apply = Function.prototype.apply,\n\t      Dummy = function() { };\n\t\n\t  if (!Function.prototype.bind) {\n\t    /**\n\t     * Cross-browser approximation of ES5 Function.prototype.bind (not fully spec conforming)\n\t     * @see <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\">Function#bind on MDN</a>\n\t     * @param {Object} thisArg Object to bind function to\n\t     * @param {Any[]} [...] Values to pass to a bound function\n\t     * @return {Function}\n\t     */\n\t    Function.prototype.bind = function(thisArg) {\n\t      var _this = this, args = slice.call(arguments, 1), bound;\n\t      if (args.length) {\n\t        bound = function() {\n\t          return apply.call(_this, this instanceof Dummy ? this : thisArg, args.concat(slice.call(arguments)));\n\t        };\n\t      }\n\t      else {\n\t        /** @ignore */\n\t        bound = function() {\n\t          return apply.call(_this, this instanceof Dummy ? this : thisArg, arguments);\n\t        };\n\t      }\n\t      Dummy.prototype = this.prototype;\n\t      bound.prototype = new Dummy();\n\t\n\t      return bound;\n\t    };\n\t  }\n\t\n\t})();\n\t/* _ES5_COMPAT_END_ */\n\t\n\t\n\t(function() {\n\t\n\t  var slice = Array.prototype.slice, emptyFunction = function() { },\n\t\n\t      IS_DONTENUM_BUGGY = (function() {\n\t        for (var p in { toString: 1 }) {\n\t          if (p === 'toString') {\n\t            return false;\n\t          }\n\t        }\n\t        return true;\n\t      })(),\n\t\n\t      /** @ignore */\n\t      addMethods = function(klass, source, parent) {\n\t        for (var property in source) {\n\t\n\t          if (property in klass.prototype &&\n\t              typeof klass.prototype[property] === 'function' &&\n\t              (source[property] + '').indexOf('callSuper') > -1) {\n\t\n\t            klass.prototype[property] = (function(property) {\n\t              return function() {\n\t\n\t                var superclass = this.constructor.superclass;\n\t                this.constructor.superclass = parent;\n\t                var returnValue = source[property].apply(this, arguments);\n\t                this.constructor.superclass = superclass;\n\t\n\t                if (property !== 'initialize') {\n\t                  return returnValue;\n\t                }\n\t              };\n\t            })(property);\n\t          }\n\t          else {\n\t            klass.prototype[property] = source[property];\n\t          }\n\t\n\t          if (IS_DONTENUM_BUGGY) {\n\t            if (source.toString !== Object.prototype.toString) {\n\t              klass.prototype.toString = source.toString;\n\t            }\n\t            if (source.valueOf !== Object.prototype.valueOf) {\n\t              klass.prototype.valueOf = source.valueOf;\n\t            }\n\t          }\n\t        }\n\t      };\n\t\n\t  function Subclass() { }\n\t\n\t  function callSuper(methodName) {\n\t    var fn = this.constructor.superclass.prototype[methodName];\n\t    return (arguments.length > 1)\n\t      ? fn.apply(this, slice.call(arguments, 1))\n\t      : fn.call(this);\n\t  }\n\t\n\t  /**\n\t   * Helper for creation of \"classes\".\n\t   * @memberOf fabric.util\n\t   * @param {Function} [parent] optional \"Class\" to inherit from\n\t   * @param {Object} [properties] Properties shared by all instances of this class\n\t   *                  (be careful modifying objects defined here as this would affect all instances)\n\t   */\n\t  function createClass() {\n\t    var parent = null,\n\t        properties = slice.call(arguments, 0);\n\t\n\t    if (typeof properties[0] === 'function') {\n\t      parent = properties.shift();\n\t    }\n\t    function klass() {\n\t      this.initialize.apply(this, arguments);\n\t    }\n\t\n\t    klass.superclass = parent;\n\t    klass.subclasses = [ ];\n\t\n\t    if (parent) {\n\t      Subclass.prototype = parent.prototype;\n\t      klass.prototype = new Subclass();\n\t      parent.subclasses.push(klass);\n\t    }\n\t    for (var i = 0, length = properties.length; i < length; i++) {\n\t      addMethods(klass, properties[i], parent);\n\t    }\n\t    if (!klass.prototype.initialize) {\n\t      klass.prototype.initialize = emptyFunction;\n\t    }\n\t    klass.prototype.constructor = klass;\n\t    klass.prototype.callSuper = callSuper;\n\t    return klass;\n\t  }\n\t\n\t  fabric.util.createClass = createClass;\n\t})();\n\t\n\t\n\t(function () {\n\t\n\t  var unknown = 'unknown';\n\t\n\t  /* EVENT HANDLING */\n\t\n\t  function areHostMethods(object) {\n\t    var methodNames = Array.prototype.slice.call(arguments, 1),\n\t        t, i, len = methodNames.length;\n\t    for (i = 0; i < len; i++) {\n\t      t = typeof object[methodNames[i]];\n\t      if (!(/^(?:function|object|unknown)$/).test(t)) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  }\n\t\n\t  /** @ignore */\n\t  var getElement,\n\t      setElement,\n\t      getUniqueId = (function () {\n\t        var uid = 0;\n\t        return function (element) {\n\t          return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);\n\t        };\n\t      })();\n\t\n\t  (function () {\n\t    var elements = { };\n\t    /** @ignore */\n\t    getElement = function (uid) {\n\t      return elements[uid];\n\t    };\n\t    /** @ignore */\n\t    setElement = function (uid, element) {\n\t      elements[uid] = element;\n\t    };\n\t  })();\n\t\n\t  function createListener(uid, handler) {\n\t    return {\n\t      handler: handler,\n\t      wrappedHandler: createWrappedHandler(uid, handler)\n\t    };\n\t  }\n\t\n\t  function createWrappedHandler(uid, handler) {\n\t    return function (e) {\n\t      handler.call(getElement(uid), e || fabric.window.event);\n\t    };\n\t  }\n\t\n\t  function createDispatcher(uid, eventName) {\n\t    return function (e) {\n\t      if (handlers[uid] && handlers[uid][eventName]) {\n\t        var handlersForEvent = handlers[uid][eventName];\n\t        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n\t          handlersForEvent[i].call(this, e || fabric.window.event);\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  var shouldUseAddListenerRemoveListener = (\n\t        areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&\n\t        areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),\n\t\n\t      shouldUseAttachEventDetachEvent = (\n\t        areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&\n\t        areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),\n\t\n\t      // IE branch\n\t      listeners = { },\n\t\n\t      // DOM L0 branch\n\t      handlers = { },\n\t\n\t      addListener, removeListener;\n\t\n\t  if (shouldUseAddListenerRemoveListener) {\n\t    /** @ignore */\n\t    addListener = function (element, eventName, handler) {\n\t      element.addEventListener(eventName, handler, false);\n\t    };\n\t    /** @ignore */\n\t    removeListener = function (element, eventName, handler) {\n\t      element.removeEventListener(eventName, handler, false);\n\t    };\n\t  }\n\t\n\t  else if (shouldUseAttachEventDetachEvent) {\n\t    /** @ignore */\n\t    addListener = function (element, eventName, handler) {\n\t      var uid = getUniqueId(element);\n\t      setElement(uid, element);\n\t      if (!listeners[uid]) {\n\t        listeners[uid] = { };\n\t      }\n\t      if (!listeners[uid][eventName]) {\n\t        listeners[uid][eventName] = [ ];\n\t\n\t      }\n\t      var listener = createListener(uid, handler);\n\t      listeners[uid][eventName].push(listener);\n\t      element.attachEvent('on' + eventName, listener.wrappedHandler);\n\t    };\n\t    /** @ignore */\n\t    removeListener = function (element, eventName, handler) {\n\t      var uid = getUniqueId(element), listener;\n\t      if (listeners[uid] && listeners[uid][eventName]) {\n\t        for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {\n\t          listener = listeners[uid][eventName][i];\n\t          if (listener && listener.handler === handler) {\n\t            element.detachEvent('on' + eventName, listener.wrappedHandler);\n\t            listeners[uid][eventName][i] = null;\n\t          }\n\t        }\n\t      }\n\t    };\n\t  }\n\t  else {\n\t    /** @ignore */\n\t    addListener = function (element, eventName, handler) {\n\t      var uid = getUniqueId(element);\n\t      if (!handlers[uid]) {\n\t        handlers[uid] = { };\n\t      }\n\t      if (!handlers[uid][eventName]) {\n\t        handlers[uid][eventName] = [ ];\n\t        var existingHandler = element['on' + eventName];\n\t        if (existingHandler) {\n\t          handlers[uid][eventName].push(existingHandler);\n\t        }\n\t        element['on' + eventName] = createDispatcher(uid, eventName);\n\t      }\n\t      handlers[uid][eventName].push(handler);\n\t    };\n\t    /** @ignore */\n\t    removeListener = function (element, eventName, handler) {\n\t      var uid = getUniqueId(element);\n\t      if (handlers[uid] && handlers[uid][eventName]) {\n\t        var handlersForEvent = handlers[uid][eventName];\n\t        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n\t          if (handlersForEvent[i] === handler) {\n\t            handlersForEvent.splice(i, 1);\n\t          }\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Adds an event listener to an element\n\t   * @function\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element\n\t   * @param {String} eventName\n\t   * @param {Function} handler\n\t   */\n\t  fabric.util.addListener = addListener;\n\t\n\t  /**\n\t   * Removes an event listener from an element\n\t   * @function\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element\n\t   * @param {String} eventName\n\t   * @param {Function} handler\n\t   */\n\t  fabric.util.removeListener = removeListener;\n\t\n\t  /**\n\t   * Cross-browser wrapper for getting event's coordinates\n\t   * @memberOf fabric.util\n\t   * @param {Event} event Event object\n\t   */\n\t  function getPointer(event) {\n\t    event || (event = fabric.window.event);\n\t\n\t    var element = event.target ||\n\t                  (typeof event.srcElement !== unknown ? event.srcElement : null),\n\t\n\t        scroll = fabric.util.getScrollLeftTop(element);\n\t\n\t    return {\n\t      x: pointerX(event) + scroll.left,\n\t      y: pointerY(event) + scroll.top\n\t    };\n\t  }\n\t\n\t  var pointerX = function(event) {\n\t    // looks like in IE (<9) clientX at certain point (apparently when mouseup fires on VML element)\n\t    // is represented as COM object, with all the consequences, like \"unknown\" type and error on [[Get]]\n\t    // need to investigate later\n\t    return (typeof event.clientX !== unknown ? event.clientX : 0);\n\t  },\n\t\n\t  pointerY = function(event) {\n\t    return (typeof event.clientY !== unknown ? event.clientY : 0);\n\t  };\n\t\n\t  function _getPointer(event, pageProp, clientProp) {\n\t    var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';\n\t\n\t    return (event[touchProp] && event[touchProp][0]\n\t      ? (event[touchProp][0][pageProp] - (event[touchProp][0][pageProp] - event[touchProp][0][clientProp]))\n\t        || event[clientProp]\n\t      : event[clientProp]);\n\t  }\n\t\n\t  if (fabric.isTouchSupported) {\n\t    pointerX = function(event) {\n\t      return _getPointer(event, 'pageX', 'clientX');\n\t    };\n\t    pointerY = function(event) {\n\t      return _getPointer(event, 'pageY', 'clientY');\n\t    };\n\t  }\n\t\n\t  fabric.util.getPointer = getPointer;\n\t\n\t  fabric.util.object.extend(fabric.util, fabric.Observable);\n\t\n\t})();\n\t\n\t\n\t(function () {\n\t\n\t  /**\n\t   * Cross-browser wrapper for setting element's style\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element\n\t   * @param {Object} styles\n\t   * @return {HTMLElement} Element that was passed as a first argument\n\t   */\n\t  function setStyle(element, styles) {\n\t    var elementStyle = element.style;\n\t    if (!elementStyle) {\n\t      return element;\n\t    }\n\t    if (typeof styles === 'string') {\n\t      element.style.cssText += ';' + styles;\n\t      return styles.indexOf('opacity') > -1\n\t        ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\n\t        : element;\n\t    }\n\t    for (var property in styles) {\n\t      if (property === 'opacity') {\n\t        setOpacity(element, styles[property]);\n\t      }\n\t      else {\n\t        var normalizedProperty = (property === 'float' || property === 'cssFloat')\n\t          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\n\t          : property;\n\t        elementStyle[normalizedProperty] = styles[property];\n\t      }\n\t    }\n\t    return element;\n\t  }\n\t\n\t  var parseEl = fabric.document.createElement('div'),\n\t      supportsOpacity = typeof parseEl.style.opacity === 'string',\n\t      supportsFilters = typeof parseEl.style.filter === 'string',\n\t      reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\n\t\n\t      /** @ignore */\n\t      setOpacity = function (element) { return element; };\n\t\n\t  if (supportsOpacity) {\n\t    /** @ignore */\n\t    setOpacity = function(element, value) {\n\t      element.style.opacity = value;\n\t      return element;\n\t    };\n\t  }\n\t  else if (supportsFilters) {\n\t    /** @ignore */\n\t    setOpacity = function(element, value) {\n\t      var es = element.style;\n\t      if (element.currentStyle && !element.currentStyle.hasLayout) {\n\t        es.zoom = 1;\n\t      }\n\t      if (reOpacity.test(es.filter)) {\n\t        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\n\t        es.filter = es.filter.replace(reOpacity, value);\n\t      }\n\t      else {\n\t        es.filter += ' alpha(opacity=' + (value * 100) + ')';\n\t      }\n\t      return element;\n\t    };\n\t  }\n\t\n\t  fabric.util.setStyle = setStyle;\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var _slice = Array.prototype.slice;\n\t\n\t  /**\n\t   * Takes id and returns an element with that id (if one exists in a document)\n\t   * @memberOf fabric.util\n\t   * @param {String|HTMLElement} id\n\t   * @return {HTMLElement|null}\n\t   */\n\t  function getById(id) {\n\t    return typeof id === 'string' ? fabric.document.getElementById(id) : id;\n\t  }\n\t\n\t  var sliceCanConvertNodelists,\n\t      /**\n\t       * Converts an array-like object (e.g. arguments or NodeList) to an array\n\t       * @memberOf fabric.util\n\t       * @param {Object} arrayLike\n\t       * @return {Array}\n\t       */\n\t      toArray = function(arrayLike) {\n\t        return _slice.call(arrayLike, 0);\n\t      };\n\t\n\t  try {\n\t    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n\t  }\n\t  catch (err) { }\n\t\n\t  if (!sliceCanConvertNodelists) {\n\t    toArray = function(arrayLike) {\n\t      var arr = new Array(arrayLike.length), i = arrayLike.length;\n\t      while (i--) {\n\t        arr[i] = arrayLike[i];\n\t      }\n\t      return arr;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Creates specified element with specified attributes\n\t   * @memberOf fabric.util\n\t   * @param {String} tagName Type of an element to create\n\t   * @param {Object} [attributes] Attributes to set on an element\n\t   * @return {HTMLElement} Newly created element\n\t   */\n\t  function makeElement(tagName, attributes) {\n\t    var el = fabric.document.createElement(tagName);\n\t    for (var prop in attributes) {\n\t      if (prop === 'class') {\n\t        el.className = attributes[prop];\n\t      }\n\t      else if (prop === 'for') {\n\t        el.htmlFor = attributes[prop];\n\t      }\n\t      else {\n\t        el.setAttribute(prop, attributes[prop]);\n\t      }\n\t    }\n\t    return el;\n\t  }\n\t\n\t  /**\n\t   * Adds class to an element\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to add class to\n\t   * @param {String} className Class to add to an element\n\t   */\n\t  function addClass(element, className) {\n\t    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\n\t      element.className += (element.className ? ' ' : '') + className;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Wraps element with another element\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to wrap\n\t   * @param {HTMLElement|String} wrapper Element to wrap with\n\t   * @param {Object} [attributes] Attributes to set on a wrapper\n\t   * @return {HTMLElement} wrapper\n\t   */\n\t  function wrapElement(element, wrapper, attributes) {\n\t    if (typeof wrapper === 'string') {\n\t      wrapper = makeElement(wrapper, attributes);\n\t    }\n\t    if (element.parentNode) {\n\t      element.parentNode.replaceChild(wrapper, element);\n\t    }\n\t    wrapper.appendChild(element);\n\t    return wrapper;\n\t  }\n\t\n\t  /**\n\t   * Returns element scroll offsets\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to operate on\n\t   * @return {Object} Object with left/top values\n\t   */\n\t  function getScrollLeftTop(element) {\n\t\n\t    var left = 0,\n\t        top = 0,\n\t        docElement = fabric.document.documentElement,\n\t        body = fabric.document.body || {\n\t          scrollLeft: 0, scrollTop: 0\n\t        };\n\t\n\t    while (element && element.parentNode) {\n\t\n\t      element = element.parentNode;\n\t\n\t      if (element === fabric.document) {\n\t        left = body.scrollLeft || docElement.scrollLeft || 0;\n\t        top = body.scrollTop ||  docElement.scrollTop || 0;\n\t      }\n\t      else {\n\t        left += element.scrollLeft || 0;\n\t        top += element.scrollTop || 0;\n\t      }\n\t\n\t      if (element.nodeType === 1 &&\n\t          fabric.util.getElementStyle(element, 'position') === 'fixed') {\n\t        break;\n\t      }\n\t    }\n\t\n\t    return { left: left, top: top };\n\t  }\n\t\n\t  /**\n\t   * Returns offset for a given element\n\t   * @function\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to get offset for\n\t   * @return {Object} Object with \"left\" and \"top\" properties\n\t   */\n\t  function getElementOffset(element) {\n\t    var docElem,\n\t        doc = element && element.ownerDocument,\n\t        box = { left: 0, top: 0 },\n\t        offset = { left: 0, top: 0 },\n\t        scrollLeftTop,\n\t        offsetAttributes = {\n\t          borderLeftWidth: 'left',\n\t          borderTopWidth:  'top',\n\t          paddingLeft:     'left',\n\t          paddingTop:      'top'\n\t        };\n\t\n\t    if (!doc) {\n\t      return offset;\n\t    }\n\t\n\t    for (var attr in offsetAttributes) {\n\t      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n\t    }\n\t\n\t    docElem = doc.documentElement;\n\t    if ( typeof element.getBoundingClientRect !== 'undefined' ) {\n\t      box = element.getBoundingClientRect();\n\t    }\n\t\n\t    scrollLeftTop = getScrollLeftTop(element);\n\t\n\t    return {\n\t      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n\t      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Returns style attribute value of a given element\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to get style attribute for\n\t   * @param {String} attr Style attribute to get for element\n\t   * @return {String} Style attribute value of the given element.\n\t   */\n\t  var getElementStyle;\n\t  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n\t    getElementStyle = function(element, attr) {\n\t      var style = fabric.document.defaultView.getComputedStyle(element, null);\n\t      return style ? style[attr] : undefined;\n\t    };\n\t  }\n\t  else {\n\t    getElementStyle = function(element, attr) {\n\t      var value = element.style[attr];\n\t      if (!value && element.currentStyle) {\n\t        value = element.currentStyle[attr];\n\t      }\n\t      return value;\n\t    };\n\t  }\n\t\n\t  (function () {\n\t    var style = fabric.document.documentElement.style,\n\t        selectProp = 'userSelect' in style\n\t          ? 'userSelect'\n\t          : 'MozUserSelect' in style\n\t            ? 'MozUserSelect'\n\t            : 'WebkitUserSelect' in style\n\t              ? 'WebkitUserSelect'\n\t              : 'KhtmlUserSelect' in style\n\t                ? 'KhtmlUserSelect'\n\t                : '';\n\t\n\t    /**\n\t     * Makes element unselectable\n\t     * @memberOf fabric.util\n\t     * @param {HTMLElement} element Element to make unselectable\n\t     * @return {HTMLElement} Element that was passed in\n\t     */\n\t    function makeElementUnselectable(element) {\n\t      if (typeof element.onselectstart !== 'undefined') {\n\t        element.onselectstart = fabric.util.falseFunction;\n\t      }\n\t      if (selectProp) {\n\t        element.style[selectProp] = 'none';\n\t      }\n\t      else if (typeof element.unselectable === 'string') {\n\t        element.unselectable = 'on';\n\t      }\n\t      return element;\n\t    }\n\t\n\t    /**\n\t     * Makes element selectable\n\t     * @memberOf fabric.util\n\t     * @param {HTMLElement} element Element to make selectable\n\t     * @return {HTMLElement} Element that was passed in\n\t     */\n\t    function makeElementSelectable(element) {\n\t      if (typeof element.onselectstart !== 'undefined') {\n\t        element.onselectstart = null;\n\t      }\n\t      if (selectProp) {\n\t        element.style[selectProp] = '';\n\t      }\n\t      else if (typeof element.unselectable === 'string') {\n\t        element.unselectable = '';\n\t      }\n\t      return element;\n\t    }\n\t\n\t    fabric.util.makeElementUnselectable = makeElementUnselectable;\n\t    fabric.util.makeElementSelectable = makeElementSelectable;\n\t  })();\n\t\n\t  (function() {\n\t\n\t    /**\n\t     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\n\t     * @memberOf fabric.util\n\t     * @param {String} url URL of a script to load\n\t     * @param {Function} callback Callback to execute when script is finished loading\n\t     */\n\t    function getScript(url, callback) {\n\t      var headEl = fabric.document.getElementsByTagName('head')[0],\n\t          scriptEl = fabric.document.createElement('script'),\n\t          loading = true;\n\t\n\t      /** @ignore */\n\t      scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\n\t        if (loading) {\n\t          if (typeof this.readyState === 'string' &&\n\t              this.readyState !== 'loaded' &&\n\t              this.readyState !== 'complete') {\n\t            return;\n\t          }\n\t          loading = false;\n\t          callback(e || fabric.window.event);\n\t          scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\n\t        }\n\t      };\n\t      scriptEl.src = url;\n\t      headEl.appendChild(scriptEl);\n\t      // causes issue in Opera\n\t      // headEl.removeChild(scriptEl);\n\t    }\n\t\n\t    fabric.util.getScript = getScript;\n\t  })();\n\t\n\t  fabric.util.getById = getById;\n\t  fabric.util.toArray = toArray;\n\t  fabric.util.makeElement = makeElement;\n\t  fabric.util.addClass = addClass;\n\t  fabric.util.wrapElement = wrapElement;\n\t  fabric.util.getScrollLeftTop = getScrollLeftTop;\n\t  fabric.util.getElementOffset = getElementOffset;\n\t  fabric.util.getElementStyle = getElementStyle;\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  function addParamToUrl(url, param) {\n\t    return url + (/\\?/.test(url) ? '&' : '?') + param;\n\t  }\n\t\n\t  var makeXHR = (function() {\n\t    var factories = [\n\t      function() { return new ActiveXObject('Microsoft.XMLHTTP'); },\n\t      function() { return new ActiveXObject('Msxml2.XMLHTTP'); },\n\t      function() { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); },\n\t      function() { return new XMLHttpRequest(); }\n\t    ];\n\t    for (var i = factories.length; i--; ) {\n\t      try {\n\t        var req = factories[i]();\n\t        if (req) {\n\t          return factories[i];\n\t        }\n\t      }\n\t      catch (err) { }\n\t    }\n\t  })();\n\t\n\t  function emptyFn() { }\n\t\n\t  /**\n\t   * Cross-browser abstraction for sending XMLHttpRequest\n\t   * @memberOf fabric.util\n\t   * @param {String} url URL to send XMLHttpRequest to\n\t   * @param {Object} [options] Options object\n\t   * @param {String} [options.method=\"GET\"]\n\t   * @param {Function} options.onComplete Callback to invoke when request is completed\n\t   * @return {XMLHttpRequest} request\n\t   */\n\t  function request(url, options) {\n\t\n\t    options || (options = { });\n\t\n\t    var method = options.method ? options.method.toUpperCase() : 'GET',\n\t        onComplete = options.onComplete || function() { },\n\t        xhr = makeXHR(),\n\t        body;\n\t\n\t    /** @ignore */\n\t    xhr.onreadystatechange = function() {\n\t      if (xhr.readyState === 4) {\n\t        onComplete(xhr);\n\t        xhr.onreadystatechange = emptyFn;\n\t      }\n\t    };\n\t\n\t    if (method === 'GET') {\n\t      body = null;\n\t      if (typeof options.parameters === 'string') {\n\t        url = addParamToUrl(url, options.parameters);\n\t      }\n\t    }\n\t\n\t    xhr.open(method, url, true);\n\t\n\t    if (method === 'POST' || method === 'PUT') {\n\t      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t    }\n\t\n\t    xhr.send(body);\n\t    return xhr;\n\t  }\n\t\n\t  fabric.util.request = request;\n\t})();\n\t\n\t\n\t/**\n\t * Wrapper around `console.log` (when available)\n\t * @param {Any} [values] Values to log\n\t */\n\tfabric.log = function() { };\n\t\n\t/**\n\t * Wrapper around `console.warn` (when available)\n\t * @param {Any} [values] Values to log as a warning\n\t */\n\tfabric.warn = function() { };\n\t\n\t/* jshint ignore:start */\n\tif (typeof console !== 'undefined') {\n\t\n\t  ['log', 'warn'].forEach(function(methodName) {\n\t\n\t    if (typeof console[methodName] !== 'undefined' &&\n\t        typeof console[methodName].apply === 'function') {\n\t\n\t      fabric[methodName] = function() {\n\t        return console[methodName].apply(console, arguments);\n\t      };\n\t    }\n\t  });\n\t}\n\t/* jshint ignore:end */\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n\t   * @memberOf fabric.util\n\t   * @param {Object} [options] Animation options\n\t   * @param {Function} [options.onChange] Callback; invoked on every value change\n\t   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n\t   * @param {Number} [options.startValue=0] Starting value\n\t   * @param {Number} [options.endValue=100] Ending value\n\t   * @param {Number} [options.byValue=100] Value to modify the property by\n\t   * @param {Function} [options.easing] Easing function\n\t   * @param {Number} [options.duration=500] Duration of change (in ms)\n\t   */\n\t  function animate(options) {\n\t\n\t    requestAnimFrame(function(timestamp) {\n\t      options || (options = { });\n\t\n\t      var start = timestamp || +new Date(),\n\t          duration = options.duration || 500,\n\t          finish = start + duration, time,\n\t          onChange = options.onChange || function() { },\n\t          abort = options.abort || function() { return false; },\n\t          easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},\n\t          startValue = 'startValue' in options ? options.startValue : 0,\n\t          endValue = 'endValue' in options ? options.endValue : 100,\n\t          byValue = options.byValue || endValue - startValue;\n\t\n\t      options.onStart && options.onStart();\n\t\n\t      (function tick(ticktime) {\n\t        time = ticktime || +new Date();\n\t        var currentTime = time > finish ? duration : (time - start);\n\t        if (abort()) {\n\t          options.onComplete && options.onComplete();\n\t          return;\n\t        }\n\t        onChange(easing(currentTime, startValue, byValue, duration));\n\t        if (time > finish) {\n\t          options.onComplete && options.onComplete();\n\t          return;\n\t        }\n\t        requestAnimFrame(tick);\n\t      })(start);\n\t    });\n\t\n\t  }\n\t\n\t  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\n\t                          fabric.window.webkitRequestAnimationFrame ||\n\t                          fabric.window.mozRequestAnimationFrame    ||\n\t                          fabric.window.oRequestAnimationFrame      ||\n\t                          fabric.window.msRequestAnimationFrame     ||\n\t                          function(callback) {\n\t                            fabric.window.setTimeout(callback, 1000 / 60);\n\t                          };\n\t\n\t  /**\n\t   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\t   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n\t   * @memberOf fabric.util\n\t   * @param {Function} callback Callback to invoke\n\t   * @param {DOMElement} element optional Element to associate with animation\n\t   */\n\t  function requestAnimFrame() {\n\t    return _requestAnimFrame.apply(fabric.window, arguments);\n\t  }\n\t\n\t  fabric.util.animate = animate;\n\t  fabric.util.requestAnimFrame = requestAnimFrame;\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  function normalize(a, c, p, s) {\n\t    if (a < Math.abs(c)) {\n\t      a = c;\n\t      s = p / 4;\n\t    }\n\t    else {\n\t      s = p / (2 * Math.PI) * Math.asin(c / a);\n\t    }\n\t    return { a: a, c: c, p: p, s: s };\n\t  }\n\t\n\t  function elastic(opts, t, d) {\n\t    return opts.a *\n\t      Math.pow(2, 10 * (t -= 1)) *\n\t      Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\n\t  }\n\t\n\t  /**\n\t   * Cubic easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutCubic(t, b, c, d) {\n\t    return c * ((t = t / d - 1) * t * t + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Cubic easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutCubic(t, b, c, d) {\n\t    t /= d/2;\n\t    if (t < 1) {\n\t      return c / 2 * t * t * t + b;\n\t    }\n\t    return c / 2 * ((t -= 2) * t * t + 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Quartic easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInQuart(t, b, c, d) {\n\t    return c * (t /= d) * t * t * t + b;\n\t  }\n\t\n\t  /**\n\t   * Quartic easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutQuart(t, b, c, d) {\n\t    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Quartic easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutQuart(t, b, c, d) {\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return c / 2 * t * t * t * t + b;\n\t    }\n\t    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Quintic easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInQuint(t, b, c, d) {\n\t    return c * (t /= d) * t * t * t * t + b;\n\t  }\n\t\n\t  /**\n\t   * Quintic easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutQuint(t, b, c, d) {\n\t    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Quintic easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutQuint(t, b, c, d) {\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return c / 2 * t * t * t * t * t + b;\n\t    }\n\t    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Sinusoidal easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInSine(t, b, c, d) {\n\t    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n\t  }\n\t\n\t  /**\n\t   * Sinusoidal easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutSine(t, b, c, d) {\n\t    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n\t  }\n\t\n\t  /**\n\t   * Sinusoidal easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutSine(t, b, c, d) {\n\t    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Exponential easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInExpo(t, b, c, d) {\n\t    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n\t  }\n\t\n\t  /**\n\t   * Exponential easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutExpo(t, b, c, d) {\n\t    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Exponential easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutExpo(t, b, c, d) {\n\t    if (t === 0) {\n\t      return b;\n\t    }\n\t    if (t === d) {\n\t      return b + c;\n\t    }\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n\t    }\n\t    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Circular easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInCirc(t, b, c, d) {\n\t    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Circular easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutCirc(t, b, c, d) {\n\t    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\t  }\n\t\n\t  /**\n\t   * Circular easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutCirc(t, b, c, d) {\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n\t    }\n\t    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Elastic easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInElastic(t, b, c, d) {\n\t    var s = 1.70158, p = 0, a = c;\n\t    if (t === 0) {\n\t      return b;\n\t    }\n\t    t /= d;\n\t    if (t === 1) {\n\t      return b + c;\n\t    }\n\t    if (!p) {\n\t      p = d * 0.3;\n\t    }\n\t    var opts = normalize(a, c, p, s);\n\t    return -elastic(opts, t, d) + b;\n\t  }\n\t\n\t  /**\n\t   * Elastic easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutElastic(t, b, c, d) {\n\t    var s = 1.70158, p = 0, a = c;\n\t    if (t === 0) {\n\t      return b;\n\t    }\n\t    t /= d;\n\t    if (t === 1) {\n\t      return b + c;\n\t    }\n\t    if (!p) {\n\t      p = d * 0.3;\n\t    }\n\t    var opts = normalize(a, c, p, s);\n\t    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\n\t  }\n\t\n\t  /**\n\t   * Elastic easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutElastic(t, b, c, d) {\n\t    var s = 1.70158, p = 0, a = c;\n\t    if (t === 0) {\n\t      return b;\n\t    }\n\t    t /= d / 2;\n\t    if (t === 2) {\n\t      return b + c;\n\t    }\n\t    if (!p) {\n\t      p = d * (0.3 * 1.5);\n\t    }\n\t    var opts = normalize(a, c, p, s);\n\t    if (t < 1) {\n\t      return -0.5 * elastic(opts, t, d) + b;\n\t    }\n\t    return opts.a * Math.pow(2, -10 * (t -= 1)) *\n\t      Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\n\t  }\n\t\n\t  /**\n\t   * Backwards easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInBack(t, b, c, d, s) {\n\t    if (s === undefined) {\n\t      s = 1.70158;\n\t    }\n\t    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n\t  }\n\t\n\t  /**\n\t   * Backwards easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutBack(t, b, c, d, s) {\n\t    if (s === undefined) {\n\t      s = 1.70158;\n\t    }\n\t    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Backwards easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutBack(t, b, c, d, s) {\n\t    if (s === undefined) {\n\t      s = 1.70158;\n\t    }\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n\t    }\n\t    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Bouncing easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInBounce(t, b, c, d) {\n\t    return c - easeOutBounce (d - t, 0, c, d) + b;\n\t  }\n\t\n\t  /**\n\t   * Bouncing easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutBounce(t, b, c, d) {\n\t    if ((t /= d) < (1 / 2.75)) {\n\t      return c * (7.5625 * t * t) + b;\n\t    }\n\t    else if (t < (2/2.75)) {\n\t      return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n\t    }\n\t    else if (t < (2.5/2.75)) {\n\t      return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n\t    }\n\t    else {\n\t      return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Bouncing easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutBounce(t, b, c, d) {\n\t    if (t < d / 2) {\n\t      return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\n\t    }\n\t    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\t  }\n\t\n\t  /**\n\t   * Easing functions\n\t   * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\n\t   * @namespace fabric.util.ease\n\t   */\n\t  fabric.util.ease = {\n\t\n\t    /**\n\t     * Quadratic easing in\n\t     * @memberOf fabric.util.ease\n\t     */\n\t    easeInQuad: function(t, b, c, d) {\n\t      return c * (t /= d) * t + b;\n\t    },\n\t\n\t    /**\n\t     * Quadratic easing out\n\t     * @memberOf fabric.util.ease\n\t     */\n\t    easeOutQuad: function(t, b, c, d) {\n\t      return -c * (t /= d) * (t - 2) + b;\n\t    },\n\t\n\t    /**\n\t     * Quadratic easing in and out\n\t     * @memberOf fabric.util.ease\n\t     */\n\t    easeInOutQuad: function(t, b, c, d) {\n\t      t /= (d / 2);\n\t      if (t < 1) {\n\t        return c / 2 * t * t + b;\n\t      }\n\t      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n\t    },\n\t\n\t    /**\n\t     * Cubic easing in\n\t     * @memberOf fabric.util.ease\n\t     */\n\t    easeInCubic: function(t, b, c, d) {\n\t      return c * (t /= d) * t * t + b;\n\t    },\n\t\n\t    easeOutCubic: easeOutCubic,\n\t    easeInOutCubic: easeInOutCubic,\n\t    easeInQuart: easeInQuart,\n\t    easeOutQuart: easeOutQuart,\n\t    easeInOutQuart: easeInOutQuart,\n\t    easeInQuint: easeInQuint,\n\t    easeOutQuint: easeOutQuint,\n\t    easeInOutQuint: easeInOutQuint,\n\t    easeInSine: easeInSine,\n\t    easeOutSine: easeOutSine,\n\t    easeInOutSine: easeInOutSine,\n\t    easeInExpo: easeInExpo,\n\t    easeOutExpo: easeOutExpo,\n\t    easeInOutExpo: easeInOutExpo,\n\t    easeInCirc: easeInCirc,\n\t    easeOutCirc: easeOutCirc,\n\t    easeInOutCirc: easeInOutCirc,\n\t    easeInElastic: easeInElastic,\n\t    easeOutElastic: easeOutElastic,\n\t    easeInOutElastic: easeInOutElastic,\n\t    easeInBack: easeInBack,\n\t    easeOutBack: easeOutBack,\n\t    easeInOutBack: easeInOutBack,\n\t    easeInBounce: easeInBounce,\n\t    easeOutBounce: easeOutBounce,\n\t    easeInOutBounce: easeInOutBounce\n\t  };\n\t\n\t}());\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  /**\n\t   * @name fabric\n\t   * @namespace\n\t   */\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      capitalize = fabric.util.string.capitalize,\n\t      clone = fabric.util.object.clone,\n\t      toFixed = fabric.util.toFixed,\n\t      parseUnit = fabric.util.parseUnit,\n\t      multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\n\t\n\t      reAllowedSVGTagNames = /^(path|circle|polygon|polyline|ellipse|rect|line|image|text)$/i,\n\t      reViewBoxTagNames = /^(symbol|image|marker|pattern|view|svg)$/i,\n\t      reNotAllowedAncestors = /^(?:pattern|defs|symbol|metadata)$/i,\n\t      reAllowedParents = /^(symbol|g|a|svg)$/i,\n\t\n\t      attributesMap = {\n\t        cx:                   'left',\n\t        x:                    'left',\n\t        r:                    'radius',\n\t        cy:                   'top',\n\t        y:                    'top',\n\t        display:              'visible',\n\t        visibility:           'visible',\n\t        transform:            'transformMatrix',\n\t        'fill-opacity':       'fillOpacity',\n\t        'fill-rule':          'fillRule',\n\t        'font-family':        'fontFamily',\n\t        'font-size':          'fontSize',\n\t        'font-style':         'fontStyle',\n\t        'font-weight':        'fontWeight',\n\t        'stroke-dasharray':   'strokeDashArray',\n\t        'stroke-linecap':     'strokeLineCap',\n\t        'stroke-linejoin':    'strokeLineJoin',\n\t        'stroke-miterlimit':  'strokeMiterLimit',\n\t        'stroke-opacity':     'strokeOpacity',\n\t        'stroke-width':       'strokeWidth',\n\t        'text-decoration':    'textDecoration',\n\t        'text-anchor':        'originX'\n\t      },\n\t\n\t      colorAttributes = {\n\t        stroke: 'strokeOpacity',\n\t        fill:   'fillOpacity'\n\t      };\n\t\n\t  fabric.cssRules = { };\n\t  fabric.gradientDefs = { };\n\t\n\t  function normalizeAttr(attr) {\n\t    // transform attribute names\n\t    if (attr in attributesMap) {\n\t      return attributesMap[attr];\n\t    }\n\t    return attr;\n\t  }\n\t\n\t  function normalizeValue(attr, value, parentAttributes, fontSize) {\n\t    var isArray = Object.prototype.toString.call(value) === '[object Array]',\n\t        parsed;\n\t\n\t    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\n\t      value = '';\n\t    }\n\t    else if (attr === 'strokeDashArray') {\n\t      value = value.replace(/,/g, ' ').split(/\\s+/).map(function(n) {\n\t        return parseFloat(n);\n\t      });\n\t    }\n\t    else if (attr === 'transformMatrix') {\n\t      if (parentAttributes && parentAttributes.transformMatrix) {\n\t        value = multiplyTransformMatrices(\n\t          parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\n\t      }\n\t      else {\n\t        value = fabric.parseTransformAttribute(value);\n\t      }\n\t    }\n\t    else if (attr === 'visible') {\n\t      value = (value === 'none' || value === 'hidden') ? false : true;\n\t      // display=none on parent element always takes precedence over child element\n\t      if (parentAttributes && parentAttributes.visible === false) {\n\t        value = false;\n\t      }\n\t    }\n\t    else if (attr === 'originX' /* text-anchor */) {\n\t      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\n\t    }\n\t    else {\n\t      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\n\t    }\n\t\n\t    return (!isArray && isNaN(parsed) ? value : parsed);\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   * @param {Object} attributes Array of attributes to parse\n\t   */\n\t  function _setStrokeFillOpacity(attributes) {\n\t    for (var attr in colorAttributes) {\n\t\n\t      if (!attributes[attr] || typeof attributes[colorAttributes[attr]] === 'undefined') {\n\t        continue;\n\t      }\n\t\n\t      if (attributes[attr].indexOf('url(') === 0) {\n\t        continue;\n\t      }\n\t\n\t      var color = new fabric.Color(attributes[attr]);\n\t      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\n\t    }\n\t    return attributes;\n\t  }\n\t\n\t  /**\n\t   * Parses \"transform\" attribute, returning an array of values\n\t   * @static\n\t   * @function\n\t   * @memberOf fabric\n\t   * @param {String} attributeValue String containing attribute value\n\t   * @return {Array} Array of 6 elements representing transformation matrix\n\t   */\n\t  fabric.parseTransformAttribute = (function() {\n\t    function rotateMatrix(matrix, args) {\n\t      var angle = args[0];\n\t\n\t      matrix[0] = Math.cos(angle);\n\t      matrix[1] = Math.sin(angle);\n\t      matrix[2] = -Math.sin(angle);\n\t      matrix[3] = Math.cos(angle);\n\t    }\n\t\n\t    function scaleMatrix(matrix, args) {\n\t      var multiplierX = args[0],\n\t          multiplierY = (args.length === 2) ? args[1] : args[0];\n\t\n\t      matrix[0] = multiplierX;\n\t      matrix[3] = multiplierY;\n\t    }\n\t\n\t    function skewXMatrix(matrix, args) {\n\t      matrix[2] = Math.tan(fabric.util.degreesToRadians(args[0]));\n\t    }\n\t\n\t    function skewYMatrix(matrix, args) {\n\t      matrix[1] = Math.tan(fabric.util.degreesToRadians(args[0]));\n\t    }\n\t\n\t    function translateMatrix(matrix, args) {\n\t      matrix[4] = args[0];\n\t      if (args.length === 2) {\n\t        matrix[5] = args[1];\n\t      }\n\t    }\n\t\n\t    // identity matrix\n\t    var iMatrix = [\n\t          1, // a\n\t          0, // b\n\t          0, // c\n\t          1, // d\n\t          0, // e\n\t          0  // f\n\t        ],\n\t\n\t        // == begin transform regexp\n\t        number = fabric.reNum,\n\t\n\t        commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\n\t\n\t        skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\t\n\t        skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\t\n\t        rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n\t                    commaWsp + '(' + number + ')' +\n\t                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\t\n\t        scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n\t                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\t\n\t        translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n\t                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\t\n\t        matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' +\n\t                  '\\\\s*\\\\))',\n\t\n\t        transform = '(?:' +\n\t                    matrix + '|' +\n\t                    translate + '|' +\n\t                    scale + '|' +\n\t                    rotate + '|' +\n\t                    skewX + '|' +\n\t                    skewY +\n\t                    ')',\n\t\n\t        transforms = '(?:' + transform + '(?:' + commaWsp + transform + ')*' + ')',\n\t\n\t        transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\n\t\n\t        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n\t        reTransformList = new RegExp(transformList),\n\t        // == end transform regexp\n\t\n\t        reTransform = new RegExp(transform, 'g');\n\t\n\t    return function(attributeValue) {\n\t\n\t      // start with identity matrix\n\t      var matrix = iMatrix.concat(),\n\t          matrices = [ ];\n\t\n\t      // return if no argument was given or\n\t      // an argument does not match transform attribute regexp\n\t      if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\n\t        return matrix;\n\t      }\n\t\n\t      attributeValue.replace(reTransform, function(match) {\n\t\n\t        var m = new RegExp(transform).exec(match).filter(function (match) {\n\t              return (match !== '' && match != null);\n\t            }),\n\t            operation = m[1],\n\t            args = m.slice(2).map(parseFloat);\n\t\n\t        switch (operation) {\n\t          case 'translate':\n\t            translateMatrix(matrix, args);\n\t            break;\n\t          case 'rotate':\n\t            args[0] = fabric.util.degreesToRadians(args[0]);\n\t            rotateMatrix(matrix, args);\n\t            break;\n\t          case 'scale':\n\t            scaleMatrix(matrix, args);\n\t            break;\n\t          case 'skewX':\n\t            skewXMatrix(matrix, args);\n\t            break;\n\t          case 'skewY':\n\t            skewYMatrix(matrix, args);\n\t            break;\n\t          case 'matrix':\n\t            matrix = args;\n\t            break;\n\t        }\n\t\n\t        // snapshot current matrix into matrices array\n\t        matrices.push(matrix.concat());\n\t        // reset\n\t        matrix = iMatrix.concat();\n\t      });\n\t\n\t      var combinedMatrix = matrices[0];\n\t      while (matrices.length > 1) {\n\t        matrices.shift();\n\t        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\n\t      }\n\t      return combinedMatrix;\n\t    };\n\t  })();\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function parseStyleString(style, oStyle) {\n\t    var attr, value;\n\t    style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\n\t      var pair = chunk.split(':');\n\t\n\t      attr = normalizeAttr(pair[0].trim().toLowerCase());\n\t      value = normalizeValue(attr, pair[1].trim());\n\t\n\t      oStyle[attr] = value;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function parseStyleObject(style, oStyle) {\n\t    var attr, value;\n\t    for (var prop in style) {\n\t      if (typeof style[prop] === 'undefined') {\n\t        continue;\n\t      }\n\t\n\t      attr = normalizeAttr(prop.toLowerCase());\n\t      value = normalizeValue(attr, style[prop]);\n\t\n\t      oStyle[attr] = value;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function getGlobalStylesForElement(element, svgUid) {\n\t    var styles = { };\n\t    for (var rule in fabric.cssRules[svgUid]) {\n\t      if (elementMatchesRule(element, rule.split(' '))) {\n\t        for (var property in fabric.cssRules[svgUid][rule]) {\n\t          styles[property] = fabric.cssRules[svgUid][rule][property];\n\t        }\n\t      }\n\t    }\n\t    return styles;\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function elementMatchesRule(element, selectors) {\n\t    var firstMatching, parentMatching = true;\n\t    //start from rightmost selector.\n\t    firstMatching = selectorMatches(element, selectors.pop());\n\t    if (firstMatching && selectors.length) {\n\t      parentMatching = doesSomeParentMatch(element, selectors);\n\t    }\n\t    return firstMatching && parentMatching && (selectors.length === 0);\n\t  }\n\t\n\t  function doesSomeParentMatch(element, selectors) {\n\t    var selector, parentMatching = true;\n\t    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\n\t      if (parentMatching) {\n\t        selector = selectors.pop();\n\t      }\n\t      element = element.parentNode;\n\t      parentMatching = selectorMatches(element, selector);\n\t    }\n\t    return selectors.length === 0;\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function selectorMatches(element, selector) {\n\t    var nodeName = element.nodeName,\n\t        classNames = element.getAttribute('class'),\n\t        id = element.getAttribute('id'), matcher;\n\t    // i check if a selector matches slicing away part from it.\n\t    // if i get empty string i should match\n\t    matcher = new RegExp('^' + nodeName, 'i');\n\t    selector = selector.replace(matcher, '');\n\t    if (id && selector.length) {\n\t      matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\n\t      selector = selector.replace(matcher, '');\n\t    }\n\t    if (classNames && selector.length) {\n\t      classNames = classNames.split(' ');\n\t      for (var i = classNames.length; i--;) {\n\t        matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\n\t        selector = selector.replace(matcher, '');\n\t      }\n\t    }\n\t    return selector.length === 0;\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   * to support IE8 missing getElementById on SVGdocument\n\t   */\n\t  function elementById(doc, id) {\n\t    var el;\n\t    doc.getElementById && (el = doc.getElementById(id));\n\t    if (el) {\n\t      return el;\n\t    }\n\t    var node, i, idAttr, nodelist = doc.getElementsByTagName('*');\n\t    for (i = 0; i < nodelist.length; i++) {\n\t      node = nodelist[i];\n\t      if (idAttr === node.getAttribute('id')) {\n\t        return node;\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function parseUseDirectives(doc) {\n\t    var nodelist = doc.getElementsByTagName('use'), i = 0;\n\t    while (nodelist.length && i < nodelist.length) {\n\t      var el = nodelist[i],\n\t          xlink = el.getAttribute('xlink:href').substr(1),\n\t          x = el.getAttribute('x') || 0,\n\t          y = el.getAttribute('y') || 0,\n\t          el2 = elementById(doc, xlink).cloneNode(true),\n\t          currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\n\t          parentNode, oldLength = nodelist.length, attr, j, attrs, l;\n\t\n\t      applyViewboxTransform(el2);\n\t      if (/^svg$/i.test(el2.nodeName)) {\n\t        var el3 = el2.ownerDocument.createElement('g');\n\t        for (j = 0, attrs = el2.attributes, l = attrs.length; j < l; j++) {\n\t          attr = attrs.item(j);\n\t          el3.setAttribute(attr.nodeName, attr.nodeValue);\n\t        }\n\t        while (el2.firstChild != null) {\n\t          el3.appendChild(el2.firstChild);\n\t        }\n\t        el2 = el3;\n\t      }\n\t\n\t      for (j = 0, attrs = el.attributes, l = attrs.length; j < l; j++) {\n\t        attr = attrs.item(j);\n\t        if (attr.nodeName === 'x' || attr.nodeName === 'y' || attr.nodeName === 'xlink:href') {\n\t          continue;\n\t        }\n\t\n\t        if (attr.nodeName === 'transform') {\n\t          currentTrans = attr.nodeValue + ' ' + currentTrans;\n\t        }\n\t        else {\n\t          el2.setAttribute(attr.nodeName, attr.nodeValue);\n\t        }\n\t      }\n\t\n\t      el2.setAttribute('transform', currentTrans);\n\t      el2.setAttribute('instantiated_by_use', '1');\n\t      el2.removeAttribute('id');\n\t      parentNode = el.parentNode;\n\t      parentNode.replaceChild(el2, el);\n\t      // some browsers do not shorten nodelist after replaceChild (IE8)\n\t      if (nodelist.length === oldLength) {\n\t        i++;\n\t      }\n\t    }\n\t  }\n\t\n\t  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n\t  // matches, e.g.: +14.56e-12, etc.\n\t  var reViewBoxAttrValue = new RegExp(\n\t    '^' +\n\t    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n\t    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n\t    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n\t    '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\n\t    '$'\n\t  );\n\t\n\t  /**\n\t   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n\t   */\n\t  function applyViewboxTransform(element) {\n\t\n\t    var viewBoxAttr = element.getAttribute('viewBox'),\n\t        scaleX = 1,\n\t        scaleY = 1,\n\t        minX = 0,\n\t        minY = 0,\n\t        viewBoxWidth, viewBoxHeight, matrix, el,\n\t        widthAttr = element.getAttribute('width'),\n\t        heightAttr = element.getAttribute('height'),\n\t        missingViewBox = (!viewBoxAttr || !reViewBoxTagNames.test(element.tagName)\n\t                           || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\n\t        missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\n\t        toBeParsed = missingViewBox && missingDimAttr,\n\t        parsedDim = { };\n\t\n\t    parsedDim.width = 0;\n\t    parsedDim.height = 0;\n\t    parsedDim.toBeParsed = toBeParsed;\n\t\n\t    if (toBeParsed) {\n\t      return parsedDim;\n\t    }\n\t\n\t    if (missingViewBox) {\n\t      parsedDim.width = parseUnit(widthAttr);\n\t      parsedDim.height = parseUnit(heightAttr);\n\t      return parsedDim;\n\t    }\n\t\n\t    minX = -parseFloat(viewBoxAttr[1]),\n\t    minY = -parseFloat(viewBoxAttr[2]),\n\t    viewBoxWidth = parseFloat(viewBoxAttr[3]),\n\t    viewBoxHeight = parseFloat(viewBoxAttr[4]);\n\t\n\t    if (!missingDimAttr) {\n\t      parsedDim.width = parseUnit(widthAttr);\n\t      parsedDim.height = parseUnit(heightAttr);\n\t      scaleX = parsedDim.width / viewBoxWidth;\n\t      scaleY = parsedDim.height / viewBoxHeight;\n\t    }\n\t    else {\n\t      parsedDim.width = viewBoxWidth;\n\t      parsedDim.height = viewBoxHeight;\n\t    }\n\t\n\t    // default is to preserve aspect ratio\n\t    // preserveAspectRatio attribute to be implemented\n\t    scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\n\t\n\t    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0) {\n\t      return parsedDim;\n\t    }\n\t\n\t    matrix = ' matrix(' + scaleX +\n\t                  ' 0' +\n\t                  ' 0 ' +\n\t                  scaleY + ' ' +\n\t                  (minX * scaleX) + ' ' +\n\t                  (minY * scaleY) + ') ';\n\t\n\t    if (element.tagName === 'svg') {\n\t      el = element.ownerDocument.createElement('g');\n\t      while (element.firstChild != null) {\n\t        el.appendChild(element.firstChild);\n\t      }\n\t      element.appendChild(el);\n\t    }\n\t    else {\n\t      el = element;\n\t      matrix = el.getAttribute('transform') + matrix;\n\t    }\n\t\n\t    el.setAttribute('transform', matrix);\n\t    return parsedDim;\n\t  }\n\t\n\t  /**\n\t   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n\t   * @static\n\t   * @function\n\t   * @memberOf fabric\n\t   * @param {SVGDocument} doc SVG document to parse\n\t   * @param {Function} callback Callback to call when parsing is finished; It's being passed an array of elements (parsed from a document).\n\t   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n\t   */\n\t  fabric.parseSVGDocument = (function() {\n\t\n\t    function hasAncestorWithNodeName(element, nodeName) {\n\t      while (element && (element = element.parentNode)) {\n\t        if (nodeName.test(element.nodeName) && !element.getAttribute('instantiated_by_use')) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    }\n\t\n\t    return function(doc, callback, reviver) {\n\t      if (!doc) {\n\t        return;\n\t      }\n\t\n\t      parseUseDirectives(doc);\n\t\n\t      var startTime = new Date(),\n\t          svgUid =  fabric.Object.__uid++,\n\t          options = applyViewboxTransform(doc),\n\t          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\n\t\n\t      options.svgUid = svgUid;\n\t\n\t      if (descendants.length === 0 && fabric.isLikelyNode) {\n\t        // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\n\t        // https://github.com/ajaxorg/node-o3-xml/issues/21\n\t        descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\n\t        var arr = [ ];\n\t        for (var i = 0, len = descendants.length; i < len; i++) {\n\t          arr[i] = descendants[i];\n\t        }\n\t        descendants = arr;\n\t      }\n\t\n\t      var elements = descendants.filter(function(el) {\n\t        applyViewboxTransform(el);\n\t        return reAllowedSVGTagNames.test(el.tagName) &&\n\t              !hasAncestorWithNodeName(el, reNotAllowedAncestors); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n\t      });\n\t\n\t      if (!elements || (elements && !elements.length)) {\n\t        callback && callback([], {});\n\t        return;\n\t      }\n\t\n\t      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\n\t      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\n\t      // Precedence of rules:   style > class > attribute\n\t      fabric.parseElements(elements, function(instances) {\n\t        fabric.documentParsingTime = new Date() - startTime;\n\t        if (callback) {\n\t          callback(instances, options);\n\t        }\n\t      }, clone(options), reviver);\n\t    };\n\t  })();\n\t\n\t  /**\n\t   * Used for caching SVG documents (loaded via `fabric.Canvas#loadSVGFromURL`)\n\t   * @namespace\n\t   */\n\t  var svgCache = {\n\t\n\t    /**\n\t     * @param {String} name\n\t     * @param {Function} callback\n\t     */\n\t    has: function (name, callback) {\n\t      callback(false);\n\t    },\n\t\n\t    get: function () {\n\t      /* NOOP */\n\t    },\n\t\n\t    set: function () {\n\t      /* NOOP */\n\t    }\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function _enlivenCachedObject(cachedObject) {\n\t\n\t    var objects = cachedObject.objects,\n\t        options = cachedObject.options;\n\t\n\t    objects = objects.map(function (o) {\n\t      return fabric[capitalize(o.type)].fromObject(o);\n\t    });\n\t\n\t    return ({ objects: objects, options: options });\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function _createSVGPattern(markup, canvas, property) {\n\t    if (canvas[property] && canvas[property].toSVG) {\n\t      markup.push(\n\t        '<pattern x=\"0\" y=\"0\" id=\"', property, 'Pattern\" ',\n\t          'width=\"', canvas[property].source.width,\n\t          '\" height=\"', canvas[property].source.height,\n\t          '\" patternUnits=\"userSpaceOnUse\">',\n\t        '<image x=\"0\" y=\"0\" ',\n\t        'width=\"', canvas[property].source.width,\n\t        '\" height=\"', canvas[property].source.height,\n\t        '\" xlink:href=\"', canvas[property].source.src,\n\t        '\"></image></pattern>'\n\t      );\n\t    }\n\t  }\n\t\n\t  var reFontDeclaration = new RegExp(\n\t    '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n\t    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n\t      fabric.reNum +\n\t    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\n\t\n\t  extend(fabric, {\n\t    /**\n\t     * Parses a short font declaration, building adding its properties to a style object\n\t     * @static\n\t     * @function\n\t     * @memberOf fabric\n\t     * @param {String} value font declaration\n\t     * @param {Object} oStyle definition\n\t     */\n\t    parseFontDeclaration: function(value, oStyle) {\n\t      var match = value.match(reFontDeclaration);\n\t\n\t      if (!match) {\n\t        return;\n\t      }\n\t      var fontStyle = match[1],\n\t          // font variant is not used\n\t          // fontVariant = match[2],\n\t          fontWeight = match[3],\n\t          fontSize = match[4],\n\t          lineHeight = match[5],\n\t          fontFamily = match[6];\n\t\n\t      if (fontStyle) {\n\t        oStyle.fontStyle = fontStyle;\n\t      }\n\t      if (fontWeight) {\n\t        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\n\t      }\n\t      if (fontSize) {\n\t        oStyle.fontSize = parseUnit(fontSize);\n\t      }\n\t      if (fontFamily) {\n\t        oStyle.fontFamily = fontFamily;\n\t      }\n\t      if (lineHeight) {\n\t        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Parses an SVG document, returning all of the gradient declarations found in it\n\t     * @static\n\t     * @function\n\t     * @memberOf fabric\n\t     * @param {SVGDocument} doc SVG document to parse\n\t     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n\t     */\n\t    getGradientDefs: function(doc) {\n\t      var linearGradientEls = doc.getElementsByTagName('linearGradient'),\n\t          radialGradientEls = doc.getElementsByTagName('radialGradient'),\n\t          el, i, j = 0, id, xlink, elList = [ ],\n\t          gradientDefs = { }, idsToXlinkMap = { };\n\t\n\t      elList.length = linearGradientEls.length + radialGradientEls.length;\n\t      i = linearGradientEls.length;\n\t      while (i--) {\n\t        elList[j++] = linearGradientEls[i];\n\t      }\n\t      i = radialGradientEls.length;\n\t      while (i--) {\n\t        elList[j++] = radialGradientEls[i];\n\t      }\n\t\n\t      while (j--) {\n\t        el = elList[j];\n\t        xlink = el.getAttribute('xlink:href');\n\t        id = el.getAttribute('id');\n\t        if (xlink) {\n\t          idsToXlinkMap[id] = xlink.substr(1);\n\t        }\n\t        gradientDefs[id] = el;\n\t      }\n\t\n\t      for (id in idsToXlinkMap) {\n\t        var el2 = gradientDefs[idsToXlinkMap[id]].cloneNode(true);\n\t        el = gradientDefs[id];\n\t        while (el2.firstChild) {\n\t          el.appendChild(el2.firstChild);\n\t        }\n\t      }\n\t      return gradientDefs;\n\t    },\n\t\n\t    /**\n\t     * Returns an object of attributes' name/value, given element and an array of attribute names;\n\t     * Parses parent \"g\" nodes recursively upwards.\n\t     * @static\n\t     * @memberOf fabric\n\t     * @param {DOMElement} element Element to parse\n\t     * @param {Array} attributes Array of attributes to parse\n\t     * @return {Object} object containing parsed attributes' names/values\n\t     */\n\t    parseAttributes: function(element, attributes, svgUid) {\n\t\n\t      if (!element) {\n\t        return;\n\t      }\n\t\n\t      var value,\n\t          parentAttributes = { },\n\t          fontSize;\n\t\n\t      if (typeof svgUid === 'undefined') {\n\t        svgUid = element.getAttribute('svgUid');\n\t      }\n\t      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n\t      if (element.parentNode && reAllowedParents.test(element.parentNode.nodeName)) {\n\t        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\n\t      }\n\t      fontSize = (parentAttributes && parentAttributes.fontSize ) ||\n\t                 element.getAttribute('font-size') || fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\t\n\t      var ownAttributes = attributes.reduce(function(memo, attr) {\n\t        value = element.getAttribute(attr);\n\t        if (value) {\n\t          attr = normalizeAttr(attr);\n\t          value = normalizeValue(attr, value, parentAttributes, fontSize);\n\t\n\t          memo[attr] = value;\n\t        }\n\t        return memo;\n\t      }, { });\n\t\n\t      // add values parsed from style, which take precedence over attributes\n\t      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n\t      ownAttributes = extend(ownAttributes,\n\t        extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));\n\t      if (ownAttributes.font) {\n\t        fabric.parseFontDeclaration(ownAttributes.font, ownAttributes);\n\t      }\n\t      return _setStrokeFillOpacity(extend(parentAttributes, ownAttributes));\n\t    },\n\t\n\t    /**\n\t     * Transforms an array of svg elements to corresponding fabric.* instances\n\t     * @static\n\t     * @memberOf fabric\n\t     * @param {Array} elements Array of elements to parse\n\t     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\n\t     * @param {Object} [options] Options object\n\t     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n\t     */\n\t    parseElements: function(elements, callback, options, reviver) {\n\t      new fabric.ElementsParser(elements, callback, options, reviver).parse();\n\t    },\n\t\n\t    /**\n\t     * Parses \"style\" attribute, retuning an object with values\n\t     * @static\n\t     * @memberOf fabric\n\t     * @param {SVGElement} element Element to parse\n\t     * @return {Object} Objects with values parsed from style attribute of an element\n\t     */\n\t    parseStyleAttribute: function(element) {\n\t      var oStyle = { },\n\t          style = element.getAttribute('style');\n\t\n\t      if (!style) {\n\t        return oStyle;\n\t      }\n\t\n\t      if (typeof style === 'string') {\n\t        parseStyleString(style, oStyle);\n\t      }\n\t      else {\n\t        parseStyleObject(style, oStyle);\n\t      }\n\t\n\t      return oStyle;\n\t    },\n\t\n\t    /**\n\t     * Parses \"points\" attribute, returning an array of values\n\t     * @static\n\t     * @memberOf fabric\n\t     * @param {String} points points attribute string\n\t     * @return {Array} array of points\n\t     */\n\t    parsePointsAttribute: function(points) {\n\t\n\t      // points attribute is required and must not be empty\n\t      if (!points) {\n\t        return null;\n\t      }\n\t\n\t      // replace commas with whitespace and remove bookending whitespace\n\t      points = points.replace(/,/g, ' ').trim();\n\t\n\t      points = points.split(/\\s+/);\n\t      var parsedPoints = [ ], i, len;\n\t\n\t      i = 0;\n\t      len = points.length;\n\t      for (; i < len; i+=2) {\n\t        parsedPoints.push({\n\t          x: parseFloat(points[i]),\n\t          y: parseFloat(points[i + 1])\n\t        });\n\t      }\n\t\n\t      // odd number of points is an error\n\t      // if (parsedPoints.length % 2 !== 0) {\n\t      //   return null;\n\t      // }\n\t\n\t      return parsedPoints;\n\t    },\n\t\n\t    /**\n\t     * Returns CSS rules for a given SVG document\n\t     * @static\n\t     * @function\n\t     * @memberOf fabric\n\t     * @param {SVGDocument} doc SVG document to parse\n\t     * @return {Object} CSS rules of this document\n\t     */\n\t    getCSSRules: function(doc) {\n\t      var styles = doc.getElementsByTagName('style'),\n\t          allRules = { }, rules;\n\t\n\t      // very crude parsing of style contents\n\t      for (var i = 0, len = styles.length; i < len; i++) {\n\t        var styleContents = styles[i].textContent;\n\t\n\t        // remove comments\n\t        styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n\t        if (styleContents.trim() === '') {\n\t          continue;\n\t        }\n\t        rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n\t        rules = rules.map(function(rule) { return rule.trim(); });\n\t\n\t        rules.forEach(function(rule) {\n\t\n\t          var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\n\t          ruleObj = { }, declaration = match[2].trim(),\n\t          propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\n\t\n\t          for (var i = 0, len = propertyValuePairs.length; i < len; i++) {\n\t            var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\n\t                property = normalizeAttr(pair[0]),\n\t                value = normalizeValue(property, pair[1], pair[0]);\n\t            ruleObj[property] = value;\n\t          }\n\t          rule = match[1];\n\t          rule.split(',').forEach(function(_rule) {\n\t            _rule = _rule.replace(/^svg/i, '').trim();\n\t            if (_rule === '') {\n\t              return;\n\t            }\n\t            allRules[_rule] = fabric.util.object.clone(ruleObj);\n\t          });\n\t        });\n\t      }\n\t      return allRules;\n\t    },\n\t\n\t    /**\n\t     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects. Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n\t     * @memberOf fabric\n\t     * @param {String} url\n\t     * @param {Function} callback\n\t     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n\t     */\n\t    loadSVGFromURL: function(url, callback, reviver) {\n\t\n\t      url = url.replace(/^\\n\\s*/, '').trim();\n\t      svgCache.has(url, function (hasUrl) {\n\t        if (hasUrl) {\n\t          svgCache.get(url, function (value) {\n\t            var enlivedRecord = _enlivenCachedObject(value);\n\t            callback(enlivedRecord.objects, enlivedRecord.options);\n\t          });\n\t        }\n\t        else {\n\t          new fabric.util.request(url, {\n\t            method: 'get',\n\t            onComplete: onComplete\n\t          });\n\t        }\n\t      });\n\t\n\t      function onComplete(r) {\n\t\n\t        var xml = r.responseXML;\n\t        if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\n\t          xml = new ActiveXObject('Microsoft.XMLDOM');\n\t          xml.async = 'false';\n\t          //IE chokes on DOCTYPE\n\t          xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n\t        }\n\t        if (!xml || !xml.documentElement) {\n\t          return;\n\t        }\n\t\n\t        fabric.parseSVGDocument(xml.documentElement, function (results, options) {\n\t          svgCache.set(url, {\n\t            objects: fabric.util.array.invoke(results, 'toObject'),\n\t            options: options\n\t          });\n\t          callback(results, options);\n\t        }, reviver);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n\t     * @memberOf fabric\n\t     * @param {String} string\n\t     * @param {Function} callback\n\t     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n\t     */\n\t    loadSVGFromString: function(string, callback, reviver) {\n\t      string = string.trim();\n\t      var doc;\n\t      if (typeof DOMParser !== 'undefined') {\n\t        var parser = new DOMParser();\n\t        if (parser && parser.parseFromString) {\n\t          doc = parser.parseFromString(string, 'text/xml');\n\t        }\n\t      }\n\t      else if (fabric.window.ActiveXObject) {\n\t        doc = new ActiveXObject('Microsoft.XMLDOM');\n\t        doc.async = 'false';\n\t        // IE chokes on DOCTYPE\n\t        doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n\t      }\n\t\n\t      fabric.parseSVGDocument(doc.documentElement, function (results, options) {\n\t        callback(results, options);\n\t      }, reviver);\n\t    },\n\t\n\t    /**\n\t     * Creates markup containing SVG font faces\n\t     * @param {Array} objects Array of fabric objects\n\t     * @return {String}\n\t     */\n\t    createSVGFontFacesMarkup: function(objects) {\n\t      var markup = '';\n\t\n\t      for (var i = 0, len = objects.length; i < len; i++) {\n\t        if (objects[i].type !== 'text' || !objects[i].path) {\n\t          continue;\n\t        }\n\t\n\t        markup += [\n\t          //jscs:disable validateIndentation\n\t          '@font-face {',\n\t            'font-family: ', objects[i].fontFamily, '; ',\n\t            'src: url(\\'', objects[i].path, '\\')',\n\t          '}'\n\t          //jscs:enable validateIndentation\n\t        ].join('');\n\t      }\n\t\n\t      if (markup) {\n\t        markup = [\n\t          //jscs:disable validateIndentation\n\t          '<style type=\"text/css\">',\n\t            '<![CDATA[',\n\t              markup,\n\t            ']]>',\n\t          '</style>'\n\t          //jscs:enable validateIndentation\n\t        ].join('');\n\t      }\n\t\n\t      return markup;\n\t    },\n\t\n\t    /**\n\t     * Creates markup containing SVG referenced elements like patterns, gradients etc.\n\t     * @param {fabric.Canvas} canvas instance of fabric.Canvas\n\t     * @return {String}\n\t     */\n\t    createSVGRefElementsMarkup: function(canvas) {\n\t      var markup = [ ];\n\t\n\t      _createSVGPattern(markup, canvas, 'backgroundColor');\n\t      _createSVGPattern(markup, canvas, 'overlayColor');\n\t\n\t      return markup.join('');\n\t    }\n\t  });\n\t\n\t})( true ? exports : this);\n\t\n\t\n\tfabric.ElementsParser = function(elements, callback, options, reviver) {\n\t  this.elements = elements;\n\t  this.callback = callback;\n\t  this.options = options;\n\t  this.reviver = reviver;\n\t  this.svgUid = (options && options.svgUid) || 0;\n\t};\n\t\n\tfabric.ElementsParser.prototype.parse = function() {\n\t  this.instances = new Array(this.elements.length);\n\t  this.numElements = this.elements.length;\n\t\n\t  this.createObjects();\n\t};\n\t\n\tfabric.ElementsParser.prototype.createObjects = function() {\n\t  for (var i = 0, len = this.elements.length; i < len; i++) {\n\t    this.elements[i].setAttribute('svgUid', this.svgUid);\n\t    (function(_this, i) {\n\t      setTimeout(function() {\n\t        _this.createObject(_this.elements[i], i);\n\t      }, 0);\n\t    })(this, i);\n\t  }\n\t};\n\t\n\tfabric.ElementsParser.prototype.createObject = function(el, index) {\n\t  var klass = fabric[fabric.util.string.capitalize(el.tagName)];\n\t  if (klass && klass.fromElement) {\n\t    try {\n\t      this._createObject(klass, el, index);\n\t    }\n\t    catch (err) {\n\t      fabric.log(err);\n\t    }\n\t  }\n\t  else {\n\t    this.checkIfDone();\n\t  }\n\t};\n\t\n\tfabric.ElementsParser.prototype._createObject = function(klass, el, index) {\n\t  if (klass.async) {\n\t    klass.fromElement(el, this.createCallback(index, el), this.options);\n\t  }\n\t  else {\n\t    var obj = klass.fromElement(el, this.options);\n\t    this.resolveGradient(obj, 'fill');\n\t    this.resolveGradient(obj, 'stroke');\n\t    this.reviver && this.reviver(el, obj);\n\t    this.instances[index] = obj;\n\t    this.checkIfDone();\n\t  }\n\t};\n\t\n\tfabric.ElementsParser.prototype.createCallback = function(index, el) {\n\t  var _this = this;\n\t  return function(obj) {\n\t    _this.resolveGradient(obj, 'fill');\n\t    _this.resolveGradient(obj, 'stroke');\n\t    _this.reviver && _this.reviver(el, obj);\n\t    _this.instances[index] = obj;\n\t    _this.checkIfDone();\n\t  };\n\t};\n\t\n\tfabric.ElementsParser.prototype.resolveGradient = function(obj, property) {\n\t\n\t  var instanceFillValue = obj.get(property);\n\t  if (!(/^url\\(/).test(instanceFillValue)) {\n\t    return;\n\t  }\n\t  var gradientId = instanceFillValue.slice(5, instanceFillValue.length - 1);\n\t  if (fabric.gradientDefs[this.svgUid][gradientId]) {\n\t    obj.set(property,\n\t      fabric.Gradient.fromElement(fabric.gradientDefs[this.svgUid][gradientId], obj));\n\t  }\n\t};\n\t\n\tfabric.ElementsParser.prototype.checkIfDone = function() {\n\t  if (--this.numElements === 0) {\n\t    this.instances = this.instances.filter(function(el) {\n\t      return el != null;\n\t    });\n\t    this.callback(this.instances);\n\t  }\n\t};\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\t\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Point) {\n\t    fabric.warn('fabric.Point is already defined');\n\t    return;\n\t  }\n\t\n\t  fabric.Point = Point;\n\t\n\t  /**\n\t   * Point class\n\t   * @class fabric.Point\n\t   * @memberOf fabric\n\t   * @constructor\n\t   * @param {Number} x\n\t   * @param {Number} y\n\t   * @return {fabric.Point} thisArg\n\t   */\n\t  function Point(x, y) {\n\t    this.x = x;\n\t    this.y = y;\n\t  }\n\t\n\t  Point.prototype = /** @lends fabric.Point.prototype */ {\n\t\n\t    constructor: Point,\n\t\n\t    /**\n\t     * Adds another point to this one and returns another one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point} new Point instance with added values\n\t     */\n\t    add: function (that) {\n\t      return new Point(this.x + that.x, this.y + that.y);\n\t    },\n\t\n\t    /**\n\t     * Adds another point to this one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    addEquals: function (that) {\n\t      this.x += that.x;\n\t      this.y += that.y;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Adds value to this point and returns a new one\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} new Point with added value\n\t     */\n\t    scalarAdd: function (scalar) {\n\t      return new Point(this.x + scalar, this.y + scalar);\n\t    },\n\t\n\t    /**\n\t     * Adds value to this point\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    scalarAddEquals: function (scalar) {\n\t      this.x += scalar;\n\t      this.y += scalar;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Subtracts another point from this point and returns a new one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point} new Point object with subtracted values\n\t     */\n\t    subtract: function (that) {\n\t      return new Point(this.x - that.x, this.y - that.y);\n\t    },\n\t\n\t    /**\n\t     * Subtracts another point from this point\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    subtractEquals: function (that) {\n\t      this.x -= that.x;\n\t      this.y -= that.y;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Subtracts value from this point and returns a new one\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point}\n\t     */\n\t    scalarSubtract: function (scalar) {\n\t      return new Point(this.x - scalar, this.y - scalar);\n\t    },\n\t\n\t    /**\n\t     * Subtracts value from this point\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    scalarSubtractEquals: function (scalar) {\n\t      this.x -= scalar;\n\t      this.y -= scalar;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Miltiplies this point by a value and returns a new one\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point}\n\t     */\n\t    multiply: function (scalar) {\n\t      return new Point(this.x * scalar, this.y * scalar);\n\t    },\n\t\n\t    /**\n\t     * Miltiplies this point by a value\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    multiplyEquals: function (scalar) {\n\t      this.x *= scalar;\n\t      this.y *= scalar;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Divides this point by a value and returns a new one\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point}\n\t     */\n\t    divide: function (scalar) {\n\t      return new Point(this.x / scalar, this.y / scalar);\n\t    },\n\t\n\t    /**\n\t     * Divides this point by a value\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    divideEquals: function (scalar) {\n\t      this.x /= scalar;\n\t      this.y /= scalar;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns true if this point is equal to another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    eq: function (that) {\n\t      return (this.x === that.x && this.y === that.y);\n\t    },\n\t\n\t    /**\n\t     * Returns true if this point is less than another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    lt: function (that) {\n\t      return (this.x < that.x && this.y < that.y);\n\t    },\n\t\n\t    /**\n\t     * Returns true if this point is less than or equal to another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    lte: function (that) {\n\t      return (this.x <= that.x && this.y <= that.y);\n\t    },\n\t\n\t    /**\n\t\n\t     * Returns true if this point is greater another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    gt: function (that) {\n\t      return (this.x > that.x && this.y > that.y);\n\t    },\n\t\n\t    /**\n\t     * Returns true if this point is greater than or equal to another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    gte: function (that) {\n\t      return (this.x >= that.x && this.y >= that.y);\n\t    },\n\t\n\t    /**\n\t     * Returns new point which is the result of linear interpolation with this one and another one\n\t     * @param {fabric.Point} that\n\t     * @param {Number} t\n\t     * @return {fabric.Point}\n\t     */\n\t    lerp: function (that, t) {\n\t      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n\t    },\n\t\n\t    /**\n\t     * Returns distance from this point and another one\n\t     * @param {fabric.Point} that\n\t     * @return {Number}\n\t     */\n\t    distanceFrom: function (that) {\n\t      var dx = this.x - that.x,\n\t          dy = this.y - that.y;\n\t      return Math.sqrt(dx * dx + dy * dy);\n\t    },\n\t\n\t    /**\n\t     * Returns the point between this point and another one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point}\n\t     */\n\t    midPointFrom: function (that) {\n\t      return new Point(this.x + (that.x - this.x)/2, this.y + (that.y - this.y)/2);\n\t    },\n\t\n\t    /**\n\t     * Returns a new point which is the min of this and another one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point}\n\t     */\n\t    min: function (that) {\n\t      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n\t    },\n\t\n\t    /**\n\t     * Returns a new point which is the max of this and another one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point}\n\t     */\n\t    max: function (that) {\n\t      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of this point\n\t     * @return {String}\n\t     */\n\t    toString: function () {\n\t      return this.x + ',' + this.y;\n\t    },\n\t\n\t    /**\n\t     * Sets x/y of this point\n\t     * @param {Number} x\n\t     * @param {Number} y\n\t     */\n\t    setXY: function (x, y) {\n\t      this.x = x;\n\t      this.y = y;\n\t    },\n\t\n\t    /**\n\t     * Sets x/y of this point from another point\n\t     * @param {fabric.Point} that\n\t     */\n\t    setFromPoint: function (that) {\n\t      this.x = that.x;\n\t      this.y = that.y;\n\t    },\n\t\n\t    /**\n\t     * Swaps x/y of this point and another point\n\t     * @param {fabric.Point} that\n\t     */\n\t    swap: function (that) {\n\t      var x = this.x,\n\t          y = this.y;\n\t      this.x = that.x;\n\t      this.y = that.y;\n\t      that.x = x;\n\t      that.y = y;\n\t    }\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Intersection) {\n\t    fabric.warn('fabric.Intersection is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Intersection class\n\t   * @class fabric.Intersection\n\t   * @memberOf fabric\n\t   * @constructor\n\t   */\n\t  function Intersection(status) {\n\t    this.status = status;\n\t    this.points = [];\n\t  }\n\t\n\t  fabric.Intersection = Intersection;\n\t\n\t  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n\t\n\t    /**\n\t     * Appends a point to intersection\n\t     * @param {fabric.Point} point\n\t     */\n\t    appendPoint: function (point) {\n\t      this.points.push(point);\n\t    },\n\t\n\t    /**\n\t     * Appends points to intersection\n\t     * @param {Array} points\n\t     */\n\t    appendPoints: function (points) {\n\t      this.points = this.points.concat(points);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Checks if one line intersects another\n\t   * @static\n\t   * @param {fabric.Point} a1\n\t   * @param {fabric.Point} a2\n\t   * @param {fabric.Point} b1\n\t   * @param {fabric.Point} b2\n\t   * @return {fabric.Intersection}\n\t   */\n\t  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\n\t    var result,\n\t        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n\t        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n\t        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\t    if (uB !== 0) {\n\t      var ua = uaT / uB,\n\t          ub = ubT / uB;\n\t      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n\t        result = new Intersection('Intersection');\n\t        result.points.push(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n\t      }\n\t      else {\n\t        result = new Intersection();\n\t      }\n\t    }\n\t    else {\n\t      if (uaT === 0 || ubT === 0) {\n\t        result = new Intersection('Coincident');\n\t      }\n\t      else {\n\t        result = new Intersection('Parallel');\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * Checks if line intersects polygon\n\t   * @static\n\t   * @param {fabric.Point} a1\n\t   * @param {fabric.Point} a2\n\t   * @param {Array} points\n\t   * @return {fabric.Intersection}\n\t   */\n\t  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n\t    var result = new Intersection(),\n\t        length = points.length;\n\t\n\t    for (var i = 0; i < length; i++) {\n\t      var b1 = points[i],\n\t          b2 = points[(i + 1) % length],\n\t          inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\t\n\t      result.appendPoints(inter.points);\n\t    }\n\t    if (result.points.length > 0) {\n\t      result.status = 'Intersection';\n\t    }\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * Checks if polygon intersects another polygon\n\t   * @static\n\t   * @param {Array} points1\n\t   * @param {Array} points2\n\t   * @return {fabric.Intersection}\n\t   */\n\t  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\n\t    var result = new Intersection(),\n\t        length = points1.length;\n\t\n\t    for (var i = 0; i < length; i++) {\n\t      var a1 = points1[i],\n\t          a2 = points1[(i + 1) % length],\n\t          inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\t\n\t      result.appendPoints(inter.points);\n\t    }\n\t    if (result.points.length > 0) {\n\t      result.status = 'Intersection';\n\t    }\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * Checks if polygon intersects rectangle\n\t   * @static\n\t   * @param {Array} points\n\t   * @param {Number} r1\n\t   * @param {Number} r2\n\t   * @return {fabric.Intersection}\n\t   */\n\t  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\n\t    var min = r1.min(r2),\n\t        max = r1.max(r2),\n\t        topRight = new fabric.Point(max.x, min.y),\n\t        bottomLeft = new fabric.Point(min.x, max.y),\n\t        inter1 = Intersection.intersectLinePolygon(min, topRight, points),\n\t        inter2 = Intersection.intersectLinePolygon(topRight, max, points),\n\t        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\n\t        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\n\t        result = new Intersection();\n\t\n\t    result.appendPoints(inter1.points);\n\t    result.appendPoints(inter2.points);\n\t    result.appendPoints(inter3.points);\n\t    result.appendPoints(inter4.points);\n\t\n\t    if (result.points.length > 0) {\n\t      result.status = 'Intersection';\n\t    }\n\t    return result;\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Color) {\n\t    fabric.warn('fabric.Color is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Color class\n\t   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n\t   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n\t   *\n\t   * @class fabric.Color\n\t   * @param {String} color optional in hex or rgb(a) format\n\t   * @return {fabric.Color} thisArg\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n\t   */\n\t  function Color(color) {\n\t    if (!color) {\n\t      this.setSource([0, 0, 0, 1]);\n\t    }\n\t    else {\n\t      this._tryParsingColor(color);\n\t    }\n\t  }\n\t\n\t  fabric.Color = Color;\n\t\n\t  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n\t\n\t    /**\n\t     * @private\n\t     * @param {String|Array} color Color value to parse\n\t     */\n\t    _tryParsingColor: function(color) {\n\t      var source;\n\t\n\t      if (color in Color.colorNameMap) {\n\t        color = Color.colorNameMap[color];\n\t      }\n\t\n\t      if (color === 'transparent') {\n\t        this.setSource([255, 255, 255, 0]);\n\t        return;\n\t      }\n\t\n\t      source = Color.sourceFromHex(color);\n\t\n\t      if (!source) {\n\t        source = Color.sourceFromRgb(color);\n\t      }\n\t      if (!source) {\n\t        source = Color.sourceFromHsl(color);\n\t      }\n\t      if (source) {\n\t        this.setSource(source);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n\t     * @private\n\t     * @param {Number} r Red color value\n\t     * @param {Number} g Green color value\n\t     * @param {Number} b Blue color value\n\t     * @return {Array} Hsl color\n\t     */\n\t    _rgbToHsl: function(r, g, b) {\n\t      r /= 255, g /= 255, b /= 255;\n\t\n\t      var h, s, l,\n\t          max = fabric.util.array.max([r, g, b]),\n\t          min = fabric.util.array.min([r, g, b]);\n\t\n\t      l = (max + min) / 2;\n\t\n\t      if (max === min) {\n\t        h = s = 0; // achromatic\n\t      }\n\t      else {\n\t        var d = max - min;\n\t        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t        switch (max) {\n\t          case r:\n\t            h = (g - b) / d + (g < b ? 6 : 0);\n\t            break;\n\t          case g:\n\t            h = (b - r) / d + 2;\n\t            break;\n\t          case b:\n\t            h = (r - g) / d + 4;\n\t            break;\n\t        }\n\t        h /= 6;\n\t      }\n\t\n\t      return [\n\t        Math.round(h * 360),\n\t        Math.round(s * 100),\n\t        Math.round(l * 100)\n\t      ];\n\t    },\n\t\n\t    /**\n\t     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n\t     * @return {Array}\n\t     */\n\t    getSource: function() {\n\t      return this._source;\n\t    },\n\t\n\t    /**\n\t     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n\t     * @param {Array} source\n\t     */\n\t    setSource: function(source) {\n\t      this._source = source;\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in RGB format\n\t     * @return {String} ex: rgb(0-255,0-255,0-255)\n\t     */\n\t    toRgb: function() {\n\t      var source = this.getSource();\n\t      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in RGBA format\n\t     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n\t     */\n\t    toRgba: function() {\n\t      var source = this.getSource();\n\t      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in HSL format\n\t     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n\t     */\n\t    toHsl: function() {\n\t      var source = this.getSource(),\n\t          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\t\n\t      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in HSLA format\n\t     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n\t     */\n\t    toHsla: function() {\n\t      var source = this.getSource(),\n\t          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\t\n\t      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in HEX format\n\t     * @return {String} ex: FF5555\n\t     */\n\t    toHex: function() {\n\t      var source = this.getSource(), r, g, b;\n\t\n\t      r = source[0].toString(16);\n\t      r = (r.length === 1) ? ('0' + r) : r;\n\t\n\t      g = source[1].toString(16);\n\t      g = (g.length === 1) ? ('0' + g) : g;\n\t\n\t      b = source[2].toString(16);\n\t      b = (b.length === 1) ? ('0' + b) : b;\n\t\n\t      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n\t    },\n\t\n\t    /**\n\t     * Gets value of alpha channel for this color\n\t     * @return {Number} 0-1\n\t     */\n\t    getAlpha: function() {\n\t      return this.getSource()[3];\n\t    },\n\t\n\t    /**\n\t     * Sets value of alpha channel for this color\n\t     * @param {Number} alpha Alpha value 0-1\n\t     * @return {fabric.Color} thisArg\n\t     */\n\t    setAlpha: function(alpha) {\n\t      var source = this.getSource();\n\t      source[3] = alpha;\n\t      this.setSource(source);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Transforms color to its grayscale representation\n\t     * @return {fabric.Color} thisArg\n\t     */\n\t    toGrayscale: function() {\n\t      var source = this.getSource(),\n\t          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\n\t          currentAlpha = source[3];\n\t      this.setSource([average, average, average, currentAlpha]);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Transforms color to its black and white representation\n\t     * @param {Number} threshold\n\t     * @return {fabric.Color} thisArg\n\t     */\n\t    toBlackWhite: function(threshold) {\n\t      var source = this.getSource(),\n\t          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\n\t          currentAlpha = source[3];\n\t\n\t      threshold = threshold || 127;\n\t\n\t      average = (Number(average) < Number(threshold)) ? 0 : 255;\n\t      this.setSource([average, average, average, currentAlpha]);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Overlays color with another color\n\t     * @param {String|fabric.Color} otherColor\n\t     * @return {fabric.Color} thisArg\n\t     */\n\t    overlayWith: function(otherColor) {\n\t      if (!(otherColor instanceof Color)) {\n\t        otherColor = new Color(otherColor);\n\t      }\n\t\n\t      var result = [],\n\t          alpha = this.getAlpha(),\n\t          otherAlpha = 0.5,\n\t          source = this.getSource(),\n\t          otherSource = otherColor.getSource();\n\t\n\t      for (var i = 0; i < 3; i++) {\n\t        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\n\t      }\n\t\n\t      result[3] = alpha;\n\t      this.setSource(result);\n\t      return this;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Color\n\t   */\n\t  fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/;\n\t\n\t  /**\n\t   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Color\n\t   */\n\t  fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/;\n\t\n\t  /**\n\t   * Regex matching color in HEX format (ex: #FF5555, 010155, aff)\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Color\n\t   */\n\t  fabric.Color.reHex = /^#?([0-9a-f]{6}|[0-9a-f]{3})$/i;\n\t\n\t  /**\n\t   * Map of the 17 basic color names with HEX code\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Color\n\t   * @see: http://www.w3.org/TR/CSS2/syndata.html#color-units\n\t   */\n\t  fabric.Color.colorNameMap = {\n\t    aqua:    '#00FFFF',\n\t    black:   '#000000',\n\t    blue:    '#0000FF',\n\t    fuchsia: '#FF00FF',\n\t    gray:    '#808080',\n\t    green:   '#008000',\n\t    lime:    '#00FF00',\n\t    maroon:  '#800000',\n\t    navy:    '#000080',\n\t    olive:   '#808000',\n\t    orange:  '#FFA500',\n\t    purple:  '#800080',\n\t    red:     '#FF0000',\n\t    silver:  '#C0C0C0',\n\t    teal:    '#008080',\n\t    white:   '#FFFFFF',\n\t    yellow:  '#FFFF00'\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   * @param {Number} p\n\t   * @param {Number} q\n\t   * @param {Number} t\n\t   * @return {Number}\n\t   */\n\t  function hue2rgb(p, q, t) {\n\t    if (t < 0) {\n\t      t += 1;\n\t    }\n\t    if (t > 1) {\n\t      t -= 1;\n\t    }\n\t    if (t < 1/6) {\n\t      return p + (q - p) * 6 * t;\n\t    }\n\t    if (t < 1/2) {\n\t      return q;\n\t    }\n\t    if (t < 2/3) {\n\t      return p + (q - p) * (2/3 - t) * 6;\n\t    }\n\t    return p;\n\t  }\n\t\n\t  /**\n\t   * Returns new color object, when given a color in RGB format\n\t   * @memberOf fabric.Color\n\t   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromRgb = function(color) {\n\t    return Color.fromSource(Color.sourceFromRgb(color));\n\t  };\n\t\n\t  /**\n\t   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n\t   * @memberOf fabric.Color\n\t   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n\t   * @return {Array} source\n\t   */\n\t  fabric.Color.sourceFromRgb = function(color) {\n\t    var match = color.match(Color.reRGBa);\n\t    if (match) {\n\t      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\n\t          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\n\t          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n\t\n\t      return [\n\t        parseInt(r, 10),\n\t        parseInt(g, 10),\n\t        parseInt(b, 10),\n\t        match[4] ? parseFloat(match[4]) : 1\n\t      ];\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Returns new color object, when given a color in RGBA format\n\t   * @static\n\t   * @function\n\t   * @memberOf fabric.Color\n\t   * @param {String} color\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromRgba = Color.fromRgb;\n\t\n\t  /**\n\t   * Returns new color object, when given a color in HSL format\n\t   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n\t   * @memberOf fabric.Color\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromHsl = function(color) {\n\t    return Color.fromSource(Color.sourceFromHsl(color));\n\t  };\n\t\n\t  /**\n\t   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n\t   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n\t   * @memberOf fabric.Color\n\t   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n\t   * @return {Array} source\n\t   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n\t   */\n\t  fabric.Color.sourceFromHsl = function(color) {\n\t    var match = color.match(Color.reHSLa);\n\t    if (!match) {\n\t      return;\n\t    }\n\t\n\t    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n\t        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\n\t        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\n\t        r, g, b;\n\t\n\t    if (s === 0) {\n\t      r = g = b = l;\n\t    }\n\t    else {\n\t      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n\t          p = l * 2 - q;\n\t\n\t      r = hue2rgb(p, q, h + 1/3);\n\t      g = hue2rgb(p, q, h);\n\t      b = hue2rgb(p, q, h - 1/3);\n\t    }\n\t\n\t    return [\n\t      Math.round(r * 255),\n\t      Math.round(g * 255),\n\t      Math.round(b * 255),\n\t      match[4] ? parseFloat(match[4]) : 1\n\t    ];\n\t  };\n\t\n\t  /**\n\t   * Returns new color object, when given a color in HSLA format\n\t   * @static\n\t   * @function\n\t   * @memberOf fabric.Color\n\t   * @param {String} color\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromHsla = Color.fromHsl;\n\t\n\t  /**\n\t   * Returns new color object, when given a color in HEX format\n\t   * @static\n\t   * @memberOf fabric.Color\n\t   * @param {String} color Color value ex: FF5555\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromHex = function(color) {\n\t    return Color.fromSource(Color.sourceFromHex(color));\n\t  };\n\t\n\t  /**\n\t   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n\t   * @static\n\t   * @memberOf fabric.Color\n\t   * @param {String} color ex: FF5555\n\t   * @return {Array} source\n\t   */\n\t  fabric.Color.sourceFromHex = function(color) {\n\t    if (color.match(Color.reHex)) {\n\t      var value = color.slice(color.indexOf('#') + 1),\n\t          isShortNotation = (value.length === 3),\n\t          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\n\t          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\n\t          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6);\n\t\n\t      return [\n\t        parseInt(r, 16),\n\t        parseInt(g, 16),\n\t        parseInt(b, 16),\n\t        1\n\t      ];\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n\t   * @static\n\t   * @memberOf fabric.Color\n\t   * @param {Array} source\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromSource = function(source) {\n\t    var oColor = new Color();\n\t    oColor.setSource(source);\n\t    return oColor;\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  /* _FROM_SVG_START_ */\n\t  function getColorStop(el) {\n\t    var style = el.getAttribute('style'),\n\t        offset = el.getAttribute('offset'),\n\t        color, colorAlpha, opacity;\n\t\n\t    // convert percents to absolute values\n\t    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\n\t    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\n\t    if (style) {\n\t      var keyValuePairs = style.split(/\\s*;\\s*/);\n\t\n\t      if (keyValuePairs[keyValuePairs.length - 1] === '') {\n\t        keyValuePairs.pop();\n\t      }\n\t\n\t      for (var i = keyValuePairs.length; i--; ) {\n\t\n\t        var split = keyValuePairs[i].split(/\\s*:\\s*/),\n\t            key = split[0].trim(),\n\t            value = split[1].trim();\n\t\n\t        if (key === 'stop-color') {\n\t          color = value;\n\t        }\n\t        else if (key === 'stop-opacity') {\n\t          opacity = value;\n\t        }\n\t      }\n\t    }\n\t\n\t    if (!color) {\n\t      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\n\t    }\n\t    if (!opacity) {\n\t      opacity = el.getAttribute('stop-opacity');\n\t    }\n\t\n\t    color = new fabric.Color(color);\n\t    colorAlpha = color.getAlpha();\n\t    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\n\t    opacity *= colorAlpha;\n\t\n\t    return {\n\t      offset: offset,\n\t      color: color.toRgb(),\n\t      opacity: opacity\n\t    };\n\t  }\n\t\n\t  function getLinearCoords(el) {\n\t    return {\n\t      x1: el.getAttribute('x1') || 0,\n\t      y1: el.getAttribute('y1') || 0,\n\t      x2: el.getAttribute('x2') || '100%',\n\t      y2: el.getAttribute('y2') || 0\n\t    };\n\t  }\n\t\n\t  function getRadialCoords(el) {\n\t    return {\n\t      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\n\t      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\n\t      r1: 0,\n\t      x2: el.getAttribute('cx') || '50%',\n\t      y2: el.getAttribute('cy') || '50%',\n\t      r2: el.getAttribute('r') || '50%'\n\t    };\n\t  }\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Gradient class\n\t   * @class fabric.Gradient\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#gradients}\n\t   * @see {@link fabric.Gradient#initialize} for constructor definition\n\t   */\n\t  fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\n\t\n\t    /**\n\t     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n\t     * @type Number\n\t     * @default 0\n\t     */\n\t    offsetX: 0,\n\t\n\t    /**\n\t     * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n\t     * @type Number\n\t     * @default 0\n\t     */\n\t    offsetY: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops\n\t     * @return {fabric.Gradient} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options || (options = { });\n\t\n\t      var coords = { };\n\t\n\t      this.id = fabric.Object.__uid++;\n\t      this.type = options.type || 'linear';\n\t\n\t      coords = {\n\t        x1: options.coords.x1 || 0,\n\t        y1: options.coords.y1 || 0,\n\t        x2: options.coords.x2 || 0,\n\t        y2: options.coords.y2 || 0\n\t      };\n\t\n\t      if (this.type === 'radial') {\n\t        coords.r1 = options.coords.r1 || 0;\n\t        coords.r2 = options.coords.r2 || 0;\n\t      }\n\t      this.coords = coords;\n\t      this.colorStops = options.colorStops.slice();\n\t      if (options.gradientTransform) {\n\t        this.gradientTransform = options.gradientTransform;\n\t      }\n\t      this.offsetX = options.offsetX || this.offsetX;\n\t      this.offsetY = options.offsetY || this.offsetY;\n\t    },\n\t\n\t    /**\n\t     * Adds another colorStop\n\t     * @param {Object} colorStop Object with offset and color\n\t     * @return {fabric.Gradient} thisArg\n\t     */\n\t    addColorStop: function(colorStop) {\n\t      for (var position in colorStop) {\n\t        var color = new fabric.Color(colorStop[position]);\n\t        this.colorStops.push({\n\t          offset: position,\n\t          color: color.toRgb(),\n\t          opacity: color.getAlpha()\n\t        });\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of a gradient\n\t     * @return {Object}\n\t     */\n\t    toObject: function() {\n\t      return {\n\t        type: this.type,\n\t        coords: this.coords,\n\t        colorStops: this.colorStops,\n\t        offsetX: this.offsetX,\n\t        offsetY: this.offsetY\n\t      };\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an gradient\n\t     * @param {Object} object Object to create a gradient for\n\t     * @param {Boolean} normalize Whether coords should be normalized\n\t     * @return {String} SVG representation of an gradient (linear/radial)\n\t     */\n\t    toSVG: function(object) {\n\t      var coords = fabric.util.object.clone(this.coords),\n\t          markup, commonAttributes;\n\t\n\t      // colorStops must be sorted ascending\n\t      this.colorStops.sort(function(a, b) {\n\t        return a.offset - b.offset;\n\t      });\n\t\n\t      if (!(object.group && object.group.type === 'path-group')) {\n\t        for (var prop in coords) {\n\t          if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n\t            coords[prop] += this.offsetX - object.width / 2;\n\t          }\n\t          else if (prop === 'y1' || prop === 'y2') {\n\t            coords[prop] += this.offsetY - object.height / 2;\n\t          }\n\t        }\n\t      }\n\t\n\t      commonAttributes = 'id=\"SVGID_' + this.id +\n\t                     '\" gradientUnits=\"userSpaceOnUse\"';\n\t      if (this.gradientTransform) {\n\t        commonAttributes += ' gradientTransform=\"matrix(' + this.gradientTransform.join(' ') + ')\" ';\n\t      }\n\t      if (this.type === 'linear') {\n\t        markup = [\n\t          //jscs:disable validateIndentation\n\t          '<linearGradient ',\n\t            commonAttributes,\n\t            ' x1=\"', coords.x1,\n\t            '\" y1=\"', coords.y1,\n\t            '\" x2=\"', coords.x2,\n\t            '\" y2=\"', coords.y2,\n\t          '\">\\n'\n\t          //jscs:enable validateIndentation\n\t        ];\n\t      }\n\t      else if (this.type === 'radial') {\n\t        markup = [\n\t          //jscs:disable validateIndentation\n\t          '<radialGradient ',\n\t            commonAttributes,\n\t            ' cx=\"', coords.x2,\n\t            '\" cy=\"', coords.y2,\n\t            '\" r=\"', coords.r2,\n\t            '\" fx=\"', coords.x1,\n\t            '\" fy=\"', coords.y1,\n\t          '\">\\n'\n\t          //jscs:enable validateIndentation\n\t        ];\n\t      }\n\t\n\t      for (var i = 0; i < this.colorStops.length; i++) {\n\t        markup.push(\n\t          //jscs:disable validateIndentation\n\t          '<stop ',\n\t            'offset=\"', (this.colorStops[i].offset * 100) + '%',\n\t            '\" style=\"stop-color:', this.colorStops[i].color,\n\t            (this.colorStops[i].opacity != null ? ';stop-opacity: ' + this.colorStops[i].opacity : ';'),\n\t          '\"/>\\n'\n\t          //jscs:enable validateIndentation\n\t        );\n\t      }\n\t\n\t      markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\n\t\n\t      return markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns an instance of CanvasGradient\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @return {CanvasGradient}\n\t     */\n\t    toLive: function(ctx, object) {\n\t      var gradient, prop, coords = fabric.util.object.clone(this.coords);\n\t\n\t      if (!this.type) {\n\t        return;\n\t      }\n\t\n\t      if (object.group && object.group.type === 'path-group') {\n\t        for (prop in coords) {\n\t          if (prop === 'x1' || prop === 'x2') {\n\t            coords[prop] += -this.offsetX + object.width / 2;\n\t          }\n\t          else if (prop === 'y1' || prop === 'y2') {\n\t            coords[prop] += -this.offsetY + object.height / 2;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.type === 'linear') {\n\t        gradient = ctx.createLinearGradient(\n\t          coords.x1, coords.y1, coords.x2, coords.y2);\n\t      }\n\t      else if (this.type === 'radial') {\n\t        gradient = ctx.createRadialGradient(\n\t          coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);\n\t      }\n\t\n\t      for (var i = 0, len = this.colorStops.length; i < len; i++) {\n\t        var color = this.colorStops[i].color,\n\t            opacity = this.colorStops[i].opacity,\n\t            offset = this.colorStops[i].offset;\n\t\n\t        if (typeof opacity !== 'undefined') {\n\t          color = new fabric.Color(color).setAlpha(opacity).toRgba();\n\t        }\n\t        gradient.addColorStop(parseFloat(offset), color);\n\t      }\n\t\n\t      return gradient;\n\t    }\n\t  });\n\t\n\t  fabric.util.object.extend(fabric.Gradient, {\n\t\n\t    /* _FROM_SVG_START_ */\n\t    /**\n\t     * Returns {@link fabric.Gradient} instance from an SVG element\n\t     * @static\n\t     * @memberOf fabric.Gradient\n\t     * @param {SVGGradientElement} el SVG gradient element\n\t     * @param {fabric.Object} instance\n\t     * @return {fabric.Gradient} Gradient instance\n\t     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n\t     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n\t     */\n\t    fromElement: function(el, instance) {\n\t\n\t      /**\n\t       *  @example:\n\t       *\n\t       *  <linearGradient id=\"linearGrad1\">\n\t       *    <stop offset=\"0%\" stop-color=\"white\"/>\n\t       *    <stop offset=\"100%\" stop-color=\"black\"/>\n\t       *  </linearGradient>\n\t       *\n\t       *  OR\n\t       *\n\t       *  <linearGradient id=\"linearGrad2\">\n\t       *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n\t       *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n\t       *  </linearGradient>\n\t       *\n\t       *  OR\n\t       *\n\t       *  <radialGradient id=\"radialGrad1\">\n\t       *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n\t       *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n\t       *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n\t       *  </radialGradient>\n\t       *\n\t       *  OR\n\t       *\n\t       *  <radialGradient id=\"radialGrad2\">\n\t       *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n\t       *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n\t       *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n\t       *  </radialGradient>\n\t       *\n\t       */\n\t\n\t      var colorStopEls = el.getElementsByTagName('stop'),\n\t          type = (el.nodeName === 'linearGradient' ? 'linear' : 'radial'),\n\t          gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',\n\t          gradientTransform = el.getAttribute('gradientTransform'),\n\t          colorStops = [],\n\t          coords = { }, ellipseMatrix;\n\t\n\t      if (type === 'linear') {\n\t        coords = getLinearCoords(el);\n\t      }\n\t      else if (type === 'radial') {\n\t        coords = getRadialCoords(el);\n\t      }\n\t\n\t      for (var i = colorStopEls.length; i--; ) {\n\t        colorStops.push(getColorStop(colorStopEls[i]));\n\t      }\n\t\n\t      ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);\n\t\n\t      var gradient = new fabric.Gradient({\n\t        type: type,\n\t        coords: coords,\n\t        colorStops: colorStops,\n\t        offsetX: -instance.left,\n\t        offsetY: -instance.top\n\t      });\n\t\n\t      if (gradientTransform || ellipseMatrix !== '') {\n\t        gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);\n\t      }\n\t      return gradient;\n\t    },\n\t    /* _FROM_SVG_END_ */\n\t\n\t    /**\n\t     * Returns {@link fabric.Gradient} instance from its object representation\n\t     * @static\n\t     * @memberOf fabric.Gradient\n\t     * @param {Object} obj\n\t     * @param {Object} [options] Options object\n\t     */\n\t    forObject: function(obj, options) {\n\t      options || (options = { });\n\t      _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');\n\t      return new fabric.Gradient(options);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function _convertPercentUnitsToValues(object, options, gradientUnits) {\n\t    var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';\n\t    for (var prop in options) {\n\t      propValue = parseFloat(options[prop], 10);\n\t      if (typeof options[prop] === 'string' && /^\\d+%$/.test(options[prop])) {\n\t        multFactor = 0.01;\n\t      }\n\t      else {\n\t        multFactor = 1;\n\t      }\n\t      if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n\t        multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;\n\t        addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;\n\t      }\n\t      else if (prop === 'y1' || prop === 'y2') {\n\t        multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;\n\t        addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;\n\t      }\n\t      options[prop] = propValue * multFactor + addFactor;\n\t    }\n\t    if (object.type === 'ellipse' &&\n\t        options.r2 !== null &&\n\t        gradientUnits === 'objectBoundingBox' &&\n\t        object.rx !== object.ry) {\n\t\n\t      var scaleFactor = object.ry/object.rx;\n\t      ellipseMatrix = ' scale(1, ' + scaleFactor + ')';\n\t      if (options.y1) {\n\t        options.y1 /= scaleFactor;\n\t      }\n\t      if (options.y2) {\n\t        options.y2 /= scaleFactor;\n\t      }\n\t    }\n\t    return ellipseMatrix;\n\t  }\n\t})();\n\t\n\t\n\t/**\n\t * Pattern class\n\t * @class fabric.Pattern\n\t * @see {@link http://fabricjs.com/patterns/|Pattern demo}\n\t * @see {@link http://fabricjs.com/dynamic-patterns/|DynamicPattern demo}\n\t * @see {@link fabric.Pattern#initialize} for constructor definition\n\t */\n\tfabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\n\t\n\t  /**\n\t   * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n\t   * @type String\n\t   * @default\n\t   */\n\t  repeat: 'repeat',\n\t\n\t  /**\n\t   * Pattern horizontal offset from object's left/top corner\n\t   * @type Number\n\t   * @default\n\t   */\n\t  offsetX: 0,\n\t\n\t  /**\n\t   * Pattern vertical offset from object's left/top corner\n\t   * @type Number\n\t   * @default\n\t   */\n\t  offsetY: 0,\n\t\n\t  /**\n\t   * Constructor\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Pattern} thisArg\n\t   */\n\t  initialize: function(options) {\n\t    options || (options = { });\n\t\n\t    this.id = fabric.Object.__uid++;\n\t\n\t    if (options.source) {\n\t      if (typeof options.source === 'string') {\n\t        // function string\n\t        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\n\t          this.source = new Function(fabric.util.getFunctionBody(options.source));\n\t        }\n\t        else {\n\t          // img src string\n\t          var _this = this;\n\t          this.source = fabric.util.createImage();\n\t          fabric.util.loadImage(options.source, function(img) {\n\t            _this.source = img;\n\t          });\n\t        }\n\t      }\n\t      else {\n\t        // img element\n\t        this.source = options.source;\n\t      }\n\t    }\n\t    if (options.repeat) {\n\t      this.repeat = options.repeat;\n\t    }\n\t    if (options.offsetX) {\n\t      this.offsetX = options.offsetX;\n\t    }\n\t    if (options.offsetY) {\n\t      this.offsetY = options.offsetY;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns object representation of a pattern\n\t   * @return {Object} Object representation of a pattern instance\n\t   */\n\t  toObject: function() {\n\t\n\t    var source;\n\t\n\t    // callback\n\t    if (typeof this.source === 'function') {\n\t      source = String(this.source);\n\t    }\n\t    // <img> element\n\t    else if (typeof this.source.src === 'string') {\n\t      source = this.source.src;\n\t    }\n\t    // <canvas> element\n\t    else if (typeof this.source === 'object' && this.source.toDataURL) {\n\t      source = this.source.toDataURL();\n\t    }\n\t\n\t    return {\n\t      source: source,\n\t      repeat: this.repeat,\n\t      offsetX: this.offsetX,\n\t      offsetY: this.offsetY\n\t    };\n\t  },\n\t\n\t  /* _TO_SVG_START_ */\n\t  /**\n\t   * Returns SVG representation of a pattern\n\t   * @param {fabric.Object} object\n\t   * @return {String} SVG representation of a pattern\n\t   */\n\t  toSVG: function(object) {\n\t    var patternSource = typeof this.source === 'function' ? this.source() : this.source,\n\t        patternWidth = patternSource.width / object.getWidth(),\n\t        patternHeight = patternSource.height / object.getHeight(),\n\t        patternOffsetX = this.offsetX / object.getWidth(),\n\t        patternOffsetY = this.offsetY / object.getHeight(),\n\t        patternImgSrc = '';\n\t    if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\n\t      patternHeight = 1;\n\t    }\n\t    if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\n\t      patternWidth = 1;\n\t    }\n\t    if (patternSource.src) {\n\t      patternImgSrc = patternSource.src;\n\t    }\n\t    else if (patternSource.toDataURL) {\n\t      patternImgSrc = patternSource.toDataURL();\n\t    }\n\t\n\t    return '<pattern id=\"SVGID_' + this.id +\n\t                  '\" x=\"' + patternOffsetX +\n\t                  '\" y=\"' + patternOffsetY +\n\t                  '\" width=\"' + patternWidth +\n\t                  '\" height=\"' + patternHeight + '\">\\n' +\n\t             '<image x=\"0\" y=\"0\"' +\n\t                    ' width=\"' + patternSource.width +\n\t                    '\" height=\"' + patternSource.height +\n\t                    '\" xlink:href=\"' + patternImgSrc +\n\t             '\"></image>\\n' +\n\t           '</pattern>\\n';\n\t  },\n\t  /* _TO_SVG_END_ */\n\t\n\t  /**\n\t   * Returns an instance of CanvasPattern\n\t   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n\t   * @return {CanvasPattern}\n\t   */\n\t  toLive: function(ctx) {\n\t    var source = typeof this.source === 'function'\n\t      ? this.source()\n\t      : this.source;\n\t\n\t    // if the image failed to load, return, and allow rest to continue loading\n\t    if (!source) {\n\t      return '';\n\t    }\n\t\n\t    // if an image\n\t    if (typeof source.src !== 'undefined') {\n\t      if (!source.complete) {\n\t        return '';\n\t      }\n\t      if (source.naturalWidth === 0 || source.naturalHeight === 0) {\n\t        return '';\n\t      }\n\t    }\n\t    return ctx.createPattern(source, this.repeat);\n\t  }\n\t});\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      toFixed = fabric.util.toFixed;\n\t\n\t  if (fabric.Shadow) {\n\t    fabric.warn('fabric.Shadow is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Shadow class\n\t   * @class fabric.Shadow\n\t   * @see {@link http://fabricjs.com/shadows/|Shadow demo}\n\t   * @see {@link fabric.Shadow#initialize} for constructor definition\n\t   */\n\t  fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\n\t\n\t    /**\n\t     * Shadow color\n\t     * @type String\n\t     * @default\n\t     */\n\t    color: 'rgb(0,0,0)',\n\t\n\t    /**\n\t     * Shadow blur\n\t     * @type Number\n\t     */\n\t    blur: 0,\n\t\n\t    /**\n\t     * Shadow horizontal offset\n\t     * @type Number\n\t     * @default\n\t     */\n\t    offsetX: 0,\n\t\n\t    /**\n\t     * Shadow vertical offset\n\t     * @type Number\n\t     * @default\n\t     */\n\t    offsetY: 0,\n\t\n\t    /**\n\t     * Whether the shadow should affect stroke operations\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    affectStroke: false,\n\t\n\t    /**\n\t     * Indicates whether toObject should include default values\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    includeDefaultValues: true,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetX properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px, \"2px 2px 10px rgba(0,0,0,0.2)\")\n\t     * @return {fabric.Shadow} thisArg\n\t     */\n\t    initialize: function(options) {\n\t\n\t      if (typeof options === 'string') {\n\t        options = this._parseShadow(options);\n\t      }\n\t\n\t      for (var prop in options) {\n\t        this[prop] = options[prop];\n\t      }\n\t\n\t      this.id = fabric.Object.__uid++;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} shadow Shadow value to parse\n\t     * @return {Object} Shadow object with color, offsetX, offsetY and blur\n\t     */\n\t    _parseShadow: function(shadow) {\n\t      var shadowStr = shadow.trim(),\n\t          offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [ ],\n\t          color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\n\t\n\t      return {\n\t        color: color.trim(),\n\t        offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n\t        offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\n\t        blur: parseInt(offsetsAndBlur[3], 10) || 0\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Returns a string representation of an instance\n\t     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n\t     * @return {String} Returns CSS3 text-shadow declaration\n\t     */\n\t    toString: function() {\n\t      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of a shadow\n\t     * @param {fabric.Object} object\n\t     * @return {String} SVG representation of a shadow\n\t     */\n\t    toSVG: function(object) {\n\t      var fBoxX = 40, fBoxY = 40;\n\t\n\t      if (object.width && object.height) {\n\t        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n\t        // we add some extra space to filter box to contain the blur ( 20 )\n\t        fBoxX = toFixed((Math.abs(this.offsetX) + this.blur) / object.width, 2) * 100 + 20;\n\t        fBoxY = toFixed((Math.abs(this.offsetY) + this.blur) / object.height, 2) * 100 + 20;\n\t      }\n\t\n\t      return (\n\t        '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\n\t          'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\n\t          '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\n\t            toFixed(this.blur ? this.blur / 2 : 0, 3) + '\"></feGaussianBlur>\\n' +\n\t          '\\t<feOffset dx=\"' + this.offsetX + '\" dy=\"' + this.offsetY + '\" result=\"oBlur\" ></feOffset>\\n' +\n\t          '\\t<feFlood flood-color=\"' + this.color + '\"/>\\n' +\n\t          '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\n\t          '\\t<feMerge>\\n' +\n\t            '\\t\\t<feMergeNode></feMergeNode>\\n' +\n\t            '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\n\t          '\\t</feMerge>\\n' +\n\t        '</filter>\\n');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns object representation of a shadow\n\t     * @return {Object} Object representation of a shadow instance\n\t     */\n\t    toObject: function() {\n\t      if (this.includeDefaultValues) {\n\t        return {\n\t          color: this.color,\n\t          blur: this.blur,\n\t          offsetX: this.offsetX,\n\t          offsetY: this.offsetY\n\t        };\n\t      }\n\t      var obj = { }, proto = fabric.Shadow.prototype;\n\t      if (this.color !== proto.color) {\n\t        obj.color = this.color;\n\t      }\n\t      if (this.blur !== proto.blur) {\n\t        obj.blur = this.blur;\n\t      }\n\t      if (this.offsetX !== proto.offsetX) {\n\t        obj.offsetX = this.offsetX;\n\t      }\n\t      if (this.offsetY !== proto.offsetY) {\n\t        obj.offsetY = this.offsetY;\n\t      }\n\t      return obj;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Shadow\n\t   */\n\t  fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function () {\n\t\n\t  'use strict';\n\t\n\t  if (fabric.StaticCanvas) {\n\t    fabric.warn('fabric.StaticCanvas is already defined.');\n\t    return;\n\t  }\n\t\n\t  // aliases for faster resolution\n\t  var extend = fabric.util.object.extend,\n\t      getElementOffset = fabric.util.getElementOffset,\n\t      removeFromArray = fabric.util.removeFromArray,\n\t\n\t      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\n\t\n\t  /**\n\t   * Static canvas class\n\t   * @class fabric.StaticCanvas\n\t   * @mixes fabric.Collection\n\t   * @mixes fabric.Observable\n\t   * @see {@link http://fabricjs.com/static_canvas/|StaticCanvas demo}\n\t   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n\t   * @fires before:render\n\t   * @fires after:render\n\t   * @fires canvas:cleared\n\t   * @fires object:added\n\t   * @fires object:removed\n\t   */\n\t  fabric.StaticCanvas = fabric.util.createClass(/** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n\t     * @param {Object} [options] Options object\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(el, options) {\n\t      options || (options = { });\n\t\n\t      this._initStatic(el, options);\n\t      fabric.StaticCanvas.activeInstance = this;\n\t    },\n\t\n\t    /**\n\t     * Background color of canvas instance.\n\t     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n\t     * @type {(String|fabric.Pattern)}\n\t     * @default\n\t     */\n\t    backgroundColor: '',\n\t\n\t    /**\n\t     * Background image of canvas instance.\n\t     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\n\t     * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\n\t     * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\n\t     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\n\t     * @type fabric.Image\n\t     * @default\n\t     */\n\t    backgroundImage: null,\n\t\n\t    /**\n\t     * Overlay color of canvas instance.\n\t     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n\t     * @since 1.3.9\n\t     * @type {(String|fabric.Pattern)}\n\t     * @default\n\t     */\n\t    overlayColor: '',\n\t\n\t    /**\n\t     * Overlay image of canvas instance.\n\t     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\n\t     * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\n\t     * and \"overlayImageTop\" properties are deprecated since 1.3.9.\n\t     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\n\t     * @type fabric.Image\n\t     * @default\n\t     */\n\t    overlayImage: null,\n\t\n\t    /**\n\t     * Indicates whether toObject/toDatalessObject should include default values\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    includeDefaultValues: true,\n\t\n\t    /**\n\t     * Indicates whether objects' state should be saved\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    stateful: true,\n\t\n\t    /**\n\t     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove} should also re-render canvas.\n\t     * Disabling this option could give a great performance boost when adding/removing a lot of objects to/from canvas at once\n\t     * (followed by a manual rendering after addition/deletion)\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    renderOnAddRemove: true,\n\t\n\t    /**\n\t     * Function that determines clipping of entire canvas area\n\t     * Being passed context as first argument. See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\n\t     * @type Function\n\t     * @default\n\t     */\n\t    clipTo: null,\n\t\n\t    /**\n\t     * Indicates whether object controls (borders/controls) are rendered above overlay image\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    controlsAboveOverlay: false,\n\t\n\t    /**\n\t     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    allowTouchScrolling: false,\n\t\n\t    /**\n\t     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    imageSmoothingEnabled: true,\n\t\n\t    /**\n\t     * Indicates whether objects should remain in current stack position when selected. When false objects are brought to top and rendered as part of the selection group\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    preserveObjectStacking: false,\n\t\n\t    /**\n\t     * The transformation (in the format of Canvas transform) which focuses the viewport\n\t     * @type Array\n\t     * @default\n\t     */\n\t    viewportTransform: [1, 0, 0, 1, 0, 0],\n\t\n\t    /**\n\t     * Callback; invoked right before object is about to be scaled/rotated\n\t     */\n\t    onBeforeScaleRotate: function () {\n\t      /* NOOP */\n\t    },\n\t\n\t    /**\n\t     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n\t     */\n\t    enableRetinaScaling: true,\n\t\n\t    /**\n\t     * @private\n\t     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initStatic: function(el, options) {\n\t      this._objects = [];\n\t\n\t      this._createLowerCanvas(el);\n\t      this._initOptions(options);\n\t      this._setImageSmoothing();\n\t\n\t      // only initialize retina scaling once\n\t      if (!this.interactive) {\n\t        this._initRetinaScaling();\n\t      }\n\t\n\t      if (options.overlayImage) {\n\t        this.setOverlayImage(options.overlayImage, this.renderAll.bind(this));\n\t      }\n\t      if (options.backgroundImage) {\n\t        this.setBackgroundImage(options.backgroundImage, this.renderAll.bind(this));\n\t      }\n\t      if (options.backgroundColor) {\n\t        this.setBackgroundColor(options.backgroundColor, this.renderAll.bind(this));\n\t      }\n\t      if (options.overlayColor) {\n\t        this.setOverlayColor(options.overlayColor, this.renderAll.bind(this));\n\t      }\n\t      this.calcOffset();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _initRetinaScaling: function() {\n\t      if (fabric.devicePixelRatio === 1 || !this.enableRetinaScaling) {\n\t        return;\n\t      }\n\t\n\t      this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);\n\t      this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);\n\t\n\t      this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);\n\t    },\n\t\n\t    /**\n\t     * Calculates canvas element offset relative to the document\n\t     * This method is also attached as \"resize\" event handler of window\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable\n\t     */\n\t    calcOffset: function () {\n\t      this._offset = getElementOffset(this.lowerCanvasEl);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n\t     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n\t     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n\t     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n\t     * @example <caption>Normal overlayImage with left/top = 0</caption>\n\t     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n\t     *   // Needed to position overlayImage at 0/0\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>overlayImage with different properties</caption>\n\t     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n\t     *   opacity: 0.5,\n\t     *   angle: 45,\n\t     *   left: 400,\n\t     *   top: 400,\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n\t     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\n\t     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n\t     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n\t     * });\n\t     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n\t     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n\t     *   width: canvas.width,\n\t     *   height: canvas.height,\n\t     *   // Needed to position overlayImage at 0/0\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>overlayImage loaded from cross-origin</caption>\n\t     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n\t     *   opacity: 0.5,\n\t     *   angle: 45,\n\t     *   left: 400,\n\t     *   top: 400,\n\t     *   originX: 'left',\n\t     *   originY: 'top',\n\t     *   crossOrigin: 'anonymous'\n\t     * });\n\t     */\n\t    setOverlayImage: function (image, callback, options) {\n\t      return this.__setBgOverlayImage('overlayImage', image, callback, options);\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n\t     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n\t     * @param {Function} callback Callback to invoke when image is loaded and set as background\n\t     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/YH9yD/|jsFiddle demo}\n\t     * @example <caption>Normal backgroundImage with left/top = 0</caption>\n\t     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n\t     *   // Needed to position backgroundImage at 0/0\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>backgroundImage with different properties</caption>\n\t     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n\t     *   opacity: 0.5,\n\t     *   angle: 45,\n\t     *   left: 400,\n\t     *   top: 400,\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n\t     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\n\t     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n\t     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n\t     * });\n\t     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n\t     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n\t     *   width: canvas.width,\n\t     *   height: canvas.height,\n\t     *   // Needed to position backgroundImage at 0/0\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>backgroundImage loaded from cross-origin</caption>\n\t     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n\t     *   opacity: 0.5,\n\t     *   angle: 45,\n\t     *   left: 400,\n\t     *   top: 400,\n\t     *   originX: 'left',\n\t     *   originY: 'top',\n\t     *   crossOrigin: 'anonymous'\n\t     * });\n\t     */\n\t    setBackgroundImage: function (image, callback, options) {\n\t      return this.__setBgOverlayImage('backgroundImage', image, callback, options);\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.StaticCanvas#overlayColor|background color} for this canvas\n\t     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set background color to\n\t     * @param {Function} callback Callback to invoke when background color is set\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n\t     * @example <caption>Normal overlayColor - color value</caption>\n\t     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n\t     * @example <caption>fabric.Pattern used as overlayColor</caption>\n\t     * canvas.setOverlayColor({\n\t     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n\t     * }, canvas.renderAll.bind(canvas));\n\t     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n\t     * canvas.setOverlayColor({\n\t     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n\t     *   repeat: 'repeat',\n\t     *   offsetX: 200,\n\t     *   offsetY: 100\n\t     * }, canvas.renderAll.bind(canvas));\n\t     */\n\t    setOverlayColor: function(overlayColor, callback) {\n\t      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n\t     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n\t     * @param {Function} callback Callback to invoke when background color is set\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n\t     * @example <caption>Normal backgroundColor - color value</caption>\n\t     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n\t     * @example <caption>fabric.Pattern used as backgroundColor</caption>\n\t     * canvas.setBackgroundColor({\n\t     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n\t     * }, canvas.renderAll.bind(canvas));\n\t     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n\t     * canvas.setBackgroundColor({\n\t     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n\t     *   repeat: 'repeat',\n\t     *   offsetX: 200,\n\t     *   offsetY: 100\n\t     * }, canvas.renderAll.bind(canvas));\n\t     */\n\t    setBackgroundColor: function(backgroundColor, callback) {\n\t      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\n\t     */\n\t    _setImageSmoothing: function() {\n\t      var ctx = this.getContext();\n\t\n\t      if (typeof ctx.imageSmoothingEnabled !== 'undefined') {\n\t        ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n\t        return;\n\t      }\n\t      ctx.webkitImageSmoothingEnabled = this.imageSmoothingEnabled;\n\t      ctx.mozImageSmoothingEnabled    = this.imageSmoothingEnabled;\n\t      ctx.msImageSmoothingEnabled     = this.imageSmoothingEnabled;\n\t      ctx.oImageSmoothingEnabled      = this.imageSmoothingEnabled;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n\t     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n\t     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n\t     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\n\t     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n\t     */\n\t    __setBgOverlayImage: function(property, image, callback, options) {\n\t      if (typeof image === 'string') {\n\t        fabric.util.loadImage(image, function(img) {\n\t          this[property] = new fabric.Image(img, options);\n\t          callback && callback();\n\t        }, this, options && options.crossOrigin);\n\t      }\n\t      else {\n\t        options && image.setOptions(options);\n\t        this[property] = image;\n\t        callback && callback();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n\t     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n\t     * @param {(Object|String|null)} color Object with pattern information, color value or null\n\t     * @param {Function} [callback] Callback is invoked when color is set\n\t     */\n\t    __setBgOverlayColor: function(property, color, callback) {\n\t      if (color && color.source) {\n\t        var _this = this;\n\t        fabric.util.loadImage(color.source, function(img) {\n\t          _this[property] = new fabric.Pattern({\n\t            source: img,\n\t            repeat: color.repeat,\n\t            offsetX: color.offsetX,\n\t            offsetY: color.offsetY\n\t          });\n\t          callback && callback();\n\t        });\n\t      }\n\t      else {\n\t        this[property] = color;\n\t        callback && callback();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createCanvasElement: function() {\n\t      var element = fabric.document.createElement('canvas');\n\t      if (!element.style) {\n\t        element.style = { };\n\t      }\n\t      if (!element) {\n\t        throw CANVAS_INIT_ERROR;\n\t      }\n\t      this._initCanvasElement(element);\n\t      return element;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {HTMLElement} element\n\t     */\n\t    _initCanvasElement: function(element) {\n\t      fabric.util.createCanvasElement(element);\n\t\n\t      if (typeof element.getContext === 'undefined') {\n\t        throw CANVAS_INIT_ERROR;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initOptions: function (options) {\n\t      for (var prop in options) {\n\t        this[prop] = options[prop];\n\t      }\n\t\n\t      this.width = this.width || parseInt(this.lowerCanvasEl.width, 10) || 0;\n\t      this.height = this.height || parseInt(this.lowerCanvasEl.height, 10) || 0;\n\t\n\t      if (!this.lowerCanvasEl.style) {\n\t        return;\n\t      }\n\t\n\t      this.lowerCanvasEl.width = this.width;\n\t      this.lowerCanvasEl.height = this.height;\n\t\n\t      this.lowerCanvasEl.style.width = this.width + 'px';\n\t      this.lowerCanvasEl.style.height = this.height + 'px';\n\t\n\t      this.viewportTransform = this.viewportTransform.slice();\n\t    },\n\t\n\t    /**\n\t     * Creates a bottom canvas\n\t     * @private\n\t     * @param {HTMLElement} [canvasEl]\n\t     */\n\t    _createLowerCanvas: function (canvasEl) {\n\t      this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n\t      this._initCanvasElement(this.lowerCanvasEl);\n\t\n\t      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\n\t\n\t      if (this.interactive) {\n\t        this._applyCanvasStyle(this.lowerCanvasEl);\n\t      }\n\t\n\t      this.contextContainer = this.lowerCanvasEl.getContext('2d');\n\t    },\n\t\n\t    /**\n\t     * Returns canvas width (in px)\n\t     * @return {Number}\n\t     */\n\t    getWidth: function () {\n\t      return this.width;\n\t    },\n\t\n\t    /**\n\t     * Returns canvas height (in px)\n\t     * @return {Number}\n\t     */\n\t    getHeight: function () {\n\t      return this.height;\n\t    },\n\t\n\t    /**\n\t     * Sets width of this canvas instance\n\t     * @param {Number|String} value                         Value to set width to\n\t     * @param {Object}        [options]                     Options object\n\t     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n\t     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    setWidth: function (value, options) {\n\t      return this.setDimensions({ width: value }, options);\n\t    },\n\t\n\t    /**\n\t     * Sets height of this canvas instance\n\t     * @param {Number|String} value                         Value to set height to\n\t     * @param {Object}        [options]                     Options object\n\t     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n\t     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    setHeight: function (value, options) {\n\t      return this.setDimensions({ height: value }, options);\n\t    },\n\t\n\t    /**\n\t     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n\t     * @param {Object}        dimensions                    Object with width/height properties\n\t     * @param {Number|String} [dimensions.width]            Width of canvas element\n\t     * @param {Number|String} [dimensions.height]           Height of canvas element\n\t     * @param {Object}        [options]                     Options object\n\t     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n\t     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    setDimensions: function (dimensions, options) {\n\t      var cssValue;\n\t\n\t      options = options || {};\n\t\n\t      for (var prop in dimensions) {\n\t        cssValue = dimensions[prop];\n\t\n\t        if (!options.cssOnly) {\n\t          this._setBackstoreDimension(prop, dimensions[prop]);\n\t          cssValue += 'px';\n\t        }\n\t\n\t        if (!options.backstoreOnly) {\n\t          this._setCssDimension(prop, cssValue);\n\t        }\n\t      }\n\t\n\t      this._setImageSmoothing();\n\t      this.calcOffset();\n\t\n\t      if (!options.cssOnly) {\n\t        this.renderAll();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Helper for setting width/height\n\t     * @private\n\t     * @param {String} prop property (width|height)\n\t     * @param {Number} value value to set property to\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    _setBackstoreDimension: function (prop, value) {\n\t      this.lowerCanvasEl[prop] = value;\n\t\n\t      if (this.upperCanvasEl) {\n\t        this.upperCanvasEl[prop] = value;\n\t      }\n\t\n\t      if (this.cacheCanvasEl) {\n\t        this.cacheCanvasEl[prop] = value;\n\t      }\n\t\n\t      this[prop] = value;\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Helper for setting css width/height\n\t     * @private\n\t     * @param {String} prop property (width|height)\n\t     * @param {String} value value to set property to\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    _setCssDimension: function (prop, value) {\n\t      this.lowerCanvasEl.style[prop] = value;\n\t\n\t      if (this.upperCanvasEl) {\n\t        this.upperCanvasEl.style[prop] = value;\n\t      }\n\t\n\t      if (this.wrapperEl) {\n\t        this.wrapperEl.style[prop] = value;\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns canvas zoom level\n\t     * @return {Number}\n\t     */\n\t    getZoom: function () {\n\t      return Math.sqrt(this.viewportTransform[0] * this.viewportTransform[3]);\n\t    },\n\t\n\t    /**\n\t     * Sets viewport transform of this canvas instance\n\t     * @param {Array} vpt the transform in the form of context.transform\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    setViewportTransform: function (vpt) {\n\t      var activeGroup = this.getActiveGroup();\n\t      this.viewportTransform = vpt;\n\t      this.renderAll();\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._objects[i].setCoords();\n\t      }\n\t      if (activeGroup) {\n\t        activeGroup.setCoords();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets zoom level of this canvas instance, zoom centered around point\n\t     * @param {fabric.Point} point to zoom with respect to\n\t     * @param {Number} value to set zoom to, less than 1 zooms out\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    zoomToPoint: function (point, value) {\n\t      // TODO: just change the scale, preserve other transformations\n\t      var before = point;\n\t      point = fabric.util.transformPoint(point, fabric.util.invertTransform(this.viewportTransform));\n\t      this.viewportTransform[0] = value;\n\t      this.viewportTransform[3] = value;\n\t      var after = fabric.util.transformPoint(point, this.viewportTransform);\n\t      this.viewportTransform[4] += before.x - after.x;\n\t      this.viewportTransform[5] += before.y - after.y;\n\t      this.renderAll();\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._objects[i].setCoords();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets zoom level of this canvas instance\n\t     * @param {Number} value to set zoom to, less than 1 zooms out\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    setZoom: function (value) {\n\t      this.zoomToPoint(new fabric.Point(0, 0), value);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Pan viewport so as to place point at top left corner of canvas\n\t     * @param {fabric.Point} point to move to\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    absolutePan: function (point) {\n\t      this.viewportTransform[4] = -point.x;\n\t      this.viewportTransform[5] = -point.y;\n\t      this.renderAll();\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._objects[i].setCoords();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Pans viewpoint relatively\n\t     * @param {fabric.Point} point (position vector) to move by\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    relativePan: function (point) {\n\t      return this.absolutePan(new fabric.Point(\n\t        -point.x - this.viewportTransform[4],\n\t        -point.y - this.viewportTransform[5]\n\t      ));\n\t    },\n\t\n\t    /**\n\t     * Returns &lt;canvas> element corresponding to this instance\n\t     * @return {HTMLCanvasElement}\n\t     */\n\t    getElement: function () {\n\t      return this.lowerCanvasEl;\n\t    },\n\t\n\t    /**\n\t     * Returns currently selected object, if any\n\t     * @return {fabric.Object}\n\t     */\n\t    getActiveObject: function() {\n\t      return null;\n\t    },\n\t\n\t    /**\n\t     * Returns currently selected group of object, if any\n\t     * @return {fabric.Group}\n\t     */\n\t    getActiveGroup: function() {\n\t      return null;\n\t    },\n\t\n\t    /**\n\t     * Given a context, renders an object on that context\n\t     * @param {CanvasRenderingContext2D} ctx Context to render object on\n\t     * @param {fabric.Object} object Object to render\n\t     * @private\n\t     */\n\t    _draw: function (ctx, object) {\n\t      if (!object) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      var v = this.viewportTransform;\n\t      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\t      if (this._shouldRenderObject(object)) {\n\t        object.render(ctx);\n\t      }\n\t      ctx.restore();\n\t      if (!this.controlsAboveOverlay) {\n\t        object._renderControls(ctx);\n\t      }\n\t    },\n\t\n\t    _shouldRenderObject: function(object) {\n\t      if (!object) {\n\t        return false;\n\t      }\n\t      return (object !== this.getActiveGroup() || !this.preserveObjectStacking);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Object} obj Object that was added\n\t     */\n\t    _onObjectAdded: function(obj) {\n\t      this.stateful && obj.setupState();\n\t      obj._set('canvas', this);\n\t      obj.setCoords();\n\t      this.fire('object:added', { target: obj });\n\t      obj.fire('added');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Object} obj Object that was removed\n\t     */\n\t    _onObjectRemoved: function(obj) {\n\t      // removing active object should fire \"selection:cleared\" events\n\t      if (this.getActiveObject() === obj) {\n\t        this.fire('before:selection:cleared', { target: obj });\n\t        this._discardActiveObject();\n\t        this.fire('selection:cleared');\n\t      }\n\t\n\t      this.fire('object:removed', { target: obj });\n\t      obj.fire('removed');\n\t    },\n\t\n\t    /**\n\t     * Clears specified context of canvas element\n\t     * @param {CanvasRenderingContext2D} ctx Context to clear\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    clearContext: function(ctx) {\n\t      ctx.clearRect(0, 0, this.width, this.height);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns context of canvas where objects are drawn\n\t     * @return {CanvasRenderingContext2D}\n\t     */\n\t    getContext: function () {\n\t      return this.contextContainer;\n\t    },\n\t\n\t    /**\n\t     * Clears all contexts (background, main, top) of an instance\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    clear: function () {\n\t      this._objects.length = 0;\n\t      if (this.discardActiveGroup) {\n\t        this.discardActiveGroup();\n\t      }\n\t      if (this.discardActiveObject) {\n\t        this.discardActiveObject();\n\t      }\n\t      this.clearContext(this.contextContainer);\n\t      if (this.contextTop) {\n\t        this.clearContext(this.contextTop);\n\t      }\n\t      this.fire('canvas:cleared');\n\t      this.renderAll();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Renders both the top canvas and the secondary container canvas.\n\t     * @param {Boolean} [allOnTop] Whether we want to force all images to be rendered on the top canvas\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable\n\t     */\n\t    renderAll: function (allOnTop) {\n\t      var canvasToDrawOn = this[(allOnTop === true && this.interactive) ? 'contextTop' : 'contextContainer'],\n\t          activeGroup = this.getActiveGroup();\n\t\n\t      if (this.contextTop && this.selection && !this._groupSelector) {\n\t        this.clearContext(this.contextTop);\n\t      }\n\t\n\t      if (!allOnTop) {\n\t        this.clearContext(canvasToDrawOn);\n\t      }\n\t\n\t      this.fire('before:render');\n\t\n\t      if (this.clipTo) {\n\t        fabric.util.clipContext(this, canvasToDrawOn);\n\t      }\n\t\n\t      this._renderBackground(canvasToDrawOn);\n\t      this._renderObjects(canvasToDrawOn, activeGroup);\n\t      this._renderActiveGroup(canvasToDrawOn, activeGroup);\n\t\n\t      if (this.clipTo) {\n\t        canvasToDrawOn.restore();\n\t      }\n\t\n\t      this._renderOverlay(canvasToDrawOn);\n\t\n\t      if (this.controlsAboveOverlay && this.interactive) {\n\t        this.drawControls(canvasToDrawOn);\n\t      }\n\t\n\t      this.fire('after:render');\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {fabric.Group} activeGroup\n\t     */\n\t    _renderObjects: function(ctx, activeGroup) {\n\t      var i, length;\n\t\n\t      // fast path\n\t      if (!activeGroup || this.preserveObjectStacking) {\n\t        for (i = 0, length = this._objects.length; i < length; ++i) {\n\t          this._draw(ctx, this._objects[i]);\n\t        }\n\t      }\n\t      else {\n\t        for (i = 0, length = this._objects.length; i < length; ++i) {\n\t          if (this._objects[i] && !activeGroup.contains(this._objects[i])) {\n\t            this._draw(ctx, this._objects[i]);\n\t          }\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {fabric.Group} activeGroup\n\t     */\n\t    _renderActiveGroup: function(ctx, activeGroup) {\n\t\n\t      // delegate rendering to group selection (if one exists)\n\t      if (activeGroup) {\n\t\n\t        //Store objects in group preserving order, then replace\n\t        var sortedObjects = [];\n\t        this.forEachObject(function (object) {\n\t          if (activeGroup.contains(object)) {\n\t            sortedObjects.push(object);\n\t          }\n\t        });\n\t        // forEachObject reverses the object, so we reverse again\n\t        activeGroup._set('_objects', sortedObjects.reverse());\n\t        this._draw(ctx, activeGroup);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderBackground: function(ctx) {\n\t      if (this.backgroundColor) {\n\t        ctx.fillStyle = this.backgroundColor.toLive\n\t          ? this.backgroundColor.toLive(ctx)\n\t          : this.backgroundColor;\n\t\n\t        ctx.fillRect(\n\t          this.backgroundColor.offsetX || 0,\n\t          this.backgroundColor.offsetY || 0,\n\t          this.width,\n\t          this.height);\n\t      }\n\t      if (this.backgroundImage) {\n\t        this._draw(ctx, this.backgroundImage);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderOverlay: function(ctx) {\n\t      if (this.overlayColor) {\n\t        ctx.fillStyle = this.overlayColor.toLive\n\t          ? this.overlayColor.toLive(ctx)\n\t          : this.overlayColor;\n\t\n\t        ctx.fillRect(\n\t          this.overlayColor.offsetX || 0,\n\t          this.overlayColor.offsetY || 0,\n\t          this.width,\n\t          this.height);\n\t      }\n\t      if (this.overlayImage) {\n\t        this._draw(ctx, this.overlayImage);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Method to render only the top canvas.\n\t     * Also used to render the group selection box.\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    renderTop: function () {\n\t      var ctx = this.contextTop || this.contextContainer;\n\t      this.clearContext(ctx);\n\t\n\t      // we render the top context - last object\n\t      if (this.selection && this._groupSelector) {\n\t        this._drawSelection();\n\t      }\n\t\n\t      // delegate rendering to group selection if one exists\n\t      // used for drawing selection borders/controls\n\t      var activeGroup = this.getActiveGroup();\n\t      if (activeGroup) {\n\t        activeGroup.render(ctx);\n\t      }\n\t\n\t      this._renderOverlay(ctx);\n\t\n\t      this.fire('after:render');\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns coordinates of a center of canvas.\n\t     * Returned value is an object with top and left properties\n\t     * @return {Object} object with \"top\" and \"left\" number values\n\t     */\n\t    getCenter: function () {\n\t      return {\n\t        top: this.getHeight() / 2,\n\t        left: this.getWidth() / 2\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Centers object horizontally.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @param {fabric.Object} object Object to center horizontally\n\t     * @return {fabric.Canvas} thisArg\n\t     */\n\t    centerObjectH: function (object) {\n\t      this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\n\t      this.renderAll();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object vertically.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @param {fabric.Object} object Object to center vertically\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    centerObjectV: function (object) {\n\t      this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\n\t      this.renderAll();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object vertically and horizontally.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @param {fabric.Object} object Object to center vertically and horizontally\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    centerObject: function(object) {\n\t      var center = this.getCenter();\n\t\n\t      this._centerObject(object, new fabric.Point(center.left, center.top));\n\t      this.renderAll();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Object} object Object to center\n\t     * @param {fabric.Point} center Center point\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    _centerObject: function(object, center) {\n\t      object.setPositionByOrigin(center, 'center', 'center');\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returs dataless JSON representation of canvas\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {String} json string\n\t     */\n\t    toDatalessJSON: function (propertiesToInclude) {\n\t      return this.toDatalessObject(propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of canvas\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function (propertiesToInclude) {\n\t      return this._toObjectMethod('toObject', propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * Returns dataless object representation of canvas\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toDatalessObject: function (propertiesToInclude) {\n\t      return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _toObjectMethod: function (methodName, propertiesToInclude) {\n\t\n\t      var data = {\n\t        objects: this._toObjects(methodName, propertiesToInclude)\n\t      };\n\t\n\t      extend(data, this.__serializeBgOverlay());\n\t\n\t      fabric.util.populateWithProperties(this, data, propertiesToInclude);\n\t\n\t      return data;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _toObjects: function(methodName, propertiesToInclude) {\n\t      return this.getObjects().map(function(instance) {\n\t        return this._toObject(instance, methodName, propertiesToInclude);\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _toObject: function(instance, methodName, propertiesToInclude) {\n\t      var originalValue;\n\t\n\t      if (!this.includeDefaultValues) {\n\t        originalValue = instance.includeDefaultValues;\n\t        instance.includeDefaultValues = false;\n\t      }\n\t\n\t      //If the object is part of the current selection group, it should\n\t      //be transformed appropriately\n\t      //i.e. it should be serialised as it would appear if the selection group\n\t      //were to be destroyed.\n\t      var originalProperties = this._realizeGroupTransformOnObject(instance),\n\t          object = instance[methodName](propertiesToInclude);\n\t      if (!this.includeDefaultValues) {\n\t        instance.includeDefaultValues = originalValue;\n\t      }\n\t\n\t      //Undo the damage we did by changing all of its properties\n\t      this._unwindGroupTransformOnObject(instance, originalProperties);\n\t\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Realises an object's group transformation on it\n\t     * @private\n\t     * @param {fabric.Object} [instance] the object to transform (gets mutated)\n\t     * @returns the original values of instance which were changed\n\t     */\n\t    _realizeGroupTransformOnObject: function(instance) {\n\t      var layoutProps = ['angle', 'flipX', 'flipY', 'height', 'left', 'scaleX', 'scaleY', 'top', 'width'];\n\t      if (instance.group && instance.group === this.getActiveGroup()) {\n\t        //Copy all the positionally relevant properties across now\n\t        var originalValues = {};\n\t        layoutProps.forEach(function(prop) {\n\t          originalValues[prop] = instance[prop];\n\t        });\n\t        this.getActiveGroup().realizeTransform(instance);\n\t        return originalValues;\n\t      }\n\t      else {\n\t        return null;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Restores the changed properties of instance\n\t     * @private\n\t     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n\t     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n\t     */\n\t    _unwindGroupTransformOnObject: function(instance, originalValues) {\n\t      if (originalValues) {\n\t        instance.set(originalValues);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    __serializeBgOverlay: function() {\n\t      var data = {\n\t        background: (this.backgroundColor && this.backgroundColor.toObject)\n\t          ? this.backgroundColor.toObject()\n\t          : this.backgroundColor\n\t      };\n\t\n\t      if (this.overlayColor) {\n\t        data.overlay = this.overlayColor.toObject\n\t          ? this.overlayColor.toObject()\n\t          : this.overlayColor;\n\t      }\n\t      if (this.backgroundImage) {\n\t        data.backgroundImage = this.backgroundImage.toObject();\n\t      }\n\t      if (this.overlayImage) {\n\t        data.overlayImage = this.overlayImage.toObject();\n\t      }\n\t\n\t      return data;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n\t     * a zoomed canvas will then produce zoomed SVG output.\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    svgViewportTransformation: true,\n\t\n\t    /**\n\t     * Returns SVG representation of canvas\n\t     * @function\n\t     * @param {Object} [options] Options object for SVG output\n\t     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n\t     * @param {Object} [options.viewBox] SVG viewbox object\n\t     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\n\t     * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n\t     * @param {Number} [options.viewBox.width] Width of viewbox\n\t     * @param {Number} [options.viewBox.height] Height of viewbox\n\t     * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n\t     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n\t     * @return {String} SVG string\n\t     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#serialization}\n\t     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n\t     * @example <caption>Normal SVG output</caption>\n\t     * var svg = canvas.toSVG();\n\t     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n\t     * var svg = canvas.toSVG({suppressPreamble: true});\n\t     * @example <caption>SVG output with viewBox attribute</caption>\n\t     * var svg = canvas.toSVG({\n\t     *   viewBox: {\n\t     *     x: 100,\n\t     *     y: 100,\n\t     *     width: 200,\n\t     *     height: 300\n\t     *   }\n\t     * });\n\t     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n\t     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n\t     * @example <caption>Modify SVG output with reviver function</caption>\n\t     * var svg = canvas.toSVG(null, function(svg) {\n\t     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n\t     * });\n\t     */\n\t    toSVG: function(options, reviver) {\n\t      options || (options = { });\n\t\n\t      var markup = [];\n\t\n\t      this._setSVGPreamble(markup, options);\n\t      this._setSVGHeader(markup, options);\n\t\n\t      this._setSVGBgOverlayColor(markup, 'backgroundColor');\n\t      this._setSVGBgOverlayImage(markup, 'backgroundImage');\n\t\n\t      this._setSVGObjects(markup, reviver);\n\t\n\t      this._setSVGBgOverlayColor(markup, 'overlayColor');\n\t      this._setSVGBgOverlayImage(markup, 'overlayImage');\n\t\n\t      markup.push('</svg>');\n\t\n\t      return markup.join('');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGPreamble: function(markup, options) {\n\t      if (!options.suppressPreamble) {\n\t        markup.push(\n\t          '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>',\n\t            '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n\t              '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\n\t        );\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGHeader: function(markup, options) {\n\t      var width, height, vpt;\n\t\n\t      if (options.viewBox) {\n\t        width = options.viewBox.width;\n\t        height = options.viewBox.height;\n\t      }\n\t      else {\n\t        width = this.width;\n\t        height = this.height;\n\t        if (!this.svgViewportTransformation) {\n\t          vpt = this.viewportTransform;\n\t          width /= vpt[0];\n\t          height /= vpt[3];\n\t        }\n\t      }\n\t\n\t      markup.push(\n\t        '<svg ',\n\t          'xmlns=\"http://www.w3.org/2000/svg\" ',\n\t          'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n\t          'version=\"1.1\" ',\n\t          'width=\"', width, '\" ',\n\t          'height=\"', height, '\" ',\n\t          (this.backgroundColor && !this.backgroundColor.toLive\n\t            ? 'style=\"background-color: ' + this.backgroundColor + '\" '\n\t            : null),\n\t          (options.viewBox\n\t              ? 'viewBox=\"' +\n\t                options.viewBox.x + ' ' +\n\t                options.viewBox.y + ' ' +\n\t                options.viewBox.width + ' ' +\n\t                options.viewBox.height + '\" '\n\t              : null),\n\t          'xml:space=\"preserve\">',\n\t        '<desc>Created with Fabric.js ', fabric.version, '</desc>',\n\t        '<defs>',\n\t          fabric.createSVGFontFacesMarkup(this.getObjects()),\n\t          fabric.createSVGRefElementsMarkup(this),\n\t        '</defs>'\n\t      );\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGObjects: function(markup, reviver) {\n\t      for (var i = 0, objects = this.getObjects(), len = objects.length; i < len; i++) {\n\t        var instance = objects[i],\n\t            //If the object is in a selection group, simulate what would happen to that\n\t            //object when the group is deselected\n\t            originalProperties = this._realizeGroupTransformOnObject(instance);\n\t        markup.push(instance.toSVG(reviver));\n\t        this._unwindGroupTransformOnObject(instance, originalProperties);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGBgOverlayImage: function(markup, property) {\n\t      if (this[property] && this[property].toSVG) {\n\t        markup.push(this[property].toSVG());\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGBgOverlayColor: function(markup, property) {\n\t      if (this[property] && this[property].source) {\n\t        markup.push(\n\t          '<rect x=\"', this[property].offsetX, '\" y=\"', this[property].offsetY, '\" ',\n\t            'width=\"',\n\t              (this[property].repeat === 'repeat-y' || this[property].repeat === 'no-repeat'\n\t                ? this[property].source.width\n\t                : this.width),\n\t            '\" height=\"',\n\t              (this[property].repeat === 'repeat-x' || this[property].repeat === 'no-repeat'\n\t                ? this[property].source.height\n\t                : this.height),\n\t            '\" fill=\"url(#' + property + 'Pattern)\"',\n\t          '></rect>'\n\t        );\n\t      }\n\t      else if (this[property] && property === 'overlayColor') {\n\t        markup.push(\n\t          '<rect x=\"0\" y=\"0\" ',\n\t            'width=\"', this.width,\n\t            '\" height=\"', this.height,\n\t            '\" fill=\"', this[property], '\"',\n\t          '></rect>'\n\t        );\n\t      }\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Moves an object to the bottom of the stack of drawn objects\n\t     * @param {fabric.Object} object Object to send to back\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    sendToBack: function (object) {\n\t      removeFromArray(this._objects, object);\n\t      this._objects.unshift(object);\n\t      return this.renderAll && this.renderAll();\n\t    },\n\t\n\t    /**\n\t     * Moves an object to the top of the stack of drawn objects\n\t     * @param {fabric.Object} object Object to send\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    bringToFront: function (object) {\n\t      removeFromArray(this._objects, object);\n\t      this._objects.push(object);\n\t      return this.renderAll && this.renderAll();\n\t    },\n\t\n\t    /**\n\t     * Moves an object down in stack of drawn objects\n\t     * @param {fabric.Object} object Object to send\n\t     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    sendBackwards: function (object, intersecting) {\n\t      var idx = this._objects.indexOf(object);\n\t\n\t      // if object is not on the bottom of stack\n\t      if (idx !== 0) {\n\t        var newIdx = this._findNewLowerIndex(object, idx, intersecting);\n\t\n\t        removeFromArray(this._objects, object);\n\t        this._objects.splice(newIdx, 0, object);\n\t        this.renderAll && this.renderAll();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _findNewLowerIndex: function(object, idx, intersecting) {\n\t      var newIdx;\n\t\n\t      if (intersecting) {\n\t        newIdx = idx;\n\t\n\t        // traverse down the stack looking for the nearest intersecting object\n\t        for (var i = idx - 1; i >= 0; --i) {\n\t\n\t          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n\t                               object.isContainedWithinObject(this._objects[i]) ||\n\t                               this._objects[i].isContainedWithinObject(object);\n\t\n\t          if (isIntersecting) {\n\t            newIdx = i;\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        newIdx = idx - 1;\n\t      }\n\t\n\t      return newIdx;\n\t    },\n\t\n\t    /**\n\t     * Moves an object up in stack of drawn objects\n\t     * @param {fabric.Object} object Object to send\n\t     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    bringForward: function (object, intersecting) {\n\t      var idx = this._objects.indexOf(object);\n\t\n\t      // if object is not on top of stack (last item in an array)\n\t      if (idx !== this._objects.length - 1) {\n\t        var newIdx = this._findNewUpperIndex(object, idx, intersecting);\n\t\n\t        removeFromArray(this._objects, object);\n\t        this._objects.splice(newIdx, 0, object);\n\t        this.renderAll && this.renderAll();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _findNewUpperIndex: function(object, idx, intersecting) {\n\t      var newIdx;\n\t\n\t      if (intersecting) {\n\t        newIdx = idx;\n\t\n\t        // traverse up the stack looking for the nearest intersecting object\n\t        for (var i = idx + 1; i < this._objects.length; ++i) {\n\t\n\t          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n\t                               object.isContainedWithinObject(this._objects[i]) ||\n\t                               this._objects[i].isContainedWithinObject(object);\n\t\n\t          if (isIntersecting) {\n\t            newIdx = i;\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        newIdx = idx + 1;\n\t      }\n\t\n\t      return newIdx;\n\t    },\n\t\n\t    /**\n\t     * Moves an object to specified level in stack of drawn objects\n\t     * @param {fabric.Object} object Object to send\n\t     * @param {Number} index Position to move to\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    moveTo: function (object, index) {\n\t      removeFromArray(this._objects, object);\n\t      this._objects.splice(index, 0, object);\n\t      return this.renderAll && this.renderAll();\n\t    },\n\t\n\t    /**\n\t     * Clears a canvas element and removes all event listeners\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    dispose: function () {\n\t      this.clear();\n\t      this.interactive && this.removeListeners();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns a string representation of an instance\n\t     * @return {String} string representation of an instance\n\t     */\n\t    toString: function () {\n\t      return '#<fabric.Canvas (' + this.complexity() + '): ' +\n\t               '{ objects: ' + this.getObjects().length + ' }>';\n\t    }\n\t  });\n\t\n\t  extend(fabric.StaticCanvas.prototype, fabric.Observable);\n\t  extend(fabric.StaticCanvas.prototype, fabric.Collection);\n\t  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n\t\n\t  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n\t\n\t    /**\n\t     * @static\n\t     * @type String\n\t     * @default\n\t     */\n\t    EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n\t\n\t    /**\n\t     * Provides a way to check support of some of the canvas methods\n\t     * (either those of HTMLCanvasElement itself, or rendering context)\n\t     *\n\t     * @param {String} methodName Method to check support for;\n\t     *                            Could be one of \"getImageData\", \"toDataURL\", \"toDataURLWithQuality\" or \"setLineDash\"\n\t     * @return {Boolean | null} `true` if method is supported (or at least exists),\n\t     *                          `null` if canvas element or context can not be initialized\n\t     */\n\t    supports: function (methodName) {\n\t      var el = fabric.util.createCanvasElement();\n\t\n\t      if (!el || !el.getContext) {\n\t        return null;\n\t      }\n\t\n\t      var ctx = el.getContext('2d');\n\t      if (!ctx) {\n\t        return null;\n\t      }\n\t\n\t      switch (methodName) {\n\t\n\t        case 'getImageData':\n\t          return typeof ctx.getImageData !== 'undefined';\n\t\n\t        case 'setLineDash':\n\t          return typeof ctx.setLineDash !== 'undefined';\n\t\n\t        case 'toDataURL':\n\t          return typeof el.toDataURL !== 'undefined';\n\t\n\t        case 'toDataURLWithQuality':\n\t          try {\n\t            el.toDataURL('image/jpeg', 0);\n\t            return true;\n\t          }\n\t          catch (e) { }\n\t          return false;\n\t\n\t        default:\n\t          return null;\n\t      }\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns JSON representation of canvas\n\t   * @function\n\t   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t   * @return {String} JSON string\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#serialization}\n\t   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n\t   * @example <caption>JSON without additional properties</caption>\n\t   * var json = canvas.toJSON();\n\t   * @example <caption>JSON with additional properties included</caption>\n\t   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\n\t   * @example <caption>JSON without default values</caption>\n\t   * canvas.includeDefaultValues = false;\n\t   * var json = canvas.toJSON();\n\t   */\n\t  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n\t\n\t})();\n\t\n\t\n\t/**\n\t * BaseBrush class\n\t * @class fabric.BaseBrush\n\t * @see {@link http://fabricjs.com/freedrawing/|Freedrawing demo}\n\t */\n\tfabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n\t\n\t  /**\n\t   * Color of a brush\n\t   * @type String\n\t   * @default\n\t   */\n\t  color:            'rgb(0, 0, 0)',\n\t\n\t  /**\n\t   * Width of a brush\n\t   * @type Number\n\t   * @default\n\t   */\n\t  width:            1,\n\t\n\t  /**\n\t   * Shadow object representing shadow of this shape.\n\t   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n\t   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n\t   * @type fabric.Shadow\n\t   * @default\n\t   */\n\t  shadow:           null,\n\t\n\t  /**\n\t   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n\t   * @type String\n\t   * @default\n\t   */\n\t  strokeLineCap:    'round',\n\t\n\t  /**\n\t   * Corner style of a brush (one of \"bevil\", \"round\", \"miter\")\n\t   * @type String\n\t   * @default\n\t   */\n\t  strokeLineJoin:   'round',\n\t\n\t  /**\n\t   * Stroke Dash Array.\n\t   * @type Array\n\t   * @default\n\t   */\n\t  strokeDashArray:  null,\n\t\n\t  /**\n\t   * Sets shadow of an object\n\t   * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  setShadow: function(options) {\n\t    this.shadow = new fabric.Shadow(options);\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Sets brush styles\n\t   * @private\n\t   */\n\t  _setBrushStyles: function() {\n\t    var ctx = this.canvas.contextTop;\n\t\n\t    ctx.strokeStyle = this.color;\n\t    ctx.lineWidth = this.width;\n\t    ctx.lineCap = this.strokeLineCap;\n\t    ctx.lineJoin = this.strokeLineJoin;\n\t    if (this.strokeDashArray && fabric.StaticCanvas.supports('setLineDash')) {\n\t      ctx.setLineDash(this.strokeDashArray);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Sets brush shadow styles\n\t   * @private\n\t   */\n\t  _setShadow: function() {\n\t    if (!this.shadow) {\n\t      return;\n\t    }\n\t\n\t    var ctx = this.canvas.contextTop;\n\t\n\t    ctx.shadowColor = this.shadow.color;\n\t    ctx.shadowBlur = this.shadow.blur;\n\t    ctx.shadowOffsetX = this.shadow.offsetX;\n\t    ctx.shadowOffsetY = this.shadow.offsetY;\n\t  },\n\t\n\t  /**\n\t   * Removes brush shadow styles\n\t   * @private\n\t   */\n\t  _resetShadow: function() {\n\t    var ctx = this.canvas.contextTop;\n\t\n\t    ctx.shadowColor = '';\n\t    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n\t  }\n\t});\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * PencilBrush class\n\t   * @class fabric.PencilBrush\n\t   * @extends fabric.BaseBrush\n\t   */\n\t  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {fabric.Canvas} canvas\n\t     * @return {fabric.PencilBrush} Instance of a pencil brush\n\t     */\n\t    initialize: function(canvas) {\n\t      this.canvas = canvas;\n\t      this._points = [ ];\n\t    },\n\t\n\t    /**\n\t     * Inovoked on mouse down\n\t     * @param {Object} pointer\n\t     */\n\t    onMouseDown: function(pointer) {\n\t      this._prepareForDrawing(pointer);\n\t      // capture coordinates immediately\n\t      // this allows to draw dots (when movement never occurs)\n\t      this._captureDrawingPath(pointer);\n\t      this._render();\n\t    },\n\t\n\t    /**\n\t     * Inovoked on mouse move\n\t     * @param {Object} pointer\n\t     */\n\t    onMouseMove: function(pointer) {\n\t      this._captureDrawingPath(pointer);\n\t      // redraw curve\n\t      // clear top canvas\n\t      this.canvas.clearContext(this.canvas.contextTop);\n\t      this._render();\n\t    },\n\t\n\t    /**\n\t     * Invoked on mouse up\n\t     */\n\t    onMouseUp: function() {\n\t      this._finalizeAndAddPath();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} pointer Actual mouse position related to the canvas.\n\t     */\n\t    _prepareForDrawing: function(pointer) {\n\t\n\t      var p = new fabric.Point(pointer.x, pointer.y);\n\t\n\t      this._reset();\n\t      this._addPoint(p);\n\t\n\t      this.canvas.contextTop.moveTo(p.x, p.y);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Point} point Point to be added to points array\n\t     */\n\t    _addPoint: function(point) {\n\t      this._points.push(point);\n\t    },\n\t\n\t    /**\n\t     * Clear points array and set contextTop canvas style.\n\t     * @private\n\t     */\n\t    _reset: function() {\n\t      this._points.length = 0;\n\t\n\t      this._setBrushStyles();\n\t      this._setShadow();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} pointer Actual mouse position related to the canvas.\n\t     */\n\t    _captureDrawingPath: function(pointer) {\n\t      var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n\t      this._addPoint(pointerPoint);\n\t    },\n\t\n\t    /**\n\t     * Draw a smooth path on the topCanvas using quadraticCurveTo\n\t     * @private\n\t     */\n\t    _render: function() {\n\t      var ctx  = this.canvas.contextTop,\n\t          v = this.canvas.viewportTransform,\n\t          p1 = this._points[0],\n\t          p2 = this._points[1];\n\t\n\t      ctx.save();\n\t      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\t      ctx.beginPath();\n\t\n\t      //if we only have 2 points in the path and they are the same\n\t      //it means that the user only clicked the canvas without moving the mouse\n\t      //then we should be drawing a dot. A path isn't drawn between two identical dots\n\t      //that's why we set them apart a bit\n\t      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n\t        p1.x -= 0.5;\n\t        p2.x += 0.5;\n\t      }\n\t      ctx.moveTo(p1.x, p1.y);\n\t\n\t      for (var i = 1, len = this._points.length; i < len; i++) {\n\t        // we pick the point between pi + 1 & pi + 2 as the\n\t        // end point and p1 as our control point.\n\t        var midPoint = p1.midPointFrom(p2);\n\t        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n\t\n\t        p1 = this._points[i];\n\t        p2 = this._points[i + 1];\n\t      }\n\t      // Draw last line as a straight line while\n\t      // we wait for the next point to be able to calculate\n\t      // the bezier control point\n\t      ctx.lineTo(p1.x, p1.y);\n\t      ctx.stroke();\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Converts points to SVG path\n\t     * @param {Array} points Array of points\n\t     * @param {Number} minX\n\t     * @param {Number} minY\n\t     * @return {String} SVG path\n\t     */\n\t    convertPointsToSVGPath: function(points) {\n\t      var path = [],\n\t          p1 = new fabric.Point(points[0].x, points[0].y),\n\t          p2 = new fabric.Point(points[1].x, points[1].y);\n\t\n\t      path.push('M ', points[0].x, ' ', points[0].y, ' ');\n\t      for (var i = 1, len = points.length; i < len; i++) {\n\t        var midPoint = p1.midPointFrom(p2);\n\t        // p1 is our bezier control point\n\t        // midpoint is our endpoint\n\t        // start point is p(i-1) value.\n\t        path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\n\t        p1 = new fabric.Point(points[i].x, points[i].y);\n\t        if ((i + 1) < points.length) {\n\t          p2 = new fabric.Point(points[i + 1].x, points[i + 1].y);\n\t        }\n\t      }\n\t      path.push('L ', p1.x, ' ', p1.y, ' ');\n\t      return path;\n\t    },\n\t\n\t    /**\n\t     * Creates fabric.Path object to add on canvas\n\t     * @param {String} pathData Path data\n\t     * @return {fabric.Path} Path to add on canvas\n\t     */\n\t    createPath: function(pathData) {\n\t      var path = new fabric.Path(pathData, {\n\t                   fill: null,\n\t                   stroke: this.color,\n\t                   strokeWidth: this.width,\n\t                   strokeLineCap: this.strokeLineCap,\n\t                   strokeLineJoin: this.strokeLineJoin,\n\t                   strokeDashArray: this.strokeDashArray,\n\t                   originX: 'center',\n\t                   originY: 'center'\n\t                 });\n\t\n\t      if (this.shadow) {\n\t        this.shadow.affectStroke = true;\n\t        path.setShadow(this.shadow);\n\t      }\n\t\n\t      return path;\n\t    },\n\t\n\t    /**\n\t     * On mouseup after drawing the path on contextTop canvas\n\t     * we use the points captured to create an new fabric path object\n\t     * and add it to the fabric canvas.\n\t     */\n\t    _finalizeAndAddPath: function() {\n\t      var ctx = this.canvas.contextTop;\n\t      ctx.closePath();\n\t\n\t      var pathData = this.convertPointsToSVGPath(this._points).join('');\n\t      if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\n\t        // do not create 0 width/height paths, as they are\n\t        // rendered inconsistently across browsers\n\t        // Firefox 4, for example, renders a dot,\n\t        // whereas Chrome 10 renders nothing\n\t        this.canvas.renderAll();\n\t        return;\n\t      }\n\t\n\t      var path = this.createPath(pathData);\n\t\n\t      this.canvas.add(path);\n\t      path.setCoords();\n\t\n\t      this.canvas.clearContext(this.canvas.contextTop);\n\t      this._resetShadow();\n\t      this.canvas.renderAll();\n\t\n\t      // fire event 'path' created\n\t      this.canvas.fire('path:created', { path: path });\n\t    }\n\t  });\n\t})();\n\t\n\t\n\t/**\n\t * CircleBrush class\n\t * @class fabric.CircleBrush\n\t */\n\tfabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n\t\n\t  /**\n\t   * Width of a brush\n\t   * @type Number\n\t   * @default\n\t   */\n\t  width: 10,\n\t\n\t  /**\n\t   * Constructor\n\t   * @param {fabric.Canvas} canvas\n\t   * @return {fabric.CircleBrush} Instance of a circle brush\n\t   */\n\t  initialize: function(canvas) {\n\t    this.canvas = canvas;\n\t    this.points = [ ];\n\t  },\n\t\n\t  /**\n\t   * Invoked inside on mouse down and mouse move\n\t   * @param {Object} pointer\n\t   */\n\t  drawDot: function(pointer) {\n\t    var point = this.addPoint(pointer),\n\t        ctx = this.canvas.contextTop,\n\t        v = this.canvas.viewportTransform;\n\t    ctx.save();\n\t    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\t\n\t    ctx.fillStyle = point.fill;\n\t    ctx.beginPath();\n\t    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n\t    ctx.closePath();\n\t    ctx.fill();\n\t\n\t    ctx.restore();\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse down\n\t   */\n\t  onMouseDown: function(pointer) {\n\t    this.points.length = 0;\n\t    this.canvas.clearContext(this.canvas.contextTop);\n\t    this._setShadow();\n\t    this.drawDot(pointer);\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse move\n\t   * @param {Object} pointer\n\t   */\n\t  onMouseMove: function(pointer) {\n\t    this.drawDot(pointer);\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse up\n\t   */\n\t  onMouseUp: function() {\n\t    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n\t    this.canvas.renderOnAddRemove = false;\n\t\n\t    var circles = [ ];\n\t\n\t    for (var i = 0, len = this.points.length; i < len; i++) {\n\t      var point = this.points[i],\n\t          circle = new fabric.Circle({\n\t            radius: point.radius,\n\t            left: point.x,\n\t            top: point.y,\n\t            originX: 'center',\n\t            originY: 'center',\n\t            fill: point.fill\n\t          });\n\t\n\t      this.shadow && circle.setShadow(this.shadow);\n\t\n\t      circles.push(circle);\n\t    }\n\t    var group = new fabric.Group(circles, { originX: 'center', originY: 'center' });\n\t    group.canvas = this.canvas;\n\t\n\t    this.canvas.add(group);\n\t    this.canvas.fire('path:created', { path: group });\n\t\n\t    this.canvas.clearContext(this.canvas.contextTop);\n\t    this._resetShadow();\n\t    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n\t    this.canvas.renderAll();\n\t  },\n\t\n\t  /**\n\t   * @param {Object} pointer\n\t   * @return {fabric.Point} Just added pointer point\n\t   */\n\t  addPoint: function(pointer) {\n\t    var pointerPoint = new fabric.Point(pointer.x, pointer.y),\n\t\n\t        circleRadius = fabric.util.getRandomInt(\n\t                        Math.max(0, this.width - 20), this.width + 20) / 2,\n\t\n\t        circleColor = new fabric.Color(this.color)\n\t                        .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\n\t                        .toRgba();\n\t\n\t    pointerPoint.radius = circleRadius;\n\t    pointerPoint.fill = circleColor;\n\t\n\t    this.points.push(pointerPoint);\n\t\n\t    return pointerPoint;\n\t  }\n\t});\n\t\n\t\n\t/**\n\t * SprayBrush class\n\t * @class fabric.SprayBrush\n\t */\n\tfabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n\t\n\t  /**\n\t   * Width of a spray\n\t   * @type Number\n\t   * @default\n\t   */\n\t  width:              10,\n\t\n\t  /**\n\t   * Density of a spray (number of dots per chunk)\n\t   * @type Number\n\t   * @default\n\t   */\n\t  density:            20,\n\t\n\t  /**\n\t   * Width of spray dots\n\t   * @type Number\n\t   * @default\n\t   */\n\t  dotWidth:           1,\n\t\n\t  /**\n\t   * Width variance of spray dots\n\t   * @type Number\n\t   * @default\n\t   */\n\t  dotWidthVariance:   1,\n\t\n\t  /**\n\t   * Whether opacity of a dot should be random\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  randomOpacity:        false,\n\t\n\t  /**\n\t   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  optimizeOverlapping:  true,\n\t\n\t  /**\n\t   * Constructor\n\t   * @param {fabric.Canvas} canvas\n\t   * @return {fabric.SprayBrush} Instance of a spray brush\n\t   */\n\t  initialize: function(canvas) {\n\t    this.canvas = canvas;\n\t    this.sprayChunks = [ ];\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse down\n\t   * @param {Object} pointer\n\t   */\n\t  onMouseDown: function(pointer) {\n\t    this.sprayChunks.length = 0;\n\t    this.canvas.clearContext(this.canvas.contextTop);\n\t    this._setShadow();\n\t\n\t    this.addSprayChunk(pointer);\n\t    this.render();\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse move\n\t   * @param {Object} pointer\n\t   */\n\t  onMouseMove: function(pointer) {\n\t    this.addSprayChunk(pointer);\n\t    this.render();\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse up\n\t   */\n\t  onMouseUp: function() {\n\t    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n\t    this.canvas.renderOnAddRemove = false;\n\t\n\t    var rects = [ ];\n\t\n\t    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n\t      var sprayChunk = this.sprayChunks[i];\n\t\n\t      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\n\t\n\t        var rect = new fabric.Rect({\n\t          width: sprayChunk[j].width,\n\t          height: sprayChunk[j].width,\n\t          left: sprayChunk[j].x + 1,\n\t          top: sprayChunk[j].y + 1,\n\t          originX: 'center',\n\t          originY: 'center',\n\t          fill: this.color\n\t        });\n\t\n\t        this.shadow && rect.setShadow(this.shadow);\n\t        rects.push(rect);\n\t      }\n\t    }\n\t\n\t    if (this.optimizeOverlapping) {\n\t      rects = this._getOptimizedRects(rects);\n\t    }\n\t\n\t    var group = new fabric.Group(rects, { originX: 'center', originY: 'center' });\n\t    group.canvas = this.canvas;\n\t\n\t    this.canvas.add(group);\n\t    this.canvas.fire('path:created', { path: group });\n\t\n\t    this.canvas.clearContext(this.canvas.contextTop);\n\t    this._resetShadow();\n\t    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n\t    this.canvas.renderAll();\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Array} rects\n\t   */\n\t  _getOptimizedRects: function(rects) {\n\t\n\t    // avoid creating duplicate rects at the same coordinates\n\t    var uniqueRects = { }, key;\n\t\n\t    for (var i = 0, len = rects.length; i < len; i++) {\n\t      key = rects[i].left + '' + rects[i].top;\n\t      if (!uniqueRects[key]) {\n\t        uniqueRects[key] = rects[i];\n\t      }\n\t    }\n\t    var uniqueRectsArray = [ ];\n\t    for (key in uniqueRects) {\n\t      uniqueRectsArray.push(uniqueRects[key]);\n\t    }\n\t\n\t    return uniqueRectsArray;\n\t  },\n\t\n\t  /**\n\t   * Renders brush\n\t   */\n\t  render: function() {\n\t    var ctx = this.canvas.contextTop;\n\t    ctx.fillStyle = this.color;\n\t\n\t    var v = this.canvas.viewportTransform;\n\t    ctx.save();\n\t    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\t\n\t    for (var i = 0, len = this.sprayChunkPoints.length; i < len; i++) {\n\t      var point = this.sprayChunkPoints[i];\n\t      if (typeof point.opacity !== 'undefined') {\n\t        ctx.globalAlpha = point.opacity;\n\t      }\n\t      ctx.fillRect(point.x, point.y, point.width, point.width);\n\t    }\n\t    ctx.restore();\n\t  },\n\t\n\t  /**\n\t   * @param {Object} pointer\n\t   */\n\t  addSprayChunk: function(pointer) {\n\t    this.sprayChunkPoints = [ ];\n\t\n\t    var x, y, width, radius = this.width / 2;\n\t\n\t    for (var i = 0; i < this.density; i++) {\n\t\n\t      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n\t      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n\t\n\t      if (this.dotWidthVariance) {\n\t        width = fabric.util.getRandomInt(\n\t          // bottom clamp width to 1\n\t          Math.max(1, this.dotWidth - this.dotWidthVariance),\n\t          this.dotWidth + this.dotWidthVariance);\n\t      }\n\t      else {\n\t        width = this.dotWidth;\n\t      }\n\t\n\t      var point = new fabric.Point(x, y);\n\t      point.width = width;\n\t\n\t      if (this.randomOpacity) {\n\t        point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n\t      }\n\t\n\t      this.sprayChunkPoints.push(point);\n\t    }\n\t\n\t    this.sprayChunks.push(this.sprayChunkPoints);\n\t  }\n\t});\n\t\n\t\n\t/**\n\t * PatternBrush class\n\t * @class fabric.PatternBrush\n\t * @extends fabric.BaseBrush\n\t */\n\tfabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n\t\n\t  getPatternSrc: function() {\n\t\n\t    var dotWidth = 20,\n\t        dotDistance = 5,\n\t        patternCanvas = fabric.document.createElement('canvas'),\n\t        patternCtx = patternCanvas.getContext('2d');\n\t\n\t    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n\t\n\t    patternCtx.fillStyle = this.color;\n\t    patternCtx.beginPath();\n\t    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n\t    patternCtx.closePath();\n\t    patternCtx.fill();\n\t\n\t    return patternCanvas;\n\t  },\n\t\n\t  getPatternSrcFunction: function() {\n\t    return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\n\t  },\n\t\n\t  /**\n\t   * Creates \"pattern\" instance property\n\t   */\n\t  getPattern: function() {\n\t    return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\n\t  },\n\t\n\t  /**\n\t   * Sets brush styles\n\t   */\n\t  _setBrushStyles: function() {\n\t    this.callSuper('_setBrushStyles');\n\t    this.canvas.contextTop.strokeStyle = this.getPattern();\n\t  },\n\t\n\t  /**\n\t   * Creates path\n\t   */\n\t  createPath: function(pathData) {\n\t    var path = this.callSuper('createPath', pathData);\n\t    path.stroke = new fabric.Pattern({\n\t      source: this.source || this.getPatternSrcFunction()\n\t    });\n\t    return path;\n\t  }\n\t});\n\t\n\t\n\t(function() {\n\t\n\t  var getPointer = fabric.util.getPointer,\n\t      degreesToRadians = fabric.util.degreesToRadians,\n\t      radiansToDegrees = fabric.util.radiansToDegrees,\n\t      atan2 = Math.atan2,\n\t      abs = Math.abs,\n\t\n\t      STROKE_OFFSET = 0.5;\n\t\n\t  /**\n\t   * Canvas class\n\t   * @class fabric.Canvas\n\t   * @extends fabric.StaticCanvas\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#canvas}\n\t   * @see {@link fabric.Canvas#initialize} for constructor definition\n\t   *\n\t   * @fires object:modified\n\t   * @fires object:rotating\n\t   * @fires object:scaling\n\t   * @fires object:moving\n\t   * @fires object:selected\n\t   *\n\t   * @fires before:selection:cleared\n\t   * @fires selection:cleared\n\t   * @fires selection:created\n\t   *\n\t   * @fires path:created\n\t   * @fires mouse:down\n\t   * @fires mouse:move\n\t   * @fires mouse:up\n\t   * @fires mouse:over\n\t   * @fires mouse:out\n\t   *\n\t   */\n\t  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n\t     * @param {Object} [options] Options object\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(el, options) {\n\t      options || (options = { });\n\t\n\t      this._initStatic(el, options);\n\t      this._initInteractive();\n\t      this._createCacheCanvas();\n\t\n\t      fabric.Canvas.activeInstance = this;\n\t    },\n\t\n\t    /**\n\t     * When true, objects can be transformed by one side (unproportionally)\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    uniScaleTransform:      false,\n\t\n\t    /**\n\t     * When true, objects use center point as the origin of scale transformation.\n\t     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n\t     * @since 1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    centeredScaling:        false,\n\t\n\t    /**\n\t     * When true, objects use center point as the origin of rotate transformation.\n\t     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n\t     * @since 1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    centeredRotation:       false,\n\t\n\t    /**\n\t     * Indicates that canvas is interactive. This property should not be changed.\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    interactive:            true,\n\t\n\t    /**\n\t     * Indicates whether group selection should be enabled\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    selection:              true,\n\t\n\t    /**\n\t     * Color of selection\n\t     * @type String\n\t     * @default\n\t     */\n\t    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\n\t\n\t    /**\n\t     * Default dash array pattern\n\t     * If not empty the selection border is dashed\n\t     * @type Array\n\t     */\n\t    selectionDashArray:     [ ],\n\t\n\t    /**\n\t     * Color of the border of selection (usually slightly darker than color of selection itself)\n\t     * @type String\n\t     * @default\n\t     */\n\t    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\n\t\n\t    /**\n\t     * Width of a line used in object/group selection\n\t     * @type Number\n\t     * @default\n\t     */\n\t    selectionLineWidth:     1,\n\t\n\t    /**\n\t     * Default cursor value used when hovering over an object on canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    hoverCursor:            'move',\n\t\n\t    /**\n\t     * Default cursor value used when moving an object on canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    moveCursor:             'move',\n\t\n\t    /**\n\t     * Default cursor value used for the entire canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    defaultCursor:          'default',\n\t\n\t    /**\n\t     * Cursor value used during free drawing\n\t     * @type String\n\t     * @default\n\t     */\n\t    freeDrawingCursor:      'crosshair',\n\t\n\t    /**\n\t     * Cursor value used for rotation point\n\t     * @type String\n\t     * @default\n\t     */\n\t    rotationCursor:         'crosshair',\n\t\n\t    /**\n\t     * Default element class that's given to wrapper (div) element of canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    containerClass:         'canvas-container',\n\t\n\t    /**\n\t     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    perPixelTargetFind:     false,\n\t\n\t    /**\n\t     * Number of pixels around target pixel to tolerate (consider active) during object detection\n\t     * @type Number\n\t     * @default\n\t     */\n\t    targetFindTolerance:    0,\n\t\n\t    /**\n\t     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    skipTargetFind:         false,\n\t\n\t    /**\n\t     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n\t     * After mousedown, mousemove creates a shape,\n\t     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n\t     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4/#free_drawing}\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    isDrawingMode:          false,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _initInteractive: function() {\n\t      this._currentTransform = null;\n\t      this._groupSelector = null;\n\t      this._initWrapperElement();\n\t      this._createUpperCanvas();\n\t      this._initEventListeners();\n\t\n\t      this._initRetinaScaling();\n\t\n\t      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n\t\n\t      this.calcOffset();\n\t    },\n\t\n\t    /**\n\t     * Resets the current transform to its original values and chooses the type of resizing based on the event\n\t     * @private\n\t     * @param {Event} e Event object fired on mousemove\n\t     */\n\t    _resetCurrentTransform: function(e) {\n\t      var t = this._currentTransform;\n\t\n\t      t.target.set({\n\t        scaleX: t.original.scaleX,\n\t        scaleY: t.original.scaleY,\n\t        left: t.original.left,\n\t        top: t.original.top\n\t      });\n\t\n\t      if (this._shouldCenterTransform(e, t.target)) {\n\t        if (t.action === 'rotate') {\n\t          this._setOriginToCenter(t.target);\n\t        }\n\t        else {\n\t          if (t.originX !== 'center') {\n\t            if (t.originX === 'right') {\n\t              t.mouseXSign = -1;\n\t            }\n\t            else {\n\t              t.mouseXSign = 1;\n\t            }\n\t          }\n\t          if (t.originY !== 'center') {\n\t            if (t.originY === 'bottom') {\n\t              t.mouseYSign = -1;\n\t            }\n\t            else {\n\t              t.mouseYSign = 1;\n\t            }\n\t          }\n\t\n\t          t.originX = 'center';\n\t          t.originY = 'center';\n\t        }\n\t      }\n\t      else {\n\t        t.originX = t.original.originX;\n\t        t.originY = t.original.originY;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Checks if point is contained within an area of given object\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target Object to test against\n\t     * @return {Boolean} true if point is contained within an area of given object\n\t     */\n\t    containsPoint: function (e, target) {\n\t      var pointer = this.getPointer(e, true),\n\t          xy = this._normalizePointer(target, pointer);\n\t\n\t      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n\t      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n\t      return (target.containsPoint(xy) || target._findTargetCorner(pointer));\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _normalizePointer: function (object, pointer) {\n\t      var activeGroup = this.getActiveGroup(),\n\t          x = pointer.x,\n\t          y = pointer.y,\n\t          isObjectInGroup = (\n\t            activeGroup &&\n\t            object.type !== 'group' &&\n\t            activeGroup.contains(object)),\n\t          lt;\n\t\n\t      if (isObjectInGroup) {\n\t        lt = fabric.util.transformPoint(activeGroup.getCenterPoint(), this.viewportTransform, true);\n\t        x -= lt.x;\n\t        y -= lt.y;\n\t        x /= activeGroup.scaleX;\n\t        y /= activeGroup.scaleY;\n\t      }\n\t      return { x: x, y: y };\n\t    },\n\t\n\t    /**\n\t     * Returns true if object is transparent at a certain location\n\t     * @param {fabric.Object} target Object to check\n\t     * @param {Number} x Left coordinate\n\t     * @param {Number} y Top coordinate\n\t     * @return {Boolean}\n\t     */\n\t    isTargetTransparent: function (target, x, y) {\n\t      var hasBorders = target.hasBorders,\n\t          transparentCorners = target.transparentCorners;\n\t\n\t      target.hasBorders = target.transparentCorners = false;\n\t\n\t      this._draw(this.contextCache, target);\n\t\n\t      target.hasBorders = hasBorders;\n\t      target.transparentCorners = transparentCorners;\n\t\n\t      var isTransparent = fabric.util.isTransparent(\n\t        this.contextCache, x, y, this.targetFindTolerance);\n\t\n\t      this.clearContext(this.contextCache);\n\t\n\t      return isTransparent;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     */\n\t    _shouldClearSelection: function (e, target) {\n\t      var activeGroup = this.getActiveGroup(),\n\t          activeObject = this.getActiveObject();\n\t\n\t      return (\n\t        !target\n\t        ||\n\t        (target &&\n\t          activeGroup &&\n\t          !activeGroup.contains(target) &&\n\t          activeGroup !== target &&\n\t          !e.shiftKey)\n\t        ||\n\t        (target && !target.evented)\n\t        ||\n\t        (target &&\n\t          !target.selectable &&\n\t          activeObject &&\n\t          activeObject !== target)\n\t      );\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     */\n\t    _shouldCenterTransform: function (e, target) {\n\t      if (!target) {\n\t        return;\n\t      }\n\t\n\t      var t = this._currentTransform,\n\t          centerTransform;\n\t\n\t      if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\n\t        centerTransform = this.centeredScaling || target.centeredScaling;\n\t      }\n\t      else if (t.action === 'rotate') {\n\t        centerTransform = this.centeredRotation || target.centeredRotation;\n\t      }\n\t\n\t      return centerTransform ? !e.altKey : e.altKey;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getOriginFromCorner: function(target, corner) {\n\t      var origin = {\n\t        x: target.originX,\n\t        y: target.originY\n\t      };\n\t\n\t      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\n\t        origin.x = 'right';\n\t      }\n\t      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\n\t        origin.x = 'left';\n\t      }\n\t\n\t      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\n\t        origin.y = 'bottom';\n\t      }\n\t      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\n\t        origin.y = 'top';\n\t      }\n\t\n\t      return origin;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getActionFromCorner: function(target, corner) {\n\t      var action = 'drag';\n\t      if (corner) {\n\t        action = (corner === 'ml' || corner === 'mr')\n\t          ? 'scaleX'\n\t          : (corner === 'mt' || corner === 'mb')\n\t            ? 'scaleY'\n\t            : corner === 'mtr'\n\t              ? 'rotate'\n\t              : 'scale';\n\t      }\n\t      return action;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     */\n\t    _setupCurrentTransform: function (e, target) {\n\t      if (!target) {\n\t        return;\n\t      }\n\t\n\t      var pointer = this.getPointer(e),\n\t          corner = target._findTargetCorner(this.getPointer(e, true)),\n\t          action = this._getActionFromCorner(target, corner),\n\t          origin = this._getOriginFromCorner(target, corner);\n\t\n\t      this._currentTransform = {\n\t        target: target,\n\t        action: action,\n\t        scaleX: target.scaleX,\n\t        scaleY: target.scaleY,\n\t        offsetX: pointer.x - target.left,\n\t        offsetY: pointer.y - target.top,\n\t        originX: origin.x,\n\t        originY: origin.y,\n\t        ex: pointer.x,\n\t        ey: pointer.y,\n\t        left: target.left,\n\t        top: target.top,\n\t        theta: degreesToRadians(target.angle),\n\t        width: target.width * target.scaleX,\n\t        mouseXSign: 1,\n\t        mouseYSign: 1\n\t      };\n\t\n\t      this._currentTransform.original = {\n\t        left: target.left,\n\t        top: target.top,\n\t        scaleX: target.scaleX,\n\t        scaleY: target.scaleY,\n\t        originX: origin.x,\n\t        originY: origin.y\n\t      };\n\t\n\t      this._resetCurrentTransform(e);\n\t    },\n\t\n\t    /**\n\t     * Translates object by \"setting\" its left/top\n\t     * @private\n\t     * @param {Number} x pointer's x coordinate\n\t     * @param {Number} y pointer's y coordinate\n\t     */\n\t    _translateObject: function (x, y) {\n\t      var target = this._currentTransform.target;\n\t\n\t      if (!target.get('lockMovementX')) {\n\t        target.set('left', x - this._currentTransform.offsetX);\n\t      }\n\t      if (!target.get('lockMovementY')) {\n\t        target.set('top', y - this._currentTransform.offsetY);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Scales object by invoking its scaleX/scaleY methods\n\t     * @private\n\t     * @param {Number} x pointer's x coordinate\n\t     * @param {Number} y pointer's y coordinate\n\t     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\n\t     *                    When not provided, an object is scaled by both dimensions equally\n\t     */\n\t    _scaleObject: function (x, y, by) {\n\t      var t = this._currentTransform,\n\t          target = t.target,\n\t          lockScalingX = target.get('lockScalingX'),\n\t          lockScalingY = target.get('lockScalingY'),\n\t          lockScalingFlip = target.get('lockScalingFlip');\n\t\n\t      if (lockScalingX && lockScalingY) {\n\t        return;\n\t      }\n\t\n\t      // Get the constraint point\n\t      var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\n\t          localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY);\n\t\n\t      this._setLocalMouse(localMouse, t);\n\t\n\t      // Actually scale the object\n\t      this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip);\n\t\n\t      // Make sure the constraints apply\n\t      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip) {\n\t      var target = transform.target, forbidScalingX = false, forbidScalingY = false,\n\t          dim = target._getNonTransformedDimensions();\n\t\n\t      transform.newScaleX = localMouse.x / dim.x;\n\t      transform.newScaleY = localMouse.y / dim.y;\n\t\n\t      if (lockScalingFlip && transform.newScaleX <= 0 && transform.newScaleX < target.scaleX) {\n\t        forbidScalingX = true;\n\t      }\n\t\n\t      if (lockScalingFlip && transform.newScaleY <= 0 && transform.newScaleY < target.scaleY) {\n\t        forbidScalingY = true;\n\t      }\n\t\n\t      if (by === 'equally' && !lockScalingX && !lockScalingY) {\n\t        forbidScalingX || forbidScalingY || this._scaleObjectEqually(localMouse, target, transform);\n\t      }\n\t      else if (!by) {\n\t        forbidScalingX || lockScalingX || target.set('scaleX', transform.newScaleX);\n\t        forbidScalingY || lockScalingY || target.set('scaleY', transform.newScaleY);\n\t      }\n\t      else if (by === 'x' && !target.get('lockUniScaling')) {\n\t        forbidScalingX || lockScalingX || target.set('scaleX', transform.newScaleX);\n\t      }\n\t      else if (by === 'y' && !target.get('lockUniScaling')) {\n\t        forbidScalingY || lockScalingY || target.set('scaleY', transform.newScaleY);\n\t      }\n\t\n\t      forbidScalingX || forbidScalingY || this._flipObject(transform, by);\n\t\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _scaleObjectEqually: function(localMouse, target, transform) {\n\t\n\t      var dist = localMouse.y + localMouse.x,\n\t          dim = target._getNonTransformedDimensions(),\n\t          lastDist = dim.y * transform.original.scaleY +\n\t                     dim.x * transform.original.scaleX;\n\t\n\t      // We use transform.scaleX/Y instead of target.scaleX/Y\n\t      // because the object may have a min scale and we'll loose the proportions\n\t      transform.newScaleX = transform.original.scaleX * dist / lastDist;\n\t      transform.newScaleY = transform.original.scaleY * dist / lastDist;\n\t\n\t      target.set('scaleX', transform.newScaleX);\n\t      target.set('scaleY', transform.newScaleY);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _flipObject: function(transform, by) {\n\t      if (transform.newScaleX < 0 && by !== 'y') {\n\t        if (transform.originX === 'left') {\n\t          transform.originX = 'right';\n\t        }\n\t        else if (transform.originX === 'right') {\n\t          transform.originX = 'left';\n\t        }\n\t      }\n\t\n\t      if (transform.newScaleY < 0 && by !== 'x') {\n\t        if (transform.originY === 'top') {\n\t          transform.originY = 'bottom';\n\t        }\n\t        else if (transform.originY === 'bottom') {\n\t          transform.originY = 'top';\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setLocalMouse: function(localMouse, t) {\n\t      var target = t.target;\n\t\n\t      if (t.originX === 'right') {\n\t        localMouse.x *= -1;\n\t      }\n\t      else if (t.originX === 'center') {\n\t        localMouse.x *= t.mouseXSign * 2;\n\t\n\t        if (localMouse.x < 0) {\n\t          t.mouseXSign = -t.mouseXSign;\n\t        }\n\t      }\n\t\n\t      if (t.originY === 'bottom') {\n\t        localMouse.y *= -1;\n\t      }\n\t      else if (t.originY === 'center') {\n\t        localMouse.y *= t.mouseYSign * 2;\n\t\n\t        if (localMouse.y < 0) {\n\t          t.mouseYSign = -t.mouseYSign;\n\t        }\n\t      }\n\t\n\t      // adjust the mouse coordinates when dealing with padding\n\t      if (abs(localMouse.x) > target.padding) {\n\t        if (localMouse.x < 0) {\n\t          localMouse.x += target.padding;\n\t        }\n\t        else {\n\t          localMouse.x -= target.padding;\n\t        }\n\t      }\n\t      else { // mouse is within the padding, set to 0\n\t        localMouse.x = 0;\n\t      }\n\t\n\t      if (abs(localMouse.y) > target.padding) {\n\t        if (localMouse.y < 0) {\n\t          localMouse.y += target.padding;\n\t        }\n\t        else {\n\t          localMouse.y -= target.padding;\n\t        }\n\t      }\n\t      else {\n\t        localMouse.y = 0;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Rotates object by invoking its rotate method\n\t     * @private\n\t     * @param {Number} x pointer's x coordinate\n\t     * @param {Number} y pointer's y coordinate\n\t     */\n\t    _rotateObject: function (x, y) {\n\t\n\t      var t = this._currentTransform;\n\t\n\t      if (t.target.get('lockRotation')) {\n\t        return;\n\t      }\n\t\n\t      var lastAngle = atan2(t.ey - t.top, t.ex - t.left),\n\t          curAngle = atan2(y - t.top, x - t.left),\n\t          angle = radiansToDegrees(curAngle - lastAngle + t.theta);\n\t\n\t      // normalize angle to positive value\n\t      if (angle < 0) {\n\t        angle = 360 + angle;\n\t      }\n\t\n\t      t.target.angle = angle % 360;\n\t    },\n\t\n\t    /**\n\t     * Set the cursor type of the canvas element\n\t     * @param {String} value Cursor type of the canvas element.\n\t     * @see http://www.w3.org/TR/css3-ui/#cursor\n\t     */\n\t    setCursor: function (value) {\n\t      this.upperCanvasEl.style.cursor = value;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _resetObjectTransform: function (target) {\n\t      target.scaleX = 1;\n\t      target.scaleY = 1;\n\t      target.setAngle(0);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _drawSelection: function () {\n\t      var ctx = this.contextTop,\n\t          groupSelector = this._groupSelector,\n\t          left = groupSelector.left,\n\t          top = groupSelector.top,\n\t          aleft = abs(left),\n\t          atop = abs(top);\n\t\n\t      ctx.fillStyle = this.selectionColor;\n\t\n\t      ctx.fillRect(\n\t        groupSelector.ex - ((left > 0) ? 0 : -left),\n\t        groupSelector.ey - ((top > 0) ? 0 : -top),\n\t        aleft,\n\t        atop\n\t      );\n\t\n\t      ctx.lineWidth = this.selectionLineWidth;\n\t      ctx.strokeStyle = this.selectionBorderColor;\n\t\n\t      // selection border\n\t      if (this.selectionDashArray.length > 1) {\n\t\n\t        var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0: aleft),\n\t            py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0: atop);\n\t\n\t        ctx.beginPath();\n\t\n\t        fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\n\t        fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\n\t        fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\n\t        fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\n\t\n\t        ctx.closePath();\n\t        ctx.stroke();\n\t      }\n\t      else {\n\t        ctx.strokeRect(\n\t          groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n\t          groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\n\t          aleft,\n\t          atop\n\t        );\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _isLastRenderedObject: function(e) {\n\t      return (\n\t        this.controlsAboveOverlay &&\n\t        this.lastRenderedObjectWithControlsAboveOverlay &&\n\t        this.lastRenderedObjectWithControlsAboveOverlay.visible &&\n\t        this.containsPoint(e, this.lastRenderedObjectWithControlsAboveOverlay) &&\n\t        this.lastRenderedObjectWithControlsAboveOverlay._findTargetCorner(this.getPointer(e, true)));\n\t    },\n\t\n\t    /**\n\t     * Method that determines what object we are clicking on\n\t     * @param {Event} e mouse event\n\t     * @param {Boolean} skipGroup when true, group is skipped and only objects are traversed through\n\t     */\n\t    findTarget: function (e, skipGroup) {\n\t      if (this.skipTargetFind) {\n\t        return;\n\t      }\n\t\n\t      if (this._isLastRenderedObject(e)) {\n\t        return this.lastRenderedObjectWithControlsAboveOverlay;\n\t      }\n\t\n\t      // first check current group (if one exists)\n\t      var activeGroup = this.getActiveGroup();\n\t      if (activeGroup && !skipGroup && this.containsPoint(e, activeGroup)) {\n\t        return activeGroup;\n\t      }\n\t\n\t      var target = this._searchPossibleTargets(e, skipGroup);\n\t      this._fireOverOutEvents(target, e);\n\t\n\t      return target;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _fireOverOutEvents: function(target, e) {\n\t      if (target) {\n\t        if (this._hoveredTarget !== target) {\n\t          if (this._hoveredTarget) {\n\t            this.fire('mouse:out', { target: this._hoveredTarget, e: e });\n\t            this._hoveredTarget.fire('mouseout');\n\t          }\n\t          this.fire('mouse:over', { target: target, e: e });\n\t          target.fire('mouseover');\n\t          this._hoveredTarget = target;\n\t        }\n\t      }\n\t      else if (this._hoveredTarget) {\n\t        this.fire('mouse:out', { target: this._hoveredTarget, e: e });\n\t        this._hoveredTarget.fire('mouseout');\n\t        this._hoveredTarget = null;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _checkTarget: function(e, obj, pointer) {\n\t      if (obj &&\n\t          obj.visible &&\n\t          obj.evented &&\n\t          this.containsPoint(e, obj)){\n\t        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n\t          var isTransparent = this.isTargetTransparent(obj, pointer.x, pointer.y);\n\t          if (!isTransparent) {\n\t            return true;\n\t          }\n\t        }\n\t        else {\n\t          return true;\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _searchPossibleTargets: function(e, skipGroup) {\n\t\n\t      // Cache all targets where their bounding box contains point.\n\t      var target,\n\t          pointer = this.getPointer(e, true),\n\t          i = this._objects.length;\n\t      // Do not check for currently grouped objects, since we check the parent group itself.\n\t      // untill we call this function specifically to search inside the activeGroup\n\t      while (i--) {\n\t        if ((!this._objects[i].group || skipGroup) && this._checkTarget(e, this._objects[i], pointer)){\n\t          this.relatedTarget = this._objects[i];\n\t          target = this._objects[i];\n\t          break;\n\t        }\n\t      }\n\t\n\t      return target;\n\t    },\n\t\n\t    /**\n\t     * Returns pointer coordinates relative to canvas.\n\t     * @param {Event} e\n\t     * @return {Object} object with \"x\" and \"y\" number values\n\t     */\n\t    getPointer: function (e, ignoreZoom, upperCanvasEl) {\n\t      if (!upperCanvasEl) {\n\t        upperCanvasEl = this.upperCanvasEl;\n\t      }\n\t      var pointer = getPointer(e),\n\t          bounds = upperCanvasEl.getBoundingClientRect(),\n\t          boundsWidth = bounds.width || 0,\n\t          boundsHeight = bounds.height || 0,\n\t          cssScale;\n\t\n\t      if (!boundsWidth || !boundsHeight ) {\n\t        if ('top' in bounds && 'bottom' in bounds) {\n\t          boundsHeight = Math.abs( bounds.top - bounds.bottom );\n\t        }\n\t        if ('right' in bounds && 'left' in bounds) {\n\t          boundsWidth = Math.abs( bounds.right - bounds.left );\n\t        }\n\t      }\n\t\n\t      this.calcOffset();\n\t\n\t      pointer.x = pointer.x - this._offset.left;\n\t      pointer.y = pointer.y - this._offset.top;\n\t      if (!ignoreZoom) {\n\t        pointer = fabric.util.transformPoint(\n\t          pointer,\n\t          fabric.util.invertTransform(this.viewportTransform)\n\t        );\n\t      }\n\t\n\t      if (boundsWidth === 0 || boundsHeight === 0) {\n\t        // If bounds are not available (i.e. not visible), do not apply scale.\n\t        cssScale = { width: 1, height: 1 };\n\t      }\n\t      else {\n\t        cssScale = {\n\t          width: upperCanvasEl.width / boundsWidth,\n\t          height: upperCanvasEl.height / boundsHeight\n\t        };\n\t      }\n\t\n\t      return {\n\t        x: pointer.x * cssScale.width,\n\t        y: pointer.y * cssScale.height\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n\t     */\n\t    _createUpperCanvas: function () {\n\t      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, '');\n\t\n\t      this.upperCanvasEl = this._createCanvasElement();\n\t      fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\n\t\n\t      this.wrapperEl.appendChild(this.upperCanvasEl);\n\t\n\t      this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);\n\t      this._applyCanvasStyle(this.upperCanvasEl);\n\t      this.contextTop = this.upperCanvasEl.getContext('2d');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createCacheCanvas: function () {\n\t      this.cacheCanvasEl = this._createCanvasElement();\n\t      this.cacheCanvasEl.setAttribute('width', this.width);\n\t      this.cacheCanvasEl.setAttribute('height', this.height);\n\t      this.contextCache = this.cacheCanvasEl.getContext('2d');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _initWrapperElement: function () {\n\t      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\n\t        'class': this.containerClass\n\t      });\n\t      fabric.util.setStyle(this.wrapperEl, {\n\t        width: this.getWidth() + 'px',\n\t        height: this.getHeight() + 'px',\n\t        position: 'relative'\n\t      });\n\t      fabric.util.makeElementUnselectable(this.wrapperEl);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {HTMLElement} element canvas element to apply styles on\n\t     */\n\t    _applyCanvasStyle: function (element) {\n\t      var width = this.getWidth() || element.width,\n\t          height = this.getHeight() || element.height;\n\t\n\t      fabric.util.setStyle(element, {\n\t        position: 'absolute',\n\t        width: width + 'px',\n\t        height: height + 'px',\n\t        left: 0,\n\t        top: 0\n\t      });\n\t      element.width = width;\n\t      element.height = height;\n\t      fabric.util.makeElementUnselectable(element);\n\t    },\n\t\n\t    /**\n\t     * Copys the the entire inline style from one element (fromEl) to another (toEl)\n\t     * @private\n\t     * @param {Element} fromEl Element style is copied from\n\t     * @param {Element} toEl Element copied style is applied to\n\t     */\n\t    _copyCanvasStyle: function (fromEl, toEl) {\n\t      toEl.style.cssText = fromEl.style.cssText;\n\t    },\n\t\n\t    /**\n\t     * Returns context of canvas where object selection is drawn\n\t     * @return {CanvasRenderingContext2D}\n\t     */\n\t    getSelectionContext: function() {\n\t      return this.contextTop;\n\t    },\n\t\n\t    /**\n\t     * Returns &lt;canvas> element on which object selection is drawn\n\t     * @return {HTMLCanvasElement}\n\t     */\n\t    getSelectionElement: function () {\n\t      return this.upperCanvasEl;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} object\n\t     */\n\t    _setActiveObject: function(object) {\n\t      if (this._activeObject) {\n\t        this._activeObject.set('active', false);\n\t      }\n\t      this._activeObject = object;\n\t      object.set('active', true);\n\t    },\n\t\n\t    /**\n\t     * Sets given object as the only active object on canvas\n\t     * @param {fabric.Object} object Object to set as an active one\n\t     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    setActiveObject: function (object, e) {\n\t      this._setActiveObject(object);\n\t      this.renderAll();\n\t      this.fire('object:selected', { target: object, e: e });\n\t      object.fire('selected', { e: e });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns currently active object\n\t     * @return {fabric.Object} active object\n\t     */\n\t    getActiveObject: function () {\n\t      return this._activeObject;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _discardActiveObject: function() {\n\t      if (this._activeObject) {\n\t        this._activeObject.set('active', false);\n\t      }\n\t      this._activeObject = null;\n\t    },\n\t\n\t    /**\n\t     * Discards currently active object\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    discardActiveObject: function (e) {\n\t      this._discardActiveObject();\n\t      this.renderAll();\n\t      this.fire('selection:cleared', { e: e });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Group} group\n\t     */\n\t    _setActiveGroup: function(group) {\n\t      this._activeGroup = group;\n\t      if (group) {\n\t        group.set('active', true);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets active group to a speicified one\n\t     * @param {fabric.Group} group Group to set as a current one\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    setActiveGroup: function (group, e) {\n\t      this._setActiveGroup(group);\n\t      if (group) {\n\t        this.fire('object:selected', { target: group, e: e });\n\t        group.fire('selected', { e: e });\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns currently active group\n\t     * @return {fabric.Group} Current group\n\t     */\n\t    getActiveGroup: function () {\n\t      return this._activeGroup;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _discardActiveGroup: function() {\n\t      var g = this.getActiveGroup();\n\t      if (g) {\n\t        g.destroy();\n\t      }\n\t      this.setActiveGroup(null);\n\t    },\n\t\n\t    /**\n\t     * Discards currently active group\n\t     * @return {fabric.Canvas} thisArg\n\t     */\n\t    discardActiveGroup: function (e) {\n\t      this._discardActiveGroup();\n\t      this.fire('selection:cleared', { e: e });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Deactivates all objects on canvas, removing any active group or object\n\t     * @return {fabric.Canvas} thisArg\n\t     */\n\t    deactivateAll: function () {\n\t      var allObjects = this.getObjects(),\n\t          i = 0,\n\t          len = allObjects.length;\n\t      for ( ; i < len; i++) {\n\t        allObjects[i].set('active', false);\n\t      }\n\t      this._discardActiveGroup();\n\t      this._discardActiveObject();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Deactivates all objects and dispatches appropriate events\n\t     * @return {fabric.Canvas} thisArg\n\t     */\n\t    deactivateAllWithDispatch: function (e) {\n\t      var activeObject = this.getActiveGroup() || this.getActiveObject();\n\t      if (activeObject) {\n\t        this.fire('before:selection:cleared', { target: activeObject, e: e });\n\t      }\n\t      this.deactivateAll();\n\t      if (activeObject) {\n\t        this.fire('selection:cleared', { e: e });\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Draws objects' controls (borders/controls)\n\t     * @param {CanvasRenderingContext2D} ctx Context to render controls on\n\t     */\n\t    drawControls: function(ctx) {\n\t      var activeGroup = this.getActiveGroup();\n\t      if (activeGroup) {\n\t        this._drawGroupControls(ctx, activeGroup);\n\t      }\n\t      else {\n\t        this._drawObjectsControls(ctx);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _drawGroupControls: function(ctx, activeGroup) {\n\t      activeGroup._renderControls(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _drawObjectsControls: function(ctx) {\n\t      for (var i = 0, len = this._objects.length; i < len; ++i) {\n\t        if (!this._objects[i] || !this._objects[i].active) {\n\t          continue;\n\t        }\n\t        this._objects[i]._renderControls(ctx);\n\t        this.lastRenderedObjectWithControlsAboveOverlay = this._objects[i];\n\t      }\n\t    }\n\t  });\n\t\n\t  // copying static properties manually to work around Opera's bug,\n\t  // where \"prototype\" property is enumerable and overrides existing prototype\n\t  for (var prop in fabric.StaticCanvas) {\n\t    if (prop !== 'prototype') {\n\t      fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n\t    }\n\t  }\n\t\n\t  if (fabric.isTouchSupported) {\n\t    /** @ignore */\n\t    fabric.Canvas.prototype._setCursorFromEvent = function() { };\n\t  }\n\t\n\t  /**\n\t   * @class fabric.Element\n\t   * @alias fabric.Canvas\n\t   * @deprecated Use {@link fabric.Canvas} instead.\n\t   * @constructor\n\t   */\n\t  fabric.Element = fabric.Canvas;\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var cursorOffset = {\n\t    mt: 0, // n\n\t    tr: 1, // ne\n\t    mr: 2, // e\n\t    br: 3, // se\n\t    mb: 4, // s\n\t    bl: 5, // sw\n\t    ml: 6, // w\n\t    tl: 7 // nw\n\t  },\n\t  addListener = fabric.util.addListener,\n\t  removeListener = fabric.util.removeListener;\n\t\n\t  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\t\n\t    /**\n\t     * Map of cursor style values for each of the object controls\n\t     * @private\n\t     */\n\t    cursorMap: [\n\t      'n-resize',\n\t      'ne-resize',\n\t      'e-resize',\n\t      'se-resize',\n\t      's-resize',\n\t      'sw-resize',\n\t      'w-resize',\n\t      'nw-resize'\n\t    ],\n\t\n\t    /**\n\t     * Adds mouse listeners to canvas\n\t     * @private\n\t     */\n\t    _initEventListeners: function () {\n\t\n\t      this._bindEvents();\n\t\n\t      addListener(fabric.window, 'resize', this._onResize);\n\t\n\t      // mouse events\n\t      addListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n\t      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n\t      addListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);\n\t\n\t      // touch events\n\t      addListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);\n\t      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\t\n\t      if (typeof eventjs !== 'undefined' && 'add' in eventjs) {\n\t        eventjs.add(this.upperCanvasEl, 'gesture', this._onGesture);\n\t        eventjs.add(this.upperCanvasEl, 'drag', this._onDrag);\n\t        eventjs.add(this.upperCanvasEl, 'orientation', this._onOrientationChange);\n\t        eventjs.add(this.upperCanvasEl, 'shake', this._onShake);\n\t        eventjs.add(this.upperCanvasEl, 'longpress', this._onLongPress);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _bindEvents: function() {\n\t      this._onMouseDown = this._onMouseDown.bind(this);\n\t      this._onMouseMove = this._onMouseMove.bind(this);\n\t      this._onMouseUp = this._onMouseUp.bind(this);\n\t      this._onResize = this._onResize.bind(this);\n\t      this._onGesture = this._onGesture.bind(this);\n\t      this._onDrag = this._onDrag.bind(this);\n\t      this._onShake = this._onShake.bind(this);\n\t      this._onLongPress = this._onLongPress.bind(this);\n\t      this._onOrientationChange = this._onOrientationChange.bind(this);\n\t      this._onMouseWheel = this._onMouseWheel.bind(this);\n\t    },\n\t\n\t    /**\n\t     * Removes all event listeners\n\t     */\n\t    removeListeners: function() {\n\t      removeListener(fabric.window, 'resize', this._onResize);\n\t\n\t      removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n\t      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n\t      removeListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);\n\t\n\t      removeListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);\n\t      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\t\n\t      if (typeof eventjs !== 'undefined' && 'remove' in eventjs) {\n\t        eventjs.remove(this.upperCanvasEl, 'gesture', this._onGesture);\n\t        eventjs.remove(this.upperCanvasEl, 'drag', this._onDrag);\n\t        eventjs.remove(this.upperCanvasEl, 'orientation', this._onOrientationChange);\n\t        eventjs.remove(this.upperCanvasEl, 'shake', this._onShake);\n\t        eventjs.remove(this.upperCanvasEl, 'longpress', this._onLongPress);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js gesture\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onGesture: function(e, self) {\n\t      this.__onTransformGesture && this.__onTransformGesture(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js drag\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onDrag: function(e, self) {\n\t      this.__onDrag && this.__onDrag(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js wheel event\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onMouseWheel: function(e, self) {\n\t      this.__onMouseWheel && this.__onMouseWheel(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js orientation change\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onOrientationChange: function(e, self) {\n\t      this.__onOrientationChange && this.__onOrientationChange(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js shake\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onShake: function(e, self) {\n\t      this.__onShake && this.__onShake(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js shake\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onLongPress: function(e, self) {\n\t      this.__onLongPress && this.__onLongPress(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mousedown\n\t     */\n\t    _onMouseDown: function (e) {\n\t      this.__onMouseDown(e);\n\t\n\t      addListener(fabric.document, 'touchend', this._onMouseUp);\n\t      addListener(fabric.document, 'touchmove', this._onMouseMove);\n\t\n\t      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n\t      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\t\n\t      if (e.type === 'touchstart') {\n\t        // Unbind mousedown to prevent double triggers from touch devices\n\t        removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n\t      }\n\t      else {\n\t        addListener(fabric.document, 'mouseup', this._onMouseUp);\n\t        addListener(fabric.document, 'mousemove', this._onMouseMove);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mouseup\n\t     */\n\t    _onMouseUp: function (e) {\n\t      this.__onMouseUp(e);\n\t\n\t      removeListener(fabric.document, 'mouseup', this._onMouseUp);\n\t      removeListener(fabric.document, 'touchend', this._onMouseUp);\n\t\n\t      removeListener(fabric.document, 'mousemove', this._onMouseMove);\n\t      removeListener(fabric.document, 'touchmove', this._onMouseMove);\n\t\n\t      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n\t      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\t\n\t      if (e.type === 'touchend') {\n\t        // Wait 400ms before rebinding mousedown to prevent double triggers\n\t        // from touch devices\n\t        var _this = this;\n\t        setTimeout(function() {\n\t          addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);\n\t        }, 400);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mousemove\n\t     */\n\t    _onMouseMove: function (e) {\n\t      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n\t      this.__onMouseMove(e);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onResize: function () {\n\t      this.calcOffset();\n\t    },\n\t\n\t    /**\n\t     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n\t     * @private\n\t     * @param {Object} target\n\t     * @param {Object} pointer\n\t     */\n\t    _shouldRender: function(target, pointer) {\n\t      var activeObject = this.getActiveGroup() || this.getActiveObject();\n\t\n\t      return !!(\n\t        (target && (\n\t          target.isMoving ||\n\t          target !== activeObject))\n\t        ||\n\t        (!target && !!activeObject)\n\t        ||\n\t        (!target && !activeObject && !this._groupSelector)\n\t        ||\n\t        (pointer &&\n\t          this._previousPointer &&\n\t          this.selection && (\n\t          pointer.x !== this._previousPointer.x ||\n\t          pointer.y !== this._previousPointer.y))\n\t      );\n\t    },\n\t\n\t    /**\n\t     * Method that defines the actions when mouse is released on canvas.\n\t     * The method resets the currentTransform parameters, store the image corner\n\t     * position in the image object and render the canvas on top.\n\t     * @private\n\t     * @param {Event} e Event object fired on mouseup\n\t     */\n\t    __onMouseUp: function (e) {\n\t      var target;\n\t\n\t      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n\t        this._onMouseUpInDrawingMode(e);\n\t        return;\n\t      }\n\t\n\t      if (this._currentTransform) {\n\t        this._finalizeCurrentTransform();\n\t        target = this._currentTransform.target;\n\t      }\n\t      else {\n\t        target = this.findTarget(e, true);\n\t      }\n\t\n\t      var shouldRender = this._shouldRender(target, this.getPointer(e));\n\t\n\t      this._maybeGroupObjects(e);\n\t\n\t      if (target) {\n\t        target.isMoving = false;\n\t      }\n\t\n\t      shouldRender && this.renderAll();\n\t\n\t      this._handleCursorAndEvent(e, target);\n\t    },\n\t\n\t    _handleCursorAndEvent: function(e, target) {\n\t      this._setCursorFromEvent(e, target);\n\t\n\t      // TODO: why are we doing this?\n\t      var _this = this;\n\t      setTimeout(function () {\n\t        _this._setCursorFromEvent(e, target);\n\t      }, 50);\n\t\n\t      this.fire('mouse:up', { target: target, e: e });\n\t      target && target.fire('mouseup', { e: e });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _finalizeCurrentTransform: function() {\n\t\n\t      var transform = this._currentTransform,\n\t          target = transform.target;\n\t\n\t      if (target._scaling) {\n\t        target._scaling = false;\n\t      }\n\t\n\t      target.setCoords();\n\t\n\t      // only fire :modified event if target coordinates were changed during mousedown-mouseup\n\t      if (this.stateful && target.hasStateChanged()) {\n\t        this.fire('object:modified', { target: target });\n\t        target.fire('modified');\n\t      }\n\t\n\t      this._restoreOriginXY(target);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} target Object to restore\n\t     */\n\t    _restoreOriginXY: function(target) {\n\t      if (this._previousOriginX && this._previousOriginY) {\n\t\n\t        var originPoint = target.translateToOriginPoint(\n\t          target.getCenterPoint(),\n\t          this._previousOriginX,\n\t          this._previousOriginY);\n\t\n\t        target.originX = this._previousOriginX;\n\t        target.originY = this._previousOriginY;\n\t\n\t        target.left = originPoint.x;\n\t        target.top = originPoint.y;\n\t\n\t        this._previousOriginX = null;\n\t        this._previousOriginY = null;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mousedown\n\t     */\n\t    _onMouseDownInDrawingMode: function(e) {\n\t      this._isCurrentlyDrawing = true;\n\t      this.discardActiveObject(e).renderAll();\n\t      if (this.clipTo) {\n\t        fabric.util.clipContext(this, this.contextTop);\n\t      }\n\t      var ivt = fabric.util.invertTransform(this.viewportTransform),\n\t          pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);\n\t      this.freeDrawingBrush.onMouseDown(pointer);\n\t      this.fire('mouse:down', { e: e });\n\t\n\t      var target = this.findTarget(e);\n\t      if (typeof target !== 'undefined') {\n\t        target.fire('mousedown', { e: e, target: target });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mousemove\n\t     */\n\t    _onMouseMoveInDrawingMode: function(e) {\n\t      if (this._isCurrentlyDrawing) {\n\t        var ivt = fabric.util.invertTransform(this.viewportTransform),\n\t            pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);\n\t        this.freeDrawingBrush.onMouseMove(pointer);\n\t      }\n\t      this.setCursor(this.freeDrawingCursor);\n\t      this.fire('mouse:move', { e: e });\n\t\n\t      var target = this.findTarget(e);\n\t      if (typeof target !== 'undefined') {\n\t        target.fire('mousemove', { e: e, target: target });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mouseup\n\t     */\n\t    _onMouseUpInDrawingMode: function(e) {\n\t      this._isCurrentlyDrawing = false;\n\t      if (this.clipTo) {\n\t        this.contextTop.restore();\n\t      }\n\t      this.freeDrawingBrush.onMouseUp();\n\t      this.fire('mouse:up', { e: e });\n\t\n\t      var target = this.findTarget(e);\n\t      if (typeof target !== 'undefined') {\n\t        target.fire('mouseup', { e: e, target: target });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Method that defines the actions when mouse is clic ked on canvas.\n\t     * The method inits the currentTransform parameters and renders all the\n\t     * canvas so the current image can be placed on the top canvas and the rest\n\t     * in on the container one.\n\t     * @private\n\t     * @param {Event} e Event object fired on mousedown\n\t     */\n\t    __onMouseDown: function (e) {\n\t\n\t      // accept only left clicks\n\t      var isLeftClick  = 'which' in e ? e.which === 1 : e.button === 1;\n\t      if (!isLeftClick && !fabric.isTouchSupported) {\n\t        return;\n\t      }\n\t\n\t      if (this.isDrawingMode) {\n\t        this._onMouseDownInDrawingMode(e);\n\t        return;\n\t      }\n\t\n\t      // ignore if some object is being transformed at this moment\n\t      if (this._currentTransform) {\n\t        return;\n\t      }\n\t\n\t      var target = this.findTarget(e),\n\t          pointer = this.getPointer(e, true);\n\t\n\t      // save pointer for check in __onMouseUp event\n\t      this._previousPointer = pointer;\n\t\n\t      var shouldRender = this._shouldRender(target, pointer),\n\t          shouldGroup = this._shouldGroup(e, target);\n\t\n\t      if (this._shouldClearSelection(e, target)) {\n\t        this._clearSelection(e, target, pointer);\n\t      }\n\t      else if (shouldGroup) {\n\t        this._handleGrouping(e, target);\n\t        target = this.getActiveGroup();\n\t      }\n\t\n\t      if (target && target.selectable && !shouldGroup) {\n\t        this._beforeTransform(e, target);\n\t        this._setupCurrentTransform(e, target);\n\t      }\n\t      // we must renderAll so that active image is placed on the top canvas\n\t      shouldRender && this.renderAll();\n\t\n\t      this.fire('mouse:down', { target: target, e: e });\n\t      target && target.fire('mousedown', { e: e });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _beforeTransform: function(e, target) {\n\t      this.stateful && target.saveState();\n\t\n\t      // determine if it's a drag or rotate case\n\t      if (target._findTargetCorner(this.getPointer(e))) {\n\t        this.onBeforeScaleRotate(target);\n\t      }\n\t\n\t      if (target !== this.getActiveGroup() && target !== this.getActiveObject()) {\n\t        this.deactivateAll();\n\t        this.setActiveObject(target, e);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _clearSelection: function(e, target, pointer) {\n\t      this.deactivateAllWithDispatch(e);\n\t\n\t      if (target && target.selectable) {\n\t        this.setActiveObject(target, e);\n\t      }\n\t      else if (this.selection) {\n\t        this._groupSelector = {\n\t          ex: pointer.x,\n\t          ey: pointer.y,\n\t          top: 0,\n\t          left: 0\n\t        };\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} target Object for that origin is set to center\n\t     */\n\t    _setOriginToCenter: function(target) {\n\t      this._previousOriginX = this._currentTransform.target.originX;\n\t      this._previousOriginY = this._currentTransform.target.originY;\n\t\n\t      var center = target.getCenterPoint();\n\t\n\t      target.originX = 'center';\n\t      target.originY = 'center';\n\t\n\t      target.left = center.x;\n\t      target.top = center.y;\n\t\n\t      this._currentTransform.left = target.left;\n\t      this._currentTransform.top = target.top;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} target Object for that center is set to origin\n\t     */\n\t    _setCenterToOrigin: function(target) {\n\t      var originPoint = target.translateToOriginPoint(\n\t        target.getCenterPoint(),\n\t        this._previousOriginX,\n\t        this._previousOriginY);\n\t\n\t      target.originX = this._previousOriginX;\n\t      target.originY = this._previousOriginY;\n\t\n\t      target.left = originPoint.x;\n\t      target.top = originPoint.y;\n\t\n\t      this._previousOriginX = null;\n\t      this._previousOriginY = null;\n\t    },\n\t\n\t    /**\n\t     * Method that defines the actions when mouse is hovering the canvas.\n\t     * The currentTransform parameter will definde whether the user is rotating/scaling/translating\n\t     * an image or neither of them (only hovering). A group selection is also possible and would cancel\n\t     * all any other type of action.\n\t     * In case of an image transformation only the top canvas will be rendered.\n\t     * @private\n\t     * @param {Event} e Event object fired on mousemove\n\t     */\n\t    __onMouseMove: function (e) {\n\t\n\t      var target, pointer;\n\t\n\t      if (this.isDrawingMode) {\n\t        this._onMouseMoveInDrawingMode(e);\n\t        return;\n\t      }\n\t      if (typeof e.touches !== 'undefined' && e.touches.length > 1) {\n\t        return;\n\t      }\n\t\n\t      var groupSelector = this._groupSelector;\n\t\n\t      // We initially clicked in an empty area, so we draw a box for multiple selection\n\t      if (groupSelector) {\n\t        pointer = this.getPointer(e, true);\n\t\n\t        groupSelector.left = pointer.x - groupSelector.ex;\n\t        groupSelector.top = pointer.y - groupSelector.ey;\n\t\n\t        this.renderTop();\n\t      }\n\t      else if (!this._currentTransform) {\n\t\n\t        target = this.findTarget(e);\n\t\n\t        if (!target || target && !target.selectable) {\n\t          this.setCursor(this.defaultCursor);\n\t        }\n\t        else {\n\t          this._setCursorFromEvent(e, target);\n\t        }\n\t      }\n\t      else {\n\t        this._transformObject(e);\n\t      }\n\t\n\t      this.fire('mouse:move', { target: target, e: e });\n\t      target && target.fire('mousemove', { e: e });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event fired on mousemove\n\t     */\n\t    _transformObject: function(e) {\n\t      var pointer = this.getPointer(e),\n\t          transform = this._currentTransform;\n\t\n\t      transform.reset = false,\n\t      transform.target.isMoving = true;\n\t\n\t      this._beforeScaleTransform(e, transform);\n\t      this._performTransformAction(e, transform, pointer);\n\t\n\t      this.renderAll();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _performTransformAction: function(e, transform, pointer) {\n\t      var x = pointer.x,\n\t          y = pointer.y,\n\t          target = transform.target,\n\t          action = transform.action;\n\t\n\t      if (action === 'rotate') {\n\t        this._rotateObject(x, y);\n\t        this._fire('rotating', target, e);\n\t      }\n\t      else if (action === 'scale') {\n\t        this._onScale(e, transform, x, y);\n\t        this._fire('scaling', target, e);\n\t      }\n\t      else if (action === 'scaleX') {\n\t        this._scaleObject(x, y, 'x');\n\t        this._fire('scaling', target, e);\n\t      }\n\t      else if (action === 'scaleY') {\n\t        this._scaleObject(x, y, 'y');\n\t        this._fire('scaling', target, e);\n\t      }\n\t      else {\n\t        this._translateObject(x, y);\n\t        this._fire('moving', target, e);\n\t        this.setCursor(this.moveCursor);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _fire: function(eventName, target, e) {\n\t      this.fire('object:' + eventName, { target: target, e: e });\n\t      target.fire(eventName, { e: e });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _beforeScaleTransform: function(e, transform) {\n\t      if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\n\t        var centerTransform = this._shouldCenterTransform(e, transform.target);\n\t\n\t        // Switch from a normal resize to center-based\n\t        if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\n\t           // Switch from center-based resize to normal one\n\t           (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\n\t        ) {\n\t          this._resetCurrentTransform(e);\n\t          transform.reset = true;\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onScale: function(e, transform, x, y) {\n\t      // rotate object only if shift key is not pressed\n\t      // and if it is not a group we are transforming\n\t      if ((e.shiftKey || this.uniScaleTransform) && !transform.target.get('lockUniScaling')) {\n\t        transform.currentAction = 'scale';\n\t        this._scaleObject(x, y);\n\t      }\n\t      else {\n\t        // Switch from a normal resize to proportional\n\t        if (!transform.reset && transform.currentAction === 'scale') {\n\t          this._resetCurrentTransform(e, transform.target);\n\t        }\n\t\n\t        transform.currentAction = 'scaleEqually';\n\t        this._scaleObject(x, y, 'equally');\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets the cursor depending on where the canvas is being hovered.\n\t     * Note: very buggy in Opera\n\t     * @param {Event} e Event object\n\t     * @param {Object} target Object that the mouse is hovering, if so.\n\t     */\n\t    _setCursorFromEvent: function (e, target) {\n\t      if (!target || !target.selectable) {\n\t        this.setCursor(this.defaultCursor);\n\t        return false;\n\t      }\n\t      else {\n\t        var activeGroup = this.getActiveGroup(),\n\t            // only show proper corner when group selection is not active\n\t            corner = target._findTargetCorner\n\t                      && (!activeGroup || !activeGroup.contains(target))\n\t                      && target._findTargetCorner(this.getPointer(e, true));\n\t\n\t        if (!corner) {\n\t          this.setCursor(target.hoverCursor || this.hoverCursor);\n\t        }\n\t        else {\n\t          this._setCornerCursor(corner, target);\n\t        }\n\t      }\n\t      return true;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setCornerCursor: function(corner, target) {\n\t      if (corner in cursorOffset) {\n\t        this.setCursor(this._getRotatedCornerCursor(corner, target));\n\t      }\n\t      else if (corner === 'mtr' && target.hasRotatingPoint) {\n\t        this.setCursor(this.rotationCursor);\n\t      }\n\t      else {\n\t        this.setCursor(this.defaultCursor);\n\t        return false;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getRotatedCornerCursor: function(corner, target) {\n\t      var n = Math.round((target.getAngle() % 360) / 45);\n\t\n\t      if (n < 0) {\n\t        n += 8; // full circle ahead\n\t      }\n\t      n += cursorOffset[corner];\n\t      // normalize n to be from 0 to 7\n\t      n %= 8;\n\t\n\t      return this.cursorMap[n];\n\t    }\n\t  });\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var min = Math.min,\n\t      max = Math.max;\n\t\n\t  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     * @return {Boolean}\n\t     */\n\t    _shouldGroup: function(e, target) {\n\t      var activeObject = this.getActiveObject();\n\t      return e.shiftKey &&\n\t            (this.getActiveGroup() || (activeObject && activeObject !== target))\n\t            && this.selection;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     */\n\t    _handleGrouping: function (e, target) {\n\t\n\t      if (target === this.getActiveGroup()) {\n\t\n\t        // if it's a group, find target again, this time skipping group\n\t        target = this.findTarget(e, true);\n\t\n\t        // if even object is not found, bail out\n\t        if (!target || target.isType('group')) {\n\t          return;\n\t        }\n\t      }\n\t      if (this.getActiveGroup()) {\n\t        this._updateActiveGroup(target, e);\n\t      }\n\t      else {\n\t        this._createActiveGroup(target, e);\n\t      }\n\t\n\t      if (this._activeGroup) {\n\t        this._activeGroup.saveCoords();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _updateActiveGroup: function(target, e) {\n\t      var activeGroup = this.getActiveGroup();\n\t\n\t      if (activeGroup.contains(target)) {\n\t\n\t        activeGroup.removeWithUpdate(target);\n\t        this._resetObjectTransform(activeGroup);\n\t        target.set('active', false);\n\t\n\t        if (activeGroup.size() === 1) {\n\t          // remove group alltogether if after removal it only contains 1 object\n\t          this.discardActiveGroup(e);\n\t          // activate last remaining object\n\t          this.setActiveObject(activeGroup.item(0));\n\t          return;\n\t        }\n\t      }\n\t      else {\n\t        activeGroup.addWithUpdate(target);\n\t        this._resetObjectTransform(activeGroup);\n\t      }\n\t      this.fire('selection:created', { target: activeGroup, e: e });\n\t      activeGroup.set('active', true);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createActiveGroup: function(target, e) {\n\t\n\t      if (this._activeObject && target !== this._activeObject) {\n\t\n\t        var group = this._createGroup(target);\n\t        group.addWithUpdate();\n\t\n\t        this.setActiveGroup(group);\n\t        this._activeObject = null;\n\t\n\t        this.fire('selection:created', { target: group, e: e });\n\t      }\n\t\n\t      target.set('active', true);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} target\n\t     */\n\t    _createGroup: function(target) {\n\t\n\t      var objects = this.getObjects(),\n\t          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\n\t          groupObjects = isActiveLower\n\t            ? [ this._activeObject, target ]\n\t            : [ target, this._activeObject ];\n\t\n\t      return new fabric.Group(groupObjects, {\n\t        canvas: this\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e mouse event\n\t     */\n\t    _groupSelectedObjects: function (e) {\n\t\n\t      var group = this._collectObjects();\n\t\n\t      // do not create group for 1 element only\n\t      if (group.length === 1) {\n\t        this.setActiveObject(group[0], e);\n\t      }\n\t      else if (group.length > 1) {\n\t        group = new fabric.Group(group.reverse(), {\n\t          canvas: this\n\t        });\n\t        group.addWithUpdate();\n\t        this.setActiveGroup(group, e);\n\t        group.saveCoords();\n\t        this.fire('selection:created', { target: group });\n\t        this.renderAll();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _collectObjects: function() {\n\t      var group = [ ],\n\t          currentObject,\n\t          x1 = this._groupSelector.ex,\n\t          y1 = this._groupSelector.ey,\n\t          x2 = x1 + this._groupSelector.left,\n\t          y2 = y1 + this._groupSelector.top,\n\t          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\n\t          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\n\t          isClick = x1 === x2 && y1 === y2;\n\t\n\t      for (var i = this._objects.length; i--; ) {\n\t        currentObject = this._objects[i];\n\t\n\t        if (!currentObject || !currentObject.selectable || !currentObject.visible) {\n\t          continue;\n\t        }\n\t\n\t        if (currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2) ||\n\t            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\n\t            currentObject.containsPoint(selectionX1Y1) ||\n\t            currentObject.containsPoint(selectionX2Y2)\n\t        ) {\n\t          currentObject.set('active', true);\n\t          group.push(currentObject);\n\t\n\t          // only add one object if it's a click\n\t          if (isClick) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t\n\t      return group;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _maybeGroupObjects: function(e) {\n\t      if (this.selection && this._groupSelector) {\n\t        this._groupSelectedObjects(e);\n\t      }\n\t\n\t      var activeGroup = this.getActiveGroup();\n\t      if (activeGroup) {\n\t        activeGroup.setObjectsCoords().setCoords();\n\t        activeGroup.isMoving = false;\n\t        this.setCursor(this.defaultCursor);\n\t      }\n\t\n\t      // clear selection and current transformation\n\t      this._groupSelector = null;\n\t      this._currentTransform = null;\n\t    }\n\t  });\n\t\n\t})();\n\t\n\t\n\tfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t  /**\n\t   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n\t   * @param {Object} [options] Options object\n\t   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n\t   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n\t   * @param {Number} [options.multiplier=1] Multiplier to scale by\n\t   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n\t   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n\t   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n\t   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n\t   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n\t   * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n\t   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n\t   * var dataURL = canvas.toDataURL({\n\t   *   format: 'jpeg',\n\t   *   quality: 0.8\n\t   * });\n\t   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n\t   * var dataURL = canvas.toDataURL({\n\t   *   format: 'png',\n\t   *   left: 100,\n\t   *   top: 100,\n\t   *   width: 200,\n\t   *   height: 200\n\t   * });\n\t   * @example <caption>Generate double scaled png dataURL</caption>\n\t   * var dataURL = canvas.toDataURL({\n\t   *   format: 'png',\n\t   *   multiplier: 2\n\t   * });\n\t   */\n\t  toDataURL: function (options) {\n\t    options || (options = { });\n\t\n\t    var format = options.format || 'png',\n\t        quality = options.quality || 1,\n\t        multiplier = options.multiplier || 1,\n\t        cropping = {\n\t          left: options.left,\n\t          top: options.top,\n\t          width: options.width,\n\t          height: options.height\n\t        };\n\t\n\t    if (multiplier !== 1) {\n\t      return this.__toDataURLWithMultiplier(format, quality, cropping, multiplier);\n\t    }\n\t    else {\n\t      return this.__toDataURL(format, quality, cropping);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  __toDataURL: function(format, quality, cropping) {\n\t\n\t    this.renderAll(true);\n\t\n\t    var canvasEl = this.upperCanvasEl || this.lowerCanvasEl,\n\t        croppedCanvasEl = this.__getCroppedCanvas(canvasEl, cropping);\n\t\n\t    // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n\t    if (format === 'jpg') {\n\t      format = 'jpeg';\n\t    }\n\t\n\t    var data = (fabric.StaticCanvas.supports('toDataURLWithQuality'))\n\t              ? (croppedCanvasEl || canvasEl).toDataURL('image/' + format, quality)\n\t              : (croppedCanvasEl || canvasEl).toDataURL('image/' + format);\n\t\n\t    this.contextTop && this.clearContext(this.contextTop);\n\t    this.renderAll();\n\t\n\t    if (croppedCanvasEl) {\n\t      croppedCanvasEl = null;\n\t    }\n\t\n\t    return data;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  __getCroppedCanvas: function(canvasEl, cropping) {\n\t\n\t    var croppedCanvasEl,\n\t        croppedCtx,\n\t        shouldCrop = 'left' in cropping ||\n\t                     'top' in cropping ||\n\t                     'width' in cropping ||\n\t                     'height' in cropping;\n\t\n\t    if (shouldCrop) {\n\t\n\t      croppedCanvasEl = fabric.util.createCanvasElement();\n\t      croppedCtx = croppedCanvasEl.getContext('2d');\n\t\n\t      croppedCanvasEl.width = cropping.width || this.width;\n\t      croppedCanvasEl.height = cropping.height || this.height;\n\t\n\t      croppedCtx.drawImage(canvasEl, -cropping.left || 0, -cropping.top || 0);\n\t    }\n\t\n\t    return croppedCanvasEl;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  __toDataURLWithMultiplier: function(format, quality, cropping, multiplier) {\n\t\n\t    var origWidth = this.getWidth(),\n\t        origHeight = this.getHeight(),\n\t        scaledWidth = origWidth * multiplier,\n\t        scaledHeight = origHeight * multiplier,\n\t        activeObject = this.getActiveObject(),\n\t        activeGroup = this.getActiveGroup(),\n\t\n\t        ctx = this.contextTop || this.contextContainer;\n\t\n\t    if (multiplier > 1) {\n\t      this.setWidth(scaledWidth).setHeight(scaledHeight);\n\t    }\n\t    ctx.scale(multiplier, multiplier);\n\t\n\t    if (cropping.left) {\n\t      cropping.left *= multiplier;\n\t    }\n\t    if (cropping.top) {\n\t      cropping.top *= multiplier;\n\t    }\n\t    if (cropping.width) {\n\t      cropping.width *= multiplier;\n\t    }\n\t    else if (multiplier < 1) {\n\t      cropping.width = scaledWidth;\n\t    }\n\t    if (cropping.height) {\n\t      cropping.height *= multiplier;\n\t    }\n\t    else if (multiplier < 1) {\n\t      cropping.height = scaledHeight;\n\t    }\n\t\n\t    if (activeGroup) {\n\t      // not removing group due to complications with restoring it with correct state afterwords\n\t      this._tempRemoveBordersControlsFromGroup(activeGroup);\n\t    }\n\t    else if (activeObject && this.deactivateAll) {\n\t      this.deactivateAll();\n\t    }\n\t\n\t    this.renderAll(true);\n\t\n\t    var data = this.__toDataURL(format, quality, cropping);\n\t\n\t    // restoring width, height for `renderAll` to draw\n\t    // background properly (while context is scaled)\n\t    this.width = origWidth;\n\t    this.height = origHeight;\n\t\n\t    ctx.scale(1 / multiplier,  1 / multiplier);\n\t    this.setWidth(origWidth).setHeight(origHeight);\n\t\n\t    if (activeGroup) {\n\t      this._restoreBordersControlsOnGroup(activeGroup);\n\t    }\n\t    else if (activeObject && this.setActiveObject) {\n\t      this.setActiveObject(activeObject);\n\t    }\n\t\n\t    this.contextTop && this.clearContext(this.contextTop);\n\t    this.renderAll();\n\t\n\t    return data;\n\t  },\n\t\n\t  /**\n\t   * Exports canvas element to a dataurl image (allowing to change image size via multiplier).\n\t   * @deprecated since 1.0.13\n\t   * @param {String} format (png|jpeg)\n\t   * @param {Number} multiplier\n\t   * @param {Number} quality (0..1)\n\t   * @return {String}\n\t   */\n\t  toDataURLWithMultiplier: function (format, multiplier, quality) {\n\t    return this.toDataURL({\n\t      format: format,\n\t      multiplier: multiplier,\n\t      quality: quality\n\t    });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _tempRemoveBordersControlsFromGroup: function(group) {\n\t    group.origHasControls = group.hasControls;\n\t    group.origBorderColor = group.borderColor;\n\t\n\t    group.hasControls = true;\n\t    group.borderColor = 'rgba(0,0,0,0)';\n\t\n\t    group.forEachObject(function(o) {\n\t      o.origBorderColor = o.borderColor;\n\t      o.borderColor = 'rgba(0,0,0,0)';\n\t    });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _restoreBordersControlsOnGroup: function(group) {\n\t    group.hideControls = group.origHideControls;\n\t    group.borderColor = group.origBorderColor;\n\t\n\t    group.forEachObject(function(o) {\n\t      o.borderColor = o.origBorderColor;\n\t      delete o.origBorderColor;\n\t    });\n\t  }\n\t});\n\t\n\t\n\tfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t  /**\n\t   * Populates canvas with data from the specified dataless JSON.\n\t   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\n\t   * @deprecated since 1.2.2\n\t   * @param {String|Object} json JSON string or object\n\t   * @param {Function} callback Callback, invoked when json is parsed\n\t   *                            and corresponding objects (e.g: {@link fabric.Image})\n\t   *                            are initialized\n\t   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n\t   * @return {fabric.Canvas} instance\n\t   * @chainable\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#deserialization}\n\t   */\n\t  loadFromDatalessJSON: function (json, callback, reviver) {\n\t    return this.loadFromJSON(json, callback, reviver);\n\t  },\n\t\n\t  /**\n\t   * Populates canvas with data from the specified JSON.\n\t   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n\t   * @param {String|Object} json JSON string or object\n\t   * @param {Function} callback Callback, invoked when json is parsed\n\t   *                            and corresponding objects (e.g: {@link fabric.Image})\n\t   *                            are initialized\n\t   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n\t   * @return {fabric.Canvas} instance\n\t   * @chainable\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#deserialization}\n\t   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n\t   * @example <caption>loadFromJSON</caption>\n\t   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n\t   * @example <caption>loadFromJSON with reviver</caption>\n\t   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n\t   *   // `o` = json object\n\t   *   // `object` = fabric.Object instance\n\t   *   // ... do some stuff ...\n\t   * });\n\t   */\n\t  loadFromJSON: function (json, callback, reviver) {\n\t    if (!json) {\n\t      return;\n\t    }\n\t\n\t    // serialize if it wasn't already\n\t    var serialized = (typeof json === 'string')\n\t      ? JSON.parse(json)\n\t      : json;\n\t\n\t    this.clear();\n\t\n\t    var _this = this;\n\t    this._enlivenObjects(serialized.objects, function () {\n\t      _this._setBgOverlay(serialized, callback);\n\t    }, reviver);\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Object} serialized Object with background and overlay information\n\t   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n\t   */\n\t  _setBgOverlay: function(serialized, callback) {\n\t    var _this = this,\n\t        loaded = {\n\t          backgroundColor: false,\n\t          overlayColor: false,\n\t          backgroundImage: false,\n\t          overlayImage: false\n\t        };\n\t\n\t    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n\t      callback && callback();\n\t      return;\n\t    }\n\t\n\t    var cbIfLoaded = function () {\n\t      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n\t        _this.renderAll();\n\t        callback && callback();\n\t      }\n\t    };\n\t\n\t    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\n\t    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\n\t    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\n\t    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\n\t\n\t    cbIfLoaded();\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n\t   * @param {(Object|String)} value Value to set\n\t   * @param {Object} loaded Set loaded property to true if property is set\n\t   * @param {Object} callback Callback function to invoke after property is set\n\t   */\n\t  __setBgOverlay: function(property, value, loaded, callback) {\n\t    var _this = this;\n\t\n\t    if (!value) {\n\t      loaded[property] = true;\n\t      return;\n\t    }\n\t\n\t    if (property === 'backgroundImage' || property === 'overlayImage') {\n\t      fabric.Image.fromObject(value, function(img) {\n\t        _this[property] = img;\n\t        loaded[property] = true;\n\t        callback && callback();\n\t      });\n\t    }\n\t    else {\n\t      this['set' + fabric.util.string.capitalize(property, true)](value, function() {\n\t        loaded[property] = true;\n\t        callback && callback();\n\t      });\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Array} objects\n\t   * @param {Function} callback\n\t   * @param {Function} [reviver]\n\t   */\n\t  _enlivenObjects: function (objects, callback, reviver) {\n\t    var _this = this;\n\t\n\t    if (!objects || objects.length === 0) {\n\t      callback && callback();\n\t      return;\n\t    }\n\t\n\t    var renderOnAddRemove = this.renderOnAddRemove;\n\t    this.renderOnAddRemove = false;\n\t\n\t    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n\t      enlivenedObjects.forEach(function(obj, index) {\n\t        _this.insertAt(obj, index, true);\n\t      });\n\t\n\t      _this.renderOnAddRemove = renderOnAddRemove;\n\t      callback && callback();\n\t    }, null, reviver);\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} format\n\t   * @param {Function} callback\n\t   */\n\t  _toDataURL: function (format, callback) {\n\t    this.clone(function (clone) {\n\t      callback(clone.toDataURL(format));\n\t    });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} format\n\t   * @param {Number} multiplier\n\t   * @param {Function} callback\n\t   */\n\t  _toDataURLWithMultiplier: function (format, multiplier, callback) {\n\t    this.clone(function (clone) {\n\t      callback(clone.toDataURLWithMultiplier(format, multiplier));\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Clones canvas instance\n\t   * @param {Object} [callback] Receives cloned instance as a first argument\n\t   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n\t   */\n\t  clone: function (callback, properties) {\n\t    var data = JSON.stringify(this.toJSON(properties));\n\t    this.cloneWithoutData(function(clone) {\n\t      clone.loadFromJSON(data, function() {\n\t        callback && callback(clone);\n\t      });\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Clones canvas instance without cloning existing data.\n\t   * This essentially copies canvas dimensions, clipping properties, etc.\n\t   * but leaves data empty (so that you can populate it with your own)\n\t   * @param {Object} [callback] Receives cloned instance as a first argument\n\t   */\n\t  cloneWithoutData: function(callback) {\n\t    var el = fabric.document.createElement('canvas');\n\t\n\t    el.width = this.getWidth();\n\t    el.height = this.getHeight();\n\t\n\t    var clone = new fabric.Canvas(el);\n\t    clone.clipTo = this.clipTo;\n\t    if (this.backgroundImage) {\n\t      clone.setBackgroundImage(this.backgroundImage.src, function() {\n\t        clone.renderAll();\n\t        callback && callback(clone);\n\t      });\n\t      clone.backgroundImageOpacity = this.backgroundImageOpacity;\n\t      clone.backgroundImageStretch = this.backgroundImageStretch;\n\t    }\n\t    else {\n\t      callback && callback(clone);\n\t    }\n\t  }\n\t});\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      toFixed = fabric.util.toFixed,\n\t      capitalize = fabric.util.string.capitalize,\n\t      degreesToRadians = fabric.util.degreesToRadians,\n\t      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\t\n\t  if (fabric.Object) {\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Root object class from which all 2d shape classes inherit from\n\t   * @class fabric.Object\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#objects}\n\t   * @see {@link fabric.Object#initialize} for constructor definition\n\t   *\n\t   * @fires added\n\t   * @fires removed\n\t   *\n\t   * @fires selected\n\t   * @fires modified\n\t   * @fires rotating\n\t   * @fires scaling\n\t   * @fires moving\n\t   *\n\t   * @fires mousedown\n\t   * @fires mouseup\n\t   */\n\t  fabric.Object = fabric.util.createClass(/** @lends fabric.Object.prototype */ {\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#clipTo|clipping function}\n\t     * @method getClipTo\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Function}\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#clipTo|clipping function}\n\t     * @method setClipTo\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Function} clipTo Clipping function\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#transformMatrix|transformMatrix}\n\t     * @method getTransformMatrix\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Array} transformMatrix\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#transformMatrix|transformMatrix}\n\t     * @method setTransformMatrix\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Array} transformMatrix\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#visible|visible} state\n\t     * @method getVisible\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Boolean} True if visible\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#visible|visible} state\n\t     * @method setVisible\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Boolean} value visible value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#shadow|shadow}\n\t     * @method getShadow\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Object} Shadow instance\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#stroke|stroke}\n\t     * @method getStroke\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {String} stroke value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#stroke|stroke}\n\t     * @method setStroke\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {String} value stroke value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#strokeWidth|strokeWidth}\n\t     * @method getStrokeWidth\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} strokeWidth value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#strokeWidth|strokeWidth}\n\t     * @method setStrokeWidth\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value strokeWidth value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#originX|originX}\n\t     * @method getOriginX\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {String} originX value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#originX|originX}\n\t     * @method setOriginX\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {String} value originX value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#originY|originY}\n\t     * @method getOriginY\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {String} originY value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#originY|originY}\n\t     * @method setOriginY\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {String} value originY value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#fill|fill}\n\t     * @method getFill\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {String} Fill value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#fill|fill}\n\t     * @method setFill\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {String} value Fill value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#opacity|opacity}\n\t     * @method getOpacity\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} Opacity value (0-1)\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#opacity|opacity}\n\t     * @method setOpacity\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value Opacity value (0-1)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#angle|angle} (in degrees)\n\t     * @method getAngle\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number}\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#top|top position}\n\t     * @method getTop\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} Top value (in pixels)\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#top|top position}\n\t     * @method setTop\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value Top value (in pixels)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#left|left position}\n\t     * @method getLeft\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} Left value (in pixels)\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#left|left position}\n\t     * @method setLeft\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value Left value (in pixels)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#scaleX|scaleX} value\n\t     * @method getScaleX\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} scaleX value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#scaleX|scaleX} value\n\t     * @method setScaleX\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value scaleX value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#scaleY|scaleY} value\n\t     * @method getScaleY\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} scaleY value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#scaleY|scaleY} value\n\t     * @method setScaleY\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value scaleY value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#flipX|flipX} value\n\t     * @method getFlipX\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Boolean} flipX value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#flipX|flipX} value\n\t     * @method setFlipX\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Boolean} value flipX value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#flipY|flipY} value\n\t     * @method getFlipY\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Boolean} flipY value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#flipY|flipY} value\n\t     * @method setFlipY\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Boolean} value flipY value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Type of an object (rect, circle, path, etc.).\n\t     * Note that this property is meant to be read-only and not meant to be modified.\n\t     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n\t     * @type String\n\t     * @default\n\t     */\n\t    type:                     'object',\n\t\n\t    /**\n\t     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n\t     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups\n\t     * @type String\n\t     * @default\n\t     */\n\t    originX:                  'left',\n\t\n\t    /**\n\t     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n\t     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups\n\t     * @type String\n\t     * @default\n\t     */\n\t    originY:                  'top',\n\t\n\t    /**\n\t     * Top position of an object. Note that by default it's relative to object center. You can change this by setting originY={top/center/bottom}\n\t     * @type Number\n\t     * @default\n\t     */\n\t    top:                      0,\n\t\n\t    /**\n\t     * Left position of an object. Note that by default it's relative to object center. You can change this by setting originX={left/center/right}\n\t     * @type Number\n\t     * @default\n\t     */\n\t    left:                     0,\n\t\n\t    /**\n\t     * Object width\n\t     * @type Number\n\t     * @default\n\t     */\n\t    width:                    0,\n\t\n\t    /**\n\t     * Object height\n\t     * @type Number\n\t     * @default\n\t     */\n\t    height:                   0,\n\t\n\t    /**\n\t     * Object scale factor (horizontal)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    scaleX:                   1,\n\t\n\t    /**\n\t     * Object scale factor (vertical)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    scaleY:                   1,\n\t\n\t    /**\n\t     * When true, an object is rendered as flipped horizontally\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    flipX:                    false,\n\t\n\t    /**\n\t     * When true, an object is rendered as flipped vertically\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    flipY:                    false,\n\t\n\t    /**\n\t     * Opacity of an object\n\t     * @type Number\n\t     * @default\n\t     */\n\t    opacity:                  1,\n\t\n\t    /**\n\t     * Angle of rotation of an object (in degrees)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    angle:                    0,\n\t\n\t    /**\n\t     * Size of object's controlling corners (in pixels)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    cornerSize:               12,\n\t\n\t    /**\n\t     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    transparentCorners:       true,\n\t\n\t    /**\n\t     * Default cursor value used when hovering over this object on canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    hoverCursor:              null,\n\t\n\t    /**\n\t     * Padding between object and its controlling borders (in pixels)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    padding:                  0,\n\t\n\t    /**\n\t     * Color of controlling borders of an object (when it's active)\n\t     * @type String\n\t     * @default\n\t     */\n\t    borderColor:              'rgba(102,153,255,0.75)',\n\t\n\t    /**\n\t     * Color of controlling corners of an object (when it's active)\n\t     * @type String\n\t     * @default\n\t     */\n\t    cornerColor:              'rgba(102,153,255,0.5)',\n\t\n\t    /**\n\t     * When true, this object will use center point as the origin of transformation\n\t     * when being scaled via the controls.\n\t     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n\t     * @since 1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    centeredScaling:          false,\n\t\n\t    /**\n\t     * When true, this object will use center point as the origin of transformation\n\t     * when being rotated via the controls.\n\t     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n\t     * @since 1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    centeredRotation:         true,\n\t\n\t    /**\n\t     * Color of object's fill\n\t     * @type String\n\t     * @default\n\t     */\n\t    fill:                     'rgb(0,0,0)',\n\t\n\t    /**\n\t     * Fill rule used to fill an object\n\t     * accepted values are nonzero, evenodd\n\t     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n\t     * @type String\n\t     * @default\n\t     */\n\t    fillRule:                 'nonzero',\n\t\n\t    /**\n\t     * Composite rule used for canvas globalCompositeOperation\n\t     * @type String\n\t     * @default\n\t     */\n\t    globalCompositeOperation: 'source-over',\n\t\n\t    /**\n\t     * Background color of an object. Only works with text objects at the moment.\n\t     * @type String\n\t     * @default\n\t     */\n\t    backgroundColor:          '',\n\t\n\t    /**\n\t     * When defined, an object is rendered via stroke and this property specifies its color\n\t     * @type String\n\t     * @default\n\t     */\n\t    stroke:                   null,\n\t\n\t    /**\n\t     * Width of a stroke used to render this object\n\t     * @type Number\n\t     * @default\n\t     */\n\t    strokeWidth:              1,\n\t\n\t    /**\n\t     * Array specifying dash pattern of an object's stroke (stroke must be defined)\n\t     * @type Array\n\t     */\n\t    strokeDashArray:          null,\n\t\n\t    /**\n\t     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n\t     * @type String\n\t     * @default\n\t     */\n\t    strokeLineCap:            'butt',\n\t\n\t    /**\n\t     * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\n\t     * @type String\n\t     * @default\n\t     */\n\t    strokeLineJoin:           'miter',\n\t\n\t    /**\n\t     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n\t     * @type Number\n\t     * @default\n\t     */\n\t    strokeMiterLimit:         10,\n\t\n\t    /**\n\t     * Shadow object representing shadow of this shape\n\t     * @type fabric.Shadow\n\t     * @default\n\t     */\n\t    shadow:                   null,\n\t\n\t    /**\n\t     * Opacity of object's controlling borders when object is active and moving\n\t     * @type Number\n\t     * @default\n\t     */\n\t    borderOpacityWhenMoving:  0.4,\n\t\n\t    /**\n\t     * Scale factor of object's controlling borders\n\t     * @type Number\n\t     * @default\n\t     */\n\t    borderScaleFactor:        1,\n\t\n\t    /**\n\t     * Transform matrix (similar to SVG's transform matrix)\n\t     * @type Array\n\t     */\n\t    transformMatrix:          null,\n\t\n\t    /**\n\t     * Minimum allowed scale value of an object\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minScaleLimit:            0.01,\n\t\n\t    /**\n\t     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n\t     * But events still fire on it.\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    selectable:               true,\n\t\n\t    /**\n\t     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    evented:                  true,\n\t\n\t    /**\n\t     * When set to `false`, an object is not rendered on canvas\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    visible:                  true,\n\t\n\t    /**\n\t     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    hasControls:              true,\n\t\n\t    /**\n\t     * When set to `false`, object's controlling borders are not rendered\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    hasBorders:               true,\n\t\n\t    /**\n\t     * When set to `false`, object's controlling rotating point will not be visible or selectable\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    hasRotatingPoint:         true,\n\t\n\t    /**\n\t     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    rotatingPointOffset:      40,\n\t\n\t    /**\n\t     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    perPixelTargetFind:       false,\n\t\n\t    /**\n\t     * When `false`, default object's values are not included in its serialization\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    includeDefaultValues:     true,\n\t\n\t    /**\n\t     * Function that determines clipping of an object (context is passed as a first argument)\n\t     * Note that context origin is at the object's center point (not left/top corner)\n\t     * @type Function\n\t     */\n\t    clipTo:                   null,\n\t\n\t    /**\n\t     * When `true`, object horizontal movement is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockMovementX:            false,\n\t\n\t    /**\n\t     * When `true`, object vertical movement is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockMovementY:            false,\n\t\n\t    /**\n\t     * When `true`, object rotation is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockRotation:             false,\n\t\n\t    /**\n\t     * When `true`, object horizontal scaling is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockScalingX:             false,\n\t\n\t    /**\n\t     * When `true`, object vertical scaling is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockScalingY:             false,\n\t\n\t    /**\n\t     * When `true`, object non-uniform scaling is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockUniScaling:           false,\n\t\n\t    /**\n\t     * When `true`, object cannot be flipped by scaling into negative values\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t\n\t    lockScalingFlip:          false,\n\t    /**\n\t     * List of properties to consider when checking if state\n\t     * of an object is changed (fabric.Object#hasStateChanged)\n\t     * as well as for history (undo/redo) purposes\n\t     * @type Array\n\t     */\n\t    stateProperties:  (\n\t      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\n\t      'stroke strokeWidth strokeDashArray strokeLineCap strokeLineJoin strokeMiterLimit ' +\n\t      'angle opacity fill fillRule globalCompositeOperation shadow clipTo visible backgroundColor ' +\n\t      'alignX alignY meetOrSlice'\n\t    ).split(' '),\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     */\n\t    initialize: function(options) {\n\t      if (options) {\n\t        this.setOptions(options);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initGradient: function(options) {\n\t      if (options.fill && options.fill.colorStops && !(options.fill instanceof fabric.Gradient)) {\n\t        this.set('fill', new fabric.Gradient(options.fill));\n\t      }\n\t      if (options.stroke && options.stroke.colorStops && !(options.stroke instanceof fabric.Gradient)) {\n\t        this.set('stroke', new fabric.Gradient(options.stroke));\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initPattern: function(options) {\n\t      if (options.fill && options.fill.source && !(options.fill instanceof fabric.Pattern)) {\n\t        this.set('fill', new fabric.Pattern(options.fill));\n\t      }\n\t      if (options.stroke && options.stroke.source && !(options.stroke instanceof fabric.Pattern)) {\n\t        this.set('stroke', new fabric.Pattern(options.stroke));\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initClipping: function(options) {\n\t      if (!options.clipTo || typeof options.clipTo !== 'string') {\n\t        return;\n\t      }\n\t\n\t      var functionBody = fabric.util.getFunctionBody(options.clipTo);\n\t      if (typeof functionBody !== 'undefined') {\n\t        this.clipTo = new Function('ctx', functionBody);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets object's properties from options\n\t     * @param {Object} [options] Options object\n\t     */\n\t    setOptions: function(options) {\n\t      for (var prop in options) {\n\t        this.set(prop, options[prop]);\n\t      }\n\t      this._initGradient(options);\n\t      this._initPattern(options);\n\t      this._initClipping(options);\n\t    },\n\t\n\t    /**\n\t     * Transforms context when rendering an object\n\t     * @param {CanvasRenderingContext2D} ctx Context\n\t     * @param {Boolean} fromLeft When true, context is transformed to object's top/left corner. This is used when rendering text on Node\n\t     */\n\t    transform: function(ctx, fromLeft) {\n\t      if (this.group && this.canvas.preserveObjectStacking && this.group === this.canvas._activeGroup) {\n\t        this.group.transform(ctx);\n\t      }\n\t      var center = fromLeft ? this._getLeftTopCoords() : this.getCenterPoint();\n\t      ctx.translate(center.x, center.y);\n\t      ctx.rotate(degreesToRadians(this.angle));\n\t      ctx.scale(\n\t        this.scaleX * (this.flipX ? -1 : 1),\n\t        this.scaleY * (this.flipY ? -1 : 1)\n\t      );\n\t    },\n\t\n\t    /**\n\t     * Returns an object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\t\n\t          object = {\n\t            type:                     this.type,\n\t            originX:                  this.originX,\n\t            originY:                  this.originY,\n\t            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\n\t            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\n\t            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\n\t            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\n\t            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\n\t            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\n\t            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n\t            strokeDashArray:          this.strokeDashArray,\n\t            strokeLineCap:            this.strokeLineCap,\n\t            strokeLineJoin:           this.strokeLineJoin,\n\t            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n\t            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n\t            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n\t            angle:                    toFixed(this.getAngle(), NUM_FRACTION_DIGITS),\n\t            flipX:                    this.flipX,\n\t            flipY:                    this.flipY,\n\t            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\n\t            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\n\t            visible:                  this.visible,\n\t            clipTo:                   this.clipTo && String(this.clipTo),\n\t            backgroundColor:          this.backgroundColor,\n\t            fillRule:                 this.fillRule,\n\t            globalCompositeOperation: this.globalCompositeOperation,\n\t            transformMatrix:          this.transformMatrix\n\t          };\n\t\n\t      if (!this.includeDefaultValues) {\n\t        object = this._removeDefaultValues(object);\n\t      }\n\t\n\t      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\t\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Returns (dataless) object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toDatalessObject: function(propertiesToInclude) {\n\t      // will be overwritten by subclasses\n\t      return this.toObject(propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} object\n\t     */\n\t    _removeDefaultValues: function(object) {\n\t      var prototype = fabric.util.getKlass(object.type).prototype,\n\t          stateProperties = prototype.stateProperties;\n\t\n\t      stateProperties.forEach(function(prop) {\n\t        if (object[prop] === prototype[prop]) {\n\t          delete object[prop];\n\t        }\n\t        var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\n\t                      Object.prototype.toString.call(prototype[prop]) === '[object Array]';\n\t\n\t        // basically a check for [] === []\n\t        if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\n\t          delete object[prop];\n\t        }\n\t      });\n\t\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Returns a string representation of an instance\n\t     * @return {String}\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.' + capitalize(this.type) + '>';\n\t    },\n\t\n\t    /**\n\t     * Basic getter\n\t     * @param {String} property Property name\n\t     * @return {Any} value of a property\n\t     */\n\t    get: function(property) {\n\t      return this[property];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setObject: function(obj) {\n\t      for (var prop in obj) {\n\t        this._set(prop, obj[prop]);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n\t     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n\t     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    set: function(key, value) {\n\t      if (typeof key === 'object') {\n\t        this._setObject(key);\n\t      }\n\t      else {\n\t        if (typeof value === 'function' && key !== 'clipTo') {\n\t          this._set(key, value(this.get(key)));\n\t        }\n\t        else {\n\t          this._set(key, value);\n\t        }\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     * @return {fabric.Object} thisArg\n\t     */\n\t    _set: function(key, value) {\n\t      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY');\n\t\n\t      if (shouldConstrainValue) {\n\t        value = this._constrainScale(value);\n\t      }\n\t      if (key === 'scaleX' && value < 0) {\n\t        this.flipX = !this.flipX;\n\t        value *= -1;\n\t      }\n\t      else if (key === 'scaleY' && value < 0) {\n\t        this.flipY = !this.flipY;\n\t        value *= -1;\n\t      }\n\t      else if (key === 'width' || key === 'height') {\n\t        this.minScaleLimit = toFixed(Math.min(0.1, 1/Math.max(this.width, this.height)), 2);\n\t      }\n\t      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\n\t        value = new fabric.Shadow(value);\n\t      }\n\t\n\t      this[key] = value;\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * This callback function is called by the parent group of an object every\n\t     * time a non-delegated property changes on the group. It is passed the key\n\t     * and value as parameters. Not adding in this function's signature to avoid\n\t     * Travis build error about unused variables.\n\t     */\n\t    setOnGroup: function() {\n\t      // implemented by sub-classes, as needed.\n\t    },\n\t\n\t    /**\n\t     * Toggles specified property from `true` to `false` or from `false` to `true`\n\t     * @param {String} property Property to toggle\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    toggle: function(property) {\n\t      var value = this.get(property);\n\t      if (typeof value === 'boolean') {\n\t        this.set(property, !value);\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets sourcePath of an object\n\t     * @param {String} value Value to set sourcePath to\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setSourcePath: function(value) {\n\t      this.sourcePath = value;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Retrieves viewportTransform from Object's canvas if possible\n\t     * @method getViewportTransform\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Boolean} flipY value // TODO\n\t     */\n\t    getViewportTransform: function() {\n\t      if (this.canvas && this.canvas.viewportTransform) {\n\t        return this.canvas.viewportTransform;\n\t      }\n\t      return [1, 0, 0, 1, 0, 0];\n\t    },\n\t\n\t    /**\n\t     * Renders an object on a specified context\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    render: function(ctx, noTransform) {\n\t      // do not render if width/height are zeros or object is not visible\n\t      if ((this.width === 0 && this.height === 0) || !this.visible) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      //setup fill rule for current object\n\t      this._setupCompositeOperation(ctx);\n\t      if (!noTransform) {\n\t        this.transform(ctx);\n\t      }\n\t      this._setStrokeStyles(ctx);\n\t      this._setFillStyles(ctx);\n\t      if (this.transformMatrix) {\n\t        ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      this._setOpacity(ctx);\n\t      this._setShadow(ctx);\n\t      this.clipTo && fabric.util.clipContext(this, ctx);\n\t      this._render(ctx, noTransform);\n\t      this.clipTo && ctx.restore();\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _setOpacity: function(ctx) {\n\t      if (this.group) {\n\t        this.group._setOpacity(ctx);\n\t      }\n\t      ctx.globalAlpha *= this.opacity;\n\t    },\n\t\n\t    _setStrokeStyles: function(ctx) {\n\t      if (this.stroke) {\n\t        ctx.lineWidth = this.strokeWidth;\n\t        ctx.lineCap = this.strokeLineCap;\n\t        ctx.lineJoin = this.strokeLineJoin;\n\t        ctx.miterLimit = this.strokeMiterLimit;\n\t        ctx.strokeStyle = this.stroke.toLive\n\t          ? this.stroke.toLive(ctx, this)\n\t          : this.stroke;\n\t      }\n\t    },\n\t\n\t    _setFillStyles: function(ctx) {\n\t      if (this.fill) {\n\t        ctx.fillStyle = this.fill.toLive\n\t          ? this.fill.toLive(ctx, this)\n\t          : this.fill;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Renders controls and borders for the object\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    _renderControls: function(ctx, noTransform) {\n\t      if (!this.active || noTransform) {\n\t        return;\n\t      }\n\t      var vpt = this.getViewportTransform();\n\t      ctx.save();\n\t      var center;\n\t      if (this.group) {\n\t        center = fabric.util.transformPoint(this.group.getCenterPoint(), vpt);\n\t        ctx.translate(center.x, center.y);\n\t        ctx.rotate(degreesToRadians(this.group.angle));\n\t      }\n\t      center = fabric.util.transformPoint(this.getCenterPoint(), vpt, null != this.group);\n\t      if (this.group) {\n\t        center.x *= this.group.scaleX;\n\t        center.y *= this.group.scaleY;\n\t      }\n\t      ctx.translate(center.x, center.y);\n\t      ctx.rotate(degreesToRadians(this.angle));\n\t      this.drawBorders(ctx);\n\t      this.drawControls(ctx);\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _setShadow: function(ctx) {\n\t      if (!this.shadow) {\n\t        return;\n\t      }\n\t\n\t      var multX = (this.canvas && this.canvas.viewportTransform[0]) || 1,\n\t          multY = (this.canvas && this.canvas.viewportTransform[3]) || 1;\n\t\n\t      ctx.shadowColor = this.shadow.color;\n\t      ctx.shadowBlur = this.shadow.blur * (multX + multY) * (this.scaleX + this.scaleY) / 4;\n\t      ctx.shadowOffsetX = this.shadow.offsetX * multX * this.scaleX;\n\t      ctx.shadowOffsetY = this.shadow.offsetY * multY * this.scaleY;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _removeShadow: function(ctx) {\n\t      if (!this.shadow) {\n\t        return;\n\t      }\n\t\n\t      ctx.shadowColor = '';\n\t      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderFill: function(ctx) {\n\t      if (!this.fill) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      if (this.fill.gradientTransform) {\n\t        var g = this.fill.gradientTransform;\n\t        ctx.transform.apply(ctx, g);\n\t      }\n\t      if (this.fill.toLive) {\n\t        ctx.translate(\n\t          -this.width / 2 + this.fill.offsetX || 0,\n\t          -this.height / 2 + this.fill.offsetY || 0);\n\t      }\n\t      if (this.fillRule === 'evenodd') {\n\t        ctx.fill('evenodd');\n\t      }\n\t      else {\n\t        ctx.fill();\n\t      }\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderStroke: function(ctx) {\n\t      if (!this.stroke || this.strokeWidth === 0) {\n\t        return;\n\t      }\n\t\n\t      if (this.shadow && !this.shadow.affectStroke) {\n\t        this._removeShadow(ctx);\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      if (this.strokeDashArray) {\n\t        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n\t        if (1 & this.strokeDashArray.length) {\n\t          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);\n\t        }\n\t        if (supportsLineDash) {\n\t          ctx.setLineDash(this.strokeDashArray);\n\t          this._stroke && this._stroke(ctx);\n\t        }\n\t        else {\n\t          this._renderDashedStroke && this._renderDashedStroke(ctx);\n\t        }\n\t        ctx.stroke();\n\t      }\n\t      else {\n\t        if (this.stroke.gradientTransform) {\n\t          var g = this.stroke.gradientTransform;\n\t          ctx.transform.apply(ctx, g);\n\t        }\n\t        this._stroke ? this._stroke(ctx) : ctx.stroke();\n\t      }\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Clones an instance\n\t     * @param {Function} callback Callback is invoked with a clone as a first argument\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {fabric.Object} clone of an instance\n\t     */\n\t    clone: function(callback, propertiesToInclude) {\n\t      if (this.constructor.fromObject) {\n\t        return this.constructor.fromObject(this.toObject(propertiesToInclude), callback);\n\t      }\n\t      return new fabric.Object(this.toObject(propertiesToInclude));\n\t    },\n\t\n\t    /**\n\t     * Creates an instance of fabric.Image out of an object\n\t     * @param {Function} callback callback, invoked with an instance as a first argument\n\t     * @return {fabric.Object} thisArg\n\t     */\n\t    cloneAsImage: function(callback) {\n\t      var dataUrl = this.toDataURL();\n\t      fabric.util.loadImage(dataUrl, function(img) {\n\t        if (callback) {\n\t          callback(new fabric.Image(img));\n\t        }\n\t      });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Converts an object into a data-url-like string\n\t     * @param {Object} options Options object\n\t     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n\t     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n\t     * @param {Number} [options.multiplier=1] Multiplier to scale by\n\t     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n\t     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n\t     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n\t     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n\t     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n\t     */\n\t    toDataURL: function(options) {\n\t      options || (options = { });\n\t\n\t      var el = fabric.util.createCanvasElement(),\n\t          boundingRect = this.getBoundingRect();\n\t\n\t      el.width = boundingRect.width;\n\t      el.height = boundingRect.height;\n\t\n\t      fabric.util.wrapElement(el, 'div');\n\t      var canvas = new fabric.StaticCanvas(el);\n\t\n\t      // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n\t      if (options.format === 'jpg') {\n\t        options.format = 'jpeg';\n\t      }\n\t\n\t      if (options.format === 'jpeg') {\n\t        canvas.backgroundColor = '#fff';\n\t      }\n\t\n\t      var origParams = {\n\t        active: this.get('active'),\n\t        left: this.getLeft(),\n\t        top: this.getTop()\n\t      };\n\t\n\t      this.set('active', false);\n\t      this.setPositionByOrigin(new fabric.Point(el.width / 2, el.height / 2), 'center', 'center');\n\t\n\t      var originalCanvas = this.canvas;\n\t      canvas.add(this);\n\t      var data = canvas.toDataURL(options);\n\t\n\t      this.set(origParams).setCoords();\n\t      this.canvas = originalCanvas;\n\t\n\t      canvas.dispose();\n\t      canvas = null;\n\t\n\t      return data;\n\t    },\n\t\n\t    /**\n\t     * Returns true if specified type is identical to the type of an instance\n\t     * @param {String} type Type to check against\n\t     * @return {Boolean}\n\t     */\n\t    isType: function(type) {\n\t      return this.type === type;\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return 0;\n\t    },\n\t\n\t    /**\n\t     * Returns a JSON representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} JSON\n\t     */\n\t    toJSON: function(propertiesToInclude) {\n\t      // delegate, not alias\n\t      return this.toObject(propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * Sets gradient (fill or stroke) of an object\n\t     * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\n\t     * @param {String} property Property name 'stroke' or 'fill'\n\t     * @param {Object} [options] Options object\n\t     * @param {String} [options.type] Type of gradient 'radial' or 'linear'\n\t     * @param {Number} [options.x1=0] x-coordinate of start point\n\t     * @param {Number} [options.y1=0] y-coordinate of start point\n\t     * @param {Number} [options.x2=0] x-coordinate of end point\n\t     * @param {Number} [options.y2=0] y-coordinate of end point\n\t     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\n\t     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\n\t     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\n\t     * @example <caption>Set linear gradient</caption>\n\t     * object.setGradient('fill', {\n\t     *   type: 'linear',\n\t     *   x1: -object.width / 2,\n\t     *   y1: 0,\n\t     *   x2: object.width / 2,\n\t     *   y2: 0,\n\t     *   colorStops: {\n\t     *     0: 'red',\n\t     *     0.5: '#005555',\n\t     *     1: 'rgba(0,0,255,0.5)'\n\t     *   }\n\t     * });\n\t     * canvas.renderAll();\n\t     * @example <caption>Set radial gradient</caption>\n\t     * object.setGradient('fill', {\n\t     *   type: 'radial',\n\t     *   x1: 0,\n\t     *   y1: 0,\n\t     *   x2: 0,\n\t     *   y2: 0,\n\t     *   r1: object.width / 2,\n\t     *   r2: 10,\n\t     *   colorStops: {\n\t     *     0: 'red',\n\t     *     0.5: '#005555',\n\t     *     1: 'rgba(0,0,255,0.5)'\n\t     *   }\n\t     * });\n\t     * canvas.renderAll();\n\t     */\n\t    setGradient: function(property, options) {\n\t      options || (options = { });\n\t\n\t      var gradient = { colorStops: [] };\n\t\n\t      gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\n\t      gradient.coords = {\n\t        x1: options.x1,\n\t        y1: options.y1,\n\t        x2: options.x2,\n\t        y2: options.y2\n\t      };\n\t\n\t      if (options.r1 || options.r2) {\n\t        gradient.coords.r1 = options.r1;\n\t        gradient.coords.r2 = options.r2;\n\t      }\n\t\n\t      for (var position in options.colorStops) {\n\t        var color = new fabric.Color(options.colorStops[position]);\n\t        gradient.colorStops.push({\n\t          offset: position,\n\t          color: color.toRgb(),\n\t          opacity: color.getAlpha()\n\t        });\n\t      }\n\t\n\t      return this.set(property, fabric.Gradient.forObject(this, gradient));\n\t    },\n\t\n\t    /**\n\t     * Sets pattern fill of an object\n\t     * @param {Object} options Options object\n\t     * @param {(String|HTMLImageElement)} options.source Pattern source\n\t     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n\t     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\n\t     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\n\t     * @example <caption>Set pattern</caption>\n\t     * fabric.util.loadImage('http://fabricjs.com/assets/escheresque_ste.png', function(img) {\n\t     *   object.setPatternFill({\n\t     *     source: img,\n\t     *     repeat: 'repeat'\n\t     *   });\n\t     *   canvas.renderAll();\n\t     * });\n\t     */\n\t    setPatternFill: function(options) {\n\t      return this.set('fill', new fabric.Pattern(options));\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.Object#shadow|shadow} of an object\n\t     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n\t     * @param {String} [options.color=rgb(0,0,0)] Shadow color\n\t     * @param {Number} [options.blur=0] Shadow blur\n\t     * @param {Number} [options.offsetX=0] Shadow horizontal offset\n\t     * @param {Number} [options.offsetY=0] Shadow vertical offset\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\n\t     * @example <caption>Set shadow with string notation</caption>\n\t     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\n\t     * canvas.renderAll();\n\t     * @example <caption>Set shadow with object notation</caption>\n\t     * object.setShadow({\n\t     *   color: 'red',\n\t     *   blur: 10,\n\t     *   offsetX: 20,\n\t     *   offsetY: 20\n\t     * });\n\t     * canvas.renderAll();\n\t     */\n\t    setShadow: function(options) {\n\t      return this.set('shadow', options ? new fabric.Shadow(options) : null);\n\t    },\n\t\n\t    /**\n\t     * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\n\t     * @param {String} color Color value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setColor: function(color) {\n\t      this.set('fill', color);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets \"angle\" of an instance\n\t     * @param {Number} angle Angle value (in degrees)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setAngle: function(angle) {\n\t      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\n\t\n\t      if (shouldCenterOrigin) {\n\t        this._setOriginToCenter();\n\t      }\n\t\n\t      this.set('angle', angle);\n\t\n\t      if (shouldCenterOrigin) {\n\t        this._resetOrigin();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object horizontally on canvas to which it was added last.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    centerH: function () {\n\t      this.canvas.centerObjectH(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object vertically on canvas to which it was added last.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    centerV: function () {\n\t      this.canvas.centerObjectV(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object vertically and horizontally on canvas to which is was added last\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    center: function () {\n\t      this.canvas.centerObject(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Removes object from canvas to which it was added last\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    remove: function() {\n\t      this.canvas.remove(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns coordinates of a pointer relative to an object\n\t     * @param {Event} e Event to operate upon\n\t     * @param {Object} [pointer] Pointer to operate upon (instead of event)\n\t     * @return {Object} Coordinates of a pointer (x, y)\n\t     */\n\t    getLocalPointer: function(e, pointer) {\n\t      pointer = pointer || this.canvas.getPointer(e);\n\t      var pClicked = new fabric.Point(pointer.x, pointer.y),\n\t          objectLeftTop = this._getLeftTopCoords();\n\t      if (this.angle) {\n\t        pClicked = fabric.util.rotatePoint(\n\t          pClicked, objectLeftTop, fabric.util.degreesToRadians(-this.angle));\n\t      }\n\t      return {\n\t        x: pClicked.x - objectLeftTop.x,\n\t        y: pClicked.y - objectLeftTop.y\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Sets canvas globalCompositeOperation for specific object\n\t     * custom composition operation for the particular object can be specifed using globalCompositeOperation property\n\t     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n\t     */\n\t    _setupCompositeOperation: function (ctx) {\n\t      if (this.globalCompositeOperation) {\n\t        ctx.globalCompositeOperation = this.globalCompositeOperation;\n\t      }\n\t    }\n\t  });\n\t\n\t  fabric.util.createAccessors(fabric.Object);\n\t\n\t  /**\n\t   * Alias for {@link fabric.Object.prototype.setAngle}\n\t   * @alias rotate -> setAngle\n\t   * @memberOf fabric.Object\n\t   */\n\t  fabric.Object.prototype.rotate = fabric.Object.prototype.setAngle;\n\t\n\t  extend(fabric.Object.prototype, fabric.Observable);\n\t\n\t  /**\n\t   * Defines the number of fraction digits to use when serializing object values.\n\t   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n\t   * @static\n\t   * @memberOf fabric.Object\n\t   * @constant\n\t   * @type Number\n\t   */\n\t  fabric.Object.NUM_FRACTION_DIGITS = 2;\n\t\n\t  /**\n\t   * Unique id used internally when creating SVG elements\n\t   * @static\n\t   * @memberOf fabric.Object\n\t   * @type Number\n\t   */\n\t  fabric.Object.__uid = 0;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  var degreesToRadians = fabric.util.degreesToRadians,\n\t      originXOffset = {\n\t        left: -0.5,\n\t        center: 0,\n\t        right: 0.5\n\t      },\n\t      originYOffset = {\n\t        top: -0.5,\n\t        center: 0,\n\t        bottom: 0.5\n\t      };\n\t\n\t  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t    /**\n\t     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n\t     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n\t     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n\t      var x = point.x,\n\t          y = point.y,\n\t          offsetX = originXOffset[toOriginX] - originXOffset[fromOriginX],\n\t          offsetY = originYOffset[toOriginY] - originYOffset[fromOriginY],\n\t          dim;\n\t      if (offsetX || offsetY) {\n\t        dim = this._getTransformedDimensions();\n\t        x = point.x + offsetX * dim.x;\n\t        y = point.y + offsetY * dim.y;\n\t      }\n\t      return new fabric.Point(x, y);\n\t    },\n\t\n\t    /**\n\t     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n\t     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    translateToCenterPoint: function(point, originX, originY) {\n\t      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\n\t      if (this.angle) {\n\t        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n\t      }\n\t      return p;\n\t    },\n\t\n\t    /**\n\t     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n\t     * @param {fabric.Point} center The point which corresponds to center of the object\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    translateToOriginPoint: function(center, originX, originY) {\n\t      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n\t      if (this.angle) {\n\t        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n\t      }\n\t      return p;\n\t    },\n\t\n\t    /**\n\t     * Returns the real center coordinates of the object\n\t     * @return {fabric.Point}\n\t     */\n\t    getCenterPoint: function() {\n\t      var leftTop = new fabric.Point(this.left, this.top);\n\t      return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n\t    },\n\t\n\t    /**\n\t     * Returns the coordinates of the object based on center coordinates\n\t     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n\t     * @return {fabric.Point}\n\t     */\n\t    // getOriginPoint: function(center) {\n\t    //   return this.translateToOriginPoint(center, this.originX, this.originY);\n\t    // },\n\t\n\t    /**\n\t     * Returns the coordinates of the object as if it has a different origin\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    getPointByOrigin: function(originX, originY) {\n\t      var center = this.getCenterPoint();\n\t      return this.translateToOriginPoint(center, originX, originY);\n\t    },\n\t\n\t    /**\n\t     * Returns the point in local coordinates\n\t     * @param {fabric.Point} point The point relative to the global coordinate system\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    toLocalPoint: function(point, originX, originY) {\n\t      var center = this.getCenterPoint(),\n\t          p, p2;\n\t\n\t      if (originX && originY) {\n\t        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n\t      }\n\t      else {\n\t        p = new fabric.Point(this.left, this.top);\n\t      }\n\t\n\t      p2 = new fabric.Point(point.x, point.y);\n\t      if (this.angle) {\n\t        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n\t      }\n\t      return p2.subtractEquals(p);\n\t    },\n\t\n\t    /**\n\t     * Returns the point in global coordinates\n\t     * @param {fabric.Point} The point relative to the local coordinate system\n\t     * @return {fabric.Point}\n\t     */\n\t    // toGlobalPoint: function(point) {\n\t    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n\t    // },\n\t\n\t    /**\n\t     * Sets the position of the object taking into consideration the object's origin\n\t     * @param {fabric.Point} pos The new position of the object\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {void}\n\t     */\n\t    setPositionByOrigin: function(pos, originX, originY) {\n\t      var center = this.translateToCenterPoint(pos, originX, originY),\n\t          position = this.translateToOriginPoint(center, this.originX, this.originY);\n\t\n\t      this.set('left', position.x);\n\t      this.set('top', position.y);\n\t    },\n\t\n\t    /**\n\t     * @param {String} to One of 'left', 'center', 'right'\n\t     */\n\t    adjustPosition: function(to) {\n\t      var angle = degreesToRadians(this.angle),\n\t          hypotFull = this.getWidth(),\n\t          xFull = Math.cos(angle) * hypotFull,\n\t          yFull = Math.sin(angle) * hypotFull;\n\t\n\t      //TODO: this function does not consider mixed situation like top, center.\n\t      this.left += xFull * (originXOffset[to] - originXOffset[this.originX]);\n\t      this.top += yFull * (originXOffset[to] - originXOffset[this.originX]);\n\t\n\t      this.setCoords();\n\t      this.originX = to;\n\t    },\n\t\n\t    /**\n\t     * Sets the origin/position of the object to it's center point\n\t     * @private\n\t     * @return {void}\n\t     */\n\t    _setOriginToCenter: function() {\n\t      this._originalOriginX = this.originX;\n\t      this._originalOriginY = this.originY;\n\t\n\t      var center = this.getCenterPoint();\n\t\n\t      this.originX = 'center';\n\t      this.originY = 'center';\n\t\n\t      this.left = center.x;\n\t      this.top = center.y;\n\t    },\n\t\n\t    /**\n\t     * Resets the origin/position of the object to it's original origin\n\t     * @private\n\t     * @return {void}\n\t     */\n\t    _resetOrigin: function() {\n\t      var originPoint = this.translateToOriginPoint(\n\t        this.getCenterPoint(),\n\t        this._originalOriginX,\n\t        this._originalOriginY);\n\t\n\t      this.originX = this._originalOriginX;\n\t      this.originY = this._originalOriginY;\n\t\n\t      this.left = originPoint.x;\n\t      this.top = originPoint.y;\n\t\n\t      this._originalOriginX = null;\n\t      this._originalOriginY = null;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getLeftTopCoords: function() {\n\t      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\n\t    }\n\t  });\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var degreesToRadians = fabric.util.degreesToRadians;\n\t\n\t  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t    /**\n\t     * Object containing coordinates of object's controls\n\t     * @type Object\n\t     * @default\n\t     */\n\t    oCoords: null,\n\t\n\t    /**\n\t     * Checks if object intersects with an area formed by 2 points\n\t     * @param {Object} pointTL top-left point of area\n\t     * @param {Object} pointBR bottom-right point of area\n\t     * @return {Boolean} true if object intersects with an area formed by 2 points\n\t     */\n\t    intersectsWithRect: function(pointTL, pointBR) {\n\t      var oCoords = this.oCoords,\n\t          tl = new fabric.Point(oCoords.tl.x, oCoords.tl.y),\n\t          tr = new fabric.Point(oCoords.tr.x, oCoords.tr.y),\n\t          bl = new fabric.Point(oCoords.bl.x, oCoords.bl.y),\n\t          br = new fabric.Point(oCoords.br.x, oCoords.br.y),\n\t          intersection = fabric.Intersection.intersectPolygonRectangle(\n\t            [tl, tr, br, bl],\n\t            pointTL,\n\t            pointBR\n\t          );\n\t      return intersection.status === 'Intersection';\n\t    },\n\t\n\t    /**\n\t     * Checks if object intersects with another object\n\t     * @param {Object} other Object to test\n\t     * @return {Boolean} true if object intersects with another object\n\t     */\n\t    intersectsWithObject: function(other) {\n\t      // extracts coords\n\t      function getCoords(oCoords) {\n\t        return {\n\t          tl: new fabric.Point(oCoords.tl.x, oCoords.tl.y),\n\t          tr: new fabric.Point(oCoords.tr.x, oCoords.tr.y),\n\t          bl: new fabric.Point(oCoords.bl.x, oCoords.bl.y),\n\t          br: new fabric.Point(oCoords.br.x, oCoords.br.y)\n\t        };\n\t      }\n\t      var thisCoords = getCoords(this.oCoords),\n\t          otherCoords = getCoords(other.oCoords),\n\t          intersection = fabric.Intersection.intersectPolygonPolygon(\n\t            [thisCoords.tl, thisCoords.tr, thisCoords.br, thisCoords.bl],\n\t            [otherCoords.tl, otherCoords.tr, otherCoords.br, otherCoords.bl]\n\t          );\n\t\n\t      return intersection.status === 'Intersection';\n\t    },\n\t\n\t    /**\n\t     * Checks if object is fully contained within area of another object\n\t     * @param {Object} other Object to test\n\t     * @return {Boolean} true if object is fully contained within area of another object\n\t     */\n\t    isContainedWithinObject: function(other) {\n\t      var boundingRect = other.getBoundingRect(),\n\t          point1 = new fabric.Point(boundingRect.left, boundingRect.top),\n\t          point2 = new fabric.Point(boundingRect.left + boundingRect.width, boundingRect.top + boundingRect.height);\n\t\n\t      return this.isContainedWithinRect(point1, point2);\n\t    },\n\t\n\t    /**\n\t     * Checks if object is fully contained within area formed by 2 points\n\t     * @param {Object} pointTL top-left point of area\n\t     * @param {Object} pointBR bottom-right point of area\n\t     * @return {Boolean} true if object is fully contained within area formed by 2 points\n\t     */\n\t    isContainedWithinRect: function(pointTL, pointBR) {\n\t      var boundingRect = this.getBoundingRect();\n\t\n\t      return (\n\t        boundingRect.left >= pointTL.x &&\n\t        boundingRect.left + boundingRect.width <= pointBR.x &&\n\t        boundingRect.top >= pointTL.y &&\n\t        boundingRect.top + boundingRect.height <= pointBR.y\n\t      );\n\t    },\n\t\n\t    /**\n\t     * Checks if point is inside the object\n\t     * @param {fabric.Point} point Point to check against\n\t     * @return {Boolean} true if point is inside the object\n\t     */\n\t    containsPoint: function(point) {\n\t      var lines = this._getImageLines(this.oCoords),\n\t          xPoints = this._findCrossPoints(point, lines);\n\t\n\t      // if xPoints is odd then point is inside the object\n\t      return (xPoints !== 0 && xPoints % 2 === 1);\n\t    },\n\t\n\t    /**\n\t     * Method that returns an object with the object edges in it, given the coordinates of the corners\n\t     * @private\n\t     * @param {Object} oCoords Coordinates of the object corners\n\t     */\n\t    _getImageLines: function(oCoords) {\n\t      return {\n\t        topline: {\n\t          o: oCoords.tl,\n\t          d: oCoords.tr\n\t        },\n\t        rightline: {\n\t          o: oCoords.tr,\n\t          d: oCoords.br\n\t        },\n\t        bottomline: {\n\t          o: oCoords.br,\n\t          d: oCoords.bl\n\t        },\n\t        leftline: {\n\t          o: oCoords.bl,\n\t          d: oCoords.tl\n\t        }\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Helper method to determine how many cross points are between the 4 object edges\n\t     * and the horizontal line determined by a point on canvas\n\t     * @private\n\t     * @param {fabric.Point} point Point to check\n\t     * @param {Object} oCoords Coordinates of the object being evaluated\n\t     */\n\t    _findCrossPoints: function(point, oCoords) {\n\t      var b1, b2, a1, a2, xi, yi,\n\t          xcount = 0,\n\t          iLine;\n\t\n\t      for (var lineKey in oCoords) {\n\t        iLine = oCoords[lineKey];\n\t        // optimisation 1: line below point. no cross\n\t        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\n\t          continue;\n\t        }\n\t        // optimisation 2: line above point. no cross\n\t        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\n\t          continue;\n\t        }\n\t        // optimisation 3: vertical line case\n\t        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\n\t          xi = iLine.o.x;\n\t          yi = point.y;\n\t        }\n\t        // calculate the intersection point\n\t        else {\n\t          b1 = 0;\n\t          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n\t          a1 = point.y - b1 * point.x;\n\t          a2 = iLine.o.y - b2 * iLine.o.x;\n\t\n\t          xi = - (a1 - a2) / (b1 - b2);\n\t          yi = a1 + b1 * xi;\n\t        }\n\t        // dont count xi < point.x cases\n\t        if (xi >= point.x) {\n\t          xcount += 1;\n\t        }\n\t        // optimisation 4: specific for square images\n\t        if (xcount === 2) {\n\t          break;\n\t        }\n\t      }\n\t      return xcount;\n\t    },\n\t\n\t    /**\n\t     * Returns width of an object's bounding rectangle\n\t     * @deprecated since 1.0.4\n\t     * @return {Number} width value\n\t     */\n\t    getBoundingRectWidth: function() {\n\t      return this.getBoundingRect().width;\n\t    },\n\t\n\t    /**\n\t     * Returns height of an object's bounding rectangle\n\t     * @deprecated since 1.0.4\n\t     * @return {Number} height value\n\t     */\n\t    getBoundingRectHeight: function() {\n\t      return this.getBoundingRect().height;\n\t    },\n\t\n\t    /**\n\t     * Returns coordinates of object's bounding rectangle (left, top, width, height)\n\t     * @return {Object} Object with left, top, width, height properties\n\t     */\n\t    getBoundingRect: function() {\n\t      this.oCoords || this.setCoords();\n\t\n\t      var xCoords = [this.oCoords.tl.x, this.oCoords.tr.x, this.oCoords.br.x, this.oCoords.bl.x],\n\t          minX = fabric.util.array.min(xCoords),\n\t          maxX = fabric.util.array.max(xCoords),\n\t          width = Math.abs(minX - maxX),\n\t\n\t          yCoords = [this.oCoords.tl.y, this.oCoords.tr.y, this.oCoords.br.y, this.oCoords.bl.y],\n\t          minY = fabric.util.array.min(yCoords),\n\t          maxY = fabric.util.array.max(yCoords),\n\t          height = Math.abs(minY - maxY);\n\t\n\t      return {\n\t        left: minX,\n\t        top: minY,\n\t        width: width,\n\t        height: height\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Returns width of an object\n\t     * @return {Number} width value\n\t     */\n\t    getWidth: function() {\n\t      return this.width * this.scaleX;\n\t    },\n\t\n\t    /**\n\t     * Returns height of an object\n\t     * @return {Number} height value\n\t     */\n\t    getHeight: function() {\n\t      return this.height * this.scaleY;\n\t    },\n\t\n\t    /**\n\t     * Makes sure the scale is valid and modifies it if necessary\n\t     * @private\n\t     * @param {Number} value\n\t     * @return {Number}\n\t     */\n\t    _constrainScale: function(value) {\n\t      if (Math.abs(value) < this.minScaleLimit) {\n\t        if (value < 0) {\n\t          return -this.minScaleLimit;\n\t        }\n\t        else {\n\t          return this.minScaleLimit;\n\t        }\n\t      }\n\t      return value;\n\t    },\n\t\n\t    /**\n\t     * Scales an object (equally by x and y)\n\t     * @param {Number} value Scale factor\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    scale: function(value) {\n\t      value = this._constrainScale(value);\n\t\n\t      if (value < 0) {\n\t        this.flipX = !this.flipX;\n\t        this.flipY = !this.flipY;\n\t        value *= -1;\n\t      }\n\t\n\t      this.scaleX = value;\n\t      this.scaleY = value;\n\t      this.setCoords();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n\t     * @param {Number} value New width value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    scaleToWidth: function(value) {\n\t      // adjust to bounding rect factor so that rotated shapes would fit as well\n\t      var boundingRectFactor = this.getBoundingRectWidth() / this.getWidth();\n\t      return this.scale(value / this.width / boundingRectFactor);\n\t    },\n\t\n\t    /**\n\t     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n\t     * @param {Number} value New height value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    scaleToHeight: function(value) {\n\t      // adjust to bounding rect factor so that rotated shapes would fit as well\n\t      var boundingRectFactor = this.getBoundingRectHeight() / this.getHeight();\n\t      return this.scale(value / this.height / boundingRectFactor);\n\t    },\n\t\n\t    /**\n\t     * Sets corner position coordinates based on current angle, width and height\n\t     * See https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setCoords: function() {\n\t      var theta = degreesToRadians(this.angle),\n\t          vpt = this.getViewportTransform(),\n\t          dim = this._calculateCurrentDimensions(true),\n\t          currentWidth = dim.x, currentHeight = dim.y;\n\t\n\t      // If width is negative, make postive. Fixes path selection issue\n\t      if (currentWidth < 0) {\n\t        currentWidth = Math.abs(currentWidth);\n\t      }\n\t\n\t      var sinTh = Math.sin(theta),\n\t          cosTh = Math.cos(theta),\n\t          _angle = currentWidth > 0 ? Math.atan(currentHeight / currentWidth) : 0,\n\t          _hypotenuse = (currentWidth / Math.cos(_angle)) / 2,\n\t          offsetX = Math.cos(_angle + theta) * _hypotenuse,\n\t          offsetY = Math.sin(_angle + theta) * _hypotenuse,\n\t\n\t          // offset added for rotate and scale actions\n\t          coords = fabric.util.transformPoint(this.getCenterPoint(), vpt),\n\t          tl  = new fabric.Point(coords.x - offsetX, coords.y - offsetY),\n\t          tr  = new fabric.Point(tl.x + (currentWidth * cosTh), tl.y + (currentWidth * sinTh)),\n\t          bl  = new fabric.Point(tl.x - (currentHeight * sinTh), tl.y + (currentHeight * cosTh)),\n\t          br  = new fabric.Point(coords.x + offsetX, coords.y + offsetY),\n\t          ml  = new fabric.Point((tl.x + bl.x)/2, (tl.y + bl.y)/2),\n\t          mt  = new fabric.Point((tr.x + tl.x)/2, (tr.y + tl.y)/2),\n\t          mr  = new fabric.Point((br.x + tr.x)/2, (br.y + tr.y)/2),\n\t          mb  = new fabric.Point((br.x + bl.x)/2, (br.y + bl.y)/2),\n\t          mtr = new fabric.Point(mt.x + sinTh * this.rotatingPointOffset, mt.y - cosTh * this.rotatingPointOffset);\n\t      // debugging\n\t\n\t      /* setTimeout(function() {\n\t         canvas.contextTop.fillStyle = 'green';\n\t         canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\n\t         canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\n\t         canvas.contextTop.fillRect(br.x, br.y, 3, 3);\n\t         canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\n\t         canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\n\t         canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\n\t         canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\n\t         canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\n\t         canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\n\t       }, 50); */\n\t\n\t      this.oCoords = {\n\t        // corners\n\t        tl: tl, tr: tr, br: br, bl: bl,\n\t        // middle\n\t        ml: ml, mt: mt, mr: mr, mb: mb,\n\t        // rotating point\n\t        mtr: mtr\n\t      };\n\t\n\t      // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n\t      this._setCornerCoords && this._setCornerCoords();\n\t\n\t      return this;\n\t    },\n\t\n\t    _calcDimensionsTransformMatrix: function() {\n\t      // introduce skew matrix here later\n\t      return [this.scaleX, 0, 0, this.scaleY, 0, 0];\n\t    }\n\t  });\n\t})();\n\t\n\t\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t  /**\n\t   * Moves an object to the bottom of the stack of drawn objects\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  sendToBack: function() {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n\t    }\n\t    else {\n\t      this.canvas.sendToBack(this);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Moves an object to the top of the stack of drawn objects\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  bringToFront: function() {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n\t    }\n\t    else {\n\t      this.canvas.bringToFront(this);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Moves an object down in stack of drawn objects\n\t   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  sendBackwards: function(intersecting) {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n\t    }\n\t    else {\n\t      this.canvas.sendBackwards(this, intersecting);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Moves an object up in stack of drawn objects\n\t   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  bringForward: function(intersecting) {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n\t    }\n\t    else {\n\t      this.canvas.bringForward(this, intersecting);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Moves an object to specified level in stack of drawn objects\n\t   * @param {Number} index New position of object\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  moveTo: function(index) {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n\t    }\n\t    else {\n\t      this.canvas.moveTo(this, index);\n\t    }\n\t    return this;\n\t  }\n\t});\n\t\n\t\n\t/* _TO_SVG_START_ */\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t  /**\n\t   * Returns styles-string for svg-export\n\t   * @return {String}\n\t   */\n\t  getSvgStyles: function() {\n\t\n\t    var fill = this.fill\n\t          ? (this.fill.toLive ? 'url(#SVGID_' + this.fill.id + ')' : this.fill)\n\t          : 'none',\n\t        fillRule = this.fillRule,\n\t        stroke = this.stroke\n\t          ? (this.stroke.toLive ? 'url(#SVGID_' + this.stroke.id + ')' : this.stroke)\n\t          : 'none',\n\t\n\t        strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n\t        strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\n\t        strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n\t        strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n\t        strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n\t        opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n\t\n\t        visibility = this.visible ? '' : ' visibility: hidden;',\n\t        filter = this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\n\t\n\t    return [\n\t      'stroke: ', stroke, '; ',\n\t      'stroke-width: ', strokeWidth, '; ',\n\t      'stroke-dasharray: ', strokeDashArray, '; ',\n\t      'stroke-linecap: ', strokeLineCap, '; ',\n\t      'stroke-linejoin: ', strokeLineJoin, '; ',\n\t      'stroke-miterlimit: ', strokeMiterLimit, '; ',\n\t      'fill: ', fill, '; ',\n\t      'fill-rule: ', fillRule, '; ',\n\t      'opacity: ', opacity, ';',\n\t      filter,\n\t      visibility\n\t    ].join('');\n\t  },\n\t\n\t  /**\n\t   * Returns transform-string for svg-export\n\t   * @return {String}\n\t   */\n\t  getSvgTransform: function() {\n\t    if (this.group && this.group.type === 'path-group') {\n\t      return '';\n\t    }\n\t    var toFixed = fabric.util.toFixed,\n\t        angle = this.getAngle(),\n\t        vpt = !this.canvas || this.canvas.svgViewportTransformation ? this.getViewportTransform() : [1, 0, 0, 1, 0, 0],\n\t        center = fabric.util.transformPoint(this.getCenterPoint(), vpt),\n\t\n\t        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\t\n\t        translatePart = this.type === 'path-group' ? '' : 'translate(' +\n\t                          toFixed(center.x, NUM_FRACTION_DIGITS) +\n\t                          ' ' +\n\t                          toFixed(center.y, NUM_FRACTION_DIGITS) +\n\t                        ')',\n\t\n\t        anglePart = angle !== 0\n\t          ? (' rotate(' + toFixed(angle, NUM_FRACTION_DIGITS) + ')')\n\t          : '',\n\t\n\t        scalePart = (this.scaleX === 1 && this.scaleY === 1 && vpt[0] === 1 && vpt[3] === 1)\n\t          ? '' :\n\t          (' scale(' +\n\t            toFixed(this.scaleX * vpt[0], NUM_FRACTION_DIGITS) +\n\t            ' ' +\n\t            toFixed(this.scaleY * vpt[3], NUM_FRACTION_DIGITS) +\n\t          ')'),\n\t\n\t        addTranslateX = this.type === 'path-group' ? this.width * vpt[0] : 0,\n\t\n\t        flipXPart = this.flipX ? ' matrix(-1 0 0 1 ' + addTranslateX + ' 0) ' : '',\n\t\n\t        addTranslateY = this.type === 'path-group' ? this.height * vpt[3] : 0,\n\t\n\t        flipYPart = this.flipY ? ' matrix(1 0 0 -1 0 ' + addTranslateY + ')' : '';\n\t\n\t    return [\n\t      translatePart, anglePart, scalePart, flipXPart, flipYPart\n\t    ].join('');\n\t  },\n\t\n\t  /**\n\t   * Returns transform-string for svg-export from the transform matrix of single elements\n\t   * @return {String}\n\t   */\n\t  getSvgTransformMatrix: function() {\n\t    return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ') ' : '';\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _createBaseSVGMarkup: function() {\n\t    var markup = [ ];\n\t\n\t    if (this.fill && this.fill.toLive) {\n\t      markup.push(this.fill.toSVG(this, false));\n\t    }\n\t    if (this.stroke && this.stroke.toLive) {\n\t      markup.push(this.stroke.toSVG(this, false));\n\t    }\n\t    if (this.shadow) {\n\t      markup.push(this.shadow.toSVG(this));\n\t    }\n\t    return markup;\n\t  }\n\t});\n\t/* _TO_SVG_END_ */\n\t\n\t\n\t/*\n\t  Depends on `stateProperties`\n\t*/\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t  /**\n\t   * Returns true if object state (one of its state properties) was changed\n\t   * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n\t   */\n\t  hasStateChanged: function() {\n\t    return this.stateProperties.some(function(prop) {\n\t      return this.get(prop) !== this.originalState[prop];\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * Saves state of an object\n\t   * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n\t   * @return {fabric.Object} thisArg\n\t   */\n\t  saveState: function(options) {\n\t    this.stateProperties.forEach(function(prop) {\n\t      this.originalState[prop] = this.get(prop);\n\t    }, this);\n\t\n\t    if (options && options.stateProperties) {\n\t      options.stateProperties.forEach(function(prop) {\n\t        this.originalState[prop] = this.get(prop);\n\t      }, this);\n\t    }\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Setups state of an object\n\t   * @return {fabric.Object} thisArg\n\t   */\n\t  setupState: function() {\n\t    this.originalState = { };\n\t    this.saveState();\n\t\n\t    return this;\n\t  }\n\t});\n\t\n\t\n\t(function() {\n\t\n\t  var degreesToRadians = fabric.util.degreesToRadians,\n\t      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n\t      isVML = function() { return typeof G_vmlCanvasManager !== 'undefined'; };\n\t  //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\t\n\t  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t    /**\n\t     * The object interactivity controls.\n\t     * @private\n\t     */\n\t    _controlsVisibility: null,\n\t\n\t    /**\n\t     * Determines which corner has been clicked\n\t     * @private\n\t     * @param {Object} pointer The pointer indicating the mouse position\n\t     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n\t     */\n\t    _findTargetCorner: function(pointer) {\n\t      if (!this.hasControls || !this.active) {\n\t        return false;\n\t      }\n\t\n\t      var ex = pointer.x,\n\t          ey = pointer.y,\n\t          xPoints,\n\t          lines;\n\t\n\t      for (var i in this.oCoords) {\n\t\n\t        if (!this.isControlVisible(i)) {\n\t          continue;\n\t        }\n\t\n\t        if (i === 'mtr' && !this.hasRotatingPoint) {\n\t          continue;\n\t        }\n\t\n\t        if (this.get('lockUniScaling') &&\n\t           (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\n\t          continue;\n\t        }\n\t\n\t        lines = this._getImageLines(this.oCoords[i].corner);\n\t\n\t        // debugging\n\t\n\t        // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n\t        // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n\t\n\t        // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n\t        // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n\t\n\t        // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n\t        // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n\t\n\t        // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n\t        // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n\t\n\t        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\n\t        if (xPoints !== 0 && xPoints % 2 === 1) {\n\t          this.__corner = i;\n\t          return i;\n\t        }\n\t      }\n\t      return false;\n\t    },\n\t\n\t    /**\n\t     * Sets the coordinates of the draggable boxes in the corners of\n\t     * the image used to scale/rotate it.\n\t     * @private\n\t     */\n\t    _setCornerCoords: function() {\n\t      var coords = this.oCoords,\n\t          newTheta = degreesToRadians(45 - this.angle),\n\t          /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\n\t          /* 0.707106 stands for sqrt(2)/2 */\n\t          cornerHypotenuse = this.cornerSize * 0.707106,\n\t          cosHalfOffset = cornerHypotenuse * Math.cos(newTheta),\n\t          sinHalfOffset = cornerHypotenuse * Math.sin(newTheta),\n\t          x, y;\n\t\n\t      for (var point in coords) {\n\t        x = coords[point].x;\n\t        y = coords[point].y;\n\t        coords[point].corner = {\n\t          tl: {\n\t            x: x - sinHalfOffset,\n\t            y: y - cosHalfOffset\n\t          },\n\t          tr: {\n\t            x: x + cosHalfOffset,\n\t            y: y - sinHalfOffset\n\t          },\n\t          bl: {\n\t            x: x - cosHalfOffset,\n\t            y: y + sinHalfOffset\n\t          },\n\t          br: {\n\t            x: x + sinHalfOffset,\n\t            y: y + cosHalfOffset\n\t          }\n\t        };\n\t      }\n\t    },\n\t\n\t    /*\n\t     * Calculate object dimensions from its properties\n\t     * @private\n\t     */\n\t    _getNonTransformedDimensions: function() {\n\t      var strokeWidth = this.strokeWidth,\n\t          w = this.width,\n\t          h = this.height,\n\t          capped = this.strokeLineCap === 'round' || this.strokeLineCap === 'square',\n\t          vLine = this.type === 'line' && this.width === 0,\n\t          hLine = this.type === 'line' && this.height === 0,\n\t          sLine = vLine || hLine,\n\t          strokeW = (capped && hLine) || !sLine,\n\t          strokeH = (capped && vLine) || !sLine;\n\t\n\t      if (vLine) {\n\t        w = strokeWidth;\n\t      }\n\t      else if (hLine) {\n\t        h = strokeWidth;\n\t      }\n\t      if (strokeW) {\n\t        w += (w < 0 ? -strokeWidth : strokeWidth);\n\t      }\n\t      if (strokeH) {\n\t        h += (h < 0 ? -strokeWidth : strokeWidth);\n\t      }\n\t      return { x: w, y: h };\n\t    },\n\t\n\t    /*\n\t     * @private\n\t     */\n\t    _getTransformedDimensions: function(dimensions) {\n\t      if (!dimensions) {\n\t        dimensions = this._getNonTransformedDimensions();\n\t      }\n\t      var transformMatrix = this._calcDimensionsTransformMatrix();\n\t      return fabric.util.transformPoint(dimensions, transformMatrix, true);\n\t    },\n\t\n\t    /*\n\t     * private\n\t     */\n\t    _calculateCurrentDimensions: function(shouldTransform)  {\n\t      var vpt = this.getViewportTransform(),\n\t          dim = this._getTransformedDimensions(),\n\t          w = dim.x, h = dim.y;\n\t\n\t      w += 2 * this.padding;\n\t      h += 2 * this.padding;\n\t\n\t      if (shouldTransform) {\n\t        return fabric.util.transformPoint(new fabric.Point(w, h), vpt, true);\n\t      }\n\t      return { x: w, y: h };\n\t    },\n\t\n\t    /**\n\t     * Draws borders of an object's bounding box.\n\t     * Requires public properties: width, height\n\t     * Requires public options: padding, borderColor\n\t     * @param {CanvasRenderingContext2D} ctx Context to draw on\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    drawBorders: function(ctx) {\n\t      if (!this.hasBorders) {\n\t        return this;\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n\t      ctx.strokeStyle = this.borderColor;\n\t      ctx.lineWidth = 1 / this.borderScaleFactor;\n\t\n\t      var wh = this._calculateCurrentDimensions(true),\n\t          width = wh.x,\n\t          height = wh.y;\n\t      if (this.group) {\n\t        width = width * this.group.scaleX;\n\t        height = height * this.group.scaleY;\n\t      }\n\t\n\t      ctx.strokeRect(\n\t        ~~(-(width / 2)) - 0.5, // offset needed to make lines look sharper\n\t        ~~(-(height / 2)) - 0.5,\n\t        ~~(width) + 1, // double offset needed to make lines look sharper\n\t        ~~(height) + 1\n\t      );\n\t\n\t      if (this.hasRotatingPoint && this.isControlVisible('mtr') && !this.get('lockRotation') && this.hasControls) {\n\t\n\t        var rotateHeight = -height / 2;\n\t\n\t        ctx.beginPath();\n\t        ctx.moveTo(0, rotateHeight);\n\t        ctx.lineTo(0, rotateHeight - this.rotatingPointOffset);\n\t        ctx.closePath();\n\t        ctx.stroke();\n\t      }\n\t\n\t      ctx.restore();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Draws corners of an object's bounding box.\n\t     * Requires public properties: width, height\n\t     * Requires public options: cornerSize, padding\n\t     * @param {CanvasRenderingContext2D} ctx Context to draw on\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    drawControls: function(ctx) {\n\t      if (!this.hasControls) {\n\t        return this;\n\t      }\n\t\n\t      var wh = this._calculateCurrentDimensions(true),\n\t          width = wh.x,\n\t          height = wh.y,\n\t          left = -(width / 2),\n\t          top = -(height / 2),\n\t          scaleOffset = this.cornerSize / 2,\n\t          methodName = this.transparentCorners ? 'strokeRect' : 'fillRect';\n\t\n\t      ctx.save();\n\t\n\t      ctx.lineWidth = 1;\n\t\n\t      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n\t      ctx.strokeStyle = ctx.fillStyle = this.cornerColor;\n\t\n\t      // top-left\n\t      this._drawControl('tl', ctx, methodName,\n\t        left - scaleOffset,\n\t        top - scaleOffset);\n\t\n\t      // top-right\n\t      this._drawControl('tr', ctx, methodName,\n\t        left + width - scaleOffset,\n\t        top - scaleOffset);\n\t\n\t      // bottom-left\n\t      this._drawControl('bl', ctx, methodName,\n\t        left - scaleOffset,\n\t        top + height - scaleOffset);\n\t\n\t      // bottom-right\n\t      this._drawControl('br', ctx, methodName,\n\t        left + width - scaleOffset,\n\t        top + height - scaleOffset);\n\t\n\t      if (!this.get('lockUniScaling')) {\n\t\n\t        // middle-top\n\t        this._drawControl('mt', ctx, methodName,\n\t          left + width/2 - scaleOffset,\n\t          top - scaleOffset);\n\t\n\t        // middle-bottom\n\t        this._drawControl('mb', ctx, methodName,\n\t          left + width/2 - scaleOffset,\n\t          top + height - scaleOffset);\n\t\n\t        // middle-right\n\t        this._drawControl('mr', ctx, methodName,\n\t          left + width - scaleOffset,\n\t          top + height/2 - scaleOffset);\n\t\n\t        // middle-left\n\t        this._drawControl('ml', ctx, methodName,\n\t          left - scaleOffset,\n\t          top + height/2 - scaleOffset);\n\t      }\n\t\n\t      // middle-top-rotate\n\t      if (this.hasRotatingPoint) {\n\t        this._drawControl('mtr', ctx, methodName,\n\t          left + width/2 - scaleOffset,\n\t          top - this.rotatingPointOffset - scaleOffset);\n\t      }\n\t\n\t      ctx.restore();\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _drawControl: function(control, ctx, methodName, left, top) {\n\t      if (!this.isControlVisible(control)) {\n\t        return;\n\t      }\n\t      var size = this.cornerSize;\n\t      isVML() || this.transparentCorners || ctx.clearRect(left, top, size, size);\n\t      ctx[methodName](left, top, size, size);\n\t    },\n\t\n\t    /**\n\t     * Returns true if the specified control is visible, false otherwise.\n\t     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n\t     * @returns {Boolean} true if the specified control is visible, false otherwise\n\t     */\n\t    isControlVisible: function(controlName) {\n\t      return this._getControlsVisibility()[controlName];\n\t    },\n\t\n\t    /**\n\t     * Sets the visibility of the specified control.\n\t     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n\t     * @param {Boolean} visible true to set the specified control visible, false otherwise\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setControlVisible: function(controlName, visible) {\n\t      this._getControlsVisibility()[controlName] = visible;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets the visibility state of object controls.\n\t     * @param {Object} [options] Options object\n\t     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n\t     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n\t     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n\t     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n\t     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n\t     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n\t     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n\t     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n\t     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setControlsVisibility: function(options) {\n\t      options || (options = { });\n\t\n\t      for (var p in options) {\n\t        this.setControlVisible(p, options[p]);\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns the instance of the control visibility set for this object.\n\t     * @private\n\t     * @returns {Object}\n\t     */\n\t    _getControlsVisibility: function() {\n\t      if (!this._controlsVisibility) {\n\t        this._controlsVisibility = {\n\t          tl: true,\n\t          tr: true,\n\t          br: true,\n\t          bl: true,\n\t          ml: true,\n\t          mt: true,\n\t          mr: true,\n\t          mb: true,\n\t          mtr: true\n\t        };\n\t      }\n\t      return this._controlsVisibility;\n\t    }\n\t  });\n\t})();\n\t\n\t\n\tfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t  /**\n\t   * Animation duration (in ms) for fx* methods\n\t   * @type Number\n\t   * @default\n\t   */\n\t  FX_DURATION: 500,\n\t\n\t  /**\n\t   * Centers object horizontally with animation.\n\t   * @param {fabric.Object} object Object to center\n\t   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n\t   * @param {Function} [callbacks.onComplete] Invoked on completion\n\t   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  fxCenterObjectH: function (object, callbacks) {\n\t    callbacks = callbacks || { };\n\t\n\t    var empty = function() { },\n\t        onComplete = callbacks.onComplete || empty,\n\t        onChange = callbacks.onChange || empty,\n\t        _this = this;\n\t\n\t    fabric.util.animate({\n\t      startValue: object.get('left'),\n\t      endValue: this.getCenter().left,\n\t      duration: this.FX_DURATION,\n\t      onChange: function(value) {\n\t        object.set('left', value);\n\t        _this.renderAll();\n\t        onChange();\n\t      },\n\t      onComplete: function() {\n\t        object.setCoords();\n\t        onComplete();\n\t      }\n\t    });\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Centers object vertically with animation.\n\t   * @param {fabric.Object} object Object to center\n\t   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n\t   * @param {Function} [callbacks.onComplete] Invoked on completion\n\t   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  fxCenterObjectV: function (object, callbacks) {\n\t    callbacks = callbacks || { };\n\t\n\t    var empty = function() { },\n\t        onComplete = callbacks.onComplete || empty,\n\t        onChange = callbacks.onChange || empty,\n\t        _this = this;\n\t\n\t    fabric.util.animate({\n\t      startValue: object.get('top'),\n\t      endValue: this.getCenter().top,\n\t      duration: this.FX_DURATION,\n\t      onChange: function(value) {\n\t        object.set('top', value);\n\t        _this.renderAll();\n\t        onChange();\n\t      },\n\t      onComplete: function() {\n\t        object.setCoords();\n\t        onComplete();\n\t      }\n\t    });\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Same as `fabric.Canvas#remove` but animated\n\t   * @param {fabric.Object} object Object to remove\n\t   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n\t   * @param {Function} [callbacks.onComplete] Invoked on completion\n\t   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  fxRemove: function (object, callbacks) {\n\t    callbacks = callbacks || { };\n\t\n\t    var empty = function() { },\n\t        onComplete = callbacks.onComplete || empty,\n\t        onChange = callbacks.onChange || empty,\n\t        _this = this;\n\t\n\t    fabric.util.animate({\n\t      startValue: object.get('opacity'),\n\t      endValue: 0,\n\t      duration: this.FX_DURATION,\n\t      onStart: function() {\n\t        object.set('active', false);\n\t      },\n\t      onChange: function(value) {\n\t        object.set('opacity', value);\n\t        _this.renderAll();\n\t        onChange();\n\t      },\n\t      onComplete: function () {\n\t        _this.remove(object);\n\t        onComplete();\n\t      }\n\t    });\n\t\n\t    return this;\n\t  }\n\t});\n\t\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t  /**\n\t   * Animates object's properties\n\t   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n\t   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n\t   * @return {fabric.Object} thisArg\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#animation}\n\t   * @chainable\n\t   *\n\t   * As object — multiple properties\n\t   *\n\t   * object.animate({ left: ..., top: ... });\n\t   * object.animate({ left: ..., top: ... }, { duration: ... });\n\t   *\n\t   * As string — one property\n\t   *\n\t   * object.animate('left', ...);\n\t   * object.animate('left', { duration: ... });\n\t   *\n\t   */\n\t  animate: function() {\n\t    if (arguments[0] && typeof arguments[0] === 'object') {\n\t      var propsToAnimate = [ ], prop, skipCallbacks;\n\t      for (prop in arguments[0]) {\n\t        propsToAnimate.push(prop);\n\t      }\n\t      for (var i = 0, len = propsToAnimate.length; i < len; i++) {\n\t        prop = propsToAnimate[i];\n\t        skipCallbacks = i !== len - 1;\n\t        this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\n\t      }\n\t    }\n\t    else {\n\t      this._animate.apply(this, arguments);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} property Property to animate\n\t   * @param {String} to Value to animate to\n\t   * @param {Object} [options] Options object\n\t   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n\t   */\n\t  _animate: function(property, to, options, skipCallbacks) {\n\t    var _this = this, propPair;\n\t\n\t    to = to.toString();\n\t\n\t    if (!options) {\n\t      options = { };\n\t    }\n\t    else {\n\t      options = fabric.util.object.clone(options);\n\t    }\n\t\n\t    if (~property.indexOf('.')) {\n\t      propPair = property.split('.');\n\t    }\n\t\n\t    var currentValue = propPair\n\t      ? this.get(propPair[0])[propPair[1]]\n\t      : this.get(property);\n\t\n\t    if (!('from' in options)) {\n\t      options.from = currentValue;\n\t    }\n\t\n\t    if (~to.indexOf('=')) {\n\t      to = currentValue + parseFloat(to.replace('=', ''));\n\t    }\n\t    else {\n\t      to = parseFloat(to);\n\t    }\n\t\n\t    fabric.util.animate({\n\t      startValue: options.from,\n\t      endValue: to,\n\t      byValue: options.by,\n\t      easing: options.easing,\n\t      duration: options.duration,\n\t      abort: options.abort && function() {\n\t        return options.abort.call(_this);\n\t      },\n\t      onChange: function(value) {\n\t        if (propPair) {\n\t          _this[propPair[0]][propPair[1]] = value;\n\t        }\n\t        else {\n\t          _this.set(property, value);\n\t        }\n\t        if (skipCallbacks) {\n\t          return;\n\t        }\n\t        options.onChange && options.onChange();\n\t      },\n\t      onComplete: function() {\n\t        if (skipCallbacks) {\n\t          return;\n\t        }\n\t\n\t        _this.setCoords();\n\t        options.onComplete && options.onComplete();\n\t      }\n\t    });\n\t  }\n\t});\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\n\t      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\t\n\t  if (fabric.Line) {\n\t    fabric.warn('fabric.Line is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Line class\n\t   * @class fabric.Line\n\t   * @extends fabric.Object\n\t   * @see {@link fabric.Line#initialize} for constructor definition\n\t   */\n\t  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'line',\n\t\n\t    /**\n\t     * x value or first line edge\n\t     * @type Number\n\t     * @default\n\t     */\n\t    x1: 0,\n\t\n\t    /**\n\t     * y value or first line edge\n\t     * @type Number\n\t     * @default\n\t     */\n\t    y1: 0,\n\t\n\t    /**\n\t     * x value or second line edge\n\t     * @type Number\n\t     * @default\n\t     */\n\t    x2: 0,\n\t\n\t    /**\n\t     * y value or second line edge\n\t     * @type Number\n\t     * @default\n\t     */\n\t    y2: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array} [points] Array of points\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Line} thisArg\n\t     */\n\t    initialize: function(points, options) {\n\t      options = options || { };\n\t\n\t      if (!points) {\n\t        points = [0, 0, 0, 0];\n\t      }\n\t\n\t      this.callSuper('initialize', options);\n\t\n\t      this.set('x1', points[0]);\n\t      this.set('y1', points[1]);\n\t      this.set('x2', points[2]);\n\t      this.set('y2', points[3]);\n\t\n\t      this._setWidthHeight(options);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options\n\t     */\n\t    _setWidthHeight: function(options) {\n\t      options || (options = { });\n\t\n\t      this.width = Math.abs(this.x2 - this.x1);\n\t      this.height = Math.abs(this.y2 - this.y1);\n\t\n\t      this.left = 'left' in options\n\t        ? options.left\n\t        : this._getLeftToOriginX();\n\t\n\t      this.top = 'top' in options\n\t        ? options.top\n\t        : this._getTopToOriginY();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     */\n\t    _set: function(key, value) {\n\t      this.callSuper('_set', key, value);\n\t      if (typeof coordProps[key] !== 'undefined') {\n\t        this._setWidthHeight();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\n\t     */\n\t    _getLeftToOriginX: makeEdgeToOriginGetter(\n\t      { // property names\n\t        origin: 'originX',\n\t        axis1: 'x1',\n\t        axis2: 'x2',\n\t        dimension: 'width'\n\t      },\n\t      { // possible values of origin\n\t        nearest: 'left',\n\t        center: 'center',\n\t        farthest: 'right'\n\t      }\n\t    ),\n\t\n\t    /**\n\t     * @private\n\t     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\n\t     */\n\t    _getTopToOriginY: makeEdgeToOriginGetter(\n\t      { // property names\n\t        origin: 'originY',\n\t        axis1: 'y1',\n\t        axis2: 'y2',\n\t        dimension: 'height'\n\t      },\n\t      { // possible values of origin\n\t        nearest: 'top',\n\t        center: 'center',\n\t        farthest: 'bottom'\n\t      }\n\t    ),\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t      ctx.beginPath();\n\t\n\t      if (noTransform) {\n\t        //  Line coords are distances from left-top of canvas to origin of line.\n\t        //  To render line in a path-group, we need to translate them to\n\t        //  distances from center of path-group to center of line.\n\t        var cp = this.getCenterPoint();\n\t        ctx.translate(\n\t          cp.x - this.strokeWidth / 2,\n\t          cp.y - this.strokeWidth / 2\n\t        );\n\t      }\n\t\n\t      if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\n\t        // move from center (of virtual box) to its left/top corner\n\t        // we can't assume x1, y1 is top left and x2, y2 is bottom right\n\t        var p = this.calcLinePoints();\n\t        ctx.moveTo(p.x1, p.y1);\n\t        ctx.lineTo(p.x2, p.y2);\n\t      }\n\t\n\t      ctx.lineWidth = this.strokeWidth;\n\t\n\t      // TODO: test this\n\t      // make sure setting \"fill\" changes color of a line\n\t      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n\t      var origStrokeStyle = ctx.strokeStyle;\n\t      ctx.strokeStyle = this.stroke || ctx.fillStyle;\n\t      this.stroke && this._renderStroke(ctx);\n\t      ctx.strokeStyle = origStrokeStyle;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var p = this.calcLinePoints();\n\t\n\t      ctx.beginPath();\n\t      fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\n\t      ctx.closePath();\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @methd toObject\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\n\t    },\n\t\n\t    /**\n\t     * Recalculates line points given width and height\n\t     * @private\n\t     */\n\t    calcLinePoints: function() {\n\t      var xMult = this.x1 <= this.x2 ? -1 : 1,\n\t          yMult = this.y1 <= this.y2 ? -1 : 1,\n\t          x1 = (xMult * this.width * 0.5),\n\t          y1 = (yMult * this.height * 0.5),\n\t          x2 = (xMult * this.width * -0.5),\n\t          y2 = (yMult * this.height * -0.5);\n\t\n\t      return {\n\t        x1: x1,\n\t        x2: x2,\n\t        y1: y1,\n\t        y2: y2\n\t      };\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(),\n\t          p = { x1: this.x1, x2: this.x2, y1: this.y1, y2: this.y2 };\n\t\n\t      if (!(this.group && this.group.type === 'path-group')) {\n\t        p = this.calcLinePoints();\n\t      }\n\t      markup.push(\n\t        '<line ',\n\t          'x1=\"', p.x1,\n\t          '\" y1=\"', p.y1,\n\t          '\" x2=\"', p.x2,\n\t          '\" y2=\"', p.y2,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          this.getSvgTransformMatrix(),\n\t        '\"/>\\n'\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Line\n\t   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n\t   */\n\t  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\n\t\n\t  /**\n\t   * Returns fabric.Line instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Line\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Line} instance of fabric.Line\n\t   */\n\t  fabric.Line.fromElement = function(element, options) {\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\n\t        points = [\n\t          parsedAttributes.x1 || 0,\n\t          parsedAttributes.y1 || 0,\n\t          parsedAttributes.x2 || 0,\n\t          parsedAttributes.y2 || 0\n\t        ];\n\t    return new fabric.Line(points, extend(parsedAttributes, options));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns fabric.Line instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Line\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Line} instance of fabric.Line\n\t   */\n\t  fabric.Line.fromObject = function(object) {\n\t    var points = [object.x1, object.y1, object.x2, object.y2];\n\t    return new fabric.Line(points, object);\n\t  };\n\t\n\t  /**\n\t   * Produces a function that calculates distance from canvas edge to Line origin.\n\t   */\n\t  function makeEdgeToOriginGetter(propertyNames, originValues) {\n\t    var origin = propertyNames.origin,\n\t        axis1 = propertyNames.axis1,\n\t        axis2 = propertyNames.axis2,\n\t        dimension = propertyNames.dimension,\n\t        nearest = originValues.nearest,\n\t        center = originValues.center,\n\t        farthest = originValues.farthest;\n\t\n\t    return function() {\n\t      switch (this.get(origin)) {\n\t      case nearest:\n\t        return Math.min(this.get(axis1), this.get(axis2));\n\t      case center:\n\t        return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\n\t      case farthest:\n\t        return Math.max(this.get(axis1), this.get(axis2));\n\t      }\n\t    };\n\t\n\t  }\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      pi = Math.PI,\n\t      extend = fabric.util.object.extend;\n\t\n\t  if (fabric.Circle) {\n\t    fabric.warn('fabric.Circle is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Circle class\n\t   * @class fabric.Circle\n\t   * @extends fabric.Object\n\t   * @see {@link fabric.Circle#initialize} for constructor definition\n\t   */\n\t  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'circle',\n\t\n\t    /**\n\t     * Radius of this circle\n\t     * @type Number\n\t     * @default\n\t     */\n\t    radius: 0,\n\t\n\t    /**\n\t     * Start angle of the circle, moving clockwise\n\t     * @type Number\n\t     * @default 0\n\t     */\n\t    startAngle: 0,\n\t\n\t    /**\n\t     * End angle of the circle\n\t     * @type Number\n\t     * @default 2Pi\n\t     */\n\t    endAngle: pi * 2,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Circle} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.callSuper('initialize', options);\n\t      this.set('radius', options.radius || 0);\n\t\n\t      this.startAngle = options.startAngle || this.startAngle;\n\t      this.endAngle = options.endAngle || this.endAngle;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     * @return {fabric.Circle} thisArg\n\t     */\n\t    _set: function(key, value) {\n\t      this.callSuper('_set', key, value);\n\t\n\t      if (key === 'radius') {\n\t        this.setRadius(value);\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), {\n\t        radius: this.get('radius'),\n\t        startAngle: this.startAngle,\n\t        endAngle: this.endAngle\n\t      });\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(), x = 0, y = 0,\n\t      angle = (this.endAngle - this.startAngle) % ( 2 * pi);\n\t\n\t      if (angle === 0) {\n\t        if (this.group && this.group.type === 'path-group') {\n\t          x = this.left + this.radius;\n\t          y = this.top + this.radius;\n\t        }\n\t        markup.push(\n\t          '<circle ',\n\t            'cx=\"' + x + '\" cy=\"' + y + '\" ',\n\t            'r=\"', this.radius,\n\t            '\" style=\"', this.getSvgStyles(),\n\t            '\" transform=\"', this.getSvgTransform(),\n\t            ' ', this.getSvgTransformMatrix(),\n\t          '\"/>\\n'\n\t        );\n\t      }\n\t      else {\n\t        var startX = Math.cos(this.startAngle) * this.radius,\n\t            startY = Math.sin(this.startAngle) * this.radius,\n\t            endX = Math.cos(this.endAngle) * this.radius,\n\t            endY = Math.sin(this.endAngle) * this.radius,\n\t            largeFlag = angle > pi ? '1' : '0';\n\t\n\t        markup.push(\n\t          '<path d=\"M ' + startX + ' ' + startY,\n\t          ' A ' + this.radius + ' ' + this.radius,\n\t          ' 0 ', + largeFlag + ' 1', ' ' + endX + ' ' + endY,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          ' ', this.getSvgTransformMatrix(),\n\t          '\"/>\\n'\n\t        );\n\t      }\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t      ctx.beginPath();\n\t      ctx.arc(noTransform ? this.left + this.radius : 0,\n\t              noTransform ? this.top + this.radius : 0,\n\t              this.radius,\n\t              this.startAngle,\n\t              this.endAngle, false);\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * Returns horizontal radius of an object (according to how an object is scaled)\n\t     * @return {Number}\n\t     */\n\t    getRadiusX: function() {\n\t      return this.get('radius') * this.get('scaleX');\n\t    },\n\t\n\t    /**\n\t     * Returns vertical radius of an object (according to how an object is scaled)\n\t     * @return {Number}\n\t     */\n\t    getRadiusY: function() {\n\t      return this.get('radius') * this.get('scaleY');\n\t    },\n\t\n\t    /**\n\t     * Sets radius of an object (and updates width accordingly)\n\t     * @return {fabric.Circle} thisArg\n\t     */\n\t    setRadius: function(value) {\n\t      this.radius = value;\n\t      return this.set('width', value * 2).set('height', value * 2);\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Circle\n\t   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n\t   */\n\t  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\n\t\n\t  /**\n\t   * Returns {@link fabric.Circle} instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Circle\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @throws {Error} If value of `r` attribute is missing or invalid\n\t   * @return {fabric.Circle} Instance of fabric.Circle\n\t   */\n\t  fabric.Circle.fromElement = function(element, options) {\n\t    options || (options = { });\n\t\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\n\t\n\t    if (!isValidRadius(parsedAttributes)) {\n\t      throw new Error('value of `r` attribute is required and can not be negative');\n\t    }\n\t\n\t    parsedAttributes.left = parsedAttributes.left || 0;\n\t    parsedAttributes.top = parsedAttributes.top || 0;\n\t\n\t    var obj = new fabric.Circle(extend(parsedAttributes, options));\n\t\n\t    obj.left -= obj.radius;\n\t    obj.top -= obj.radius;\n\t    return obj;\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function isValidRadius(attributes) {\n\t    return (('radius' in attributes) && (attributes.radius >= 0));\n\t  }\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns {@link fabric.Circle} instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Circle\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {Object} Instance of fabric.Circle\n\t   */\n\t  fabric.Circle.fromObject = function(object) {\n\t    return new fabric.Circle(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Triangle) {\n\t    fabric.warn('fabric.Triangle is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Triangle class\n\t   * @class fabric.Triangle\n\t   * @extends fabric.Object\n\t   * @return {fabric.Triangle} thisArg\n\t   * @see {@link fabric.Triangle#initialize} for constructor definition\n\t   */\n\t  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'triangle',\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.callSuper('initialize', options);\n\t\n\t      this.set('width', options.width || 100)\n\t          .set('height', options.height || 100);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      var widthBy2 = this.width / 2,\n\t          heightBy2 = this.height / 2;\n\t\n\t      ctx.beginPath();\n\t      ctx.moveTo(-widthBy2, heightBy2);\n\t      ctx.lineTo(0, -heightBy2);\n\t      ctx.lineTo(widthBy2, heightBy2);\n\t      ctx.closePath();\n\t\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var widthBy2 = this.width / 2,\n\t          heightBy2 = this.height / 2;\n\t\n\t      ctx.beginPath();\n\t      fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\n\t      ctx.closePath();\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(),\n\t          widthBy2 = this.width / 2,\n\t          heightBy2 = this.height / 2,\n\t          points = [\n\t            -widthBy2 + ' ' + heightBy2,\n\t            '0 ' + -heightBy2,\n\t            widthBy2 + ' ' + heightBy2\n\t          ]\n\t          .join(',');\n\t\n\t      markup.push(\n\t        '<polygon ',\n\t          'points=\"', points,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t        '\"/>'\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns fabric.Triangle instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Triangle\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {Object} instance of Canvas.Triangle\n\t   */\n\t  fabric.Triangle.fromObject = function(object) {\n\t    return new fabric.Triangle(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      piBy2   = Math.PI * 2,\n\t      extend = fabric.util.object.extend;\n\t\n\t  if (fabric.Ellipse) {\n\t    fabric.warn('fabric.Ellipse is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Ellipse class\n\t   * @class fabric.Ellipse\n\t   * @extends fabric.Object\n\t   * @return {fabric.Ellipse} thisArg\n\t   * @see {@link fabric.Ellipse#initialize} for constructor definition\n\t   */\n\t  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'ellipse',\n\t\n\t    /**\n\t     * Horizontal radius\n\t     * @type Number\n\t     * @default\n\t     */\n\t    rx:   0,\n\t\n\t    /**\n\t     * Vertical radius\n\t     * @type Number\n\t     * @default\n\t     */\n\t    ry:   0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Ellipse} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.callSuper('initialize', options);\n\t\n\t      this.set('rx', options.rx || 0);\n\t      this.set('ry', options.ry || 0);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     * @return {fabric.Ellipse} thisArg\n\t     */\n\t    _set: function(key, value) {\n\t      this.callSuper('_set', key, value);\n\t      switch (key) {\n\t\n\t        case 'rx':\n\t          this.rx = value;\n\t          this.set('width', value * 2);\n\t          break;\n\t\n\t        case 'ry':\n\t          this.ry = value;\n\t          this.set('height', value * 2);\n\t          break;\n\t\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns horizontal radius of an object (according to how an object is scaled)\n\t     * @return {Number}\n\t     */\n\t    getRx: function() {\n\t      return this.get('rx') * this.get('scaleX');\n\t    },\n\t\n\t    /**\n\t     * Returns Vertical radius of an object (according to how an object is scaled)\n\t     * @return {Number}\n\t     */\n\t    getRy: function() {\n\t      return this.get('ry') * this.get('scaleY');\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), {\n\t        rx: this.get('rx'),\n\t        ry: this.get('ry')\n\t      });\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(), x = 0, y = 0;\n\t      if (this.group && this.group.type === 'path-group') {\n\t        x = this.left + this.rx;\n\t        y = this.top + this.ry;\n\t      }\n\t      markup.push(\n\t        '<ellipse ',\n\t          'cx=\"', x, '\" cy=\"', y, '\" ',\n\t          'rx=\"', this.rx,\n\t          '\" ry=\"', this.ry,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          this.getSvgTransformMatrix(),\n\t        '\"/>\\n'\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t      ctx.beginPath();\n\t      ctx.save();\n\t      ctx.transform(1, 0, 0, this.ry/this.rx, 0, 0);\n\t      ctx.arc(\n\t        noTransform ? this.left + this.rx : 0,\n\t        noTransform ? (this.top + this.ry) * this.rx/this.ry : 0,\n\t        this.rx,\n\t        0,\n\t        piBy2,\n\t        false);\n\t      ctx.restore();\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Ellipse\n\t   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n\t   */\n\t  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\n\t\n\t  /**\n\t   * Returns {@link fabric.Ellipse} instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Ellipse\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Ellipse}\n\t   */\n\t  fabric.Ellipse.fromElement = function(element, options) {\n\t    options || (options = { });\n\t\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\n\t\n\t    parsedAttributes.left = parsedAttributes.left || 0;\n\t    parsedAttributes.top = parsedAttributes.top || 0;\n\t\n\t    var ellipse = new fabric.Ellipse(extend(parsedAttributes, options));\n\t\n\t    ellipse.top -= ellipse.ry;\n\t    ellipse.left -= ellipse.rx;\n\t    return ellipse;\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns {@link fabric.Ellipse} instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Ellipse\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Ellipse}\n\t   */\n\t  fabric.Ellipse.fromObject = function(object) {\n\t    return new fabric.Ellipse(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  if (fabric.Rect) {\n\t    fabric.warn('fabric.Rect is already defined');\n\t    return;\n\t  }\n\t\n\t  var stateProperties = fabric.Object.prototype.stateProperties.concat();\n\t  stateProperties.push('rx', 'ry', 'x', 'y');\n\t\n\t  /**\n\t   * Rectangle class\n\t   * @class fabric.Rect\n\t   * @extends fabric.Object\n\t   * @return {fabric.Rect} thisArg\n\t   * @see {@link fabric.Rect#initialize} for constructor definition\n\t   */\n\t  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n\t\n\t    /**\n\t     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n\t     * as well as for history (undo/redo) purposes\n\t     * @type Array\n\t     */\n\t    stateProperties: stateProperties,\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'rect',\n\t\n\t    /**\n\t     * Horizontal border radius\n\t     * @type Number\n\t     * @default\n\t     */\n\t    rx:   0,\n\t\n\t    /**\n\t     * Vertical border radius\n\t     * @type Number\n\t     * @default\n\t     */\n\t    ry:   0,\n\t\n\t    /**\n\t     * Used to specify dash pattern for stroke on this object\n\t     * @type Array\n\t     */\n\t    strokeDashArray: null,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.callSuper('initialize', options);\n\t      this._initRxRy();\n\t\n\t    },\n\t\n\t    /**\n\t     * Initializes rx/ry attributes\n\t     * @private\n\t     */\n\t    _initRxRy: function() {\n\t      if (this.rx && !this.ry) {\n\t        this.ry = this.rx;\n\t      }\n\t      else if (this.ry && !this.rx) {\n\t        this.rx = this.ry;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t\n\t      // optimize 1x1 case (used in spray brush)\n\t      if (this.width === 1 && this.height === 1) {\n\t        ctx.fillRect(0, 0, 1, 1);\n\t        return;\n\t      }\n\t\n\t      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\n\t          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\n\t          w = this.width,\n\t          h = this.height,\n\t          x = noTransform ? this.left : -this.width / 2,\n\t          y = noTransform ? this.top : -this.height / 2,\n\t          isRounded = rx !== 0 || ry !== 0,\n\t          k = 1 - 0.5522847498 /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */;\n\t\n\t      ctx.beginPath();\n\t\n\t      ctx.moveTo(x + rx, y);\n\t\n\t      ctx.lineTo(x + w - rx, y);\n\t      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n\t\n\t      ctx.lineTo(x + w, y + h - ry);\n\t      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n\t\n\t      ctx.lineTo(x + rx, y + h);\n\t      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n\t\n\t      ctx.lineTo(x, y + ry);\n\t      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n\t\n\t      ctx.closePath();\n\t\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var x = -this.width / 2,\n\t          y = -this.height / 2,\n\t          w = this.width,\n\t          h = this.height;\n\t\n\t      ctx.beginPath();\n\t      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n\t      ctx.closePath();\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n\t        rx: this.get('rx') || 0,\n\t        ry: this.get('ry') || 0\n\t      });\n\t      if (!this.includeDefaultValues) {\n\t        this._removeDefaultValues(object);\n\t      }\n\t      return object;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(), x = this.left, y = this.top;\n\t      if (!(this.group && this.group.type === 'path-group')) {\n\t        x = -this.width / 2;\n\t        y = -this.height / 2;\n\t      }\n\t      markup.push(\n\t        '<rect ',\n\t          'x=\"', x, '\" y=\"', y,\n\t          '\" rx=\"', this.get('rx'), '\" ry=\"', this.get('ry'),\n\t          '\" width=\"', this.width, '\" height=\"', this.height,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          this.getSvgTransformMatrix(),\n\t        '\"/>\\n');\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\n\t   * @static\n\t   * @memberOf fabric.Rect\n\t   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n\t   */\n\t  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\n\t\n\t  /**\n\t   * Returns {@link fabric.Rect} instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Rect\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Rect} Instance of fabric.Rect\n\t   */\n\t  fabric.Rect.fromElement = function(element, options) {\n\t    if (!element) {\n\t      return null;\n\t    }\n\t    options = options || { };\n\t\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\n\t\n\t    parsedAttributes.left = parsedAttributes.left || 0;\n\t    parsedAttributes.top  = parsedAttributes.top  || 0;\n\t    var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n\t    rect.visible = rect.width > 0 && rect.height > 0;\n\t    return rect;\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns {@link fabric.Rect} instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Rect\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {Object} instance of fabric.Rect\n\t   */\n\t  fabric.Rect.fromObject = function(object) {\n\t    return new fabric.Rect(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Polyline) {\n\t    fabric.warn('fabric.Polyline is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Polyline class\n\t   * @class fabric.Polyline\n\t   * @extends fabric.Object\n\t   * @see {@link fabric.Polyline#initialize} for constructor definition\n\t   */\n\t  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'polyline',\n\t\n\t    /**\n\t     * Points array\n\t     * @type Array\n\t     * @default\n\t     */\n\t    points: null,\n\t\n\t    /**\n\t     * Minimum X from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minX: 0,\n\t\n\t    /**\n\t     * Minimum Y from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minY: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array} points Array of points (where each point is an object with x and y)\n\t     * @param {Object} [options] Options object\n\t     * @param {Boolean} [skipOffset] Whether points offsetting should be skipped\n\t     * @return {fabric.Polyline} thisArg\n\t     * @example\n\t     * var poly = new fabric.Polyline([\n\t     *     { x: 10, y: 10 },\n\t     *     { x: 50, y: 30 },\n\t     *     { x: 40, y: 70 },\n\t     *     { x: 60, y: 50 },\n\t     *     { x: 100, y: 150 },\n\t     *     { x: 40, y: 100 }\n\t     *   ], {\n\t     *   stroke: 'red',\n\t     *   left: 100,\n\t     *   top: 100\n\t     * });\n\t     */\n\t    initialize: function(points, options) {\n\t      return fabric.Polygon.prototype.initialize.call(this, points, options);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _calcDimensions: function() {\n\t      return fabric.Polygon.prototype._calcDimensions.call(this);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _applyPointOffset: function() {\n\t      return fabric.Polygon.prototype._applyPointOffset.call(this);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return fabric.Polygon.prototype.toObject.call(this, propertiesToInclude);\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      return fabric.Polygon.prototype.toSVG.call(this, reviver);\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      if (!fabric.Polygon.prototype.commonRender.call(this, ctx)) {\n\t        return;\n\t      }\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var p1, p2;\n\t\n\t      ctx.beginPath();\n\t      for (var i = 0, len = this.points.length; i < len; i++) {\n\t        p1 = this.points[i];\n\t        p2 = this.points[i + 1] || p1;\n\t        fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return this.get('points').length;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Polyline\n\t   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n\t   */\n\t  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\t\n\t  /**\n\t   * Returns fabric.Polyline instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Polyline\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Polyline} Instance of fabric.Polyline\n\t   */\n\t  fabric.Polyline.fromElement = function(element, options) {\n\t    if (!element) {\n\t      return null;\n\t    }\n\t    options || (options = { });\n\t\n\t    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n\t        parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);\n\t\n\t    return new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns fabric.Polyline instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Polyline\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Polyline} Instance of fabric.Polyline\n\t   */\n\t  fabric.Polyline.fromObject = function(object) {\n\t    var points = object.points;\n\t    return new fabric.Polyline(points, object, true);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      min = fabric.util.array.min,\n\t      max = fabric.util.array.max,\n\t      toFixed = fabric.util.toFixed;\n\t\n\t  if (fabric.Polygon) {\n\t    fabric.warn('fabric.Polygon is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Polygon class\n\t   * @class fabric.Polygon\n\t   * @extends fabric.Object\n\t   * @see {@link fabric.Polygon#initialize} for constructor definition\n\t   */\n\t  fabric.Polygon = fabric.util.createClass(fabric.Object, /** @lends fabric.Polygon.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'polygon',\n\t\n\t    /**\n\t     * Points array\n\t     * @type Array\n\t     * @default\n\t     */\n\t    points: null,\n\t\n\t    /**\n\t     * Minimum X from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minX: 0,\n\t\n\t    /**\n\t     * Minimum Y from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minY: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array} points Array of points\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Polygon} thisArg\n\t     */\n\t    initialize: function(points, options) {\n\t      options = options || { };\n\t      this.points = points || [ ];\n\t      this.callSuper('initialize', options);\n\t      this._calcDimensions();\n\t      if (!('top' in options)) {\n\t        this.top = this.minY;\n\t      }\n\t      if (!('left' in options)) {\n\t        this.left = this.minX;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _calcDimensions: function() {\n\t\n\t      var points = this.points,\n\t          minX = min(points, 'x'),\n\t          minY = min(points, 'y'),\n\t          maxX = max(points, 'x'),\n\t          maxY = max(points, 'y');\n\t\n\t      this.width = (maxX - minX) || 0;\n\t      this.height = (maxY - minY) || 0;\n\t\n\t      this.minX = minX || 0,\n\t      this.minY = minY || 0;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _applyPointOffset: function() {\n\t      // change points to offset polygon into a bounding box\n\t      // executed one time\n\t      this.points.forEach(function(p) {\n\t        p.x -= (this.minX + this.width / 2);\n\t        p.y -= (this.minY + this.height / 2);\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), {\n\t        points: this.points.concat()\n\t      });\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var points = [],\n\t          markup = this._createBaseSVGMarkup();\n\t\n\t      for (var i = 0, len = this.points.length; i < len; i++) {\n\t        points.push(toFixed(this.points[i].x, 2), ',', toFixed(this.points[i].y, 2), ' ');\n\t      }\n\t\n\t      markup.push(\n\t        '<', this.type, ' ',\n\t          'points=\"', points.join(''),\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          ' ', this.getSvgTransformMatrix(),\n\t        '\"/>\\n'\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      if (!this.commonRender(ctx)) {\n\t        return;\n\t      }\n\t      this._renderFill(ctx);\n\t      if (this.stroke || this.strokeDashArray) {\n\t        ctx.closePath();\n\t        this._renderStroke(ctx);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    commonRender: function(ctx) {\n\t      var point, len = this.points.length;\n\t\n\t      if (!len || isNaN(this.points[len - 1].y)) {\n\t        // do not draw if no points or odd points\n\t        // NaN comes from parseFloat of a empty string in parser\n\t        return false;\n\t      }\n\t\n\t      ctx.beginPath();\n\t\n\t      if (this._applyPointOffset) {\n\t        if (!(this.group && this.group.type === 'path-group')) {\n\t          this._applyPointOffset();\n\t        }\n\t        this._applyPointOffset = null;\n\t      }\n\t\n\t      ctx.moveTo(this.points[0].x, this.points[0].y);\n\t      for (var i = 0; i < len; i++) {\n\t        point = this.points[i];\n\t        ctx.lineTo(point.x, point.y);\n\t      }\n\t      return true;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      fabric.Polyline.prototype._renderDashedStroke.call(this, ctx);\n\t      ctx.closePath();\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return this.points.length;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\n\t   * @static\n\t   * @memberOf fabric.Polygon\n\t   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\n\t   */\n\t  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\t\n\t  /**\n\t   * Returns {@link fabric.Polygon} instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Polygon\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Polygon} Instance of fabric.Polygon\n\t   */\n\t  fabric.Polygon.fromElement = function(element, options) {\n\t    if (!element) {\n\t      return null;\n\t    }\n\t\n\t    options || (options = { });\n\t\n\t    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n\t        parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);\n\t\n\t    return new fabric.Polygon(points, extend(parsedAttributes, options));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns fabric.Polygon instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Polygon\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Polygon} Instance of fabric.Polygon\n\t   */\n\t  fabric.Polygon.fromObject = function(object) {\n\t    return new fabric.Polygon(object.points, object, true);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      min = fabric.util.array.min,\n\t      max = fabric.util.array.max,\n\t      extend = fabric.util.object.extend,\n\t      _toString = Object.prototype.toString,\n\t      drawArc = fabric.util.drawArc,\n\t      commandLengths = {\n\t        m: 2,\n\t        l: 2,\n\t        h: 1,\n\t        v: 1,\n\t        c: 6,\n\t        s: 4,\n\t        q: 4,\n\t        t: 2,\n\t        a: 7\n\t      },\n\t      repeatedCommands = {\n\t        m: 'l',\n\t        M: 'L'\n\t      };\n\t\n\t  if (fabric.Path) {\n\t    fabric.warn('fabric.Path is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Path class\n\t   * @class fabric.Path\n\t   * @extends fabric.Object\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#path_and_pathgroup}\n\t   * @see {@link fabric.Path#initialize} for constructor definition\n\t   */\n\t  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'path',\n\t\n\t    /**\n\t     * Array of path points\n\t     * @type Array\n\t     * @default\n\t     */\n\t    path: null,\n\t\n\t    /**\n\t     * Minimum X from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minX: 0,\n\t\n\t    /**\n\t     * Minimum Y from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minY: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Path} thisArg\n\t     */\n\t    initialize: function(path, options) {\n\t      options = options || { };\n\t\n\t      this.setOptions(options);\n\t\n\t      if (!path) {\n\t        path = [ ];\n\t      }\n\t\n\t      var fromArray = _toString.call(path) === '[object Array]';\n\t\n\t      this.path = fromArray\n\t        ? path\n\t        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n\t        : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n\t\n\t      if (!this.path) {\n\t        return;\n\t      }\n\t\n\t      if (!fromArray) {\n\t        this.path = this._parsePath();\n\t      }\n\t\n\t      this._setPositionDimensions(options);\n\t\n\t      if (options.sourcePath) {\n\t        this.setSourcePath(options.sourcePath);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} options Options object\n\t     */\n\t    _setPositionDimensions: function(options) {\n\t      var calcDim = this._parseDimensions();\n\t\n\t      this.minX = calcDim.left;\n\t      this.minY = calcDim.top;\n\t      this.width = calcDim.width;\n\t      this.height = calcDim.height;\n\t\n\t      if (typeof options.left === 'undefined') {\n\t        this.left = calcDim.left + (this.originX === 'center'\n\t          ? this.width / 2\n\t          : this.originX === 'right'\n\t            ? this.width\n\t            : 0);\n\t      }\n\t\n\t      if (typeof options.top === 'undefined') {\n\t        this.top = calcDim.top + (this.originY === 'center'\n\t          ? this.height / 2\n\t          : this.originY === 'bottom'\n\t            ? this.height\n\t            : 0);\n\t      }\n\t\n\t      this.pathOffset = this.pathOffset || {\n\t        x: this.minX + this.width / 2,\n\t        y: this.minY + this.height / 2\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx context to render path on\n\t     */\n\t    _render: function(ctx) {\n\t      var current, // current instruction\n\t          previous = null,\n\t          subpathStartX = 0,\n\t          subpathStartY = 0,\n\t          x = 0, // current x\n\t          y = 0, // current y\n\t          controlX = 0, // current control point x\n\t          controlY = 0, // current control point y\n\t          tempX,\n\t          tempY,\n\t          l = -this.pathOffset.x,\n\t          t = -this.pathOffset.y;\n\t\n\t      if (this.group && this.group.type === 'path-group') {\n\t        l = 0;\n\t        t = 0;\n\t      }\n\t\n\t      ctx.beginPath();\n\t\n\t      for (var i = 0, len = this.path.length; i < len; ++i) {\n\t\n\t        current = this.path[i];\n\t\n\t        switch (current[0]) { // first letter\n\t\n\t          case 'l': // lineto, relative\n\t            x += current[1];\n\t            y += current[2];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'L': // lineto, absolute\n\t            x = current[1];\n\t            y = current[2];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'h': // horizontal lineto, relative\n\t            x += current[1];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'H': // horizontal lineto, absolute\n\t            x = current[1];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'v': // vertical lineto, relative\n\t            y += current[1];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'V': // verical lineto, absolute\n\t            y = current[1];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'm': // moveTo, relative\n\t            x += current[1];\n\t            y += current[2];\n\t            subpathStartX = x;\n\t            subpathStartY = y;\n\t            ctx.moveTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'M': // moveTo, absolute\n\t            x = current[1];\n\t            y = current[2];\n\t            subpathStartX = x;\n\t            subpathStartY = y;\n\t            ctx.moveTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'c': // bezierCurveTo, relative\n\t            tempX = x + current[5];\n\t            tempY = y + current[6];\n\t            controlX = x + current[3];\n\t            controlY = y + current[4];\n\t            ctx.bezierCurveTo(\n\t              x + current[1] + l, // x1\n\t              y + current[2] + t, // y1\n\t              controlX + l, // x2\n\t              controlY + t, // y2\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'C': // bezierCurveTo, absolute\n\t            x = current[5];\n\t            y = current[6];\n\t            controlX = current[3];\n\t            controlY = current[4];\n\t            ctx.bezierCurveTo(\n\t              current[1] + l,\n\t              current[2] + t,\n\t              controlX + l,\n\t              controlY + t,\n\t              x + l,\n\t              y + t\n\t            );\n\t            break;\n\t\n\t          case 's': // shorthand cubic bezierCurveTo, relative\n\t\n\t            // transform to absolute x,y\n\t            tempX = x + current[3];\n\t            tempY = y + current[4];\n\t\n\t            if (previous[0].match(/[CcSs]/) === null) {\n\t              // If there is no previous command or if the previous command was not a C, c, S, or s,\n\t              // the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control points\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t\n\t            ctx.bezierCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              x + current[1] + l,\n\t              y + current[2] + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            // set control point to 2nd one of this command\n\t            // \"... the first control point is assumed to be\n\t            // the reflection of the second control point on\n\t            // the previous command relative to the current point.\"\n\t            controlX = x + current[1];\n\t            controlY = y + current[2];\n\t\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'S': // shorthand cubic bezierCurveTo, absolute\n\t            tempX = current[3];\n\t            tempY = current[4];\n\t            if (previous[0].match(/[CcSs]/) === null) {\n\t              // If there is no previous command or if the previous command was not a C, c, S, or s,\n\t              // the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control points\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t            ctx.bezierCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              current[1] + l,\n\t              current[2] + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t\n\t            // set control point to 2nd one of this command\n\t            // \"... the first control point is assumed to be\n\t            // the reflection of the second control point on\n\t            // the previous command relative to the current point.\"\n\t            controlX = current[1];\n\t            controlY = current[2];\n\t\n\t            break;\n\t\n\t          case 'q': // quadraticCurveTo, relative\n\t            // transform to absolute x,y\n\t            tempX = x + current[3];\n\t            tempY = y + current[4];\n\t\n\t            controlX = x + current[1];\n\t            controlY = y + current[2];\n\t\n\t            ctx.quadraticCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'Q': // quadraticCurveTo, absolute\n\t            tempX = current[3];\n\t            tempY = current[4];\n\t\n\t            ctx.quadraticCurveTo(\n\t              current[1] + l,\n\t              current[2] + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            controlX = current[1];\n\t            controlY = current[2];\n\t            break;\n\t\n\t          case 't': // shorthand quadraticCurveTo, relative\n\t\n\t            // transform to absolute x,y\n\t            tempX = x + current[1];\n\t            tempY = y + current[2];\n\t\n\t            if (previous[0].match(/[QqTt]/) === null) {\n\t              // If there is no previous command or if the previous command was not a Q, q, T or t,\n\t              // assume the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control point\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t\n\t            ctx.quadraticCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t\n\t            break;\n\t\n\t          case 'T':\n\t            tempX = current[1];\n\t            tempY = current[2];\n\t\n\t            if (previous[0].match(/[QqTt]/) === null) {\n\t              // If there is no previous command or if the previous command was not a Q, q, T or t,\n\t              // assume the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control point\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t            ctx.quadraticCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'a':\n\t            // TODO: optimize this\n\t            drawArc(ctx, x + l, y + t, [\n\t              current[1],\n\t              current[2],\n\t              current[3],\n\t              current[4],\n\t              current[5],\n\t              current[6] + x + l,\n\t              current[7] + y + t\n\t            ]);\n\t            x += current[6];\n\t            y += current[7];\n\t            break;\n\t\n\t          case 'A':\n\t            // TODO: optimize this\n\t            drawArc(ctx, x + l, y + t, [\n\t              current[1],\n\t              current[2],\n\t              current[3],\n\t              current[4],\n\t              current[5],\n\t              current[6] + l,\n\t              current[7] + t\n\t            ]);\n\t            x = current[6];\n\t            y = current[7];\n\t            break;\n\t\n\t          case 'z':\n\t          case 'Z':\n\t            x = subpathStartX;\n\t            y = subpathStartY;\n\t            ctx.closePath();\n\t            break;\n\t        }\n\t        previous = current;\n\t      }\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of an instance\n\t     * @return {String} string representation of an instance\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.Path (' + this.complexity() +\n\t        '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var o = extend(this.callSuper('toObject', propertiesToInclude), {\n\t        path: this.path.map(function(item) { return item.slice() }),\n\t        pathOffset: this.pathOffset\n\t      });\n\t      if (this.sourcePath) {\n\t        o.sourcePath = this.sourcePath;\n\t      }\n\t      if (this.transformMatrix) {\n\t        o.transformMatrix = this.transformMatrix;\n\t      }\n\t      return o;\n\t    },\n\t\n\t    /**\n\t     * Returns dataless object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toDatalessObject: function(propertiesToInclude) {\n\t      var o = this.toObject(propertiesToInclude);\n\t      if (this.sourcePath) {\n\t        o.path = this.sourcePath;\n\t      }\n\t      delete o.sourcePath;\n\t      return o;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var chunks = [],\n\t          markup = this._createBaseSVGMarkup(), addTransform = '';\n\t\n\t      for (var i = 0, len = this.path.length; i < len; i++) {\n\t        chunks.push(this.path[i].join(' '));\n\t      }\n\t      var path = chunks.join(' ');\n\t      if (!(this.group && this.group.type === 'path-group')) {\n\t        addTransform = ' translate(' + (-this.pathOffset.x) + ', ' + (-this.pathOffset.y) + ') ';\n\t      }\n\t      markup.push(\n\t        //jscs:disable validateIndentation\n\t        '<path ',\n\t          'd=\"', path,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(), addTransform,\n\t          this.getSvgTransformMatrix(), '\" stroke-linecap=\"round\" ',\n\t        '/>\\n'\n\t        //jscs:enable validateIndentation\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns number representation of an instance complexity\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return this.path.length;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _parsePath: function() {\n\t      var result = [ ],\n\t          coords = [ ],\n\t          currentPath,\n\t          parsed,\n\t          re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/ig,\n\t          match,\n\t          coordsStr;\n\t\n\t      for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\n\t        currentPath = this.path[i];\n\t\n\t        coordsStr = currentPath.slice(1).trim();\n\t        coords.length = 0;\n\t\n\t        while ((match = re.exec(coordsStr))) {\n\t          coords.push(match[0]);\n\t        }\n\t\n\t        coordsParsed = [ currentPath.charAt(0) ];\n\t\n\t        for (var j = 0, jlen = coords.length; j < jlen; j++) {\n\t          parsed = parseFloat(coords[j]);\n\t          if (!isNaN(parsed)) {\n\t            coordsParsed.push(parsed);\n\t          }\n\t        }\n\t\n\t        var command = coordsParsed[0],\n\t            commandLength = commandLengths[command.toLowerCase()],\n\t            repeatedCommand = repeatedCommands[command] || command;\n\t\n\t        if (coordsParsed.length - 1 > commandLength) {\n\t          for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\n\t            result.push([ command ].concat(coordsParsed.slice(k, k + commandLength)));\n\t            command = repeatedCommand;\n\t          }\n\t        }\n\t        else {\n\t          result.push(coordsParsed);\n\t        }\n\t      }\n\t\n\t      return result;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _parseDimensions: function() {\n\t\n\t      var aX = [],\n\t          aY = [],\n\t          current, // current instruction\n\t          previous = null,\n\t          subpathStartX = 0,\n\t          subpathStartY = 0,\n\t          x = 0, // current x\n\t          y = 0, // current y\n\t          controlX = 0, // current control point x\n\t          controlY = 0, // current control point y\n\t          tempX,\n\t          tempY,\n\t          bounds;\n\t\n\t      for (var i = 0, len = this.path.length; i < len; ++i) {\n\t\n\t        current = this.path[i];\n\t\n\t        switch (current[0]) { // first letter\n\t\n\t          case 'l': // lineto, relative\n\t            x += current[1];\n\t            y += current[2];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'L': // lineto, absolute\n\t            x = current[1];\n\t            y = current[2];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'h': // horizontal lineto, relative\n\t            x += current[1];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'H': // horizontal lineto, absolute\n\t            x = current[1];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'v': // vertical lineto, relative\n\t            y += current[1];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'V': // verical lineto, absolute\n\t            y = current[1];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'm': // moveTo, relative\n\t            x += current[1];\n\t            y += current[2];\n\t            subpathStartX = x;\n\t            subpathStartY = y;\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'M': // moveTo, absolute\n\t            x = current[1];\n\t            y = current[2];\n\t            subpathStartX = x;\n\t            subpathStartY = y;\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'c': // bezierCurveTo, relative\n\t            tempX = x + current[5];\n\t            tempY = y + current[6];\n\t            controlX = x + current[3];\n\t            controlY = y + current[4];\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              x + current[1], // x1\n\t              y + current[2], // y1\n\t              controlX, // x2\n\t              controlY, // y2\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'C': // bezierCurveTo, absolute\n\t            x = current[5];\n\t            y = current[6];\n\t            controlX = current[3];\n\t            controlY = current[4];\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              current[1],\n\t              current[2],\n\t              controlX,\n\t              controlY,\n\t              x,\n\t              y\n\t            );\n\t            break;\n\t\n\t          case 's': // shorthand cubic bezierCurveTo, relative\n\t\n\t            // transform to absolute x,y\n\t            tempX = x + current[3];\n\t            tempY = y + current[4];\n\t\n\t            if (previous[0].match(/[CcSs]/) === null) {\n\t              // If there is no previous command or if the previous command was not a C, c, S, or s,\n\t              // the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control points\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              x + current[1],\n\t              y + current[2],\n\t              tempX,\n\t              tempY\n\t            );\n\t            // set control point to 2nd one of this command\n\t            // \"... the first control point is assumed to be\n\t            // the reflection of the second control point on\n\t            // the previous command relative to the current point.\"\n\t            controlX = x + current[1];\n\t            controlY = y + current[2];\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'S': // shorthand cubic bezierCurveTo, absolute\n\t            tempX = current[3];\n\t            tempY = current[4];\n\t            if (previous[0].match(/[CcSs]/) === null) {\n\t              // If there is no previous command or if the previous command was not a C, c, S, or s,\n\t              // the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control points\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              current[1],\n\t              current[2],\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            // set control point to 2nd one of this command\n\t            // \"... the first control point is assumed to be\n\t            // the reflection of the second control point on\n\t            // the previous command relative to the current point.\"\n\t            controlX = current[1];\n\t            controlY = current[2];\n\t            break;\n\t\n\t          case 'q': // quadraticCurveTo, relative\n\t            // transform to absolute x,y\n\t            tempX = x + current[3];\n\t            tempY = y + current[4];\n\t            controlX = x + current[1];\n\t            controlY = y + current[2];\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              controlX,\n\t              controlY,\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'Q': // quadraticCurveTo, absolute\n\t            controlX = current[1];\n\t            controlY = current[2];\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              controlX,\n\t              controlY,\n\t              current[3],\n\t              current[4]\n\t            );\n\t            x = current[3];\n\t            y = current[4];\n\t            break;\n\t\n\t          case 't': // shorthand quadraticCurveTo, relative\n\t            // transform to absolute x,y\n\t            tempX = x + current[1];\n\t            tempY = y + current[2];\n\t            if (previous[0].match(/[QqTt]/) === null) {\n\t              // If there is no previous command or if the previous command was not a Q, q, T or t,\n\t              // assume the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control point\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              controlX,\n\t              controlY,\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t\n\t            break;\n\t\n\t          case 'T':\n\t            tempX = current[1];\n\t            tempY = current[2];\n\t\n\t            if (previous[0].match(/[QqTt]/) === null) {\n\t              // If there is no previous command or if the previous command was not a Q, q, T or t,\n\t              // assume the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control point\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              controlX,\n\t              controlY,\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'a':\n\t            // TODO: optimize this\n\t            bounds = fabric.util.getBoundsOfArc(x, y,\n\t              current[1],\n\t              current[2],\n\t              current[3],\n\t              current[4],\n\t              current[5],\n\t              current[6] + x,\n\t              current[7] + y\n\t            );\n\t            x += current[6];\n\t            y += current[7];\n\t            break;\n\t\n\t          case 'A':\n\t            // TODO: optimize this\n\t            bounds = fabric.util.getBoundsOfArc(x, y,\n\t              current[1],\n\t              current[2],\n\t              current[3],\n\t              current[4],\n\t              current[5],\n\t              current[6],\n\t              current[7]\n\t            );\n\t            x = current[6];\n\t            y = current[7];\n\t            break;\n\t\n\t          case 'z':\n\t          case 'Z':\n\t            x = subpathStartX;\n\t            y = subpathStartY;\n\t            break;\n\t        }\n\t        previous = current;\n\t        bounds.forEach(function (point) {\n\t          aX.push(point.x);\n\t          aY.push(point.y);\n\t        });\n\t        aX.push(x);\n\t        aY.push(y);\n\t      }\n\t\n\t      var minX = min(aX) || 0,\n\t          minY = min(aY) || 0,\n\t          maxX = max(aX) || 0,\n\t          maxY = max(aY) || 0,\n\t          deltaX = maxX - minX,\n\t          deltaY = maxY - minY,\n\t\n\t          o = {\n\t            left: minX,\n\t            top: minY,\n\t            width: deltaX,\n\t            height: deltaY\n\t          };\n\t\n\t      return o;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Creates an instance of fabric.Path from an object\n\t   * @static\n\t   * @memberOf fabric.Path\n\t   * @param {Object} object\n\t   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n\t   */\n\t  fabric.Path.fromObject = function(object, callback) {\n\t    if (typeof object.path === 'string') {\n\t      fabric.loadSVGFromURL(object.path, function (elements) {\n\t        var path = elements[0],\n\t            pathUrl = object.path;\n\t\n\t        delete object.path;\n\t\n\t        fabric.util.object.extend(path, object);\n\t        path.setSourcePath(pathUrl);\n\t\n\t        callback(path);\n\t      });\n\t    }\n\t    else {\n\t      callback(new fabric.Path(object.path, object));\n\t    }\n\t  };\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\n\t   * @static\n\t   * @memberOf fabric.Path\n\t   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n\t   */\n\t  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\n\t\n\t  /**\n\t   * Creates an instance of fabric.Path from an SVG <path> element\n\t   * @static\n\t   * @memberOf fabric.Path\n\t   * @param {SVGElement} element to parse\n\t   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n\t   * @param {Object} [options] Options object\n\t   */\n\t  fabric.Path.fromElement = function(element, callback, options) {\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\n\t    callback && callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @memberOf fabric.Path\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.Path.async = true;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      invoke = fabric.util.array.invoke,\n\t      parentToObject = fabric.Object.prototype.toObject;\n\t\n\t  if (fabric.PathGroup) {\n\t    fabric.warn('fabric.PathGroup is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Path group class\n\t   * @class fabric.PathGroup\n\t   * @extends fabric.Path\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#path_and_pathgroup}\n\t   * @see {@link fabric.PathGroup#initialize} for constructor definition\n\t   */\n\t  fabric.PathGroup = fabric.util.createClass(fabric.Path, /** @lends fabric.PathGroup.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'path-group',\n\t\n\t    /**\n\t     * Fill value\n\t     * @type String\n\t     * @default\n\t     */\n\t    fill: '',\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array} paths\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.PathGroup} thisArg\n\t     */\n\t    initialize: function(paths, options) {\n\t\n\t      options = options || { };\n\t      this.paths = paths || [ ];\n\t\n\t      for (var i = this.paths.length; i--;) {\n\t        this.paths[i].group = this;\n\t      }\n\t\n\t      if (options.toBeParsed) {\n\t        this.parseDimensionsFromPaths(options);\n\t        delete options.toBeParsed;\n\t      }\n\t      this.setOptions(options);\n\t      this.setCoords();\n\t\n\t      if (options.sourcePath) {\n\t        this.setSourcePath(options.sourcePath);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Calculate width and height based on paths contained\n\t     */\n\t    parseDimensionsFromPaths: function(options) {\n\t      var points, p, xC = [ ], yC = [ ], path, height, width,\n\t          m;\n\t      for (var j = this.paths.length; j--;) {\n\t        path = this.paths[j];\n\t        height = path.height + path.strokeWidth;\n\t        width = path.width + path.strokeWidth;\n\t        points = [\n\t          { x: path.left, y: path.top },\n\t          { x: path.left + width, y: path.top },\n\t          { x: path.left, y: path.top + height },\n\t          { x: path.left + width, y: path.top + height }\n\t        ];\n\t        m = this.paths[j].transformMatrix;\n\t        for (var i = 0; i < points.length; i++) {\n\t          p = points[i];\n\t          if (m) {\n\t            p = fabric.util.transformPoint(p, m, false);\n\t          }\n\t          xC.push(p.x);\n\t          yC.push(p.y);\n\t        }\n\t      }\n\t      options.width = Math.max.apply(null, xC);\n\t      options.height = Math.max.apply(null, yC);\n\t    },\n\t\n\t    /**\n\t     * Renders this group on a specified context\n\t     * @param {CanvasRenderingContext2D} ctx Context to render this instance on\n\t     */\n\t    render: function(ctx) {\n\t      // do not render if object is not visible\n\t      if (!this.visible) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      if (this.transformMatrix) {\n\t        ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      this.transform(ctx);\n\t\n\t      this._setShadow(ctx);\n\t      this.clipTo && fabric.util.clipContext(this, ctx);\n\t      ctx.translate(-this.width/2, -this.height/2);\n\t      for (var i = 0, l = this.paths.length; i < l; ++i) {\n\t        this.paths[i].render(ctx, true);\n\t      }\n\t      this.clipTo && ctx.restore();\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Sets certain property to a certain value\n\t     * @param {String} prop\n\t     * @param {Any} value\n\t     * @return {fabric.PathGroup} thisArg\n\t     */\n\t    _set: function(prop, value) {\n\t\n\t      if (prop === 'fill' && value && this.isSameColor()) {\n\t        var i = this.paths.length;\n\t        while (i--) {\n\t          this.paths[i]._set(prop, value);\n\t        }\n\t      }\n\t\n\t      return this.callSuper('_set', prop, value);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of this path group\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var o = extend(parentToObject.call(this, propertiesToInclude), {\n\t        paths: invoke(this.getObjects(), 'toObject', propertiesToInclude)\n\t      });\n\t      if (this.sourcePath) {\n\t        o.sourcePath = this.sourcePath;\n\t      }\n\t      return o;\n\t    },\n\t\n\t    /**\n\t     * Returns dataless object representation of this path group\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} dataless object representation of an instance\n\t     */\n\t    toDatalessObject: function(propertiesToInclude) {\n\t      var o = this.toObject(propertiesToInclude);\n\t      if (this.sourcePath) {\n\t        o.paths = this.sourcePath;\n\t      }\n\t      return o;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var objects = this.getObjects(),\n\t          p = this.getPointByOrigin('left', 'top'),\n\t          translatePart = 'translate(' + p.x + ' ' + p.y + ')',\n\t          markup = [\n\t            //jscs:disable validateIndentation\n\t            '<g ',\n\t              'style=\"', this.getSvgStyles(), '\" ',\n\t              'transform=\"', this.getSvgTransformMatrix(), translatePart, this.getSvgTransform(), '\" ',\n\t            '>\\n'\n\t            //jscs:enable validateIndentation\n\t          ];\n\t\n\t      for (var i = 0, len = objects.length; i < len; i++) {\n\t        markup.push(objects[i].toSVG(reviver));\n\t      }\n\t      markup.push('</g>\\n');\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns a string representation of this path group\n\t     * @return {String} string representation of an object\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.PathGroup (' + this.complexity() +\n\t        '): { top: ' + this.top + ', left: ' + this.left + ' }>';\n\t    },\n\t\n\t    /**\n\t     * Returns true if all paths in this group are of same color\n\t     * @return {Boolean} true if all paths are of the same color (`fill`)\n\t     */\n\t    isSameColor: function() {\n\t      var firstPathFill = (this.getObjects()[0].get('fill') || '').toLowerCase();\n\t      return this.getObjects().every(function(path) {\n\t        return (path.get('fill') || '').toLowerCase() === firstPathFill;\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Returns number representation of object's complexity\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return this.paths.reduce(function(total, path) {\n\t        return total + ((path && path.complexity) ? path.complexity() : 0);\n\t      }, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns all paths in this path group\n\t     * @return {Array} array of path objects included in this path group\n\t     */\n\t    getObjects: function() {\n\t      return this.paths;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Creates fabric.PathGroup instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.PathGroup\n\t   * @param {Object} object Object to create an instance from\n\t   * @param {Function} callback Callback to invoke when an fabric.PathGroup instance is created\n\t   */\n\t  fabric.PathGroup.fromObject = function(object, callback) {\n\t    if (typeof object.paths === 'string') {\n\t      fabric.loadSVGFromURL(object.paths, function (elements) {\n\t\n\t        var pathUrl = object.paths;\n\t        delete object.paths;\n\t\n\t        var pathGroup = fabric.util.groupSVGElements(elements, object, pathUrl);\n\t\n\t        callback(pathGroup);\n\t      });\n\t    }\n\t    else {\n\t      fabric.util.enlivenObjects(object.paths, function(enlivenedObjects) {\n\t        delete object.paths;\n\t        callback(new fabric.PathGroup(enlivenedObjects, object));\n\t      });\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @memberOf fabric.PathGroup\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.PathGroup.async = true;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      min = fabric.util.array.min,\n\t      max = fabric.util.array.max,\n\t      invoke = fabric.util.array.invoke;\n\t\n\t  if (fabric.Group) {\n\t    return;\n\t  }\n\t\n\t  // lock-related properties, for use in fabric.Group#get\n\t  // to enable locking behavior on group\n\t  // when one of its objects has lock-related properties set\n\t  var _lockProperties = {\n\t    lockMovementX:  true,\n\t    lockMovementY:  true,\n\t    lockRotation:   true,\n\t    lockScalingX:   true,\n\t    lockScalingY:   true,\n\t    lockUniScaling: true\n\t  };\n\t\n\t  /**\n\t   * Group class\n\t   * @class fabric.Group\n\t   * @extends fabric.Object\n\t   * @mixes fabric.Collection\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#groups}\n\t   * @see {@link fabric.Group#initialize} for constructor definition\n\t   */\n\t  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'group',\n\t\n\t    /**\n\t     * Width of stroke\n\t     * @type Number\n\t     * @default\n\t     */\n\t    strokeWidth: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} objects Group objects\n\t     * @param {Object} [options] Options object\n\t     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(objects, options, isAlreadyGrouped) {\n\t      options = options || { };\n\t\n\t      this._objects = [];\n\t      // if objects enclosed in a group have been grouped already,\n\t      // we cannot change properties of objects.\n\t      // Thus we need to set options to group without objects,\n\t      // because delegatedProperties propagate to objects.\n\t      isAlreadyGrouped && this.callSuper('initialize', options);\n\t\n\t      this._objects = objects || [];\n\t      for (var i = this._objects.length; i--; ) {\n\t        this._objects[i].group = this;\n\t      }\n\t\n\t      this.originalState = { };\n\t\n\t      if (options.originX) {\n\t        this.originX = options.originX;\n\t      }\n\t      if (options.originY) {\n\t        this.originY = options.originY;\n\t      }\n\t\n\t      if (isAlreadyGrouped) {\n\t        // do not change coordinate of objects enclosed in a group,\n\t        // because objects coordinate system have been group coodinate system already.\n\t        this._updateObjectsCoords(true);\n\t      }\n\t      else {\n\t        this._calcBounds();\n\t        this._updateObjectsCoords();\n\t        this.callSuper('initialize', options);\n\t      }\n\t\n\t      this.setCoords();\n\t      this.saveCoords();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n\t     */\n\t    _updateObjectsCoords: function(skipCoordsChange) {\n\t      for (var i = this._objects.length; i--; ){\n\t        this._updateObjectCoords(this._objects[i], skipCoordsChange);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} object\n\t     * @param {Boolean} [skipCoordsChange] if true, coordinates of object dose not change\n\t     */\n\t    _updateObjectCoords: function(object, skipCoordsChange) {\n\t      // do not display corners of objects enclosed in a group\n\t      object.__origHasControls = object.hasControls;\n\t      object.hasControls = false;\n\t\n\t      if (skipCoordsChange) {\n\t        return;\n\t      }\n\t\n\t      var objectLeft = object.getLeft(),\n\t          objectTop = object.getTop(),\n\t          center = this.getCenterPoint();\n\t\n\t      object.set({\n\t        originalLeft: objectLeft,\n\t        originalTop: objectTop,\n\t        left: objectLeft - center.x,\n\t        top: objectTop - center.y\n\t      });\n\t      object.setCoords();\n\t    },\n\t\n\t    /**\n\t     * Returns string represenation of a group\n\t     * @return {String}\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.Group: (' + this.complexity() + ')>';\n\t    },\n\t\n\t    /**\n\t     * Adds an object to a group; Then recalculates group's dimension, position.\n\t     * @param {Object} object\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    addWithUpdate: function(object) {\n\t      this._restoreObjectsState();\n\t      if (object) {\n\t        this._objects.push(object);\n\t        object.group = this;\n\t        object._set('canvas', this.canvas);\n\t      }\n\t      // since _restoreObjectsState set objects inactive\n\t      this.forEachObject(this._setObjectActive, this);\n\t      this._calcBounds();\n\t      this._updateObjectsCoords();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setObjectActive: function(object) {\n\t      object.set('active', true);\n\t      object.group = this;\n\t    },\n\t\n\t    /**\n\t     * Removes an object from a group; Then recalculates group's dimension, position.\n\t     * @param {Object} object\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    removeWithUpdate: function(object) {\n\t      this._moveFlippedObject(object);\n\t      this._restoreObjectsState();\n\t\n\t      // since _restoreObjectsState set objects inactive\n\t      this.forEachObject(this._setObjectActive, this);\n\t\n\t      this.remove(object);\n\t      this._calcBounds();\n\t      this._updateObjectsCoords();\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onObjectAdded: function(object) {\n\t      object.group = this;\n\t      object._set('canvas', this.canvas);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onObjectRemoved: function(object) {\n\t      delete object.group;\n\t      object.set('active', false);\n\t    },\n\t\n\t    /**\n\t     * Properties that are delegated to group objects when reading/writing\n\t     * @param {Object} delegatedProperties\n\t     */\n\t    delegatedProperties: {\n\t      fill:             true,\n\t      opacity:          true,\n\t      fontFamily:       true,\n\t      fontWeight:       true,\n\t      fontSize:         true,\n\t      fontStyle:        true,\n\t      lineHeight:       true,\n\t      textDecoration:   true,\n\t      textAlign:        true,\n\t      backgroundColor:  true\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _set: function(key, value) {\n\t      var i = this._objects.length;\n\t\n\t      if (this.delegatedProperties[key] || key === 'canvas') {\n\t        while (i--) {\n\t          this._objects[i].set(key, value);\n\t        }\n\t      }\n\t      else {\n\t        while (i--) {\n\t          this._objects[i].setOnGroup(key, value);\n\t        }\n\t      }\n\t\n\t      this.callSuper('_set', key, value);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), {\n\t        objects: invoke(this._objects, 'toObject', propertiesToInclude)\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Renders instance on a given context\n\t     * @param {CanvasRenderingContext2D} ctx context to render instance on\n\t     */\n\t    render: function(ctx) {\n\t      // do not render if object is not visible\n\t      if (!this.visible) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      if (this.transformMatrix) {\n\t        ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      this.transform(ctx);\n\t      this.clipTo && fabric.util.clipContext(this, ctx);\n\t      // the array is now sorted in order of highest first, so start from end\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._renderObject(this._objects[i], ctx);\n\t      }\n\t\n\t      this.clipTo && ctx.restore();\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Renders controls and borders for the object\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    _renderControls: function(ctx, noTransform) {\n\t      this.callSuper('_renderControls', ctx, noTransform);\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._objects[i]._renderControls(ctx);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _renderObject: function(object, ctx) {\n\t      // do not render if object is not visible\n\t      if (!object.visible) {\n\t        return;\n\t      }\n\t\n\t      var originalHasRotatingPoint = object.hasRotatingPoint;\n\t      object.hasRotatingPoint = false;\n\t      object.render(ctx);\n\t      object.hasRotatingPoint = originalHasRotatingPoint;\n\t    },\n\t\n\t    /**\n\t     * Retores original state of each of group objects (original state is that which was before group was created).\n\t     * @private\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    _restoreObjectsState: function() {\n\t      this._objects.forEach(this._restoreObjectState, this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Realises the transform from this group onto the supplied object\n\t     * i.e. it tells you what would happen if the supplied object was in\n\t     * the group, and then the group was destroyed. It mutates the supplied\n\t     * object.\n\t     * @param {fabric.Object} object\n\t     * @return {fabric.Object} transformedObject\n\t     */\n\t    realizeTransform: function(object) {\n\t      this._moveFlippedObject(object);\n\t      this._setObjectPosition(object);\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Moves a flipped object to the position where it's displayed\n\t     * @private\n\t     * @param {fabric.Object} object\n\t     * @return {fabric.Group} thisArg\n\t     */\n\t    _moveFlippedObject: function(object) {\n\t      var oldOriginX = object.get('originX'),\n\t          oldOriginY = object.get('originY'),\n\t          center = object.getCenterPoint();\n\t\n\t      object.set({\n\t        originX: 'center',\n\t        originY: 'center',\n\t        left: center.x,\n\t        top: center.y\n\t      });\n\t\n\t      this._toggleFlipping(object);\n\t\n\t      var newOrigin = object.getPointByOrigin(oldOriginX, oldOriginY);\n\t\n\t      object.set({\n\t        originX: oldOriginX,\n\t        originY: oldOriginY,\n\t        left: newOrigin.x,\n\t        top: newOrigin.y\n\t      });\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _toggleFlipping: function(object) {\n\t      if (this.flipX) {\n\t        object.toggle('flipX');\n\t        object.set('left', -object.get('left'));\n\t        object.setAngle(-object.getAngle());\n\t      }\n\t      if (this.flipY) {\n\t        object.toggle('flipY');\n\t        object.set('top', -object.get('top'));\n\t        object.setAngle(-object.getAngle());\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Restores original state of a specified object in group\n\t     * @private\n\t     * @param {fabric.Object} object\n\t     * @return {fabric.Group} thisArg\n\t     */\n\t    _restoreObjectState: function(object) {\n\t      this._setObjectPosition(object);\n\t\n\t      object.setCoords();\n\t      object.hasControls = object.__origHasControls;\n\t      delete object.__origHasControls;\n\t      object.set('active', false);\n\t      object.setCoords();\n\t      delete object.group;\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setObjectPosition: function(object) {\n\t      var center = this.getCenterPoint(),\n\t          rotated = this._getRotatedLeftTop(object);\n\t\n\t      object.set({\n\t        angle: object.getAngle() + this.getAngle(),\n\t        left: center.x + rotated.left,\n\t        top: center.y + rotated.top,\n\t        scaleX: object.get('scaleX') * this.get('scaleX'),\n\t        scaleY: object.get('scaleY') * this.get('scaleY')\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getRotatedLeftTop: function(object) {\n\t      var groupAngle = this.getAngle() * (Math.PI / 180);\n\t      return {\n\t        left: (-Math.sin(groupAngle) * object.getTop() * this.get('scaleY') +\n\t                Math.cos(groupAngle) * object.getLeft() * this.get('scaleX')),\n\t\n\t        top:  (Math.cos(groupAngle) * object.getTop() * this.get('scaleY') +\n\t               Math.sin(groupAngle) * object.getLeft() * this.get('scaleX'))\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Destroys a group (restoring state of its objects)\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    destroy: function() {\n\t      this._objects.forEach(this._moveFlippedObject, this);\n\t      return this._restoreObjectsState();\n\t    },\n\t\n\t    /**\n\t     * Saves coordinates of this instance (to be used together with `hasMoved`)\n\t     * @saveCoords\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    saveCoords: function() {\n\t      this._originalLeft = this.get('left');\n\t      this._originalTop = this.get('top');\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Checks whether this group was moved (since `saveCoords` was called last)\n\t     * @return {Boolean} true if an object was moved (since fabric.Group#saveCoords was called)\n\t     */\n\t    hasMoved: function() {\n\t      return this._originalLeft !== this.get('left') ||\n\t             this._originalTop !== this.get('top');\n\t    },\n\t\n\t    /**\n\t     * Sets coordinates of all group objects\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    setObjectsCoords: function() {\n\t      this.forEachObject(function(object) {\n\t        object.setCoords();\n\t      });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _calcBounds: function(onlyWidthHeight) {\n\t      var aX = [],\n\t          aY = [],\n\t          o, prop,\n\t          props = ['tr', 'br', 'bl', 'tl'],\n\t          i = 0, iLen = this._objects.length,\n\t          j, jLen = props.length;\n\t\n\t      for ( ; i < iLen; ++i) {\n\t        o = this._objects[i];\n\t        o.setCoords();\n\t        for (j = 0; j < jLen; j++) {\n\t          prop = props[j];\n\t          aX.push(o.oCoords[prop].x);\n\t          aY.push(o.oCoords[prop].y);\n\t        }\n\t      }\n\t\n\t      this.set(this._getBounds(aX, aY, onlyWidthHeight));\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getBounds: function(aX, aY, onlyWidthHeight) {\n\t      var ivt = fabric.util.invertTransform(this.getViewportTransform()),\n\t          minXY = fabric.util.transformPoint(new fabric.Point(min(aX), min(aY)), ivt),\n\t          maxXY = fabric.util.transformPoint(new fabric.Point(max(aX), max(aY)), ivt),\n\t          obj = {\n\t            width: (maxXY.x - minXY.x) || 0,\n\t            height: (maxXY.y - minXY.y) || 0\n\t          };\n\t\n\t      if (!onlyWidthHeight) {\n\t        obj.left = minXY.x || 0;\n\t        obj.top = minXY.y || 0;\n\t        if (this.originX === 'center') {\n\t          obj.left += obj.width / 2;\n\t        }\n\t        if (this.originX === 'right') {\n\t          obj.left += obj.width;\n\t        }\n\t        if (this.originY === 'center') {\n\t          obj.top += obj.height / 2;\n\t        }\n\t        if (this.originY === 'bottom') {\n\t          obj.top += obj.height;\n\t        }\n\t      }\n\t      return obj;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = [\n\t        //jscs:disable validateIndentation\n\t        '<g ',\n\t          'transform=\"', this.getSvgTransform(),\n\t        '\">\\n'\n\t        //jscs:enable validateIndentation\n\t      ];\n\t\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        markup.push(this._objects[i].toSVG(reviver));\n\t      }\n\t\n\t      markup.push('</g>\\n');\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns requested property\n\t     * @param {String} prop Property to get\n\t     * @return {Any}\n\t     */\n\t    get: function(prop) {\n\t      if (prop in _lockProperties) {\n\t        if (this[prop]) {\n\t          return this[prop];\n\t        }\n\t        else {\n\t          for (var i = 0, len = this._objects.length; i < len; i++) {\n\t            if (this._objects[i][prop]) {\n\t              return true;\n\t            }\n\t          }\n\t          return false;\n\t        }\n\t      }\n\t      else {\n\t        if (prop in this.delegatedProperties) {\n\t          return this._objects[0] && this._objects[0].get(prop);\n\t        }\n\t        return this[prop];\n\t      }\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns {@link fabric.Group} instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Group\n\t   * @param {Object} object Object to create a group from\n\t   * @param {Function} [callback] Callback to invoke when an group instance is created\n\t   * @return {fabric.Group} An instance of fabric.Group\n\t   */\n\t  fabric.Group.fromObject = function(object, callback) {\n\t    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n\t      delete object.objects;\n\t      callback && callback(new fabric.Group(enlivenedObjects, object, true));\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @memberOf fabric.Group\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.Group.async = true;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var extend = fabric.util.object.extend;\n\t\n\t  if (!global.fabric) {\n\t    global.fabric = { };\n\t  }\n\t\n\t  if (global.fabric.Image) {\n\t    fabric.warn('fabric.Image is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Image class\n\t   * @class fabric.Image\n\t   * @extends fabric.Object\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#images}\n\t   * @see {@link fabric.Image#initialize} for constructor definition\n\t   */\n\t  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'image',\n\t\n\t    /**\n\t     * crossOrigin value (one of \"\", \"anonymous\", \"allow-credentials\")\n\t     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n\t     * @type String\n\t     * @default\n\t     */\n\t    crossOrigin: '',\n\t\n\t    /**\n\t     * AlignX value, part of preserveAspectRatio (one of \"none\", \"mid\", \"min\", \"max\")\n\t     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n\t     * This parameter defines how the picture is aligned to its viewport when image element width differs from image width.\n\t     * @type String\n\t     * @default\n\t     */\n\t    alignX: 'none',\n\t\n\t    /**\n\t     * AlignY value, part of preserveAspectRatio (one of \"none\", \"mid\", \"min\", \"max\")\n\t     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n\t     * This parameter defines how the picture is aligned to its viewport when image element height differs from image height.\n\t     * @type String\n\t     * @default\n\t     */\n\t    alignY: 'none',\n\t\n\t    /**\n\t     * meetOrSlice value, part of preserveAspectRatio  (one of \"meet\", \"slice\").\n\t     * if meet the image is always fully visibile, if slice the viewport is always filled with image.\n\t     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n\t     * @type String\n\t     * @default\n\t     */\n\t    meetOrSlice: 'meet',\n\t\n\t    /**\n\t     * private\n\t     * contains last value of scaleX to detect\n\t     * if the Image got resized after the last Render\n\t     * @type Number\n\t     */\n\t    _lastScaleX: 1,\n\t\n\t    /**\n\t     * private\n\t     * contains last value of scaleY to detect\n\t     * if the Image got resized after the last Render\n\t     * @type Number\n\t     */\n\t    _lastScaleY: 1,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {HTMLImageElement | String} element Image element\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Image} thisArg\n\t     */\n\t    initialize: function(element, options) {\n\t      options || (options = { });\n\t      this.filters = [ ];\n\t      this.resizeFilters = [ ];\n\t      this.callSuper('initialize', options);\n\t      this._initElement(element, options);\n\t    },\n\t\n\t    /**\n\t     * Returns image element which this instance if based on\n\t     * @return {HTMLImageElement} Image element\n\t     */\n\t    getElement: function() {\n\t      return this._element;\n\t    },\n\t\n\t    /**\n\t     * Sets image element for this instance to a specified one.\n\t     * If filters defined they are applied to new image.\n\t     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n\t     * @param {HTMLImageElement} element\n\t     * @param {Function} [callback] Callback is invoked when all filters have been applied and new image is generated\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Image} thisArg\n\t     * @chainable\n\t     */\n\t    setElement: function(element, callback, options) {\n\t      this._element = element;\n\t      this._originalElement = element;\n\t      this._initConfig(options);\n\t\n\t      if (this.filters.length !== 0) {\n\t        this.applyFilters(callback);\n\t      }\n\t      else if (callback) {\n\t        callback();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets crossOrigin value (on an instance and corresponding image element)\n\t     * @return {fabric.Image} thisArg\n\t     * @chainable\n\t     */\n\t    setCrossOrigin: function(value) {\n\t      this.crossOrigin = value;\n\t      this._element.crossOrigin = value;\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns original size of an image\n\t     * @return {Object} Object with \"width\" and \"height\" properties\n\t     */\n\t    getOriginalSize: function() {\n\t      var element = this.getElement();\n\t      return {\n\t        width: element.width,\n\t        height: element.height\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _stroke: function(ctx) {\n\t      ctx.save();\n\t      this._setStrokeStyles(ctx);\n\t      ctx.beginPath();\n\t      ctx.strokeRect(-this.width / 2, -this.height / 2, this.width, this.height);\n\t      ctx.closePath();\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var x = -this.width / 2,\n\t          y = -this.height / 2,\n\t          w = this.width,\n\t          h = this.height;\n\t\n\t      ctx.save();\n\t      this._setStrokeStyles(ctx);\n\t\n\t      ctx.beginPath();\n\t      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n\t      ctx.closePath();\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var filters = [ ];\n\t      this.filters.forEach(function(filterObj) {\n\t        if (filterObj) {\n\t          filters.push(filterObj.toObject());\n\t        }\n\t      });\n\t      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n\t        src: this._originalElement.src || this._originalElement._src,\n\t        filters: filters,\n\t        crossOrigin: this.crossOrigin,\n\t        alignX: this.alignX,\n\t        alignY: this.alignY,\n\t        meetOrSlice: this.meetOrSlice\n\t      });\n\t\n\t      if (this.resizeFilters.length > 0) {\n\t        object.resizeFilters = this.resizeFilters.map(function(filterObj) {\n\t          return filterObj && filterObj.toObject();\n\t        });\n\t      }\n\t\n\t      if (!this.includeDefaultValues) {\n\t        this._removeDefaultValues(object);\n\t      }\n\t\n\t      return object;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = [], x = -this.width / 2, y = -this.height / 2,\n\t          preserveAspectRatio = 'none';\n\t      if (this.group && this.group.type === 'path-group') {\n\t        x = this.left;\n\t        y = this.top;\n\t      }\n\t      if (this.alignX !== 'none' && this.alignY !== 'none') {\n\t        preserveAspectRatio = 'x' + this.alignX + 'Y' + this.alignY + ' ' + this.meetOrSlice;\n\t      }\n\t      markup.push(\n\t        '<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n',\n\t          '<image xlink:href=\"', this.getSvgSrc(),\n\t            '\" x=\"', x, '\" y=\"', y,\n\t            '\" style=\"', this.getSvgStyles(),\n\t            // we're essentially moving origin of transformation from top/left corner to the center of the shape\n\t            // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n\t            // so that object's center aligns with container's left/top\n\t            '\" width=\"', this.width,\n\t            '\" height=\"', this.height,\n\t            '\" preserveAspectRatio=\"', preserveAspectRatio, '\"',\n\t          '></image>\\n'\n\t      );\n\t\n\t      if (this.stroke || this.strokeDashArray) {\n\t        var origFill = this.fill;\n\t        this.fill = null;\n\t        markup.push(\n\t          '<rect ',\n\t            'x=\"', x, '\" y=\"', y,\n\t            '\" width=\"', this.width, '\" height=\"', this.height,\n\t            '\" style=\"', this.getSvgStyles(),\n\t          '\"/>\\n'\n\t        );\n\t        this.fill = origFill;\n\t      }\n\t\n\t      markup.push('</g>\\n');\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns source of an image\n\t     * @return {String} Source of an image\n\t     */\n\t    getSrc: function() {\n\t      if (this.getElement()) {\n\t        return this.getElement().src || this.getElement()._src;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets source of an image\n\t     * @param {String} src Source string (URL)\n\t     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Image} thisArg\n\t     * @chainable\n\t     */\n\t    setSrc: function(src, callback, options) {\n\t      fabric.util.loadImage(src, function(img) {\n\t        return this.setElement(img, callback, options);\n\t      }, this, options && options.crossOrigin);\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of an instance\n\t     * @return {String} String representation of an instance\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n\t    },\n\t\n\t    /**\n\t     * Returns a clone of an instance\n\t     * @param {Function} callback Callback is invoked with a clone as a first argument\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     */\n\t    clone: function(callback, propertiesToInclude) {\n\t      this.constructor.fromObject(this.toObject(propertiesToInclude), callback);\n\t    },\n\t\n\t    /**\n\t     * Applies filters assigned to this image (from \"filters\" array)\n\t     * @method applyFilters\n\t     * @param {Function} callback Callback is invoked when all filters have been applied and new image is generated\n\t     * @return {fabric.Image} thisArg\n\t     * @chainable\n\t     */\n\t    applyFilters: function(callback, filters, imgElement, forResizing) {\n\t\n\t      filters = filters || this.filters;\n\t      imgElement = imgElement || this._originalElement;\n\t\n\t      if (!imgElement) {\n\t        return;\n\t      }\n\t\n\t      var imgEl = imgElement,\n\t          canvasEl = fabric.util.createCanvasElement(),\n\t          replacement = fabric.util.createImage(),\n\t          _this = this;\n\t\n\t      canvasEl.width = imgEl.width;\n\t      canvasEl.height = imgEl.height;\n\t      canvasEl.getContext('2d').drawImage(imgEl, 0, 0, imgEl.width, imgEl.height);\n\t\n\t      if (filters.length === 0) {\n\t        this._element = imgElement;\n\t        callback && callback();\n\t        return canvasEl;\n\t      }\n\t      filters.forEach(function(filter) {\n\t        filter && filter.applyTo(canvasEl, filter.scaleX || _this.scaleX, filter.scaleY || _this.scaleY);\n\t        if (!forResizing && filter && filter.type === 'Resize') {\n\t          _this.width *= filter.scaleX;\n\t          _this.height *= filter.scaleY;\n\t        }\n\t      });\n\t\n\t      /** @ignore */\n\t      replacement.width = canvasEl.width;\n\t      replacement.height = canvasEl.height;\n\t\n\t      if (fabric.isLikelyNode) {\n\t        replacement.src = canvasEl.toBuffer(undefined, fabric.Image.pngCompression);\n\t        // onload doesn't fire in some node versions, so we invoke callback manually\n\t        _this._element = replacement;\n\t        !forResizing && (_this._filteredEl = replacement);\n\t        callback && callback();\n\t      }\n\t      else {\n\t        replacement.onload = function() {\n\t          _this._element = replacement;\n\t          !forResizing && (_this._filteredEl = replacement);\n\t          callback && callback();\n\t          replacement.onload = canvasEl = imgEl = null;\n\t        };\n\t        replacement.src = canvasEl.toDataURL('image/png');\n\t      }\n\t      return canvasEl;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t      var x, y, imageMargins = this._findMargins(), elementToDraw;\n\t\n\t      x = (noTransform ? this.left : -this.width / 2);\n\t      y = (noTransform ? this.top : -this.height / 2);\n\t\n\t      if (this.meetOrSlice === 'slice') {\n\t        ctx.beginPath();\n\t        ctx.rect(x, y, this.width, this.height);\n\t        ctx.clip();\n\t      }\n\t\n\t      if (this.isMoving === false && this.resizeFilters.length && this._needsResize()) {\n\t        this._lastScaleX = this.scaleX;\n\t        this._lastScaleY = this.scaleY;\n\t        elementToDraw = this.applyFilters(null, this.resizeFilters, this._filteredEl || this._originalElement, true);\n\t      }\n\t      else {\n\t        elementToDraw = this._element;\n\t      }\n\t      elementToDraw && ctx.drawImage(elementToDraw,\n\t                                     x + imageMargins.marginX,\n\t                                     y + imageMargins.marginY,\n\t                                     imageMargins.width,\n\t                                     imageMargins.height\n\t                                    );\n\t\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private, needed to check if image needs resize\n\t     */\n\t    _needsResize: function() {\n\t      return (this.scaleX !== this._lastScaleX || this.scaleY !== this._lastScaleY);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _findMargins: function() {\n\t      var width = this.width, height = this.height, scales,\n\t          scale, marginX = 0, marginY = 0;\n\t\n\t      if (this.alignX !== 'none' || this.alignY !== 'none') {\n\t        scales = [this.width / this._element.width, this.height / this._element.height];\n\t        scale = this.meetOrSlice === 'meet'\n\t                ? Math.min.apply(null, scales) : Math.max.apply(null, scales);\n\t        width = this._element.width * scale;\n\t        height = this._element.height * scale;\n\t        if (this.alignX === 'Mid') {\n\t          marginX = (this.width - width) / 2;\n\t        }\n\t        if (this.alignX === 'Max') {\n\t          marginX = this.width - width;\n\t        }\n\t        if (this.alignY === 'Mid') {\n\t          marginY = (this.height - height) / 2;\n\t        }\n\t        if (this.alignY === 'Max') {\n\t          marginY = this.height - height;\n\t        }\n\t      }\n\t      return {\n\t        width:  width,\n\t        height: height,\n\t        marginX: marginX,\n\t        marginY: marginY\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _resetWidthHeight: function() {\n\t      var element = this.getElement();\n\t\n\t      this.set('width', element.width);\n\t      this.set('height', element.height);\n\t    },\n\t\n\t    /**\n\t     * The Image class's initialization method. This method is automatically\n\t     * called by the constructor.\n\t     * @private\n\t     * @param {HTMLImageElement|String} element The element representing the image\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initElement: function(element, options) {\n\t      this.setElement(fabric.util.getById(element), null, options);\n\t      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initConfig: function(options) {\n\t      options || (options = { });\n\t      this.setOptions(options);\n\t      this._setWidthHeight(options);\n\t      if (this._element && this.crossOrigin) {\n\t        this._element.crossOrigin = this.crossOrigin;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Array} filters to be initialized\n\t     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n\t     */\n\t    _initFilters: function(filters, callback) {\n\t      if (filters && filters.length) {\n\t        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n\t          callback && callback(enlivenedObjects);\n\t        }, 'fabric.Image.filters');\n\t      }\n\t      else {\n\t        callback && callback();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Object with width/height properties\n\t     */\n\t    _setWidthHeight: function(options) {\n\t      this.width = 'width' in options\n\t        ? options.width\n\t        : (this.getElement()\n\t            ? this.getElement().width || 0\n\t            : 0);\n\t\n\t      this.height = 'height' in options\n\t        ? options.height\n\t        : (this.getElement()\n\t            ? this.getElement().height || 0\n\t            : 0);\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Default CSS class name for canvas\n\t   * @static\n\t   * @type String\n\t   * @default\n\t   */\n\t  fabric.Image.CSS_CANVAS = 'canvas-img';\n\t\n\t  /**\n\t   * Alias for getSrc\n\t   * @static\n\t   */\n\t  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n\t\n\t  /**\n\t   * Creates an instance of fabric.Image from its object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @param {Function} [callback] Callback to invoke when an image instance is created\n\t   */\n\t  fabric.Image.fromObject = function(object, callback) {\n\t    fabric.util.loadImage(object.src, function(img) {\n\t      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n\t        object.filters = filters || [ ];\n\t        fabric.Image.prototype._initFilters.call(object, object.resizeFilters, function(resizeFilters) {\n\t          object.resizeFilters = resizeFilters || [ ];\n\t          var instance = new fabric.Image(img, object);\n\t          callback && callback(instance);\n\t        });\n\t      });\n\t    }, null, object.crossOrigin);\n\t  };\n\t\n\t  /**\n\t   * Creates an instance of fabric.Image from an URL string\n\t   * @static\n\t   * @param {String} url URL to create an image from\n\t   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\n\t   * @param {Object} [imgOptions] Options object\n\t   */\n\t  fabric.Image.fromURL = function(url, callback, imgOptions) {\n\t    fabric.util.loadImage(url, function(img) {\n\t      callback && callback(new fabric.Image(img, imgOptions));\n\t    }, null, imgOptions && imgOptions.crossOrigin);\n\t  };\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\n\t   * @static\n\t   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n\t   */\n\t  fabric.Image.ATTRIBUTE_NAMES =\n\t    fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href'.split(' '));\n\t\n\t  /**\n\t   * Returns {@link fabric.Image} instance from an SVG element\n\t   * @static\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Function} callback Callback to execute when fabric.Image object is created\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Image} Instance of fabric.Image\n\t   */\n\t  fabric.Image.fromElement = function(element, callback, options) {\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES),\n\t        align = 'xMidYMid', meetOrSlice = 'meet', alignX, alignY, aspectRatioAttrs;\n\t\n\t    if (parsedAttributes.preserveAspectRatio) {\n\t      aspectRatioAttrs = parsedAttributes.preserveAspectRatio.split(' ');\n\t    }\n\t\n\t    if (aspectRatioAttrs && aspectRatioAttrs.length) {\n\t      meetOrSlice = aspectRatioAttrs.pop();\n\t      if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\n\t        align = meetOrSlice;\n\t        meetOrSlice = 'meet';\n\t      }\n\t      else if (aspectRatioAttrs.length) {\n\t        align = aspectRatioAttrs.pop();\n\t      }\n\t    }\n\t    //divide align in alignX and alignY\n\t    alignX = align !== 'none' ? align.slice(1, 4) : 'none';\n\t    alignY = align !== 'none' ? align.slice(5, 8) : 'none';\n\t    parsedAttributes.alignX = alignX;\n\t    parsedAttributes.alignY = alignY;\n\t    parsedAttributes.meetOrSlice = meetOrSlice;\n\t    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\n\t      extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.Image.async = true;\n\t\n\t  /**\n\t   * Indicates compression level used when generating PNG under Node (in applyFilters). Any of 0-9\n\t   * @static\n\t   * @type Number\n\t   * @default\n\t   */\n\t  fabric.Image.pngCompression = 1;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t  /**\n\t   * @private\n\t   * @return {Number} angle value\n\t   */\n\t  _getAngleValueForStraighten: function() {\n\t    var angle = this.getAngle() % 360;\n\t    if (angle > 0) {\n\t      return Math.round((angle - 1) / 90) * 90;\n\t    }\n\t    return Math.round(angle / 90) * 90;\n\t  },\n\t\n\t  /**\n\t   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  straighten: function() {\n\t    this.setAngle(this._getAngleValueForStraighten());\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Same as {@link fabric.Object.prototype.straighten} but with animation\n\t   * @param {Object} callbacks Object with callback functions\n\t   * @param {Function} [callbacks.onComplete] Invoked on completion\n\t   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  fxStraighten: function(callbacks) {\n\t    callbacks = callbacks || { };\n\t\n\t    var empty = function() { },\n\t        onComplete = callbacks.onComplete || empty,\n\t        onChange = callbacks.onChange || empty,\n\t        _this = this;\n\t\n\t    fabric.util.animate({\n\t      startValue: this.get('angle'),\n\t      endValue: this._getAngleValueForStraighten(),\n\t      duration: this.FX_DURATION,\n\t      onChange: function(value) {\n\t        _this.setAngle(value);\n\t        onChange();\n\t      },\n\t      onComplete: function() {\n\t        _this.setCoords();\n\t        onComplete();\n\t      },\n\t      onStart: function() {\n\t        _this.set('active', false);\n\t      }\n\t    });\n\t\n\t    return this;\n\t  }\n\t});\n\t\n\tfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t  /**\n\t   * Straightens object, then rerenders canvas\n\t   * @param {fabric.Object} object Object to straighten\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  straightenObject: function (object) {\n\t    object.straighten();\n\t    this.renderAll();\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\n\t   * @param {fabric.Object} object Object to straighten\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  fxStraightenObject: function (object) {\n\t    object.fxStraighten({\n\t      onChange: this.renderAll.bind(this)\n\t    });\n\t    return this;\n\t  }\n\t});\n\t\n\t\n\t/**\n\t * @namespace fabric.Image.filters\n\t * @memberOf fabric.Image\n\t * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#image_filters}\n\t * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t */\n\tfabric.Image.filters = fabric.Image.filters || { };\n\t\n\t/**\n\t * Root filter class from which all filter classes inherit from\n\t * @class fabric.Image.filters.BaseFilter\n\t * @memberOf fabric.Image.filters\n\t */\n\tfabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n\t\n\t  /**\n\t   * Filter type\n\t   * @param {String} type\n\t   * @default\n\t   */\n\t  type: 'BaseFilter',\n\t\n\t  /**\n\t   * Constructor\n\t   * @param {Object} [options] Options object\n\t   */\n\t  initialize: function(options) {\n\t    if (options) {\n\t      this.setOptions(options);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Sets filter's properties from options\n\t   * @param {Object} [options] Options object\n\t   */\n\t  setOptions: function(options) {\n\t    for (var prop in options) {\n\t      this[prop] = options[prop];\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns object representation of an instance\n\t   * @return {Object} Object representation of an instance\n\t   */\n\t  toObject: function() {\n\t    return { type: this.type };\n\t  },\n\t\n\t  /**\n\t   * Returns a JSON representation of an instance\n\t   * @return {Object} JSON\n\t   */\n\t  toJSON: function() {\n\t    // delegate, not alias\n\t    return this.toObject();\n\t  }\n\t});\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Brightness filter class\n\t   * @class fabric.Image.filters.Brightness\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Brightness({\n\t   *   brightness: 200\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Brightness = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Brightness',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Brightness.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.brightness=0] Value to brighten the image up (0..255)\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.brightness = options.brightness || 0;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          brightness = this.brightness;\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t        data[i] += brightness;\n\t        data[i + 1] += brightness;\n\t        data[i + 2] += brightness;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        brightness: this.brightness\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n\t   */\n\t  fabric.Image.filters.Brightness.fromObject = function(object) {\n\t    return new fabric.Image.filters.Brightness(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n\t   * @class fabric.Image.filters.Convolute\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example <caption>Sharpen filter</caption>\n\t   * var filter = new fabric.Image.filters.Convolute({\n\t   *   matrix: [ 0, -1,  0,\n\t   *            -1,  5, -1,\n\t   *             0, -1,  0 ]\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Blur filter</caption>\n\t   * var filter = new fabric.Image.filters.Convolute({\n\t   *   matrix: [ 1/9, 1/9, 1/9,\n\t   *             1/9, 1/9, 1/9,\n\t   *             1/9, 1/9, 1/9 ]\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Emboss filter</caption>\n\t   * var filter = new fabric.Image.filters.Convolute({\n\t   *   matrix: [ 1,   1,  1,\n\t   *             1, 0.7, -1,\n\t   *            -1,  -1, -1 ]\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Emboss filter with opaqueness</caption>\n\t   * var filter = new fabric.Image.filters.Convolute({\n\t   *   opaque: true,\n\t   *   matrix: [ 1,   1,  1,\n\t   *             1, 0.7, -1,\n\t   *            -1,  -1, -1 ]\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Convolute = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Convolute',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Convolute.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n\t     * @param {Array} [options.matrix] Filter matrix\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.opaque = options.opaque;\n\t      this.matrix = options.matrix || [\n\t        0, 0, 0,\n\t        0, 1, 0,\n\t        0, 0, 0\n\t      ];\n\t\n\t      var canvasEl = fabric.util.createCanvasElement();\n\t      this.tmpCtx = canvasEl.getContext('2d');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createImageData: function(w, h) {\n\t      return this.tmpCtx.createImageData(w, h);\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t\n\t      var weights = this.matrix,\n\t          context = canvasEl.getContext('2d'),\n\t          pixels = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t\n\t          side = Math.round(Math.sqrt(weights.length)),\n\t          halfSide = Math.floor(side/2),\n\t          src = pixels.data,\n\t          sw = pixels.width,\n\t          sh = pixels.height,\n\t\n\t          // pad output by the convolution matrix\n\t          w = sw,\n\t          h = sh,\n\t          output = this._createImageData(w, h),\n\t\n\t          dst = output.data,\n\t\n\t          // go through the destination image pixels\n\t          alphaFac = this.opaque ? 1 : 0;\n\t\n\t      for (var y = 0; y < h; y++) {\n\t        for (var x = 0; x < w; x++) {\n\t          var sy = y,\n\t              sx = x,\n\t              dstOff = (y * w + x) * 4,\n\t              // calculate the weighed sum of the source image pixels that\n\t              // fall under the convolution matrix\n\t              r = 0, g = 0, b = 0, a = 0;\n\t\n\t          for (var cy = 0; cy < side; cy++) {\n\t            for (var cx = 0; cx < side; cx++) {\n\t\n\t              var scy = sy + cy - halfSide,\n\t                  scx = sx + cx - halfSide;\n\t\n\t              /* jshint maxdepth:5 */\n\t              if (scy < 0 || scy > sh || scx < 0 || scx > sw) {\n\t                continue;\n\t              }\n\t\n\t              var srcOff = (scy * sw + scx) * 4,\n\t                  wt = weights[cy * side + cx];\n\t\n\t              r += src[srcOff] * wt;\n\t              g += src[srcOff + 1] * wt;\n\t              b += src[srcOff + 2] * wt;\n\t              a += src[srcOff + 3] * wt;\n\t            }\n\t          }\n\t          dst[dstOff] = r;\n\t          dst[dstOff + 1] = g;\n\t          dst[dstOff + 2] = b;\n\t          dst[dstOff + 3] = a + alphaFac * (255 - a);\n\t        }\n\t      }\n\t\n\t      context.putImageData(output, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        opaque: this.opaque,\n\t        matrix: this.matrix\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n\t   */\n\t  fabric.Image.filters.Convolute.fromObject = function(object) {\n\t    return new fabric.Image.filters.Convolute(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * GradientTransparency filter class\n\t   * @class fabric.Image.filters.GradientTransparency\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.GradientTransparency#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.GradientTransparency({\n\t   *   threshold: 200\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.GradientTransparency = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.GradientTransparency.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'GradientTransparency',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.GradientTransparency.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.threshold=100] Threshold value\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.threshold = options.threshold || 100;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          threshold = this.threshold,\n\t          total = data.length;\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t        data[i + 3] = threshold + 255 * (total - i) / total;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        threshold: this.threshold\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.GradientTransparency} Instance of fabric.Image.filters.GradientTransparency\n\t   */\n\t  fabric.Image.filters.GradientTransparency.fromObject = function(object) {\n\t    return new fabric.Image.filters.GradientTransparency(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { });\n\t\n\t  /**\n\t   * Grayscale image filter class\n\t   * @class fabric.Image.filters.Grayscale\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Grayscale();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Grayscale = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Grayscale',\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Grayscale.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          len = imageData.width * imageData.height * 4,\n\t          index = 0,\n\t          average;\n\t\n\t      while (index < len) {\n\t        average = (data[index] + data[index + 1] + data[index + 2]) / 3;\n\t        data[index]     = average;\n\t        data[index + 1] = average;\n\t        data[index + 2] = average;\n\t        index += 4;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n\t   */\n\t  fabric.Image.filters.Grayscale.fromObject = function() {\n\t    return new fabric.Image.filters.Grayscale();\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { });\n\t\n\t  /**\n\t   * Invert filter class\n\t   * @class fabric.Image.filters.Invert\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Invert();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Invert = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Invert',\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Invert.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i;\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        data[i] = 255 - data[i];\n\t        data[i + 1] = 255 - data[i + 1];\n\t        data[i + 2] = 255 - data[i + 2];\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n\t   */\n\t  fabric.Image.filters.Invert.fromObject = function() {\n\t    return new fabric.Image.filters.Invert();\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Mask filter class\n\t   * See http://resources.aleph-1.com/mask/\n\t   * @class fabric.Image.filters.Mask\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Mask#initialize} for constructor definition\n\t   */\n\t  fabric.Image.filters.Mask = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Mask.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Mask',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Mask.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {fabric.Image} [options.mask] Mask image object\n\t     * @param {Number} [options.channel=0] Rgb channel (0, 1, 2 or 3)\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.mask = options.mask;\n\t      this.channel = [ 0, 1, 2, 3 ].indexOf(options.channel) > -1 ? options.channel : 0;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      if (!this.mask) {\n\t        return;\n\t      }\n\t\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          maskEl = this.mask.getElement(),\n\t          maskCanvasEl = fabric.util.createCanvasElement(),\n\t          channel = this.channel,\n\t          i,\n\t          iLen = imageData.width * imageData.height * 4;\n\t\n\t      maskCanvasEl.width = maskEl.width;\n\t      maskCanvasEl.height = maskEl.height;\n\t\n\t      maskCanvasEl.getContext('2d').drawImage(maskEl, 0, 0, maskEl.width, maskEl.height);\n\t\n\t      var maskImageData = maskCanvasEl.getContext('2d').getImageData(0, 0, maskEl.width, maskEl.height),\n\t          maskData = maskImageData.data;\n\t\n\t      for (i = 0; i < iLen; i += 4) {\n\t        data[i + 3] = maskData[i + channel];\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        mask: this.mask.toObject(),\n\t        channel: this.channel\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @param {Function} [callback] Callback to invoke when a mask filter instance is created\n\t   */\n\t  fabric.Image.filters.Mask.fromObject = function(object, callback) {\n\t    fabric.util.loadImage(object.mask.src, function(img) {\n\t      object.mask = new fabric.Image(img, object.mask);\n\t      callback && callback(new fabric.Image.filters.Mask(object));\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.Image.filters.Mask.async = true;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Noise filter class\n\t   * @class fabric.Image.filters.Noise\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Noise({\n\t   *   noise: 700\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Noise = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Noise',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Noise.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.noise=0] Noise value\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.noise = options.noise || 0;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          noise = this.noise, rand;\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t\n\t        rand = (0.5 - Math.random()) * noise;\n\t\n\t        data[i] += rand;\n\t        data[i + 1] += rand;\n\t        data[i + 2] += rand;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        noise: this.noise\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n\t   */\n\t  fabric.Image.filters.Noise.fromObject = function(object) {\n\t    return new fabric.Image.filters.Noise(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Pixelate filter class\n\t   * @class fabric.Image.filters.Pixelate\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Pixelate({\n\t   *   blocksize: 8\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Pixelate = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Pixelate',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Pixelate.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.blocksize=4] Blocksize for pixelate\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.blocksize = options.blocksize || 4;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = imageData.height,\n\t          jLen = imageData.width,\n\t          index, i, j, r, g, b, a;\n\t\n\t      for (i = 0; i < iLen; i += this.blocksize) {\n\t        for (j = 0; j < jLen; j += this.blocksize) {\n\t\n\t          index = (i * 4) * jLen + (j * 4);\n\t\n\t          r = data[index];\n\t          g = data[index + 1];\n\t          b = data[index + 2];\n\t          a = data[index + 3];\n\t\n\t          /*\n\t           blocksize: 4\n\t\n\t           [1,x,x,x,1]\n\t           [x,x,x,x,1]\n\t           [x,x,x,x,1]\n\t           [x,x,x,x,1]\n\t           [1,1,1,1,1]\n\t           */\n\t\n\t          for (var _i = i, _ilen = i + this.blocksize; _i < _ilen; _i++) {\n\t            for (var _j = j, _jlen = j + this.blocksize; _j < _jlen; _j++) {\n\t              index = (_i * 4) * jLen + (_j * 4);\n\t              data[index] = r;\n\t              data[index + 1] = g;\n\t              data[index + 2] = b;\n\t              data[index + 3] = a;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        blocksize: this.blocksize\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n\t   */\n\t  fabric.Image.filters.Pixelate.fromObject = function(object) {\n\t    return new fabric.Image.filters.Pixelate(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Remove white filter class\n\t   * @class fabric.Image.filters.RemoveWhite\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.RemoveWhite#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.RemoveWhite({\n\t   *   threshold: 40,\n\t   *   distance: 140\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.RemoveWhite = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.RemoveWhite.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'RemoveWhite',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.RemoveWhite.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.threshold=30] Threshold value\n\t     * @param {Number} [options.distance=20] Distance value\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.threshold = options.threshold || 30;\n\t      this.distance = options.distance || 20;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          threshold = this.threshold,\n\t          distance = this.distance,\n\t          limit = 255 - threshold,\n\t          abs = Math.abs,\n\t          r, g, b;\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t        r = data[i];\n\t        g = data[i + 1];\n\t        b = data[i + 2];\n\t\n\t        if (r > limit &&\n\t            g > limit &&\n\t            b > limit &&\n\t            abs(r - g) < distance &&\n\t            abs(r - b) < distance &&\n\t            abs(g - b) < distance\n\t        ) {\n\t          data[i + 3] = 1;\n\t        }\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        threshold: this.threshold,\n\t        distance: this.distance\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.RemoveWhite} Instance of fabric.Image.filters.RemoveWhite\n\t   */\n\t  fabric.Image.filters.RemoveWhite.fromObject = function(object) {\n\t    return new fabric.Image.filters.RemoveWhite(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { });\n\t\n\t  /**\n\t   * Sepia filter class\n\t   * @class fabric.Image.filters.Sepia\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Sepia();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Sepia = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Sepia',\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Sepia.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i, avg;\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        avg = 0.3  * data[i] + 0.59 * data[i + 1] + 0.11 * data[i + 2];\n\t        data[i] = avg + 100;\n\t        data[i + 1] = avg + 50;\n\t        data[i + 2] = avg + 255;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Sepia} Instance of fabric.Image.filters.Sepia\n\t   */\n\t  fabric.Image.filters.Sepia.fromObject = function() {\n\t    return new fabric.Image.filters.Sepia();\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { });\n\t\n\t  /**\n\t   * Sepia2 filter class\n\t   * @class fabric.Image.filters.Sepia2\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Sepia2();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Sepia2 = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia2.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Sepia2',\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Sepia.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i, r, g, b;\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        r = data[i];\n\t        g = data[i + 1];\n\t        b = data[i + 2];\n\t\n\t        data[i] = (r * 0.393 + g * 0.769 + b * 0.189 ) / 1.351;\n\t        data[i + 1] = (r * 0.349 + g * 0.686 + b * 0.168 ) / 1.203;\n\t        data[i + 2] = (r * 0.272 + g * 0.534 + b * 0.131 ) / 2.140;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Sepia2} Instance of fabric.Image.filters.Sepia2\n\t   */\n\t  fabric.Image.filters.Sepia2.fromObject = function() {\n\t    return new fabric.Image.filters.Sepia2();\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Tint filter class\n\t   * Adapted from <a href=\"https://github.com/mezzoblue/PaintbrushJS\">https://github.com/mezzoblue/PaintbrushJS</a>\n\t   * @class fabric.Image.filters.Tint\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Tint#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example <caption>Tint filter with hex color and opacity</caption>\n\t   * var filter = new fabric.Image.filters.Tint({\n\t   *   color: '#3513B0',\n\t   *   opacity: 0.5\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Tint filter with rgba color</caption>\n\t   * var filter = new fabric.Image.filters.Tint({\n\t   *   color: 'rgba(53, 21, 176, 0.5)'\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Tint = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Tint.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Tint',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Tint.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {String} [options.color=#000000] Color to tint the image with\n\t     * @param {Number} [options.opacity] Opacity value that controls the tint effect's transparency (0..1)\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.color = options.color || '#000000';\n\t      this.opacity = typeof options.opacity !== 'undefined'\n\t                      ? options.opacity\n\t                      : new fabric.Color(this.color).getAlpha();\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i,\n\t          tintR, tintG, tintB,\n\t          r, g, b, alpha1,\n\t          source;\n\t\n\t      source = new fabric.Color(this.color).getSource();\n\t\n\t      tintR = source[0] * this.opacity;\n\t      tintG = source[1] * this.opacity;\n\t      tintB = source[2] * this.opacity;\n\t\n\t      alpha1 = 1 - this.opacity;\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        r = data[i];\n\t        g = data[i + 1];\n\t        b = data[i + 2];\n\t\n\t        // alpha compositing\n\t        data[i] = tintR + r * alpha1;\n\t        data[i + 1] = tintG + g * alpha1;\n\t        data[i + 2] = tintB + b * alpha1;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        color: this.color,\n\t        opacity: this.opacity\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Tint} Instance of fabric.Image.filters.Tint\n\t   */\n\t  fabric.Image.filters.Tint.fromObject = function(object) {\n\t    return new fabric.Image.filters.Tint(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Multiply filter class\n\t   * Adapted from <a href=\"http://www.laurenscorijn.com/articles/colormath-basics\">http://www.laurenscorijn.com/articles/colormath-basics</a>\n\t   * @class fabric.Image.filters.Multiply\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @example <caption>Multiply filter with hex color</caption>\n\t   * var filter = new fabric.Image.filters.Multiply({\n\t   *   color: '#F0F'\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Multiply filter with rgb color</caption>\n\t   * var filter = new fabric.Image.filters.Multiply({\n\t   *   color: 'rgb(53, 21, 176)'\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Multiply = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Multiply.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Multiply',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Multiply.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {String} [options.color=#000000] Color to multiply the image pixels with\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.color = options.color || '#000000';\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i,\n\t          source;\n\t\n\t      source = new fabric.Color(this.color).getSource();\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        data[i] *= source[0] / 255;\n\t        data[i + 1] *= source[1] / 255;\n\t        data[i + 2] *= source[2] / 255;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        color: this.color\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Multiply} Instance of fabric.Image.filters.Multiply\n\t   */\n\t  fabric.Image.filters.Multiply.fromObject = function(object) {\n\t    return new fabric.Image.filters.Multiply(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t  'use strict';\n\t\n\t  var fabric = global.fabric;\n\t\n\t  /**\n\t   * Color Blend filter class\n\t   * @class fabric.Image.filter.Blend\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Blend({\n\t   *  color: '#000',\n\t   *  mode: 'multiply'\n\t   * });\n\t   *\n\t   * var filter = new fabric.Image.filters.Blend({\n\t   *  image: fabricImageObject,\n\t   *  mode: 'multiply',\n\t   *  alpha: 0.5\n\t   * });\n\t\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Blend = fabric.util.createClass({\n\t    type: 'Blend',\n\t\n\t    initialize: function(options) {\n\t      options = options || {};\n\t      this.color = options.color || '#000';\n\t      this.image = options.image || false;\n\t      this.mode = options.mode || 'multiply';\n\t      this.alpha = options.alpha || 1;\n\t    },\n\t\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          tr, tg, tb,\n\t          r, g, b,\n\t          _r, _g, _b,\n\t          source,\n\t          isImage = false;\n\t\n\t      if (this.image) {\n\t        // Blend images\n\t        isImage = true;\n\t\n\t        var _el = fabric.util.createCanvasElement();\n\t        _el.width = this.image.width;\n\t        _el.height = this.image.height;\n\t\n\t        var tmpCanvas = new fabric.StaticCanvas(_el);\n\t        tmpCanvas.add(this.image);\n\t        var context2 =  tmpCanvas.getContext('2d');\n\t        source = context2.getImageData(0, 0, tmpCanvas.width, tmpCanvas.height).data;\n\t      }\n\t      else {\n\t        // Blend color\n\t        source = new fabric.Color(this.color).getSource();\n\t\n\t        tr = source[0] * this.alpha;\n\t        tg = source[1] * this.alpha;\n\t        tb = source[2] * this.alpha;\n\t      }\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t\n\t        r = data[i];\n\t        g = data[i + 1];\n\t        b = data[i + 2];\n\t\n\t        if (isImage) {\n\t          tr = source[i] * this.alpha;\n\t          tg = source[i + 1] * this.alpha;\n\t          tb = source[i + 2] * this.alpha;\n\t        }\n\t\n\t        switch (this.mode) {\n\t          case 'multiply':\n\t            data[i] = r * tr / 255;\n\t            data[i + 1] = g * tg / 255;\n\t            data[i + 2] = b * tb / 255;\n\t            break;\n\t          case 'screen':\n\t            data[i] = 1 - (1 - r) * (1 - tr);\n\t            data[i + 1] = 1 - (1 - g) * (1 - tg);\n\t            data[i + 2] = 1 - (1 - b) * (1 - tb);\n\t            break;\n\t          case 'add':\n\t            data[i] = Math.min(255, r + tr);\n\t            data[i + 1] = Math.min(255, g + tg);\n\t            data[i + 2] = Math.min(255, b + tb);\n\t            break;\n\t          case 'diff':\n\t          case 'difference':\n\t            data[i] = Math.abs(r - tr);\n\t            data[i + 1] = Math.abs(g - tg);\n\t            data[i + 2] = Math.abs(b - tb);\n\t            break;\n\t          case 'subtract':\n\t            _r = r - tr;\n\t            _g = g - tg;\n\t            _b = b - tb;\n\t\n\t            data[i] = (_r < 0) ? 0 : _r;\n\t            data[i + 1] = (_g < 0) ? 0 : _g;\n\t            data[i + 2] = (_b < 0) ? 0 : _b;\n\t            break;\n\t          case 'darken':\n\t            data[i] = Math.min(r, tr);\n\t            data[i + 1] = Math.min(g, tg);\n\t            data[i + 2] = Math.min(b, tb);\n\t            break;\n\t          case 'lighten':\n\t            data[i] = Math.max(r, tr);\n\t            data[i + 1] = Math.max(g, tg);\n\t            data[i + 2] = Math.max(b, tb);\n\t            break;\n\t        }\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return {\n\t        color: this.color,\n\t        image: this.image,\n\t        mode: this.mode,\n\t        alpha: this.alpha\n\t      };\n\t    }\n\t  });\n\t\n\t  fabric.Image.filters.Blend.fromObject = function(object) {\n\t    return new fabric.Image.filters.Blend(object);\n\t  };\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\n\t      sqrt = Math.sqrt, abs = Math.abs, max = Math.max, round = Math.round, sin = Math.sin,\n\t      ceil = Math.ceil;\n\t\n\t  /**\n\t   * Resize image filter class\n\t   * @class fabric.Image.filters.Resize\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Resize();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Resize = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Resize',\n\t\n\t    /**\n\t     * Resize type\n\t     * @param {String} resizeType\n\t     * @default\n\t     */\n\t    resizeType: 'hermite',\n\t\n\t    /**\n\t     * Scale factor for resizing, x axis\n\t     * @param {Number} scaleX\n\t     * @default\n\t     */\n\t    scaleX: 0,\n\t\n\t    /**\n\t     * Scale factor for resizing, y axis\n\t     * @param {Number} scaleY\n\t     * @default\n\t     */\n\t    scaleY: 0,\n\t\n\t    /**\n\t     * LanczosLobes parameter for lanczos filter\n\t     * @param {Number} lanczosLobes\n\t     * @default\n\t     */\n\t    lanczosLobes: 3,\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Resize.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl, scaleX, scaleY) {\n\t\n\t      this.rcpScaleX = 1 / scaleX;\n\t      this.rcpScaleY = 1 / scaleY;\n\t\n\t      var oW = canvasEl.width, oH = canvasEl.height,\n\t          dW = round(oW * scaleX), dH = round(oH * scaleY),\n\t          imageData;\n\t\n\t      if (this.resizeType === 'sliceHack') {\n\t        imageData = this.sliceByTwo(canvasEl, oW, oH, dW, dH);\n\t      }\n\t      if (this.resizeType === 'hermite') {\n\t        imageData = this.hermiteFastResize(canvasEl, oW, oH, dW, dH);\n\t      }\n\t      if (this.resizeType === 'bilinear') {\n\t        imageData = this.bilinearFiltering(canvasEl, oW, oH, dW, dH);\n\t      }\n\t      if (this.resizeType === 'lanczos') {\n\t        imageData = this.lanczosResize(canvasEl, oW, oH, dW, dH);\n\t      }\n\t      canvasEl.width = dW;\n\t      canvasEl.height = dH;\n\t      canvasEl.getContext('2d').putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    sliceByTwo: function(canvasEl, width, height, newWidth, newHeight) {\n\t      var context = canvasEl.getContext('2d'), imageData,\n\t          multW = 0.5, multH = 0.5, signW = 1, signH = 1,\n\t          doneW = false, doneH = false, stepW = width, stepH = height,\n\t          tmpCanvas = fabric.util.createCanvasElement(),\n\t          tmpCtx = tmpCanvas.getContext('2d');\n\t      newWidth = floor(newWidth);\n\t      newHeight = floor(newHeight);\n\t      tmpCanvas.width = max(newWidth, width);\n\t      tmpCanvas.height = max(newHeight, height);\n\t\n\t      if (newWidth > width) {\n\t        multW = 2;\n\t        signW = -1;\n\t      }\n\t      if (newHeight > height) {\n\t        multH = 2;\n\t        signH = -1;\n\t      }\n\t      imageData = context.getImageData(0, 0, width, height);\n\t      canvasEl.width = max(newWidth, width);\n\t      canvasEl.height = max(newHeight, height);\n\t      context.putImageData(imageData, 0, 0);\n\t\n\t      while (!doneW || !doneH) {\n\t        width = stepW;\n\t        height = stepH;\n\t        if (newWidth * signW < floor(stepW * multW * signW)) {\n\t          stepW = floor(stepW * multW);\n\t        }\n\t        else {\n\t          stepW = newWidth;\n\t          doneW = true;\n\t        }\n\t        if (newHeight * signH < floor(stepH * multH * signH)) {\n\t          stepH = floor(stepH * multH);\n\t        }\n\t        else {\n\t          stepH = newHeight;\n\t          doneH = true;\n\t        }\n\t        imageData = context.getImageData(0, 0, width, height);\n\t        tmpCtx.putImageData(imageData, 0, 0);\n\t        context.clearRect(0, 0, stepW, stepH);\n\t        context.drawImage(tmpCanvas, 0, 0, width, height, 0, 0, stepW, stepH);\n\t      }\n\t      return context.getImageData(0, 0, newWidth, newHeight);\n\t    },\n\t\n\t    lanczosResize: function(canvasEl, oW, oH, dW, dH) {\n\t\n\t      function lanczosCreate(lobes) {\n\t        return function(x) {\n\t          if (x > lobes) {\n\t            return 0;\n\t          }\n\t          x *= Math.PI;\n\t          if (abs(x) < 1e-16) {\n\t            return 1;\n\t          }\n\t          var xx = x / lobes;\n\t          return sin(x) * sin(xx) / x / xx;\n\t        };\n\t      }\n\t\n\t      function process(u) {\n\t        var v, i, weight, idx, a, red, green,\n\t            blue, alpha, fX, fY;\n\t        center.x = (u + 0.5) * ratioX;\n\t        icenter.x = floor(center.x);\n\t        for (v = 0; v < dH; v++) {\n\t          center.y = (v + 0.5) * ratioY;\n\t          icenter.y = floor(center.y);\n\t          a = 0, red = 0, green = 0, blue = 0, alpha = 0;\n\t          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n\t            if (i < 0 || i >= oW) {\n\t              continue;\n\t            }\n\t            fX = floor(1000 * abs(i - center.x));\n\t            if (!cacheLanc[fX]) {\n\t              cacheLanc[fX] = { };\n\t            }\n\t            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n\t              if (j < 0 || j >= oH) {\n\t                continue;\n\t              }\n\t              fY = floor(1000 * abs(j - center.y));\n\t              if (!cacheLanc[fX][fY]) {\n\t                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n\t              }\n\t              weight = cacheLanc[fX][fY];\n\t              if (weight > 0) {\n\t                idx = (j * oW + i) * 4;\n\t                a += weight;\n\t                red += weight * srcData[idx];\n\t                green += weight * srcData[idx + 1];\n\t                blue += weight * srcData[idx + 2];\n\t                alpha += weight * srcData[idx + 3];\n\t              }\n\t            }\n\t          }\n\t          idx = (v * dW + u) * 4;\n\t          destData[idx] = red / a;\n\t          destData[idx + 1] = green / a;\n\t          destData[idx + 2] = blue / a;\n\t          destData[idx + 3] = alpha / a;\n\t        }\n\t\n\t        if (++u < dW) {\n\t          return process(u);\n\t        }\n\t        else {\n\t          return destImg;\n\t        }\n\t      }\n\t\n\t      var context = canvasEl.getContext('2d'),\n\t          srcImg = context.getImageData(0, 0, oW, oH),\n\t          destImg = context.getImageData(0, 0, dW, dH),\n\t          srcData = srcImg.data, destData = destImg.data,\n\t          lanczos = lanczosCreate(this.lanczosLobes),\n\t          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\n\t          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\n\t          range2X = ceil(ratioX * this.lanczosLobes / 2),\n\t          range2Y = ceil(ratioY * this.lanczosLobes / 2),\n\t          cacheLanc = { }, center = { }, icenter = { };\n\t\n\t      return process(0);\n\t    },\n\t\n\t    bilinearFiltering: function(canvasEl, w, h, w2, h2) {\n\t      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\n\t          color, offset = 0, origPix, ratioX = this.rcpScaleX,\n\t          ratioY = this.rcpScaleY, context = canvasEl.getContext('2d'),\n\t          w4 = 4 * (w - 1), img = context.getImageData(0, 0, w, h),\n\t          pixels = img.data, destImage = context.getImageData(0, 0, w2, h2),\n\t          destPixels = destImage.data;\n\t      for (i = 0; i < h2; i++) {\n\t        for (j = 0; j < w2; j++) {\n\t          x = floor(ratioX * j);\n\t          y = floor(ratioY * i);\n\t          xDiff = ratioX * j - x;\n\t          yDiff = ratioY * i - y;\n\t          origPix = 4 * (y * w + x);\n\t\n\t          for (chnl = 0; chnl < 4; chnl++) {\n\t            a = pixels[origPix + chnl];\n\t            b = pixels[origPix + 4 + chnl];\n\t            c = pixels[origPix + w4 + chnl];\n\t            d = pixels[origPix + w4 + 4 + chnl];\n\t            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\n\t                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n\t            destPixels[offset++] = color;\n\t          }\n\t        }\n\t      }\n\t      return destImage;\n\t    },\n\t\n\t    hermiteFastResize: function(canvasEl, oW, oH, dW, dH) {\n\t      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\n\t          ratioWHalf = ceil(ratioW / 2),\n\t          ratioHHalf = ceil(ratioH / 2),\n\t          context = canvasEl.getContext('2d'),\n\t          img = context.getImageData(0, 0, oW, oH), data = img.data,\n\t          img2 = context.getImageData(0, 0, dW, dH), data2 = img2.data;\n\t      for (var j = 0; j < dH; j++) {\n\t        for (var i = 0; i < dW; i++) {\n\t          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\n\t              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n\t          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n\t            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\n\t                centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n\t            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n\t              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\n\t                  w = sqrt(w0 + dx * dx);\n\t              /*jshint maxdepth:5 */\n\t              if (w > 1 && w < -1) {\n\t                continue;\n\t              }\n\t              //hermite filter\n\t              weight = 2 * w * w * w - 3 * w * w + 1;\n\t              if (weight > 0) {\n\t                dx = 4 * (xx + yy * oW);\n\t                //alpha\n\t                gxA += weight * data[dx + 3];\n\t                weightsAlpha += weight;\n\t                //colors\n\t                /*jshint maxdepth:6 */\n\t                if (data[dx + 3] < 255) {\n\t                  weight = weight * data[dx + 3] / 250;\n\t                }\n\t                /*jshint maxdepth:5 */\n\t                gxR += weight * data[dx];\n\t                gxG += weight * data[dx + 1];\n\t                gxB += weight * data[dx + 2];\n\t                weights += weight;\n\t              }\n\t              /*jshint maxdepth:4 */\n\t            }\n\t          }\n\t          data2[x2] = gxR / weights;\n\t          data2[x2 + 1] = gxG / weights;\n\t          data2[x2 + 2] = gxB / weights;\n\t          data2[x2 + 3] = gxA / weightsAlpha;\n\t        }\n\t      }\n\t      return img2;\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return {\n\t        type: this.type,\n\t        scaleX: this.scaleX,\n\t        scaleY: this.scaleY,\n\t        resizeType: this.resizeType,\n\t        lanczosLobes: this.lanczosLobes\n\t      };\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n\t   */\n\t  fabric.Image.filters.Resize.fromObject = function(object) {\n\t    return new fabric.Image.filters.Resize(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      clone = fabric.util.object.clone,\n\t      toFixed = fabric.util.toFixed,\n\t      supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\n\t      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\t\n\t  if (fabric.Text) {\n\t    fabric.warn('fabric.Text is already defined');\n\t    return;\n\t  }\n\t\n\t  var stateProperties = fabric.Object.prototype.stateProperties.concat();\n\t  stateProperties.push(\n\t    'fontFamily',\n\t    'fontWeight',\n\t    'fontSize',\n\t    'text',\n\t    'textDecoration',\n\t    'textAlign',\n\t    'fontStyle',\n\t    'lineHeight',\n\t    'textBackgroundColor'\n\t  );\n\t\n\t  /**\n\t   * Text class\n\t   * @class fabric.Text\n\t   * @extends fabric.Object\n\t   * @return {fabric.Text} thisArg\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#text}\n\t   * @see {@link fabric.Text#initialize} for constructor definition\n\t   */\n\t  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n\t\n\t    /**\n\t     * Properties which when set cause object to change dimensions\n\t     * @type Object\n\t     * @private\n\t     */\n\t    _dimensionAffectingProps: {\n\t      fontSize: true,\n\t      fontWeight: true,\n\t      fontFamily: true,\n\t      fontStyle: true,\n\t      lineHeight: true,\n\t      stroke: true,\n\t      strokeWidth: true,\n\t      text: true,\n\t      textAlign: true\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _reNewline: /\\r?\\n/,\n\t\n\t    /**\n\t     * Use this regular expression to filter for whitespace that is not a new line.\n\t     * Mostly used when text is 'justify' aligned.\n\t     * @private\n\t     */\n\t    _reSpacesAndTabs: /[ \\t\\r]+/g,\n\t\n\t    /**\n\t     * Retrieves object's fontSize\n\t     * @method getFontSize\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Font size (in pixels)\n\t     */\n\t\n\t    /**\n\t     * Sets object's fontSize\n\t     * @method setFontSize\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {Number} fontSize Font size (in pixels)\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's fontWeight\n\t     * @method getFontWeight\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {(String|Number)} Font weight\n\t     */\n\t\n\t    /**\n\t     * Sets object's fontWeight\n\t     * @method setFontWeight\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {(Number|String)} fontWeight Font weight\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's fontFamily\n\t     * @method getFontFamily\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Font family\n\t     */\n\t\n\t    /**\n\t     * Sets object's fontFamily\n\t     * @method setFontFamily\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} fontFamily Font family\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's text\n\t     * @method getText\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} text\n\t     */\n\t\n\t    /**\n\t     * Sets object's text\n\t     * @method setText\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} text Text\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's textDecoration\n\t     * @method getTextDecoration\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Text decoration\n\t     */\n\t\n\t    /**\n\t     * Sets object's textDecoration\n\t     * @method setTextDecoration\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} textDecoration Text decoration\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's fontStyle\n\t     * @method getFontStyle\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Font style\n\t     */\n\t\n\t    /**\n\t     * Sets object's fontStyle\n\t     * @method setFontStyle\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} fontStyle Font style\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's lineHeight\n\t     * @method getLineHeight\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {Number} Line height\n\t     */\n\t\n\t    /**\n\t     * Sets object's lineHeight\n\t     * @method setLineHeight\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {Number} lineHeight Line height\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's textAlign\n\t     * @method getTextAlign\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Text alignment\n\t     */\n\t\n\t    /**\n\t     * Sets object's textAlign\n\t     * @method setTextAlign\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} textAlign Text alignment\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's textBackgroundColor\n\t     * @method getTextBackgroundColor\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Text background color\n\t     */\n\t\n\t    /**\n\t     * Sets object's textBackgroundColor\n\t     * @method setTextBackgroundColor\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} textBackgroundColor Text background color\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type:                 'text',\n\t\n\t    /**\n\t     * Font size (in pixels)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    fontSize:             40,\n\t\n\t    /**\n\t     * Font weight (e.g. bold, normal, 400, 600, 800)\n\t     * @type {(Number|String)}\n\t     * @default\n\t     */\n\t    fontWeight:           'normal',\n\t\n\t    /**\n\t     * Font family\n\t     * @type String\n\t     * @default\n\t     */\n\t    fontFamily:           'Times New Roman',\n\t\n\t    /**\n\t     * Text decoration Possible values: \"\", \"underline\", \"overline\" or \"line-through\".\n\t     * @type String\n\t     * @default\n\t     */\n\t    textDecoration:       '',\n\t\n\t    /**\n\t     * Text alignment. Possible values: \"left\", \"center\", or \"right\".\n\t     * @type String\n\t     * @default\n\t     */\n\t    textAlign:            'left',\n\t\n\t    /**\n\t     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n\t     * @type String\n\t     * @default\n\t     */\n\t    fontStyle:            '',\n\t\n\t    /**\n\t     * Line height\n\t     * @type Number\n\t     * @default\n\t     */\n\t    lineHeight:           1.16,\n\t\n\t    /**\n\t     * Background color of text lines\n\t     * @type String\n\t     * @default\n\t     */\n\t    textBackgroundColor:  '',\n\t\n\t    /**\n\t     * List of properties to consider when checking if\n\t     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n\t     * as well as for history (undo/redo) purposes\n\t     * @type Array\n\t     */\n\t    stateProperties:      stateProperties,\n\t\n\t    /**\n\t     * When defined, an object is rendered via stroke and this property specifies its color.\n\t     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n\t     * @type String\n\t     * @default\n\t     */\n\t    stroke:               null,\n\t\n\t    /**\n\t     * Shadow object representing shadow of this shape.\n\t     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n\t     * @type fabric.Shadow\n\t     * @default\n\t     */\n\t    shadow:               null,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _fontSizeFraction: 0.25,\n\t\n\t    /**\n\t     * Text Line proportion to font Size (in pixels)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    _fontSizeMult:             1.13,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {String} text Text string\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Text} thisArg\n\t     */\n\t    initialize: function(text, options) {\n\t      options = options || { };\n\t      this.text = text;\n\t      this.__skipDimension = true;\n\t      this.setOptions(options);\n\t      this.__skipDimension = false;\n\t      this._initDimensions();\n\t    },\n\t\n\t    /**\n\t     * Renders text object on offscreen canvas, so that it would get dimensions\n\t     * @private\n\t     */\n\t    _initDimensions: function(ctx) {\n\t      if (this.__skipDimension) {\n\t        return;\n\t      }\n\t      if (!ctx) {\n\t        ctx = fabric.util.createCanvasElement().getContext('2d');\n\t        this._setTextStyles(ctx);\n\t      }\n\t      this._textLines = this._splitTextIntoLines();\n\t      this._clearCache();\n\t      //if textAlign is 'justify' i have to disable caching\n\t      //when calculating width of text and widths of line.\n\t      this._cacheLinesWidth = (this.textAlign !== 'justify');\n\t      this.width = this._getTextWidth(ctx);\n\t      this._cacheLinesWidth = true;\n\t      this.height = this._getTextHeight(ctx);\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of an instance\n\t     * @return {String} String representation of text object\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.Text (' + this.complexity() +\n\t        '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      this.clipTo && fabric.util.clipContext(this, ctx);\n\t      this._setOpacity(ctx);\n\t      this._setShadow(ctx);\n\t      this._setupCompositeOperation(ctx);\n\t      this._renderTextBackground(ctx);\n\t      this._setStrokeStyles(ctx);\n\t      this._setFillStyles(ctx);\n\t      this._renderText(ctx);\n\t      this._renderTextDecoration(ctx);\n\t      this.clipTo && ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderText: function(ctx) {\n\t\n\t      this._translateForTextAlign(ctx);\n\t      this._renderTextFill(ctx);\n\t      this._renderTextStroke(ctx);\n\t      this._translateForTextAlign(ctx, true);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Boolean} back Indicates if translate back or forward\n\t     */\n\t    _translateForTextAlign: function(ctx, back) {\n\t      if (this.textAlign !== 'left' && this.textAlign !== 'justify') {\n\t        var sign = back ? -1 : 1;\n\t        ctx.translate(this.textAlign === 'center' ? (sign * this.width / 2) : sign * this.width, 0);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _setTextStyles: function(ctx) {\n\t      ctx.textBaseline = 'alphabetic';\n\t      if (!this.skipTextAlign) {\n\t        ctx.textAlign = this.textAlign;\n\t      }\n\t      ctx.font = this._getFontDeclaration();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @return {Number} Height of fabric.Text object\n\t     */\n\t    _getTextHeight: function() {\n\t      return this._textLines.length * this._getHeightOfLine();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @return {Number} Maximum width of fabric.Text object\n\t     */\n\t    _getTextWidth: function(ctx) {\n\t      var maxWidth = this._getLineWidth(ctx, 0);\n\t\n\t      for (var i = 1, len = this._textLines.length; i < len; i++) {\n\t        var currentLineWidth = this._getLineWidth(ctx, i);\n\t        if (currentLineWidth > maxWidth) {\n\t          maxWidth = currentLineWidth;\n\t        }\n\t      }\n\t      return maxWidth;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} chars Chars to render\n\t     * @param {Number} left Left position of text\n\t     * @param {Number} top Top position of text\n\t     */\n\t    _renderChars: function(method, ctx, chars, left, top) {\n\t      // remove Text word from method var\n\t      var shortM = method.slice(0, -4);\n\t      if (this[shortM].toLive) {\n\t        var offsetX = -this.width / 2 + this[shortM].offsetX || 0,\n\t            offsetY = -this.height / 2 + this[shortM].offsetY || 0;\n\t        ctx.save();\n\t        ctx.translate(offsetX, offsetY);\n\t        left -= offsetX;\n\t        top -= offsetY;\n\t      }\n\t      ctx[method](chars, left, top);\n\t      this[shortM].toLive && ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} line Text to render\n\t     * @param {Number} left Left position of text\n\t     * @param {Number} top Top position of text\n\t     * @param {Number} lineIndex Index of a line in a text\n\t     */\n\t    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n\t      // lift the line by quarter of fontSize\n\t      top -= this.fontSize * this._fontSizeFraction;\n\t\n\t      // short-circuit\n\t      if (this.textAlign !== 'justify') {\n\t        this._renderChars(method, ctx, line, left, top, lineIndex);\n\t        return;\n\t      }\n\t\n\t      var lineWidth = this._getLineWidth(ctx, lineIndex),\n\t          totalWidth = this.width;\n\t      if (totalWidth >= lineWidth) {\n\t        // stretch the line\n\t        var words = line.split(/\\s+/),\n\t            wordsWidth = this._getWidthOfWords(ctx, line, lineIndex),\n\t            widthDiff = totalWidth - wordsWidth,\n\t            numSpaces = words.length - 1,\n\t            spaceWidth = widthDiff / numSpaces,\n\t            leftOffset = 0;\n\t\n\t        for (var i = 0, len = words.length; i < len; i++) {\n\t          this._renderChars(method, ctx, words[i], left + leftOffset, top, lineIndex);\n\t          leftOffset += ctx.measureText(words[i]).width + spaceWidth;\n\t        }\n\t      }\n\t      else {\n\t        this._renderChars(method, ctx, line, left, top, lineIndex);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} line\n\t     */\n\t    _getWidthOfWords: function (ctx, line) {\n\t      return ctx.measureText(line.replace(/\\s+/g, '')).width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @return {Number} Left offset\n\t     */\n\t    _getLeftOffset: function() {\n\t      return -this.width / 2;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @return {Number} Top offset\n\t     */\n\t    _getTopOffset: function() {\n\t      return -this.height / 2;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextFill: function(ctx) {\n\t      if (!this.fill && !this._skipFillStrokeCheck) {\n\t        return;\n\t      }\n\t\n\t      var lineHeights = 0;\n\t\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        var heightOfLine = this._getHeightOfLine(ctx, i),\n\t            maxHeight = heightOfLine / this.lineHeight;\n\t\n\t        this._renderTextLine(\n\t          'fillText',\n\t          ctx,\n\t          this._textLines[i],\n\t          this._getLeftOffset(),\n\t          this._getTopOffset() + lineHeights + maxHeight,\n\t          i\n\t        );\n\t        lineHeights += heightOfLine;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextStroke: function(ctx) {\n\t      if ((!this.stroke || this.strokeWidth === 0) && !this._skipFillStrokeCheck) {\n\t        return;\n\t      }\n\t\n\t      var lineHeights = 0;\n\t\n\t      if (this.shadow && !this.shadow.affectStroke) {\n\t        this._removeShadow(ctx);\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      if (this.strokeDashArray) {\n\t        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n\t        if (1 & this.strokeDashArray.length) {\n\t          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);\n\t        }\n\t        supportsLineDash && ctx.setLineDash(this.strokeDashArray);\n\t      }\n\t\n\t      ctx.beginPath();\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        var heightOfLine = this._getHeightOfLine(ctx, i),\n\t            maxHeight = heightOfLine / this.lineHeight;\n\t\n\t        this._renderTextLine(\n\t          'strokeText',\n\t          ctx,\n\t          this._textLines[i],\n\t          this._getLeftOffset(),\n\t          this._getTopOffset() + lineHeights + maxHeight,\n\t          i\n\t        );\n\t        lineHeights += heightOfLine;\n\t      }\n\t      ctx.closePath();\n\t      ctx.restore();\n\t    },\n\t\n\t    _getHeightOfLine: function() {\n\t      return this.fontSize * this._fontSizeMult * this.lineHeight;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Array} textLines Array of all text lines\n\t     */\n\t    _renderTextBackground: function(ctx) {\n\t      this._renderTextBoxBackground(ctx);\n\t      this._renderTextLinesBackground(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextBoxBackground: function(ctx) {\n\t      if (!this.backgroundColor) {\n\t        return;\n\t      }\n\t\n\t      ctx.fillStyle = this.backgroundColor;\n\t\n\t      ctx.fillRect(\n\t        this._getLeftOffset(),\n\t        this._getTopOffset(),\n\t        this.width,\n\t        this.height\n\t      );\n\t\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextLinesBackground: function(ctx) {\n\t      if (!this.textBackgroundColor) {\n\t        return;\n\t      }\n\t      var lineTopOffset = 0, heightOfLine = this._getHeightOfLine(),\n\t          lineWidth, lineLeftOffset;\n\t\n\t      ctx.fillStyle = this.textBackgroundColor;\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        if (this._textLines[i] !== '') {\n\t          lineWidth = this._getLineWidth(ctx, i);\n\t          lineLeftOffset = this._getLineLeftOffset(lineWidth);\n\t          ctx.fillRect(\n\t            this._getLeftOffset() + lineLeftOffset,\n\t            this._getTopOffset() + lineTopOffset,\n\t            lineWidth,\n\t            this.fontSize * this._fontSizeMult\n\t          );\n\t        }\n\t        lineTopOffset += heightOfLine;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Number} lineWidth Width of text line\n\t     * @return {Number} Line left offset\n\t     */\n\t    _getLineLeftOffset: function(lineWidth) {\n\t      if (this.textAlign === 'center') {\n\t        return (this.width - lineWidth) / 2;\n\t      }\n\t      if (this.textAlign === 'right') {\n\t        return this.width - lineWidth;\n\t      }\n\t      return 0;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _clearCache: function() {\n\t      this.__lineWidths = [ ];\n\t      this.__lineHeights = [ ];\n\t      this.__lineOffsets = [ ];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _shouldClearCache: function() {\n\t      var shouldClear = false;\n\t      if (this._forceClearCache) {\n\t        this._forceClearCache = false;\n\t        return true;\n\t      }\n\t      for (var prop in this._dimensionAffectingProps) {\n\t        if (this['__' + prop] !== this[prop]) {\n\t          this['__' + prop] = this[prop];\n\t          shouldClear = true;\n\t        }\n\t      }\n\t      return shouldClear;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} lineIndex line number\n\t     * @return {Number} Line width\n\t     */\n\t    _getLineWidth: function(ctx, lineIndex) {\n\t      if (this.__lineWidths[lineIndex]) {\n\t        return this.__lineWidths[lineIndex];\n\t      }\n\t      var width, wordCount, line = this._textLines[lineIndex];\n\t      if (line === '') {\n\t        width = 0;\n\t      }\n\t      else if (this.textAlign === 'justify' && this._cacheLinesWidth) {\n\t        wordCount = line.split(' ');\n\t        //consider not justify last line, not for now.\n\t        if (wordCount.length > 1) {\n\t          width = this.width;\n\t        }\n\t        else {\n\t          width = ctx.measureText(line).width;\n\t        }\n\t      }\n\t      else {\n\t        width = ctx.measureText(line).width;\n\t      }\n\t      this._cacheLinesWidth && (this.__lineWidths[lineIndex] = width);\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextDecoration: function(ctx) {\n\t      if (!this.textDecoration) {\n\t        return;\n\t      }\n\t\n\t      var halfOfVerticalBox = this.height / 2,\n\t          _this = this, offsets = [];\n\t\n\t      /** @ignore */\n\t      function renderLinesAtOffset(offsets) {\n\t        var i, lineHeight = 0, len, j, oLen, lineWidth,\n\t            lineLeftOffset, heightOfLine;\n\t\n\t        for (i = 0, len = _this._textLines.length; i < len; i++) {\n\t\n\t          lineWidth = _this._getLineWidth(ctx, i),\n\t          lineLeftOffset = _this._getLineLeftOffset(lineWidth),\n\t          heightOfLine = _this._getHeightOfLine(ctx, i);\n\t\n\t          for (j = 0, oLen = offsets.length; j < oLen; j++) {\n\t            ctx.fillRect(\n\t              _this._getLeftOffset() + lineLeftOffset,\n\t              lineHeight + (_this._fontSizeMult - 1 + offsets[j] ) * _this.fontSize - halfOfVerticalBox,\n\t              lineWidth,\n\t              _this.fontSize / 15);\n\t          }\n\t          lineHeight += heightOfLine;\n\t        }\n\t      }\n\t\n\t      if (this.textDecoration.indexOf('underline') > -1) {\n\t        offsets.push(0.85); // 1 - 3/16\n\t      }\n\t      if (this.textDecoration.indexOf('line-through') > -1) {\n\t        offsets.push(0.43);\n\t      }\n\t      if (this.textDecoration.indexOf('overline') > -1) {\n\t        offsets.push(-0.12);\n\t      }\n\t      if (offsets.length > 0) {\n\t        renderLinesAtOffset(offsets);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getFontDeclaration: function() {\n\t      return [\n\t        // node-canvas needs \"weight style\", while browsers need \"style weight\"\n\t        (fabric.isLikelyNode ? this.fontWeight : this.fontStyle),\n\t        (fabric.isLikelyNode ? this.fontStyle : this.fontWeight),\n\t        this.fontSize + 'px',\n\t        (fabric.isLikelyNode ? ('\"' + this.fontFamily + '\"') : this.fontFamily)\n\t      ].join(' ');\n\t    },\n\t\n\t    /**\n\t     * Renders text instance on a specified context\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    render: function(ctx, noTransform) {\n\t      // do not render if object is not visible\n\t      if (!this.visible) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      this._setTextStyles(ctx);\n\t\n\t      if (this._shouldClearCache()) {\n\t        this._initDimensions(ctx);\n\t      }\n\t      if (!noTransform) {\n\t        this.transform(ctx);\n\t      }\n\t      if (this.transformMatrix) {\n\t        ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      if (this.group && this.group.type === 'path-group') {\n\t        ctx.translate(this.left, this.top);\n\t      }\n\t      this._render(ctx);\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Returns the text as an array of lines.\n\t     * @returns {Array} Lines in the text\n\t     */\n\t    _splitTextIntoLines: function() {\n\t      return this.text.split(this._reNewline);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n\t        text:                 this.text,\n\t        fontSize:             this.fontSize,\n\t        fontWeight:           this.fontWeight,\n\t        fontFamily:           this.fontFamily,\n\t        fontStyle:            this.fontStyle,\n\t        lineHeight:           this.lineHeight,\n\t        textDecoration:       this.textDecoration,\n\t        textAlign:            this.textAlign,\n\t        textBackgroundColor:  this.textBackgroundColor\n\t      });\n\t      if (!this.includeDefaultValues) {\n\t        this._removeDefaultValues(object);\n\t      }\n\t      return object;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(),\n\t          offsets = this._getSVGLeftTopOffsets(this.ctx),\n\t          textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n\t      this._wrapSVGTextAndBg(markup, textAndBg);\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getSVGLeftTopOffsets: function(ctx) {\n\t      var lineTop = this._getHeightOfLine(ctx, 0),\n\t          textLeft = -this.width / 2,\n\t          textTop = 0;\n\t\n\t      return {\n\t        textLeft: textLeft + (this.group && this.group.type === 'path-group' ? this.left : 0),\n\t        textTop: textTop + (this.group && this.group.type === 'path-group' ? -this.top : 0),\n\t        lineTop: lineTop\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _wrapSVGTextAndBg: function(markup, textAndBg) {\n\t      markup.push(\n\t        '\\t<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n',\n\t          textAndBg.textBgRects.join(''),\n\t          '\\t\\t<text ',\n\t            (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ': ''),\n\t            (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ': ''),\n\t            (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ': ''),\n\t            (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ': ''),\n\t            (this.textDecoration ? 'text-decoration=\"' + this.textDecoration + '\" ': ''),\n\t            'style=\"', this.getSvgStyles(), '\" >',\n\t            textAndBg.textSpans.join(''),\n\t          '</text>\\n',\n\t        '\\t</g>\\n'\n\t      );\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Number} textTopOffset Text top offset\n\t     * @param {Number} textLeftOffset Text left offset\n\t     * @return {Object}\n\t     */\n\t    _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\n\t      var textSpans = [ ],\n\t          textBgRects = [ ],\n\t          height = 0;\n\t      // bounding-box background\n\t      this._setSVGBg(textBgRects);\n\t\n\t      // text and text-background\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        if (this.textBackgroundColor) {\n\t          this._setSVGTextLineBg(textBgRects, i, textLeftOffset, textTopOffset, height);\n\t        }\n\t        this._setSVGTextLineText(i, textSpans, height, textLeftOffset, textTopOffset, textBgRects);\n\t        height += this._getHeightOfLine(this.ctx, i);\n\t      }\n\t\n\t      return {\n\t        textSpans: textSpans,\n\t        textBgRects: textBgRects\n\t      };\n\t    },\n\t\n\t    _setSVGTextLineText: function(i, textSpans, height, textLeftOffset, textTopOffset) {\n\t      var yPos = this.fontSize * (this._fontSizeMult - this._fontSizeFraction)\n\t        - textTopOffset + height - this.height / 2;\n\t      textSpans.push(\n\t        '<tspan x=\"',\n\t          toFixed(textLeftOffset + this._getLineLeftOffset(this.__lineWidths[i]), NUM_FRACTION_DIGITS), '\" ',\n\t          'y=\"',\n\t          toFixed(yPos, NUM_FRACTION_DIGITS),\n\t          '\" ',\n\t          // doing this on <tspan> elements since setting opacity\n\t          // on containing <text> one doesn't work in Illustrator\n\t          this._getFillAttributes(this.fill), '>',\n\t          fabric.util.string.escapeXml(this._textLines[i]),\n\t        '</tspan>'\n\t      );\n\t    },\n\t\n\t    _setSVGTextLineBg: function(textBgRects, i, textLeftOffset, textTopOffset, height) {\n\t      textBgRects.push(\n\t        '\\t\\t<rect ',\n\t          this._getFillAttributes(this.textBackgroundColor),\n\t          ' x=\"',\n\t          toFixed(textLeftOffset + this._getLineLeftOffset(this.__lineWidths[i]), NUM_FRACTION_DIGITS),\n\t          '\" y=\"',\n\t          toFixed(height - this.height / 2, NUM_FRACTION_DIGITS),\n\t          '\" width=\"',\n\t          toFixed(this.__lineWidths[i], NUM_FRACTION_DIGITS),\n\t          '\" height=\"',\n\t          toFixed(this._getHeightOfLine(this.ctx, i) / this.lineHeight, NUM_FRACTION_DIGITS),\n\t        '\"></rect>\\n');\n\t    },\n\t\n\t    _setSVGBg: function(textBgRects) {\n\t      if (this.backgroundColor) {\n\t        textBgRects.push(\n\t          '\\t\\t<rect ',\n\t            this._getFillAttributes(this.backgroundColor),\n\t            ' x=\"',\n\t            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\n\t            '\" y=\"',\n\t            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\n\t            '\" width=\"',\n\t            toFixed(this.width, NUM_FRACTION_DIGITS),\n\t            '\" height=\"',\n\t            toFixed(this.height, NUM_FRACTION_DIGITS),\n\t          '\"></rect>\\n');\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n\t     * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n\t     *\n\t     * @private\n\t     * @param {Any} value\n\t     * @return {String}\n\t     */\n\t    _getFillAttributes: function(value) {\n\t      var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\n\t      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\n\t        return 'fill=\"' + value + '\"';\n\t      }\n\t      return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Sets specified property to a specified value\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     * @return {fabric.Text} thisArg\n\t     * @chainable\n\t     */\n\t    _set: function(key, value) {\n\t      this.callSuper('_set', key, value);\n\t\n\t      if (key in this._dimensionAffectingProps) {\n\t        this._initDimensions();\n\t        this.setCoords();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Text\n\t   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n\t   */\n\t  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\n\t    'x y dx dy font-family font-style font-weight font-size text-decoration text-anchor'.split(' '));\n\t\n\t  /**\n\t   * Default SVG font size\n\t   * @static\n\t   * @memberOf fabric.Text\n\t   */\n\t  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\n\t\n\t  /**\n\t   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\n\t   * @static\n\t   * @memberOf fabric.Text\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Text} Instance of fabric.Text\n\t   */\n\t  fabric.Text.fromElement = function(element, options) {\n\t    if (!element) {\n\t      return null;\n\t    }\n\t\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES);\n\t    options = fabric.util.object.extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes);\n\t\n\t    options.top = options.top || 0;\n\t    options.left = options.left || 0;\n\t    if ('dx' in parsedAttributes) {\n\t      options.left += parsedAttributes.dx;\n\t    }\n\t    if ('dy' in parsedAttributes) {\n\t      options.top += parsedAttributes.dy;\n\t    }\n\t    if (!('fontSize' in options)) {\n\t      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\t    }\n\t\n\t    if (!options.originX) {\n\t      options.originX = 'left';\n\t    }\n\t    var textContent = element.textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' '),\n\t        text = new fabric.Text(textContent, options),\n\t        /*\n\t          Adjust positioning:\n\t            x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n\t            top/left properties in Fabric correspond to center point of text bounding box\n\t        */\n\t        offX = 0;\n\t\n\t    if (text.originX === 'left') {\n\t      offX = text.getWidth() / 2;\n\t    }\n\t    if (text.originX === 'right') {\n\t      offX = -text.getWidth() / 2;\n\t    }\n\t    text.set({\n\t      left: text.getLeft() + offX,\n\t      top: text.getTop() - text.getHeight() / 2 + text.fontSize * (0.18 + text._fontSizeFraction) /* 0.3 is the old lineHeight */\n\t    });\n\t\n\t    return text;\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns fabric.Text instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Text\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Text} Instance of fabric.Text\n\t   */\n\t  fabric.Text.fromObject = function(object) {\n\t    return new fabric.Text(object.text, clone(object));\n\t  };\n\t\n\t  fabric.util.createAccessors(fabric.Text);\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  var clone = fabric.util.object.clone;\n\t\n\t  /**\n\t   * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\n\t   * prefix when observing canvas.\n\t   * @class fabric.IText\n\t   * @extends fabric.Text\n\t   * @mixes fabric.Observable\n\t   *\n\t   * @fires changed\n\t   * @fires selection:changed\n\t   * @fires editing:entered\n\t   * @fires editing:exited\n\t   *\n\t   * @return {fabric.IText} thisArg\n\t   * @see {@link fabric.IText#initialize} for constructor definition\n\t   *\n\t   * <p>Supported key combinations:</p>\n\t   * <pre>\n\t   *   Move cursor:                    left, right, up, down\n\t   *   Select character:               shift + left, shift + right\n\t   *   Select text vertically:         shift + up, shift + down\n\t   *   Move cursor by word:            alt + left, alt + right\n\t   *   Select words:                   shift + alt + left, shift + alt + right\n\t   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n\t   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n\t   *   Jump to start/end of text:      cmd + up, cmd + down\n\t   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n\t   *   Delete character:               backspace\n\t   *   Delete word:                    alt + backspace\n\t   *   Delete line:                    cmd + backspace\n\t   *   Forward delete:                 delete\n\t   *   Copy text:                      ctrl/cmd + c\n\t   *   Paste text:                     ctrl/cmd + v\n\t   *   Cut text:                       ctrl/cmd + x\n\t   *   Select entire text:             ctrl/cmd + a\n\t   *   Quit editing                    tab or esc\n\t   * </pre>\n\t   *\n\t   * <p>Supported mouse/touch combination</p>\n\t   * <pre>\n\t   *   Position cursor:                click/touch\n\t   *   Create selection:               click/touch & drag\n\t   *   Create selection:               click & shift + click\n\t   *   Select word:                    double click\n\t   *   Select line:                    triple click\n\t   * </pre>\n\t   */\n\t  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'i-text',\n\t\n\t    /**\n\t     * Index where text selection starts (or where cursor is when there is no selection)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    selectionStart: 0,\n\t\n\t    /**\n\t     * Index where text selection ends\n\t     * @type Number\n\t     * @default\n\t     */\n\t    selectionEnd: 0,\n\t\n\t    /**\n\t     * Color of text selection\n\t     * @type String\n\t     * @default\n\t     */\n\t    selectionColor: 'rgba(17,119,255,0.3)',\n\t\n\t    /**\n\t     * Indicates whether text is in editing mode\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    isEditing: false,\n\t\n\t    /**\n\t     * Indicates whether a text can be edited\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    editable: true,\n\t\n\t    /**\n\t     * Border color of text object while it's in editing mode\n\t     * @type String\n\t     * @default\n\t     */\n\t    editingBorderColor: 'rgba(102,153,255,0.25)',\n\t\n\t    /**\n\t     * Width of cursor (in px)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    cursorWidth: 2,\n\t\n\t    /**\n\t     * Color of default cursor (when not overwritten by character style)\n\t     * @type String\n\t     * @default\n\t     */\n\t    cursorColor: '#333',\n\t\n\t    /**\n\t     * Delay between cursor blink (in ms)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    cursorDelay: 1000,\n\t\n\t    /**\n\t     * Duration of cursor fadein (in ms)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    cursorDuration: 600,\n\t\n\t    /**\n\t     * Object containing character styles\n\t     * (where top-level properties corresponds to line number and 2nd-level properties -- to char number in a line)\n\t     * @type Object\n\t     * @default\n\t     */\n\t    styles: null,\n\t\n\t    /**\n\t     * Indicates whether internal text char widths can be cached\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    caching: true,\n\t\n\t    /**\n\t     * @private\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    _skipFillStrokeCheck: false,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _reSpace: /\\s|\\n/,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _currentCursorOpacity: 0,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _selectionDirection: null,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _abortCursorAnimation: false,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _charWidthsCache: { },\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {String} text Text string\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.IText} thisArg\n\t     */\n\t    initialize: function(text, options) {\n\t      this.styles = options ? (options.styles || { }) : { };\n\t      this.callSuper('initialize', text, options);\n\t      this.initBehavior();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _clearCache: function() {\n\t      this.callSuper('_clearCache');\n\t      this.__maxFontHeights = [ ];\n\t      this.__widthOfSpace = [ ];\n\t    },\n\t\n\t    /**\n\t     * Returns true if object has no styling\n\t     */\n\t    isEmptyStyles: function() {\n\t      if (!this.styles) {\n\t        return true;\n\t      }\n\t      var obj = this.styles;\n\t\n\t      for (var p1 in obj) {\n\t        for (var p2 in obj[p1]) {\n\t          /*jshint unused:false */\n\t          for (var p3 in obj[p1][p2]) {\n\t            return false;\n\t          }\n\t        }\n\t      }\n\t      return true;\n\t    },\n\t\n\t    /**\n\t     * Sets selection start (left boundary of a selection)\n\t     * @param {Number} index Index to set selection start to\n\t     */\n\t    setSelectionStart: function(index) {\n\t      index = Math.max(index, 0);\n\t      if (this.selectionStart !== index) {\n\t        this.fire('selection:changed');\n\t        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n\t        this.selectionStart = index;\n\t      }\n\t      this._updateTextarea();\n\t    },\n\t\n\t    /**\n\t     * Sets selection end (right boundary of a selection)\n\t     * @param {Number} index Index to set selection end to\n\t     */\n\t    setSelectionEnd: function(index) {\n\t      index = Math.min(index, this.text.length);\n\t      if (this.selectionEnd !== index) {\n\t        this.fire('selection:changed');\n\t        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n\t        this.selectionEnd = index;\n\t      }\n\t      this._updateTextarea();\n\t    },\n\t\n\t    /**\n\t     * Gets style of a current selection/cursor (at the start position)\n\t     * @param {Number} [startIndex] Start index to get styles at\n\t     * @param {Number} [endIndex] End index to get styles at\n\t     * @return {Object} styles Style object at a specified (or current) index\n\t     */\n\t    getSelectionStyles: function(startIndex, endIndex) {\n\t\n\t      if (arguments.length === 2) {\n\t        var styles = [ ];\n\t        for (var i = startIndex; i < endIndex; i++) {\n\t          styles.push(this.getSelectionStyles(i));\n\t        }\n\t        return styles;\n\t      }\n\t\n\t      var loc = this.get2DCursorLocation(startIndex),\n\t          style = this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n\t\n\t      return style || {};\n\t    },\n\t\n\t    /**\n\t     * Sets style of a current selection\n\t     * @param {Object} [styles] Styles object\n\t     * @return {fabric.IText} thisArg\n\t     * @chainable\n\t     */\n\t    setSelectionStyles: function(styles) {\n\t      if (this.selectionStart === this.selectionEnd) {\n\t        this._extendStyles(this.selectionStart, styles);\n\t      }\n\t      else {\n\t        for (var i = this.selectionStart; i < this.selectionEnd; i++) {\n\t          this._extendStyles(i, styles);\n\t        }\n\t      }\n\t      /* not included in _extendStyles to avoid clearing cache more than once */\n\t      this._forceClearCache = true;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _extendStyles: function(index, styles) {\n\t      var loc = this.get2DCursorLocation(index);\n\t\n\t      if (!this._getLineStyle(loc.lineIndex)) {\n\t        this._setLineStyle(loc.lineIndex, {});\n\t      }\n\t\n\t      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n\t        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n\t      }\n\t\n\t      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      this.callSuper('_render', ctx);\n\t      this.ctx = ctx;\n\t      this.isEditing && this.renderCursorOrSelection();\n\t    },\n\t\n\t    /**\n\t     * Renders cursor or selection (depending on what exists)\n\t     */\n\t    renderCursorOrSelection: function() {\n\t      if (!this.active) {\n\t        return;\n\t      }\n\t\n\t      var chars = this.text.split(''),\n\t          boundaries, ctx;\n\t\n\t      if (this.canvas.contextTop) {\n\t        ctx = this.canvas.contextTop;\n\t        ctx.save();\n\t        ctx.transform.apply(ctx, this.canvas.viewportTransform);\n\t        this.transform(ctx);\n\t        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      else {\n\t        ctx = this.ctx;\n\t        ctx.save();\n\t      }\n\t\n\t      if (this.selectionStart === this.selectionEnd) {\n\t        boundaries = this._getCursorBoundaries(chars, 'cursor');\n\t        this.renderCursor(boundaries, ctx);\n\t      }\n\t      else {\n\t        boundaries = this._getCursorBoundaries(chars, 'selection');\n\t        this.renderSelection(chars, boundaries, ctx);\n\t      }\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n\t     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n\t     */\n\t    get2DCursorLocation: function(selectionStart) {\n\t      if (typeof selectionStart === 'undefined') {\n\t        selectionStart = this.selectionStart;\n\t      }\n\t      var len = this._textLines.length;\n\t      for (var i = 0; i < len; i++) {\n\t        if (selectionStart <= this._textLines[i].length) {\n\t          return {\n\t            lineIndex: i,\n\t            charIndex: selectionStart\n\t          };\n\t        }\n\t        selectionStart -= this._textLines[i].length + 1;\n\t      }\n\t      return {\n\t        lineIndex: i - 1,\n\t        charIndex: this._textLines[i - 1].length < selectionStart ? this._textLines[i - 1].length : selectionStart\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Returns complete style of char at the current cursor\n\t     * @param {Number} lineIndex Line index\n\t     * @param {Number} charIndex Char index\n\t     * @return {Object} Character style\n\t     */\n\t    getCurrentCharStyle: function(lineIndex, charIndex) {\n\t      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n\t\n\t      return {\n\t        fontSize: style && style.fontSize || this.fontSize,\n\t        fill: style && style.fill || this.fill,\n\t        textBackgroundColor: style && style.textBackgroundColor || this.textBackgroundColor,\n\t        textDecoration: style && style.textDecoration || this.textDecoration,\n\t        fontFamily: style && style.fontFamily || this.fontFamily,\n\t        fontWeight: style && style.fontWeight || this.fontWeight,\n\t        fontStyle: style && style.fontStyle || this.fontStyle,\n\t        stroke: style && style.stroke || this.stroke,\n\t        strokeWidth: style && style.strokeWidth || this.strokeWidth\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Returns fontSize of char at the current cursor\n\t     * @param {Number} lineIndex Line index\n\t     * @param {Number} charIndex Char index\n\t     * @return {Number} Character font size\n\t     */\n\t    getCurrentCharFontSize: function(lineIndex, charIndex) {\n\t      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n\t      return style && style.fontSize ? style.fontSize : this.fontSize;\n\t    },\n\t\n\t    /**\n\t     * Returns color (fill) of char at the current cursor\n\t     * @param {Number} lineIndex Line index\n\t     * @param {Number} charIndex Char index\n\t     * @return {String} Character color (fill)\n\t     */\n\t    getCurrentCharColor: function(lineIndex, charIndex) {\n\t      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n\t      return style && style.fill ? style.fill : this.cursorColor;\n\t    },\n\t\n\t    /**\n\t     * Returns cursor boundaries (left, top, leftOffset, topOffset)\n\t     * @private\n\t     * @param {Array} chars Array of characters\n\t     * @param {String} typeOfBoundaries\n\t     */\n\t    _getCursorBoundaries: function(chars, typeOfBoundaries) {\n\t\n\t      // left/top are left/top of entire text box\n\t      // leftOffset/topOffset are offset from that left/top point of a text box\n\t\n\t      var left = Math.round(this._getLeftOffset()),\n\t          top = this._getTopOffset(),\n\t\n\t          offsets = this._getCursorBoundariesOffsets(\n\t                      chars, typeOfBoundaries);\n\t\n\t      return {\n\t        left: left,\n\t        top: top,\n\t        leftOffset: offsets.left + offsets.lineLeft,\n\t        topOffset: offsets.top\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {\n\t\n\t      var lineLeftOffset = 0,\n\t\n\t          lineIndex = 0,\n\t          charIndex = 0,\n\t          topOffset = 0,\n\t          leftOffset = 0;\n\t\n\t      for (var i = 0; i < this.selectionStart; i++) {\n\t        if (chars[i] === '\\n') {\n\t          leftOffset = 0;\n\t          topOffset += this._getHeightOfLine(this.ctx, lineIndex);\n\t\n\t          lineIndex++;\n\t          charIndex = 0;\n\t        }\n\t        else {\n\t          leftOffset += this._getWidthOfChar(this.ctx, chars[i], lineIndex, charIndex);\n\t          charIndex++;\n\t        }\n\t\n\t        lineLeftOffset = this._getCachedLineOffset(lineIndex);\n\t      }\n\t      if (typeOfBoundaries === 'cursor') {\n\t        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, lineIndex) / this.lineHeight\n\t          - this.getCurrentCharFontSize(lineIndex, charIndex) * (1 - this._fontSizeFraction);\n\t      }\n\t\n\t      return {\n\t        top: topOffset,\n\t        left: leftOffset,\n\t        lineLeft: lineLeftOffset\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getCachedLineOffset: function(lineIndex) {\n\t      var widthOfLine = this._getLineWidth(this.ctx, lineIndex);\n\t\n\t      return this.__lineOffsets[lineIndex] ||\n\t        (this.__lineOffsets[lineIndex] = this._getLineLeftOffset(widthOfLine));\n\t    },\n\t\n\t    /**\n\t     * Renders cursor\n\t     * @param {Object} boundaries\n\t     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n\t     */\n\t    renderCursor: function(boundaries, ctx) {\n\t\n\t      var cursorLocation = this.get2DCursorLocation(),\n\t          lineIndex = cursorLocation.lineIndex,\n\t          charIndex = cursorLocation.charIndex,\n\t          charHeight = this.getCurrentCharFontSize(lineIndex, charIndex),\n\t          leftOffset = (lineIndex === 0 && charIndex === 0)\n\t                    ? this._getCachedLineOffset(lineIndex)\n\t                    : boundaries.leftOffset;\n\t\n\t      ctx.fillStyle = this.getCurrentCharColor(lineIndex, charIndex);\n\t      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\n\t\n\t      ctx.fillRect(\n\t        boundaries.left + leftOffset,\n\t        boundaries.top + boundaries.topOffset,\n\t        this.cursorWidth / this.scaleX,\n\t        charHeight);\n\t\n\t    },\n\t\n\t    /**\n\t     * Renders text selection\n\t     * @param {Array} chars Array of characters\n\t     * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n\t     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n\t     */\n\t    renderSelection: function(chars, boundaries, ctx) {\n\t\n\t      ctx.fillStyle = this.selectionColor;\n\t\n\t      var start = this.get2DCursorLocation(this.selectionStart),\n\t          end = this.get2DCursorLocation(this.selectionEnd),\n\t          startLine = start.lineIndex,\n\t          endLine = end.lineIndex;\n\t\n\t      for (var i = startLine; i <= endLine; i++) {\n\t        var lineOffset = this._getCachedLineOffset(i) || 0,\n\t            lineHeight = this._getHeightOfLine(this.ctx, i),\n\t            boxWidth = 0, line = this._textLines[i];\n\t\n\t        if (i === startLine) {\n\t          for (var j = 0, len = line.length; j < len; j++) {\n\t            if (j >= start.charIndex && (i !== endLine || j < end.charIndex)) {\n\t              boxWidth += this._getWidthOfChar(ctx, line[j], i, j);\n\t            }\n\t            if (j < start.charIndex) {\n\t              lineOffset += this._getWidthOfChar(ctx, line[j], i, j);\n\t            }\n\t          }\n\t        }\n\t        else if (i > startLine && i < endLine) {\n\t          boxWidth += this._getLineWidth(ctx, i) || 5;\n\t        }\n\t        else if (i === endLine) {\n\t          for (var j2 = 0, j2len = end.charIndex; j2 < j2len; j2++) {\n\t            boxWidth += this._getWidthOfChar(ctx, line[j2], i, j2);\n\t          }\n\t        }\n\t\n\t        ctx.fillRect(\n\t          boundaries.left + lineOffset,\n\t          boundaries.top + boundaries.topOffset,\n\t          boxWidth,\n\t          lineHeight);\n\t\n\t        boundaries.topOffset += lineHeight;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderChars: function(method, ctx, line, left, top, lineIndex) {\n\t\n\t      if (this.isEmptyStyles()) {\n\t        return this._renderCharsFast(method, ctx, line, left, top);\n\t      }\n\t\n\t      this.skipTextAlign = true;\n\t\n\t      // set proper box offset\n\t      left -= this.textAlign === 'center'\n\t        ? (this.width / 2)\n\t        : (this.textAlign === 'right')\n\t          ? this.width\n\t          : 0;\n\t\n\t      // set proper line offset\n\t      var lineHeight = this._getHeightOfLine(ctx, lineIndex),\n\t          lineLeftOffset = this._getCachedLineOffset(lineIndex),\n\t          prevStyle,\n\t          charsToRender = '';\n\t\n\t      left += lineLeftOffset || 0;\n\t\n\t      ctx.save();\n\t      top -= lineHeight / this.lineHeight * this._fontSizeFraction;\n\t      for (var i = 0, len = line.length; i <= len; i++) {\n\t        prevStyle = prevStyle || this.getCurrentCharStyle(lineIndex, i);\n\t        var thisStyle = this.getCurrentCharStyle(lineIndex, i + 1);\n\t\n\t        if (this._hasStyleChanged(prevStyle, thisStyle) || i === len) {\n\t          this._renderChar(method, ctx, lineIndex, i - 1, charsToRender, left, top, lineHeight);\n\t          charsToRender = '';\n\t          prevStyle = thisStyle;\n\t        }\n\t        charsToRender += line[i];\n\t      }\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} line Content of the line\n\t     * @param {Number} left Left coordinate\n\t     * @param {Number} top Top coordinate\n\t     */\n\t    _renderCharsFast: function(method, ctx, line, left, top) {\n\t      this.skipTextAlign = false;\n\t\n\t      if (method === 'fillText' && this.fill) {\n\t        this.callSuper('_renderChars', method, ctx, line, left, top);\n\t      }\n\t      if (method === 'strokeText' && ((this.stroke && this.strokeWidth > 0) || this.skipFillStrokeCheck)) {\n\t        this.callSuper('_renderChars', method, ctx, line, left, top);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} lineIndex\n\t     * @param {Number} i\n\t     * @param {String} _char\n\t     * @param {Number} left Left coordinate\n\t     * @param {Number} top Top coordinate\n\t     * @param {Number} lineHeight Height of the line\n\t     */\n\t    _renderChar: function(method, ctx, lineIndex, i, _char, left, top, lineHeight) {\n\t      var charWidth, charHeight,\n\t          decl = this._getStyleDeclaration(lineIndex, i),\n\t          offset = this._fontSizeFraction * lineHeight / this.lineHeight;\n\t\n\t      if (decl) {\n\t        var shouldStroke = decl.stroke || this.stroke,\n\t            shouldFill = decl.fill || this.fill;\n\t\n\t        ctx.save();\n\t        charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i, decl);\n\t        charHeight = this._getHeightOfChar(ctx, _char, lineIndex, i);\n\t\n\t        if (shouldFill) {\n\t          ctx.fillText(_char, left, top);\n\t        }\n\t        if (shouldStroke) {\n\t          ctx.strokeText(_char, left, top);\n\t        }\n\t\n\t        this._renderCharDecoration(ctx, decl, left, top, offset, charWidth, charHeight);\n\t        ctx.restore();\n\t\n\t        ctx.translate(charWidth, 0);\n\t      }\n\t      else {\n\t        if (method === 'strokeText' && this.stroke) {\n\t          ctx[method](_char, left, top);\n\t        }\n\t        if (method === 'fillText' && this.fill) {\n\t          ctx[method](_char, left, top);\n\t        }\n\t        charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i);\n\t        this._renderCharDecoration(ctx, null, left, top, offset, charWidth, this.fontSize);\n\t\n\t        ctx.translate(ctx.measureText(_char).width, 0);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} prevStyle\n\t     * @param {Object} thisStyle\n\t     */\n\t    _hasStyleChanged: function(prevStyle, thisStyle) {\n\t      return (prevStyle.fill !== thisStyle.fill ||\n\t              prevStyle.fontSize !== thisStyle.fontSize ||\n\t              prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n\t              prevStyle.textDecoration !== thisStyle.textDecoration ||\n\t              prevStyle.fontFamily !== thisStyle.fontFamily ||\n\t              prevStyle.fontWeight !== thisStyle.fontWeight ||\n\t              prevStyle.fontStyle !== thisStyle.fontStyle ||\n\t              prevStyle.stroke !== thisStyle.stroke ||\n\t              prevStyle.strokeWidth !== thisStyle.strokeWidth\n\t      );\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderCharDecoration: function(ctx, styleDeclaration, left, top, offset, charWidth, charHeight) {\n\t\n\t      var textDecoration = styleDeclaration\n\t            ? (styleDeclaration.textDecoration || this.textDecoration)\n\t            : this.textDecoration;\n\t\n\t      if (!textDecoration) {\n\t        return;\n\t      }\n\t\n\t      if (textDecoration.indexOf('underline') > -1) {\n\t        ctx.fillRect(\n\t          left,\n\t          top + charHeight / 10,\n\t          charWidth ,\n\t          charHeight / 15\n\t        );\n\t      }\n\t      if (textDecoration.indexOf('line-through') > -1) {\n\t        ctx.fillRect(\n\t          left,\n\t          top - charHeight * (this._fontSizeFraction + this._fontSizeMult - 1) + charHeight / 15,\n\t          charWidth,\n\t          charHeight / 15\n\t        );\n\t      }\n\t      if (textDecoration.indexOf('overline') > -1) {\n\t        ctx.fillRect(\n\t          left,\n\t          top - (this._fontSizeMult - this._fontSizeFraction) * charHeight,\n\t          charWidth,\n\t          charHeight / 15\n\t        );\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} line\n\t     */\n\t    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n\t      // to \"cancel\" this.fontSize subtraction in fabric.Text#_renderTextLine\n\t      // the adding 0.03 is just to align text with itext by overlap test\n\t      if (!this.isEmptyStyles()) {\n\t        top += this.fontSize * (this._fontSizeFraction + 0.03);\n\t      }\n\t      this.callSuper('_renderTextLine', method, ctx, line, left, top, lineIndex);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextDecoration: function(ctx) {\n\t      if (this.isEmptyStyles()) {\n\t        return this.callSuper('_renderTextDecoration', ctx);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextLinesBackground: function(ctx) {\n\t      if (!this.textBackgroundColor && !this.styles) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      if (this.textBackgroundColor) {\n\t        ctx.fillStyle = this.textBackgroundColor;\n\t      }\n\t\n\t      var lineHeights = 0;\n\t\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t\n\t        var heightOfLine = this._getHeightOfLine(ctx, i);\n\t        if (this._textLines[i] === '') {\n\t          lineHeights += heightOfLine;\n\t          continue;\n\t        }\n\t\n\t        var lineWidth = this._getLineWidth(ctx, i),\n\t            lineLeftOffset = this._getCachedLineOffset(i);\n\t\n\t        if (this.textBackgroundColor) {\n\t          ctx.fillStyle = this.textBackgroundColor;\n\t\n\t          ctx.fillRect(\n\t            this._getLeftOffset() + lineLeftOffset,\n\t            this._getTopOffset() + lineHeights,\n\t            lineWidth,\n\t            heightOfLine / this.lineHeight\n\t          );\n\t        }\n\t        if (this._getLineStyle(i)) {\n\t          for (var j = 0, jlen = this._textLines[i].length; j < jlen; j++) {\n\t            var style = this._getStyleDeclaration(i, j);\n\t            if (style && style.textBackgroundColor) {\n\t\n\t              var _char = this._textLines[i][j];\n\t\n\t              ctx.fillStyle = style.textBackgroundColor;\n\t\n\t              ctx.fillRect(\n\t                this._getLeftOffset() + lineLeftOffset + this._getWidthOfCharsAt(ctx, i, j),\n\t                this._getTopOffset() + lineHeights,\n\t                this._getWidthOfChar(ctx, _char, i, j) + 1,\n\t                heightOfLine / this.lineHeight\n\t              );\n\t            }\n\t          }\n\t        }\n\t        lineHeights += heightOfLine;\n\t      }\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getCacheProp: function(_char, styleDeclaration) {\n\t      return _char +\n\t             styleDeclaration.fontFamily +\n\t             styleDeclaration.fontSize +\n\t             styleDeclaration.fontWeight +\n\t             styleDeclaration.fontStyle +\n\t             styleDeclaration.shadow;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} _char\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Object} [decl]\n\t     */\n\t    _applyCharStylesGetWidth: function(ctx, _char, lineIndex, charIndex, decl) {\n\t      var styleDeclaration = decl || this._getStyleDeclaration(lineIndex, charIndex);\n\t\n\t      if (styleDeclaration) {\n\t        // cloning so that original style object is not polluted with following font declarations\n\t        styleDeclaration = clone(styleDeclaration);\n\t      }\n\t      else {\n\t        styleDeclaration = { };\n\t      }\n\t\n\t      this._applyFontStyles(styleDeclaration);\n\t\n\t      var cacheProp = this._getCacheProp(_char, styleDeclaration);\n\t\n\t      // short-circuit if no styles\n\t      if (this.isEmptyStyles() && this._charWidthsCache[cacheProp] && this.caching) {\n\t        return this._charWidthsCache[cacheProp];\n\t      }\n\t\n\t      if (typeof styleDeclaration.shadow === 'string') {\n\t        styleDeclaration.shadow = new fabric.Shadow(styleDeclaration.shadow);\n\t      }\n\t\n\t      var fill = styleDeclaration.fill || this.fill;\n\t      ctx.fillStyle = fill.toLive\n\t        ? fill.toLive(ctx, this)\n\t        : fill;\n\t\n\t      if (styleDeclaration.stroke) {\n\t        ctx.strokeStyle = (styleDeclaration.stroke && styleDeclaration.stroke.toLive)\n\t          ? styleDeclaration.stroke.toLive(ctx, this)\n\t          : styleDeclaration.stroke;\n\t      }\n\t\n\t      ctx.lineWidth = styleDeclaration.strokeWidth || this.strokeWidth;\n\t      ctx.font = this._getFontDeclaration.call(styleDeclaration);\n\t      this._setShadow.call(styleDeclaration, ctx);\n\t\n\t      if (!this.caching) {\n\t        return ctx.measureText(_char).width;\n\t      }\n\t\n\t      if (!this._charWidthsCache[cacheProp]) {\n\t        this._charWidthsCache[cacheProp] = ctx.measureText(_char).width;\n\t      }\n\t\n\t      return this._charWidthsCache[cacheProp];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} styleDeclaration\n\t     */\n\t    _applyFontStyles: function(styleDeclaration) {\n\t      if (!styleDeclaration.fontFamily) {\n\t        styleDeclaration.fontFamily = this.fontFamily;\n\t      }\n\t      if (!styleDeclaration.fontSize) {\n\t        styleDeclaration.fontSize = this.fontSize;\n\t      }\n\t      if (!styleDeclaration.fontWeight) {\n\t        styleDeclaration.fontWeight = this.fontWeight;\n\t      }\n\t      if (!styleDeclaration.fontStyle) {\n\t        styleDeclaration.fontStyle = this.fontStyle;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Boolean} [returnCloneOrEmpty=false]\n\t     * @private\n\t     */\n\t    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {\n\t      if (returnCloneOrEmpty) {\n\t        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])\n\t          ? clone(this.styles[lineIndex][charIndex])\n\t          : { };\n\t      }\n\t\n\t      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Object} style\n\t     * @private\n\t     */\n\t    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n\t      this.styles[lineIndex][charIndex] = style;\n\t    },\n\t\n\t    /**\n\t     *\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @private\n\t     */\n\t    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n\t      delete this.styles[lineIndex][charIndex];\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @private\n\t     */\n\t    _getLineStyle: function(lineIndex) {\n\t      return this.styles[lineIndex];\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Object} style\n\t     * @private\n\t     */\n\t    _setLineStyle: function(lineIndex, style) {\n\t      this.styles[lineIndex] = style;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @private\n\t     */\n\t    _deleteLineStyle: function(lineIndex) {\n\t      delete this.styles[lineIndex];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getWidthOfChar: function(ctx, _char, lineIndex, charIndex) {\n\t      if (this.textAlign === 'justify' && this._reSpacesAndTabs.test(_char)) {\n\t        return this._getWidthOfSpace(ctx, lineIndex);\n\t      }\n\t\n\t      var styleDeclaration = this._getStyleDeclaration(lineIndex, charIndex, true);\n\t      this._applyFontStyles(styleDeclaration);\n\t      var cacheProp = this._getCacheProp(_char, styleDeclaration);\n\t\n\t      if (this._charWidthsCache[cacheProp] && this.caching) {\n\t        return this._charWidthsCache[cacheProp];\n\t      }\n\t      else if (ctx) {\n\t        ctx.save();\n\t        var width = this._applyCharStylesGetWidth(ctx, _char, lineIndex, charIndex);\n\t        ctx.restore();\n\t        return width;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getHeightOfChar: function(ctx, _char, lineIndex, charIndex) {\n\t      var style = this._getStyleDeclaration(lineIndex, charIndex);\n\t      return style && style.fontSize ? style.fontSize : this.fontSize;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getHeightOfCharAt: function(ctx, lineIndex, charIndex) {\n\t      var _char = this._textLines[lineIndex][charIndex];\n\t      return this._getHeightOfChar(ctx, _char, lineIndex, charIndex);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getWidthOfCharsAt: function(ctx, lineIndex, charIndex) {\n\t      var width = 0, i, _char;\n\t      for (i = 0; i < charIndex; i++) {\n\t        _char = this._textLines[lineIndex][i];\n\t        width += this._getWidthOfChar(ctx, _char, lineIndex, i);\n\t      }\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getLineWidth: function(ctx, lineIndex) {\n\t      if (this.__lineWidths[lineIndex]) {\n\t        return this.__lineWidths[lineIndex];\n\t      }\n\t      this.__lineWidths[lineIndex] = this._getWidthOfCharsAt(ctx, lineIndex, this._textLines[lineIndex].length);\n\t      return this.__lineWidths[lineIndex];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} lineIndex\n\t     */\n\t    _getWidthOfSpace: function (ctx, lineIndex) {\n\t      if (this.__widthOfSpace[lineIndex]) {\n\t        return this.__widthOfSpace[lineIndex];\n\t      }\n\t      var line = this._textLines[lineIndex],\n\t          wordsWidth = this._getWidthOfWords(ctx, line, lineIndex),\n\t          widthDiff = this.width - wordsWidth,\n\t          numSpaces = line.length - line.replace(this._reSpacesAndTabs, '').length,\n\t          width = widthDiff / numSpaces;\n\t      this.__widthOfSpace[lineIndex] = width;\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} line\n\t     * @param {Number} lineIndex\n\t     */\n\t    _getWidthOfWords: function (ctx, line, lineIndex) {\n\t      var width = 0;\n\t\n\t      for (var charIndex = 0; charIndex < line.length; charIndex++) {\n\t        var _char = line[charIndex];\n\t\n\t        if (!_char.match(/\\s/)) {\n\t          width += this._getWidthOfChar(ctx, _char, lineIndex, charIndex);\n\t        }\n\t      }\n\t\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getHeightOfLine: function(ctx, lineIndex) {\n\t      if (this.__lineHeights[lineIndex]) {\n\t        return this.__lineHeights[lineIndex];\n\t      }\n\t\n\t      var line = this._textLines[lineIndex],\n\t          maxHeight = this._getHeightOfChar(ctx, line[0], lineIndex, 0);\n\t\n\t      for (var i = 1, len = line.length; i < len; i++) {\n\t        var currentCharHeight = this._getHeightOfChar(ctx, line[i], lineIndex, i);\n\t        if (currentCharHeight > maxHeight) {\n\t          maxHeight = currentCharHeight;\n\t        }\n\t      }\n\t      this.__maxFontHeights[lineIndex] = maxHeight;\n\t      this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n\t      return this.__lineHeights[lineIndex];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getTextHeight: function(ctx) {\n\t      var height = 0;\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        height += this._getHeightOfLine(ctx, i);\n\t      }\n\t      return height;\n\t    },\n\t\n\t    /**\n\t     * This method is overwritten to account for different top offset\n\t     * @private\n\t     */\n\t    _renderTextBoxBackground: function(ctx) {\n\t      if (!this.backgroundColor) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      ctx.fillStyle = this.backgroundColor;\n\t\n\t      ctx.fillRect(\n\t        this._getLeftOffset(),\n\t        this._getTopOffset(),\n\t        this.width,\n\t        this.height\n\t      );\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @method toObject\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {\n\t        styles: clone(this.styles)\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns fabric.IText instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.IText\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.IText} instance of fabric.IText\n\t   */\n\t  fabric.IText.fromObject = function(object) {\n\t    return new fabric.IText(object.text, clone(object));\n\t  };\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var clone = fabric.util.object.clone;\n\t\n\t  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\t\n\t    /**\n\t     * Initializes all the interactive behavior of IText\n\t     */\n\t    initBehavior: function() {\n\t      this.initAddedHandler();\n\t      this.initRemovedHandler();\n\t      this.initCursorSelectionHandlers();\n\t      this.initDoubleClickSimulation();\n\t    },\n\t\n\t    /**\n\t     * Initializes \"selected\" event handler\n\t     */\n\t    initSelectedHandler: function() {\n\t      this.on('selected', function() {\n\t\n\t        var _this = this;\n\t        setTimeout(function() {\n\t          _this.selected = true;\n\t        }, 100);\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Initializes \"added\" event handler\n\t     */\n\t    initAddedHandler: function() {\n\t      var _this = this;\n\t      this.on('added', function() {\n\t        if (this.canvas && !this.canvas._hasITextHandlers) {\n\t          this.canvas._hasITextHandlers = true;\n\t          this._initCanvasHandlers();\n\t        }\n\t\n\t        // Track IText instances per-canvas. Only register in this array once added\n\t        // to a canvas; we don't want to leak a reference to the instance forever\n\t        // simply because it existed at some point.\n\t        // (Might be added to a collection, but not on a canvas.)\n\t        if (_this.canvas) {\n\t          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];\n\t          _this.canvas._iTextInstances.push(_this);\n\t        }\n\t      });\n\t    },\n\t\n\t    initRemovedHandler: function() {\n\t      var _this = this;\n\t      this.on('removed', function() {\n\t        // (Might be removed from a collection, but not on a canvas.)\n\t        if (_this.canvas) {\n\t          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];\n\t          fabric.util.removeFromArray(_this.canvas._iTextInstances, _this);\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _initCanvasHandlers: function() {\n\t      var _this = this;\n\t\n\t      this.canvas.on('selection:cleared', function() {\n\t        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);\n\t      });\n\t\n\t      this.canvas.on('mouse:up', function() {\n\t        if (_this.canvas._iTextInstances) {\n\t          _this.canvas._iTextInstances.forEach(function(obj) {\n\t            obj.__isMousedown = false;\n\t          });\n\t        }\n\t      });\n\t\n\t      this.canvas.on('object:selected', function() {\n\t        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _tick: function() {\n\t      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\n\t\n\t      var tickState;\n\t\n\t      tickState = {\n\t        isAborted: false,\n\t        abort: function() {\n\t          this.isAborted = true;\n\t        },\n\t      };\n\t\n\t      obj.animate('_currentCursorOpacity', targetOpacity, {\n\t        duration: duration,\n\t        onComplete: function() {\n\t          if (!tickState.isAborted) {\n\t            obj[completeMethod]();\n\t          }\n\t        },\n\t        onChange: function() {\n\t          if (obj.canvas) {\n\t            obj.canvas.clearContext(obj.canvas.contextTop || obj.ctx);\n\t            obj.renderCursorOrSelection();\n\t          }\n\t        },\n\t        abort: function() {\n\t          return tickState.isAborted;\n\t        }\n\t      });\n\t      return tickState;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onTickComplete: function() {\n\t\n\t      var _this = this;\n\t\n\t      if (this._cursorTimeout1) {\n\t        clearTimeout(this._cursorTimeout1);\n\t      }\n\t      this._cursorTimeout1 = setTimeout(function() {\n\t        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\n\t      }, 100);\n\t    },\n\t\n\t    /**\n\t     * Initializes delayed cursor\n\t     */\n\t    initDelayedCursor: function(restart) {\n\t      var _this = this,\n\t          delay = restart ? 0 : this.cursorDelay;\n\t\n\t      this._currentTickState && this._currentTickState.abort();\n\t      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\t      clearTimeout(this._cursorTimeout1);\n\t      this._currentCursorOpacity = 1;\n\t      if (this.canvas) {\n\t        this.canvas.clearContext(this.canvas.contextTop || this.ctx);\n\t        this.renderCursorOrSelection();\n\t      }\n\t      if (this._cursorTimeout2) {\n\t        clearTimeout(this._cursorTimeout2);\n\t      }\n\t      this._cursorTimeout2 = setTimeout(function() {\n\t        _this._tick();\n\t      }, delay);\n\t    },\n\t\n\t    /**\n\t     * Aborts cursor animation and clears all timeouts\n\t     */\n\t    abortCursorAnimation: function() {\n\t      this._currentTickState && this._currentTickState.abort();\n\t      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\t\n\t      clearTimeout(this._cursorTimeout1);\n\t      clearTimeout(this._cursorTimeout2);\n\t\n\t      this._currentCursorOpacity = 0;\n\t      this.canvas && this.canvas.clearContext(this.canvas.contextTop || this.ctx);\n\t    },\n\t\n\t    /**\n\t     * Selects entire text\n\t     */\n\t    selectAll: function() {\n\t      this.setSelectionStart(0);\n\t      this.setSelectionEnd(this.text.length);\n\t    },\n\t\n\t    /**\n\t     * Returns selected text\n\t     * @return {String}\n\t     */\n\t    getSelectedText: function() {\n\t      return this.text.slice(this.selectionStart, this.selectionEnd);\n\t    },\n\t\n\t    /**\n\t     * Find new selection index representing start of current word according to current selection index\n\t     * @param {Number} startFrom Surrent selection index\n\t     * @return {Number} New selection index\n\t     */\n\t    findWordBoundaryLeft: function(startFrom) {\n\t      var offset = 0, index = startFrom - 1;\n\t\n\t      // remove space before cursor first\n\t      if (this._reSpace.test(this.text.charAt(index))) {\n\t        while (this._reSpace.test(this.text.charAt(index))) {\n\t          offset++;\n\t          index--;\n\t        }\n\t      }\n\t      while (/\\S/.test(this.text.charAt(index)) && index > -1) {\n\t        offset++;\n\t        index--;\n\t      }\n\t\n\t      return startFrom - offset;\n\t    },\n\t\n\t    /**\n\t     * Find new selection index representing end of current word according to current selection index\n\t     * @param {Number} startFrom Current selection index\n\t     * @return {Number} New selection index\n\t     */\n\t    findWordBoundaryRight: function(startFrom) {\n\t      var offset = 0, index = startFrom;\n\t\n\t      // remove space after cursor first\n\t      if (this._reSpace.test(this.text.charAt(index))) {\n\t        while (this._reSpace.test(this.text.charAt(index))) {\n\t          offset++;\n\t          index++;\n\t        }\n\t      }\n\t      while (/\\S/.test(this.text.charAt(index)) && index < this.text.length) {\n\t        offset++;\n\t        index++;\n\t      }\n\t\n\t      return startFrom + offset;\n\t    },\n\t\n\t    /**\n\t     * Find new selection index representing start of current line according to current selection index\n\t     * @param {Number} startFrom Current selection index\n\t     * @return {Number} New selection index\n\t     */\n\t    findLineBoundaryLeft: function(startFrom) {\n\t      var offset = 0, index = startFrom - 1;\n\t\n\t      while (!/\\n/.test(this.text.charAt(index)) && index > -1) {\n\t        offset++;\n\t        index--;\n\t      }\n\t\n\t      return startFrom - offset;\n\t    },\n\t\n\t    /**\n\t     * Find new selection index representing end of current line according to current selection index\n\t     * @param {Number} startFrom Current selection index\n\t     * @return {Number} New selection index\n\t     */\n\t    findLineBoundaryRight: function(startFrom) {\n\t      var offset = 0, index = startFrom;\n\t\n\t      while (!/\\n/.test(this.text.charAt(index)) && index < this.text.length) {\n\t        offset++;\n\t        index++;\n\t      }\n\t\n\t      return startFrom + offset;\n\t    },\n\t\n\t    /**\n\t     * Returns number of newlines in selected text\n\t     * @return {Number} Number of newlines in selected text\n\t     */\n\t    getNumNewLinesInSelectedText: function() {\n\t      var selectedText = this.getSelectedText(),\n\t          numNewLines  = 0;\n\t\n\t      for (var i = 0, len = selectedText.length; i < len; i++) {\n\t        if (selectedText[i] === '\\n') {\n\t          numNewLines++;\n\t        }\n\t      }\n\t      return numNewLines;\n\t    },\n\t\n\t    /**\n\t     * Finds index corresponding to beginning or end of a word\n\t     * @param {Number} selectionStart Index of a character\n\t     * @param {Number} direction: 1 or -1\n\t     * @return {Number} Index of the beginning or end of a word\n\t     */\n\t    searchWordBoundary: function(selectionStart, direction) {\n\t      var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,\n\t          _char     = this.text.charAt(index),\n\t          reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\t\n\t      while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {\n\t        index += direction;\n\t        _char = this.text.charAt(index);\n\t      }\n\t      if (reNonWord.test(_char) && _char !== '\\n') {\n\t        index += direction === 1 ? 0 : 1;\n\t      }\n\t      return index;\n\t    },\n\t\n\t    /**\n\t     * Selects a word based on the index\n\t     * @param {Number} selectionStart Index of a character\n\t     */\n\t    selectWord: function(selectionStart) {\n\t      var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\n\t          newSelectionEnd   = this.searchWordBoundary(selectionStart, 1);\n\t      /* search forward */\n\t\n\t      this.setSelectionStart(newSelectionStart);\n\t      this.setSelectionEnd(newSelectionEnd);\n\t    },\n\t\n\t    /**\n\t     * Selects a line based on the index\n\t     * @param {Number} selectionStart Index of a character\n\t     */\n\t    selectLine: function(selectionStart) {\n\t      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n\t          newSelectionEnd   = this.findLineBoundaryRight(selectionStart);\n\t\n\t      this.setSelectionStart(newSelectionStart);\n\t      this.setSelectionEnd(newSelectionEnd);\n\t    },\n\t\n\t    /**\n\t     * Enters editing state\n\t     * @return {fabric.IText} thisArg\n\t     * @chainable\n\t     */\n\t    enterEditing: function() {\n\t      if (this.isEditing || !this.editable) {\n\t        return;\n\t      }\n\t\n\t      if (this.canvas) {\n\t        this.exitEditingOnOthers(this.canvas);\n\t      }\n\t\n\t      this.isEditing = true;\n\t\n\t      this.initHiddenTextarea();\n\t      this.hiddenTextarea.focus();\n\t      this._updateTextarea();\n\t      this._saveEditingProps();\n\t      this._setEditingProps();\n\t\n\t      this._tick();\n\t      this.fire('editing:entered');\n\t\n\t      if (!this.canvas) {\n\t        return this;\n\t      }\n\t\n\t      this.canvas.renderAll();\n\t      this.canvas.fire('text:editing:entered', { target: this });\n\t      this.initMouseMoveHandler();\n\t      return this;\n\t    },\n\t\n\t    exitEditingOnOthers: function(canvas) {\n\t      if (canvas._iTextInstances) {\n\t        canvas._iTextInstances.forEach(function(obj) {\n\t          obj.selected = false;\n\t          if (obj.isEditing) {\n\t            obj.exitEditing();\n\t          }\n\t        });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Initializes \"mousemove\" event handler\n\t     */\n\t    initMouseMoveHandler: function() {\n\t      var _this = this;\n\t      this.canvas.on('mouse:move', function(options) {\n\t        if (!_this.__isMousedown || !_this.isEditing) {\n\t          return;\n\t        }\n\t\n\t        var newSelectionStart = _this.getSelectionStartFromPointer(options.e);\n\t        if (newSelectionStart >= _this.__selectionStartOnMouseDown) {\n\t          _this.setSelectionStart(_this.__selectionStartOnMouseDown);\n\t          _this.setSelectionEnd(newSelectionStart);\n\t        }\n\t        else {\n\t          _this.setSelectionStart(newSelectionStart);\n\t          _this.setSelectionEnd(_this.__selectionStartOnMouseDown);\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setEditingProps: function() {\n\t      this.hoverCursor = 'text';\n\t\n\t      if (this.canvas) {\n\t        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n\t      }\n\t\n\t      this.borderColor = this.editingBorderColor;\n\t\n\t      this.hasControls = this.selectable = false;\n\t      this.lockMovementX = this.lockMovementY = true;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _updateTextarea: function() {\n\t      if (!this.hiddenTextarea) {\n\t        return;\n\t      }\n\t\n\t      this.hiddenTextarea.value = this.text;\n\t      this.hiddenTextarea.selectionStart = this.selectionStart;\n\t      this.hiddenTextarea.selectionEnd = this.selectionEnd;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _saveEditingProps: function() {\n\t      this._savedProps = {\n\t        hasControls: this.hasControls,\n\t        borderColor: this.borderColor,\n\t        lockMovementX: this.lockMovementX,\n\t        lockMovementY: this.lockMovementY,\n\t        hoverCursor: this.hoverCursor,\n\t        defaultCursor: this.canvas && this.canvas.defaultCursor,\n\t        moveCursor: this.canvas && this.canvas.moveCursor\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _restoreEditingProps: function() {\n\t      if (!this._savedProps) {\n\t        return;\n\t      }\n\t\n\t      this.hoverCursor = this._savedProps.overCursor;\n\t      this.hasControls = this._savedProps.hasControls;\n\t      this.borderColor = this._savedProps.borderColor;\n\t      this.lockMovementX = this._savedProps.lockMovementX;\n\t      this.lockMovementY = this._savedProps.lockMovementY;\n\t\n\t      if (this.canvas) {\n\t        this.canvas.defaultCursor = this._savedProps.defaultCursor;\n\t        this.canvas.moveCursor = this._savedProps.moveCursor;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Exits from editing state\n\t     * @return {fabric.IText} thisArg\n\t     * @chainable\n\t     */\n\t    exitEditing: function() {\n\t\n\t      this.selected = false;\n\t      this.isEditing = false;\n\t      this.selectable = true;\n\t\n\t      this.selectionEnd = this.selectionStart;\n\t      this.hiddenTextarea && this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\n\t      this.hiddenTextarea = null;\n\t\n\t      this.abortCursorAnimation();\n\t      this._restoreEditingProps();\n\t      this._currentCursorOpacity = 0;\n\t\n\t      this.fire('editing:exited');\n\t      this.canvas && this.canvas.fire('text:editing:exited', { target: this });\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _removeExtraneousStyles: function() {\n\t      for (var prop in this.styles) {\n\t        if (!this._textLines[prop]) {\n\t          delete this.styles[prop];\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _removeCharsFromTo: function(start, end) {\n\t      while (end !== start) {\n\t        this._removeSingleCharAndStyle(start + 1);\n\t        end--;\n\t      }\n\t      this.setSelectionStart(start);\n\t    },\n\t\n\t    _removeSingleCharAndStyle: function(index) {\n\t      var isBeginningOfLine = this.text[index - 1] === '\\n',\n\t          indexStyle        = isBeginningOfLine ? index : index - 1;\n\t      this.removeStyleObject(isBeginningOfLine, indexStyle);\n\t      this.text = this.text.slice(0, index - 1) +\n\t        this.text.slice(index);\n\t\n\t      this._textLines = this._splitTextIntoLines();\n\t    },\n\t\n\t    /**\n\t     * Inserts characters where cursor is (replacing selection if one exists)\n\t     * @param {String} _chars Characters to insert\n\t     * @param {Boolean} useCopiedStyle use fabric.copiedTextStyle\n\t     */\n\t    insertChars: function(_chars, useCopiedStyle) {\n\t      var style;\n\t\n\t      if (this.selectionEnd - this.selectionStart > 1) {\n\t        this._removeCharsFromTo(this.selectionStart, this.selectionEnd);\n\t        this.setSelectionEnd(this.selectionStart);\n\t      }\n\t\n\t      for (var i = 0, len = _chars.length; i < len; i++) {\n\t        if (useCopiedStyle) {\n\t          style = fabric.copiedTextStyle[i];\n\t        }\n\t        this.insertChar(_chars[i], i < len - 1, style);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Inserts a character where cursor is\n\t     * @param {String} _char Characters to insert\n\t     * @param {Boolean} skipUpdate trigger rendering and updates at the end of text insert\n\t     * @param {Object} styleObject Style to be inserted for the new char\n\t     */\n\t    insertChar: function(_char, skipUpdate, styleObject) {\n\t      var isEndOfLine = this.text[this.selectionStart] === '\\n';\n\t      this.text = this.text.slice(0, this.selectionStart) +\n\t        _char + this.text.slice(this.selectionEnd);\n\t      this._textLines = this._splitTextIntoLines();\n\t      this.insertStyleObjects(_char, isEndOfLine, styleObject);\n\t      this.setSelectionStart(this.selectionStart + 1);\n\t      this.setSelectionEnd(this.selectionStart);\n\t      if (skipUpdate) {\n\t        return;\n\t      }\n\t      this.canvas && this.canvas.renderAll();\n\t      this.setCoords();\n\t      this.fire('changed');\n\t      this.canvas && this.canvas.fire('text:changed', { target: this });\n\t    },\n\t\n\t    /**\n\t     * Inserts new style object\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} charIndex Index of a char\n\t     * @param {Boolean} isEndOfLine True if it's end of line\n\t     */\n\t    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {\n\t\n\t      this.shiftLineStyles(lineIndex, +1);\n\t\n\t      if (!this.styles[lineIndex + 1]) {\n\t        this.styles[lineIndex + 1] = {};\n\t      }\n\t\n\t      var currentCharStyle = {},\n\t          newLineStyles    = {};\n\t\n\t      if (this.styles[lineIndex] && this.styles[lineIndex][charIndex - 1]) {\n\t        currentCharStyle = this.styles[lineIndex][charIndex - 1];\n\t      }\n\t\n\t      // if there's nothing after cursor,\n\t      // we clone current char style onto the next (otherwise empty) line\n\t      if (isEndOfLine) {\n\t        newLineStyles[0] = clone(currentCharStyle);\n\t        this.styles[lineIndex + 1] = newLineStyles;\n\t      }\n\t      // otherwise we clone styles of all chars\n\t      // after cursor onto the next line, from the beginning\n\t      else {\n\t        for (var index in this.styles[lineIndex]) {\n\t          if (parseInt(index, 10) >= charIndex) {\n\t            newLineStyles[parseInt(index, 10) - charIndex] = this.styles[lineIndex][index];\n\t            // remove lines from the previous line since they're on a new line now\n\t            delete this.styles[lineIndex][index];\n\t          }\n\t        }\n\t        this.styles[lineIndex + 1] = newLineStyles;\n\t      }\n\t      this._forceClearCache = true;\n\t    },\n\t\n\t    /**\n\t     * Inserts style object for a given line/char index\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} charIndex Index of a char\n\t     * @param {Object} [style] Style object to insert, if given\n\t     */\n\t    insertCharStyleObject: function(lineIndex, charIndex, style) {\n\t\n\t      var currentLineStyles       = this.styles[lineIndex],\n\t          currentLineStylesCloned = clone(currentLineStyles);\n\t\n\t      if (charIndex === 0 && !style) {\n\t        charIndex = 1;\n\t      }\n\t\n\t      // shift all char styles by 1 forward\n\t      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n\t      for (var index in currentLineStylesCloned) {\n\t        var numericIndex = parseInt(index, 10);\n\t\n\t        if (numericIndex >= charIndex) {\n\t          currentLineStyles[numericIndex + 1] = currentLineStylesCloned[numericIndex];\n\t\n\t          // only delete the style if there was nothing moved there\n\t          if (!currentLineStylesCloned[numericIndex - 1]) {\n\t            delete currentLineStyles[numericIndex];\n\t          }\n\t        }\n\t      }\n\t\n\t      this.styles[lineIndex][charIndex] =\n\t        style || clone(currentLineStyles[charIndex - 1]);\n\t      this._forceClearCache = true;\n\t    },\n\t\n\t    /**\n\t     * Inserts style object(s)\n\t     * @param {String} _chars Characters at the location where style is inserted\n\t     * @param {Boolean} isEndOfLine True if it's end of line\n\t     * @param {Object} [styleObject] Style to insert\n\t     */\n\t    insertStyleObjects: function(_chars, isEndOfLine, styleObject) {\n\t      // removed shortcircuit over isEmptyStyles\n\t\n\t      var cursorLocation = this.get2DCursorLocation(),\n\t          lineIndex      = cursorLocation.lineIndex,\n\t          charIndex      = cursorLocation.charIndex;\n\t\n\t      if (!this._getLineStyle(lineIndex)) {\n\t        this._setLineStyle(lineIndex, {});\n\t      }\n\t\n\t      if (_chars === '\\n') {\n\t        this.insertNewlineStyleObject(lineIndex, charIndex, isEndOfLine);\n\t      }\n\t      else {\n\t        this.insertCharStyleObject(lineIndex, charIndex, styleObject);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Shifts line styles up or down\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} offset Can be -1 or +1\n\t     */\n\t    shiftLineStyles: function(lineIndex, offset) {\n\t      // shift all line styles by 1 upward\n\t      var clonedStyles = clone(this.styles);\n\t      for (var line in this.styles) {\n\t        var numericLine = parseInt(line, 10);\n\t        if (numericLine > lineIndex) {\n\t          this.styles[numericLine + offset] = clonedStyles[numericLine];\n\t          if (!clonedStyles[numericLine - offset]) {\n\t            delete this.styles[numericLine];\n\t          }\n\t        }\n\t      }\n\t      //TODO: evaluate if delete old style lines with offset -1\n\t    },\n\t\n\t    /**\n\t     * Removes style object\n\t     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line\n\t     * @param {Number} [index] Optional index. When not given, current selectionStart is used.\n\t     */\n\t    removeStyleObject: function(isBeginningOfLine, index) {\n\t\n\t      var cursorLocation = this.get2DCursorLocation(index),\n\t          lineIndex      = cursorLocation.lineIndex,\n\t          charIndex      = cursorLocation.charIndex;\n\t\n\t      if (isBeginningOfLine) {\n\t\n\t        var textOnPreviousLine     = this._textLines[lineIndex - 1],\n\t            newCharIndexOnPrevLine = textOnPreviousLine\n\t              ? textOnPreviousLine.length\n\t              : 0;\n\t\n\t        if (!this.styles[lineIndex - 1]) {\n\t          this.styles[lineIndex - 1] = {};\n\t        }\n\t\n\t        for (charIndex in this.styles[lineIndex]) {\n\t          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]\n\t            = this.styles[lineIndex][charIndex];\n\t        }\n\t\n\t        this.shiftLineStyles(lineIndex, -1);\n\t\n\t      }\n\t      else {\n\t        var currentLineStyles = this.styles[lineIndex];\n\t\n\t        if (currentLineStyles) {\n\t          delete currentLineStyles[charIndex];\n\t          //console.log('deleting', lineIndex, charIndex + offset);\n\t        }\n\t\n\t        var currentLineStylesCloned = clone(currentLineStyles);\n\t\n\t        // shift all styles by 1 backwards\n\t        for (var i in currentLineStylesCloned) {\n\t          var numericIndex = parseInt(i, 10);\n\t          if (numericIndex >= charIndex && numericIndex !== 0) {\n\t            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];\n\t            delete currentLineStyles[numericIndex];\n\t          }\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Inserts new line\n\t     */\n\t    insertNewline: function() {\n\t      this.insertChars('\\n');\n\t    }\n\t  });\n\t})();\n\t\n\t\n\tfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\t  /**\n\t   * Initializes \"dbclick\" event handler\n\t   */\n\t  initDoubleClickSimulation: function() {\n\t\n\t    // for double click\n\t    this.__lastClickTime = +new Date();\n\t\n\t    // for triple click\n\t    this.__lastLastClickTime = +new Date();\n\t\n\t    this.__lastPointer = { };\n\t\n\t    this.on('mousedown', this.onMouseDown.bind(this));\n\t  },\n\t\n\t  onMouseDown: function(options) {\n\t\n\t    this.__newClickTime = +new Date();\n\t    var newPointer = this.canvas.getPointer(options.e);\n\t\n\t    if (this.isTripleClick(newPointer)) {\n\t      this.fire('tripleclick', options);\n\t      this._stopEvent(options.e);\n\t    }\n\t    else if (this.isDoubleClick(newPointer)) {\n\t      this.fire('dblclick', options);\n\t      this._stopEvent(options.e);\n\t    }\n\t\n\t    this.__lastLastClickTime = this.__lastClickTime;\n\t    this.__lastClickTime = this.__newClickTime;\n\t    this.__lastPointer = newPointer;\n\t    this.__lastIsEditing = this.isEditing;\n\t    this.__lastSelected = this.selected;\n\t  },\n\t\n\t  isDoubleClick: function(newPointer) {\n\t    return this.__newClickTime - this.__lastClickTime < 500 &&\n\t        this.__lastPointer.x === newPointer.x &&\n\t        this.__lastPointer.y === newPointer.y && this.__lastIsEditing;\n\t  },\n\t\n\t  isTripleClick: function(newPointer) {\n\t    return this.__newClickTime - this.__lastClickTime < 500 &&\n\t        this.__lastClickTime - this.__lastLastClickTime < 500 &&\n\t        this.__lastPointer.x === newPointer.x &&\n\t        this.__lastPointer.y === newPointer.y;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _stopEvent: function(e) {\n\t    e.preventDefault && e.preventDefault();\n\t    e.stopPropagation && e.stopPropagation();\n\t  },\n\t\n\t  /**\n\t   * Initializes event handlers related to cursor or selection\n\t   */\n\t  initCursorSelectionHandlers: function() {\n\t    this.initSelectedHandler();\n\t    this.initMousedownHandler();\n\t    this.initMouseupHandler();\n\t    this.initClicks();\n\t  },\n\t\n\t  /**\n\t   * Initializes double and triple click event handlers\n\t   */\n\t  initClicks: function() {\n\t    this.on('dblclick', function(options) {\n\t      this.selectWord(this.getSelectionStartFromPointer(options.e));\n\t    });\n\t    this.on('tripleclick', function(options) {\n\t      this.selectLine(this.getSelectionStartFromPointer(options.e));\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Initializes \"mousedown\" event handler\n\t   */\n\t  initMousedownHandler: function() {\n\t    this.on('mousedown', function(options) {\n\t\n\t      var pointer = this.canvas.getPointer(options.e);\n\t\n\t      this.__mousedownX = pointer.x;\n\t      this.__mousedownY = pointer.y;\n\t      this.__isMousedown = true;\n\t\n\t      if (this.hiddenTextarea && this.canvas) {\n\t        this.canvas.wrapperEl.appendChild(this.hiddenTextarea);\n\t      }\n\t\n\t      if (this.selected) {\n\t        this.setCursorByClick(options.e);\n\t      }\n\t\n\t      if (this.isEditing) {\n\t        this.__selectionStartOnMouseDown = this.selectionStart;\n\t        this.initDelayedCursor(true);\n\t      }\n\t    });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _isObjectMoved: function(e) {\n\t    var pointer = this.canvas.getPointer(e);\n\t\n\t    return this.__mousedownX !== pointer.x ||\n\t           this.__mousedownY !== pointer.y;\n\t  },\n\t\n\t  /**\n\t   * Initializes \"mouseup\" event handler\n\t   */\n\t  initMouseupHandler: function() {\n\t    this.on('mouseup', function(options) {\n\t      this.__isMousedown = false;\n\t      if (this._isObjectMoved(options.e)) {\n\t        return;\n\t      }\n\t\n\t      if (this.__lastSelected) {\n\t        this.enterEditing();\n\t        this.initDelayedCursor(true);\n\t      }\n\t      this.selected = true;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Changes cursor location in a text depending on passed pointer (x/y) object\n\t   * @param {Event} e Event object\n\t   */\n\t  setCursorByClick: function(e) {\n\t    var newSelectionStart = this.getSelectionStartFromPointer(e);\n\t\n\t    if (e.shiftKey) {\n\t      if (newSelectionStart < this.selectionStart) {\n\t        this.setSelectionEnd(this.selectionStart);\n\t        this.setSelectionStart(newSelectionStart);\n\t      }\n\t      else {\n\t        this.setSelectionEnd(newSelectionStart);\n\t      }\n\t    }\n\t    else {\n\t      this.setSelectionStart(newSelectionStart);\n\t      this.setSelectionEnd(newSelectionStart);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns index of a character corresponding to where an object was clicked\n\t   * @param {Event} e Event object\n\t   * @return {Number} Index of a character\n\t   */\n\t  getSelectionStartFromPointer: function(e) {\n\t    var mouseOffset = this.getLocalPointer(e),\n\t        prevWidth = 0,\n\t        width = 0,\n\t        height = 0,\n\t        charIndex = 0,\n\t        newSelectionStart,\n\t        line;\n\t\n\t    for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t      line = this._textLines[i];\n\t      height += this._getHeightOfLine(this.ctx, i) * this.scaleY;\n\t\n\t      var widthOfLine = this._getLineWidth(this.ctx, i),\n\t          lineLeftOffset = this._getLineLeftOffset(widthOfLine);\n\t\n\t      width = lineLeftOffset * this.scaleX;\n\t\n\t      if (this.flipX) {\n\t        // when oject is horizontally flipped we reverse chars\n\t        // we should reverse also style or do not revers at all.\n\t        this._textLines[i] = line.reverse().join('');\n\t      }\n\t\n\t      for (var j = 0, jlen = line.length; j < jlen; j++) {\n\t\n\t        prevWidth = width;\n\t\n\t        width += this._getWidthOfChar(this.ctx, line[j], i, this.flipX ? jlen - j : j) *\n\t                 this.scaleX;\n\t\n\t        if (height <= mouseOffset.y || width <= mouseOffset.x) {\n\t          charIndex++;\n\t          continue;\n\t        }\n\t\n\t        return this._getNewSelectionStartFromOffset(\n\t          mouseOffset, prevWidth, width, charIndex + i, jlen);\n\t      }\n\t\n\t      if (mouseOffset.y < height) {\n\t        //this happens just on end of lines.\n\t        return this._getNewSelectionStartFromOffset(\n\t          mouseOffset, prevWidth, width, charIndex + i - 1, jlen);\n\t      }\n\t    }\n\t\n\t    // clicked somewhere after all chars, so set at the end\n\t    if (typeof newSelectionStart === 'undefined') {\n\t      return this.text.length;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\n\t\n\t    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\n\t        distanceBtwNextCharAndCursor = width - mouseOffset.x,\n\t        offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ? 0 : 1,\n\t        newSelectionStart = index + offset;\n\t\n\t    // if object is horizontally flipped, mirror cursor location from the end\n\t    if (this.flipX) {\n\t      newSelectionStart = jlen - newSelectionStart;\n\t    }\n\t\n\t    if (newSelectionStart > this.text.length) {\n\t      newSelectionStart = this.text.length;\n\t    }\n\t\n\t    return newSelectionStart;\n\t  }\n\t});\n\t\n\t\n\tfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\t\n\t  /**\n\t   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n\t   */\n\t  initHiddenTextarea: function() {\n\t    this.hiddenTextarea = fabric.document.createElement('textarea');\n\t\n\t    this.hiddenTextarea.setAttribute('autocapitalize', 'off');\n\t    this.hiddenTextarea.style.cssText = 'position: fixed; bottom: 20px; left: 0px; opacity: 0;'\n\t                                        + ' width: 0px; height: 0px; z-index: -999;';\n\t    fabric.document.body.appendChild(this.hiddenTextarea);\n\t\n\t    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\n\t    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\n\t    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\n\t    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\n\t\n\t    if (!this._clickHandlerInitialized && this.canvas) {\n\t      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\n\t      this._clickHandlerInitialized = true;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _keysMap: {\n\t    8:  'removeChars',\n\t    9:  'exitEditing',\n\t    27: 'exitEditing',\n\t    13: 'insertNewline',\n\t    33: 'moveCursorUp',\n\t    34: 'moveCursorDown',\n\t    35: 'moveCursorRight',\n\t    36: 'moveCursorLeft',\n\t    37: 'moveCursorLeft',\n\t    38: 'moveCursorUp',\n\t    39: 'moveCursorRight',\n\t    40: 'moveCursorDown',\n\t    46: 'forwardDelete'\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _ctrlKeysMap: {\n\t    65: 'selectAll',\n\t    88: 'cut'\n\t  },\n\t\n\t  onClick: function() {\n\t    // No need to trigger click event here, focus is enough to have the keyboard appear on Android\n\t    this.hiddenTextarea && this.hiddenTextarea.focus();\n\t  },\n\t\n\t  /**\n\t   * Handles keyup event\n\t   * @param {Event} e Event object\n\t   */\n\t  onKeyDown: function(e) {\n\t    if (!this.isEditing) {\n\t      return;\n\t    }\n\t    if (e.keyCode in this._keysMap) {\n\t      this[this._keysMap[e.keyCode]](e);\n\t    }\n\t    else if ((e.keyCode in this._ctrlKeysMap) && (e.ctrlKey || e.metaKey)) {\n\t      this[this._ctrlKeysMap[e.keyCode]](e);\n\t    }\n\t    else {\n\t      return;\n\t    }\n\t    e.stopImmediatePropagation();\n\t    e.preventDefault();\n\t    this.canvas && this.canvas.renderAll();\n\t  },\n\t\n\t  /**\n\t   * Handles onInput event\n\t   * @param {Event} e Event object\n\t   */\n\t  onInput: function(e) {\n\t    if (!this.isEditing || this._cancelOnInput) {\n\t      this._cancelOnInput = false;\n\t      return;\n\t    }\n\t    var offset = this.selectionStart || 0,\n\t        textLength = this.text.length,\n\t        newTextLength = this.hiddenTextarea.value.length,\n\t        diff = newTextLength - textLength,\n\t        charsToInsert = this.hiddenTextarea.value.slice(offset, offset + diff);\n\t    this.insertChars(charsToInsert);\n\t    e.stopPropagation();\n\t  },\n\t\n\t  /**\n\t   * Forward delete\n\t   */\n\t  forwardDelete: function(e) {\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      if (this.selectionStart === this.text.length) {\n\t        return;\n\t      }\n\t      this.moveCursorRight(e);\n\t    }\n\t    this.removeChars(e);\n\t  },\n\t\n\t  /**\n\t   * Copies selected text\n\t   * @param {Event} e Event object\n\t   */\n\t  copy: function(e) {\n\t    var selectedText = this.getSelectedText(),\n\t        clipboardData = this._getClipboardData(e);\n\t\n\t    // Check for backward compatibility with old browsers\n\t    if (clipboardData) {\n\t      clipboardData.setData('text', selectedText);\n\t    }\n\t\n\t    fabric.copiedText = selectedText;\n\t    fabric.copiedTextStyle = this.getSelectionStyles(\n\t                          this.selectionStart,\n\t                          this.selectionEnd);\n\t  },\n\t\n\t  /**\n\t   * Pastes text\n\t   * @param {Event} e Event object\n\t   */\n\t  paste: function(e) {\n\t    var copiedText = null,\n\t        clipboardData = this._getClipboardData(e),\n\t        useCopiedStyle = true;\n\t\n\t    // Check for backward compatibility with old browsers\n\t    if (clipboardData) {\n\t      copiedText = clipboardData.getData('text').replace(/\\r/g, '');\n\t      if (!fabric.copiedTextStyle || fabric.copiedText !== copiedText) {\n\t        useCopiedStyle = false;\n\t      }\n\t    }\n\t    else {\n\t      copiedText = fabric.copiedText;\n\t    }\n\t\n\t    if (copiedText) {\n\t      this.insertChars(copiedText, useCopiedStyle);\n\t    }\n\t    this._cancelOnInput = true;\n\t  },\n\t\n\t  /**\n\t   * Cuts text\n\t   * @param {Event} e Event object\n\t   */\n\t  cut: function(e) {\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      return;\n\t    }\n\t\n\t    this.copy();\n\t    this.removeChars(e);\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Event} e Event object\n\t   * @return {Object} Clipboard data object\n\t   */\n\t  _getClipboardData: function(e) {\n\t    return e && (e.clipboardData || fabric.window.clipboardData);\n\t  },\n\t\n\t  /**\n\t   * Gets start offset of a selection\n\t   * @param {Event} e Event object\n\t   * @param {Boolean} isRight\n\t   * @return {Number}\n\t   */\n\t  getDownCursorOffset: function(e, isRight) {\n\t    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,\n\t        cursorLocation = this.get2DCursorLocation(selectionProp),\n\t        _char, lineLeftOffset, lineIndex = cursorLocation.lineIndex,\n\t        textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),\n\t        textOnSameLineAfterCursor = this._textLines[lineIndex].slice(cursorLocation.charIndex),\n\t        textOnNextLine = this._textLines[lineIndex + 1] || '';\n\t\n\t    // if on last line, down cursor goes to end of line\n\t    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\n\t\n\t      // move to the end of a text\n\t      return this.text.length - selectionProp;\n\t    }\n\t\n\t    var widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, lineIndex);\n\t    lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor);\n\t\n\t    var widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;\n\t\n\t    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {\n\t      _char = textOnSameLineBeforeCursor[i];\n\t      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);\n\t    }\n\t\n\t    var indexOnNextLine = this._getIndexOnNextLine(\n\t      cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor);\n\t\n\t    return textOnSameLineAfterCursor.length + 1 + indexOnNextLine;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _getIndexOnNextLine: function(cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor) {\n\t    var lineIndex = cursorLocation.lineIndex + 1,\n\t        widthOfNextLine = this._getLineWidth(this.ctx, lineIndex),\n\t        lineLeftOffset = this._getLineLeftOffset(widthOfNextLine),\n\t        widthOfCharsOnNextLine = lineLeftOffset,\n\t        indexOnNextLine = 0,\n\t        foundMatch;\n\t\n\t    for (var j = 0, jlen = textOnNextLine.length; j < jlen; j++) {\n\t\n\t      var _char = textOnNextLine[j],\n\t          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);\n\t\n\t      widthOfCharsOnNextLine += widthOfChar;\n\t\n\t      if (widthOfCharsOnNextLine > widthOfCharsOnSameLineBeforeCursor) {\n\t\n\t        foundMatch = true;\n\t\n\t        var leftEdge = widthOfCharsOnNextLine - widthOfChar,\n\t            rightEdge = widthOfCharsOnNextLine,\n\t            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),\n\t            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);\n\t\n\t        indexOnNextLine = offsetFromRightEdge < offsetFromLeftEdge ? j + 1 : j;\n\t\n\t        break;\n\t      }\n\t    }\n\t\n\t    // reached end\n\t    if (!foundMatch) {\n\t      indexOnNextLine = textOnNextLine.length;\n\t    }\n\t\n\t    return indexOnNextLine;\n\t  },\n\t\n\t  /**\n\t   * Moves cursor down\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorDown: function(e) {\n\t    this.abortCursorAnimation();\n\t    this._currentCursorOpacity = 1;\n\t\n\t    var offset = this.getDownCursorOffset(e, this._selectionDirection === 'right');\n\t\n\t    if (e.shiftKey) {\n\t      this.moveCursorDownWithShift(offset);\n\t    }\n\t    else {\n\t      this.moveCursorDownWithoutShift(offset);\n\t    }\n\t\n\t    this.initDelayedCursor();\n\t  },\n\t\n\t  /**\n\t   * Moves cursor down without keeping selection\n\t   * @param {Number} offset\n\t   */\n\t  moveCursorDownWithoutShift: function(offset) {\n\t    this._selectionDirection = 'right';\n\t    this.setSelectionStart(this.selectionStart + offset);\n\t    this.setSelectionEnd(this.selectionStart);\n\t  },\n\t\n\t  /**\n\t   * private\n\t   */\n\t  swapSelectionPoints: function() {\n\t    var swapSel = this.selectionEnd;\n\t    this.setSelectionEnd(this.selectionStart);\n\t    this.setSelectionStart(swapSel);\n\t  },\n\t\n\t  /**\n\t   * Moves cursor down while keeping selection\n\t   * @param {Number} offset\n\t   */\n\t  moveCursorDownWithShift: function(offset) {\n\t    if (this.selectionEnd === this.selectionStart) {\n\t      this._selectionDirection = 'right';\n\t    }\n\t    if (this._selectionDirection === 'right') {\n\t      this.setSelectionEnd(this.selectionEnd + offset);\n\t    }\n\t    else {\n\t      this.setSelectionStart(this.selectionStart + offset);\n\t    }\n\t    if (this.selectionEnd < this.selectionStart  && this._selectionDirection === 'left') {\n\t      this.swapSelectionPoints();\n\t      this._selectionDirection = 'right';\n\t    }\n\t    if (this.selectionEnd > this.text.length) {\n\t      this.setSelectionEnd(this.text.length);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @param {Event} e Event object\n\t   * @param {Boolean} isRight\n\t   * @return {Number}\n\t   */\n\t  getUpCursorOffset: function(e, isRight) {\n\t    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,\n\t        cursorLocation = this.get2DCursorLocation(selectionProp),\n\t        lineIndex = cursorLocation.lineIndex;\n\t    // if on first line, up cursor goes to start of line\n\t    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n\t      return selectionProp;\n\t    }\n\t\n\t    var textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),\n\t        textOnPreviousLine = this._textLines[lineIndex - 1] || '',\n\t        _char,\n\t        widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, cursorLocation.lineIndex),\n\t        lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor),\n\t        widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;\n\t\n\t    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {\n\t      _char = textOnSameLineBeforeCursor[i];\n\t      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);\n\t    }\n\t\n\t    var indexOnPrevLine = this._getIndexOnPrevLine(\n\t      cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor);\n\t\n\t    return textOnPreviousLine.length - indexOnPrevLine + textOnSameLineBeforeCursor.length;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _getIndexOnPrevLine: function(cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor) {\n\t\n\t    var lineIndex = cursorLocation.lineIndex - 1,\n\t        widthOfPreviousLine = this._getLineWidth(this.ctx, lineIndex),\n\t        lineLeftOffset = this._getLineLeftOffset(widthOfPreviousLine),\n\t        widthOfCharsOnPreviousLine = lineLeftOffset,\n\t        indexOnPrevLine = 0,\n\t        foundMatch;\n\t\n\t    for (var j = 0, jlen = textOnPreviousLine.length; j < jlen; j++) {\n\t\n\t      var _char = textOnPreviousLine[j],\n\t          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);\n\t\n\t      widthOfCharsOnPreviousLine += widthOfChar;\n\t\n\t      if (widthOfCharsOnPreviousLine > widthOfCharsOnSameLineBeforeCursor) {\n\t\n\t        foundMatch = true;\n\t\n\t        var leftEdge = widthOfCharsOnPreviousLine - widthOfChar,\n\t            rightEdge = widthOfCharsOnPreviousLine,\n\t            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),\n\t            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);\n\t\n\t        indexOnPrevLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\n\t\n\t        break;\n\t      }\n\t    }\n\t\n\t    // reached end\n\t    if (!foundMatch) {\n\t      indexOnPrevLine = textOnPreviousLine.length - 1;\n\t    }\n\t\n\t    return indexOnPrevLine;\n\t  },\n\t\n\t  /**\n\t   * Moves cursor up\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorUp: function(e) {\n\t\n\t    this.abortCursorAnimation();\n\t    this._currentCursorOpacity = 1;\n\t\n\t    var offset = this.getUpCursorOffset(e, this._selectionDirection === 'right');\n\t    if (e.shiftKey) {\n\t      this.moveCursorUpWithShift(offset);\n\t    }\n\t    else {\n\t      this.moveCursorUpWithoutShift(offset);\n\t    }\n\t\n\t    this.initDelayedCursor();\n\t  },\n\t\n\t  /**\n\t   * Moves cursor up with shift\n\t   * @param {Number} offset\n\t   */\n\t  moveCursorUpWithShift: function(offset) {\n\t    if (this.selectionEnd === this.selectionStart) {\n\t      this._selectionDirection = 'left';\n\t    }\n\t    if (this._selectionDirection === 'right') {\n\t      this.setSelectionEnd(this.selectionEnd - offset);\n\t    }\n\t    else {\n\t      this.setSelectionStart(this.selectionStart - offset);\n\t    }\n\t    if (this.selectionEnd < this.selectionStart && this._selectionDirection === 'right') {\n\t      this.swapSelectionPoints();\n\t      this._selectionDirection = 'left';\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Moves cursor up without shift\n\t   * @param {Number} offset\n\t   */\n\t  moveCursorUpWithoutShift: function(offset) {\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      this.setSelectionStart(this.selectionStart - offset);\n\t    }\n\t    this.setSelectionEnd(this.selectionStart);\n\t\n\t    this._selectionDirection = 'left';\n\t  },\n\t\n\t  /**\n\t   * Moves cursor left\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorLeft: function(e) {\n\t    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n\t      return;\n\t    }\n\t\n\t    this.abortCursorAnimation();\n\t    this._currentCursorOpacity = 1;\n\t\n\t    if (e.shiftKey) {\n\t      this.moveCursorLeftWithShift(e);\n\t    }\n\t    else {\n\t      this.moveCursorLeftWithoutShift(e);\n\t    }\n\t\n\t    this.initDelayedCursor();\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _move: function(e, prop, direction) {\n\t    var propMethod = (prop === 'selectionStart' ? 'setSelectionStart' : 'setSelectionEnd');\n\t    if (e.altKey) {\n\t      this[propMethod](this['findWordBoundary' + direction](this[prop]));\n\t    }\n\t    else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\n\t      this[propMethod](this['findLineBoundary' + direction](this[prop]));\n\t    }\n\t    else {\n\t      this[propMethod](this[prop] + (direction === 'Left' ? -1 : 1));\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _moveLeft: function(e, prop) {\n\t    this._move(e, prop, 'Left');\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _moveRight: function(e, prop) {\n\t    this._move(e, prop, 'Right');\n\t  },\n\t\n\t  /**\n\t   * Moves cursor left without keeping selection\n\t   * @param {Event} e\n\t   */\n\t  moveCursorLeftWithoutShift: function(e) {\n\t    this._selectionDirection = 'left';\n\t\n\t    // only move cursor when there is no selection,\n\t    // otherwise we discard it, and leave cursor on same place\n\t    if (this.selectionEnd === this.selectionStart) {\n\t      this._moveLeft(e, 'selectionStart');\n\t    }\n\t    this.setSelectionEnd(this.selectionStart);\n\t  },\n\t\n\t  /**\n\t   * Moves cursor left while keeping selection\n\t   * @param {Event} e\n\t   */\n\t  moveCursorLeftWithShift: function(e) {\n\t    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\n\t      this._moveLeft(e, 'selectionEnd');\n\t    }\n\t    else {\n\t      this._selectionDirection = 'left';\n\t      this._moveLeft(e, 'selectionStart');\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Moves cursor right\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorRight: function(e) {\n\t    if (this.selectionStart >= this.text.length && this.selectionEnd >= this.text.length) {\n\t      return;\n\t    }\n\t\n\t    this.abortCursorAnimation();\n\t    this._currentCursorOpacity = 1;\n\t\n\t    if (e.shiftKey) {\n\t      this.moveCursorRightWithShift(e);\n\t    }\n\t    else {\n\t      this.moveCursorRightWithoutShift(e);\n\t    }\n\t\n\t    this.initDelayedCursor();\n\t  },\n\t\n\t  /**\n\t   * Moves cursor right while keeping selection\n\t   * @param {Event} e\n\t   */\n\t  moveCursorRightWithShift: function(e) {\n\t    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\n\t      this._moveRight(e, 'selectionStart');\n\t    }\n\t    else {\n\t      this._selectionDirection = 'right';\n\t      this._moveRight(e, 'selectionEnd');\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Moves cursor right without keeping selection\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorRightWithoutShift: function(e) {\n\t    this._selectionDirection = 'right';\n\t\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      this._moveRight(e, 'selectionStart');\n\t      this.setSelectionEnd(this.selectionStart);\n\t    }\n\t    else {\n\t      this.setSelectionEnd(this.selectionEnd + this.getNumNewLinesInSelectedText());\n\t      this.setSelectionStart(this.selectionEnd);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Removes characters selected by selection\n\t   * @param {Event} e Event object\n\t   */\n\t  removeChars: function(e) {\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      this._removeCharsNearCursor(e);\n\t    }\n\t    else {\n\t      this._removeCharsFromTo(this.selectionStart, this.selectionEnd);\n\t    }\n\t\n\t    this.setSelectionEnd(this.selectionStart);\n\t\n\t    this._removeExtraneousStyles();\n\t\n\t    this.canvas && this.canvas.renderAll();\n\t\n\t    this.setCoords();\n\t    this.fire('changed');\n\t    this.canvas && this.canvas.fire('text:changed', { target: this });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Event} e Event object\n\t   */\n\t  _removeCharsNearCursor: function(e) {\n\t    if (this.selectionStart === 0) {\n\t      return;\n\t    }\n\t    if (e.metaKey) {\n\t      // remove all till the start of current line\n\t      var leftLineBoundary = this.findLineBoundaryLeft(this.selectionStart);\n\t\n\t      this._removeCharsFromTo(leftLineBoundary, this.selectionStart);\n\t      this.setSelectionStart(leftLineBoundary);\n\t    }\n\t    else if (e.altKey) {\n\t      // remove all till the start of current word\n\t      var leftWordBoundary = this.findWordBoundaryLeft(this.selectionStart);\n\t\n\t      this._removeCharsFromTo(leftWordBoundary, this.selectionStart);\n\t      this.setSelectionStart(leftWordBoundary);\n\t    }\n\t    else {\n\t      this._removeSingleCharAndStyle(this.selectionStart);\n\t      this.setSelectionStart(this.selectionStart - 1);\n\t    }\n\t  }\n\t});\n\t\n\t\n\t/* _TO_SVG_START_ */\n\t(function() {\n\t  var toFixed = fabric.util.toFixed,\n\t      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\t\n\t  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGTextLineText: function(lineIndex, textSpans, height, textLeftOffset, textTopOffset, textBgRects) {\n\t      if (!this.styles[lineIndex]) {\n\t        fabric.Text.prototype._setSVGTextLineText.call(this,\n\t          lineIndex, textSpans, height, textLeftOffset, textTopOffset);\n\t      }\n\t      else {\n\t        this._setSVGTextLineChars(\n\t          lineIndex, textSpans, height, textLeftOffset, textBgRects);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGTextLineChars: function(lineIndex, textSpans, height, textLeftOffset, textBgRects) {\n\t\n\t      var chars = this._textLines[lineIndex],\n\t          charOffset = 0,\n\t          lineLeftOffset = this._getSVGLineLeftOffset(lineIndex) - this.width / 2,\n\t          lineOffset = this._getSVGLineTopOffset(lineIndex),\n\t          heightOfLine = this._getHeightOfLine(this.ctx, lineIndex);\n\t\n\t      for (var i = 0, len = chars.length; i < len; i++) {\n\t        var styleDecl = this.styles[lineIndex][i] || { };\n\t\n\t        textSpans.push(\n\t          this._createTextCharSpan(\n\t            chars[i], styleDecl, lineLeftOffset, lineOffset.lineTop + lineOffset.offset, charOffset));\n\t\n\t        var charWidth = this._getWidthOfChar(this.ctx, chars[i], lineIndex, i);\n\t\n\t        if (styleDecl.textBackgroundColor) {\n\t          textBgRects.push(\n\t            this._createTextCharBg(\n\t              styleDecl, lineLeftOffset, lineOffset.lineTop, heightOfLine, charWidth, charOffset));\n\t        }\n\t\n\t        charOffset += charWidth;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getSVGLineLeftOffset: function(lineIndex) {\n\t      return fabric.util.toFixed(this._getLineLeftOffset(this.__lineWidths[lineIndex]), 2);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getSVGLineTopOffset: function(lineIndex) {\n\t      var lineTopOffset = 0, lastHeight = 0;\n\t      for (var j = 0; j < lineIndex; j++) {\n\t        lineTopOffset += this._getHeightOfLine(this.ctx, j);\n\t      }\n\t      lastHeight = this._getHeightOfLine(this.ctx, j);\n\t      return {\n\t        lineTop: lineTopOffset,\n\t        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createTextCharBg: function(styleDecl, lineLeftOffset, lineTopOffset, heightOfLine, charWidth, charOffset) {\n\t      return [\n\t        //jscs:disable validateIndentation\n\t        '<rect fill=\"', styleDecl.textBackgroundColor,\n\t        '\" x=\"', toFixed(lineLeftOffset + charOffset, NUM_FRACTION_DIGITS),\n\t        '\" y=\"', toFixed(lineTopOffset - this.height/2, NUM_FRACTION_DIGITS),\n\t        '\" width=\"', toFixed(charWidth, NUM_FRACTION_DIGITS),\n\t        '\" height=\"', toFixed(heightOfLine / this.lineHeight, NUM_FRACTION_DIGITS),\n\t        '\"></rect>'\n\t        //jscs:enable validateIndentation\n\t      ].join('');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createTextCharSpan: function(_char, styleDecl, lineLeftOffset, lineTopOffset, charOffset) {\n\t\n\t      var fillStyles = this.getSvgStyles.call(fabric.util.object.extend({\n\t        visible: true,\n\t        fill: this.fill,\n\t        stroke: this.stroke,\n\t        type: 'text'\n\t      }, styleDecl));\n\t\n\t      return [\n\t        //jscs:disable validateIndentation\n\t        '<tspan x=\"', lineLeftOffset + charOffset, '\" y=\"',\n\t          lineTopOffset - this.height/2, '\" ',\n\t          (styleDecl.fontFamily ? 'font-family=\"' + styleDecl.fontFamily.replace(/\"/g, '\\'') + '\" ': ''),\n\t          (styleDecl.fontSize ? 'font-size=\"' + styleDecl.fontSize + '\" ': ''),\n\t          (styleDecl.fontStyle ? 'font-style=\"' + styleDecl.fontStyle + '\" ': ''),\n\t          (styleDecl.fontWeight ? 'font-weight=\"' + styleDecl.fontWeight + '\" ': ''),\n\t          (styleDecl.textDecoration ? 'text-decoration=\"' + styleDecl.textDecoration + '\" ': ''),\n\t          'style=\"', fillStyles, '\">',\n\t          fabric.util.string.escapeXml(_char),\n\t        '</tspan>'\n\t        //jscs:enable validateIndentation\n\t      ].join('');\n\t    }\n\t  });\n\t})();\n\t/* _TO_SVG_END_ */\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = {}),\n\t      clone  = fabric.util.object.clone;\n\t\n\t  /**\n\t   * Textbox class, based on IText, allows the user to resize the text rectangle\n\t   * and wraps lines automatically. Textboxes have their Y scaling locked, the\n\t   * user can only change width. Height is adjusted automatically based on the\n\t   * wrapping of lines.\n\t   * @class fabric.Textbox\n\t   * @extends fabric.IText\n\t   * @mixes fabric.Observable\n\t   * @return {fabric.Textbox} thisArg\n\t   * @see {@link fabric.Textbox#initialize} for constructor definition\n\t   */\n\t  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'textbox',\n\t    /**\n\t     * Minimum width of textbox, in pixels.\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minWidth: 20,\n\t    /**\n\t     * Minimum calculated width of a textbox, in pixels.\n\t     * @type Number\n\t     * @default\n\t     */\n\t    dynamicMinWidth: 0,\n\t    /**\n\t     * Cached array of text wrapping.\n\t     * @type Array\n\t     */\n\t    __cachedLines: null,\n\t    /**\n\t     * Constructor. Some scaling related property values are forced. Visibility\n\t     * of controls is also fixed; only the rotation and width controls are\n\t     * made available.\n\t     * @param {String} text Text string\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Textbox} thisArg\n\t     */\n\t    initialize: function(text, options) {\n\t      this.ctx = fabric.util.createCanvasElement().getContext('2d');\n\t\n\t      this.callSuper('initialize', text, options);\n\t      this.set({\n\t        lockUniScaling: false,\n\t        lockScalingY: true,\n\t        lockScalingFlip: true,\n\t        hasBorders: true\n\t      });\n\t      this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());\n\t\n\t      // add width to this list of props that effect line wrapping.\n\t      this._dimensionAffectingProps.width = true;\n\t    },\n\t\n\t    /**\n\t     * Unlike superclass's version of this function, Textbox does not update\n\t     * its width.\n\t     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n\t     * @private\n\t     * @override\n\t     */\n\t    _initDimensions: function(ctx) {\n\t      if (this.__skipDimension) {\n\t        return;\n\t      }\n\t\n\t      if (!ctx) {\n\t        ctx = fabric.util.createCanvasElement().getContext('2d');\n\t        this._setTextStyles(ctx);\n\t      }\n\t\n\t      // clear dynamicMinWidth as it will be different after we re-wrap line\n\t      this.dynamicMinWidth = 0;\n\t\n\t      // wrap lines\n\t      this._textLines = this._splitTextIntoLines();\n\t\n\t      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n\t      if (this.dynamicMinWidth > this.width) {\n\t        this._set('width', this.dynamicMinWidth);\n\t      }\n\t\n\t      // clear cache and re-calculate height\n\t      this._clearCache();\n\t      this.height = this._getTextHeight(ctx);\n\t      this._setLineWidths();\n\t    },\n\t\n\t    /**\n\t     * set the __lineWidths cache array to support\n\t     * functions that expect it to be filled\n\t     * @private\n\t     */\n\t    _setLineWidths: function() {\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        this.__lineWidths[i] = this.width;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Generate an object that translates the style object so that it is\n\t     * broken up by visual lines (new lines and automatic wrapping).\n\t     * The original text styles object is broken up by actual lines (new lines only),\n\t     * which is only sufficient for Text / IText\n\t     * @private\n\t     */\n\t    _generateStyleMap: function() {\n\t      var realLineCount     = 0,\n\t          realLineCharCount = 0,\n\t          charCount         = 0,\n\t          map               = {};\n\t\n\t      for (var i = 0; i < this._textLines.length; i++) {\n\t        if (this.text[charCount] === '\\n') {\n\t          realLineCharCount = 0;\n\t          charCount++;\n\t          realLineCount++;\n\t        }\n\t        else if (this.text[charCount] === ' ') {\n\t          // this case deals with space's that are removed from end of lines when wrapping\n\t          realLineCharCount++;\n\t          charCount++;\n\t        }\n\t\n\t        map[i] = { line: realLineCount, offset: realLineCharCount };\n\t\n\t        charCount += this._textLines[i].length;\n\t        realLineCharCount += this._textLines[i].length;\n\t      }\n\t\n\t      return map;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Boolean} [returnCloneOrEmpty=false]\n\t     * @private\n\t     */\n\t    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {\n\t      if (this._styleMap) {\n\t        var map = this._styleMap[lineIndex];\n\t        lineIndex = map.line;\n\t        charIndex = map.offset + charIndex;\n\t      }\n\t\n\t      if (returnCloneOrEmpty) {\n\t        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])\n\t          ? clone(this.styles[lineIndex][charIndex])\n\t          : {};\n\t      }\n\t\n\t      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Object} style\n\t     * @private\n\t     */\n\t    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n\t      var map = this._styleMap[lineIndex];\n\t      lineIndex = map.line;\n\t      charIndex = map.offset + charIndex;\n\t\n\t      this.styles[lineIndex][charIndex] = style;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @private\n\t     */\n\t    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n\t      var map = this._styleMap[lineIndex];\n\t      lineIndex = map.line;\n\t      charIndex = map.offset + charIndex;\n\t\n\t      delete this.styles[lineIndex][charIndex];\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @private\n\t     */\n\t    _getLineStyle: function(lineIndex) {\n\t      var map = this._styleMap[lineIndex];\n\t      return this.styles[map.line];\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Object} style\n\t     * @private\n\t     */\n\t    _setLineStyle: function(lineIndex, style) {\n\t      var map = this._styleMap[lineIndex];\n\t      this.styles[map.line] = style;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @private\n\t     */\n\t    _deleteLineStyle: function(lineIndex) {\n\t      var map = this._styleMap[lineIndex];\n\t      delete this.styles[map.line];\n\t    },\n\t\n\t    /**\n\t     * Wraps text using the 'width' property of Textbox. First this function\n\t     * splits text on newlines, so we preserve newlines entered by the user.\n\t     * Then it wraps each line using the width of the Textbox by calling\n\t     * _wrapLine().\n\t     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n\t     * @param {String} text The string of text that is split into lines\n\t     * @returns {Array} Array of lines\n\t     */\n\t    _wrapText: function(ctx, text) {\n\t      var lines = text.split(this._reNewline), wrapped = [], i;\n\t\n\t      for (i = 0; i < lines.length; i++) {\n\t        wrapped = wrapped.concat(this._wrapLine(ctx, lines[i], i));\n\t      }\n\t\n\t      return wrapped;\n\t    },\n\t\n\t    /**\n\t     * Helper function to measure a string of text, given its lineIndex and charIndex offset\n\t     *\n\t     * @param {CanvasRenderingContext2D} ctx\n\t     * @param {String} text\n\t     * @param {number} lineIndex\n\t     * @param {number} charOffset\n\t     * @returns {number}\n\t     * @private\n\t     */\n\t    _measureText: function(ctx, text, lineIndex, charOffset) {\n\t      var width = 0, decl;\n\t      charOffset = charOffset || 0;\n\t\n\t      for (var i = 0; i < text.length; i++) {\n\t        if (this.styles && this.styles[lineIndex] && (decl = this.styles[lineIndex][i + charOffset])) {\n\t          ctx.save();\n\t          width += this._applyCharStylesGetWidth(ctx, text[i], lineIndex, i, decl);\n\t          ctx.restore();\n\t        }\n\t        else {\n\t          // @note: we intentionally pass in an empty style declaration, because if we pass in nothing, it will\n\t          // retry fetching style declaration\n\t          width += this._applyCharStylesGetWidth(ctx, text[i], lineIndex, i, {});\n\t        }\n\t      }\n\t\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * Wraps a line of text using the width of the Textbox and a context.\n\t     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n\t     * @param {String} text The string of text to split into lines\n\t     * @param {Number} lineIndex\n\t     * @returns {Array} Array of line(s) into which the given text is wrapped\n\t     * to.\n\t     */\n\t    _wrapLine: function(ctx, text, lineIndex) {\n\t      var maxWidth  = this.width,\n\t          lineWidth = this._measureText(ctx, text, lineIndex, 0);\n\t\n\t      // first case: does the whole line fit?\n\t      if (lineWidth < maxWidth) {\n\t        // if the current line is only one word, we need to keep track of it if it's a large word\n\t        if (text.indexOf(' ') === -1 && lineWidth > this.dynamicMinWidth) {\n\t          this.dynamicMinWidth = lineWidth;\n\t        }\n\t\n\t        return [text];\n\t      }\n\t\n\t      // if the whole line doesn't fit, we break it up into words\n\t      var lines            = [],\n\t          line             = '',\n\t          words            = text.split(' '),\n\t          offset           = 0,\n\t          infix            = '',\n\t          wordWidth        = 0,\n\t          largestWordWidth = 0;\n\t\n\t      while (words.length > 0) {\n\t        infix = line === '' ? '' : ' ';\n\t        wordWidth = this._measureText(ctx, words[0], lineIndex, line.length + infix.length + offset);\n\t        lineWidth = line === '' ? wordWidth : this._measureText(ctx, line + infix + words[0], lineIndex, offset);\n\t\n\t        if (lineWidth < maxWidth || (line === '' && wordWidth >= maxWidth)) {\n\t          line += infix + words.shift();\n\t        }\n\t        else {\n\t          offset += line.length + 1; // add 1 because each word is separated by a space\n\t          lines.push(line);\n\t          line = '';\n\t        }\n\t\n\t        if (words.length === 0) {\n\t          lines.push(line);\n\t        }\n\t\n\t        // keep track of largest word\n\t        if (wordWidth > largestWordWidth) {\n\t          largestWordWidth = wordWidth;\n\t        }\n\t      }\n\t\n\t      if (largestWordWidth > this.dynamicMinWidth) {\n\t        this.dynamicMinWidth = largestWordWidth;\n\t      }\n\t\n\t      return lines;\n\t    },\n\t\n\t    /**\n\t     * Gets lines of text to render in the Textbox. This function calculates\n\t     * text wrapping on the fly everytime it is called.\n\t     * @returns {Array} Array of lines in the Textbox.\n\t     * @override\n\t     */\n\t    _splitTextIntoLines: function() {\n\t      this.ctx.save();\n\t      this._setTextStyles(this.ctx);\n\t\n\t      var lines = this._wrapText(this.ctx, this.text);\n\t\n\t      this.ctx.restore();\n\t      this._textLines = lines;\n\t      this._styleMap = this._generateStyleMap();\n\t      return lines;\n\t    },\n\t\n\t    /**\n\t     * When part of a group, we don't want the Textbox's scale to increase if\n\t     * the group's increases. That's why we reduce the scale of the Textbox by\n\t     * the amount that the group's increases. This is to maintain the effective\n\t     * scale of the Textbox at 1, so that font-size values make sense. Otherwise\n\t     * the same font-size value would result in different actual size depending\n\t     * on the value of the scale.\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     */\n\t    setOnGroup: function(key, value) {\n\t      if (key === 'scaleX') {\n\t        this.set('scaleX', Math.abs(1 / value));\n\t        this.set('width', (this.get('width') * value) /\n\t          (typeof this.__oldScaleX === 'undefined' ? 1 : this.__oldScaleX));\n\t        this.__oldScaleX = value;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start).\n\t     * Overrides the superclass function to take into account text wrapping.\n\t     *\n\t     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n\t     */\n\t    get2DCursorLocation: function(selectionStart) {\n\t      if (typeof selectionStart === 'undefined') {\n\t        selectionStart = this.selectionStart;\n\t      }\n\t\n\t      var numLines = this._textLines.length,\n\t          removed  = 0;\n\t\n\t      for (var i = 0; i < numLines; i++) {\n\t        var line    = this._textLines[i],\n\t            lineLen = line.length;\n\t\n\t        if (selectionStart <= removed + lineLen) {\n\t          return {\n\t            lineIndex: i,\n\t            charIndex: selectionStart - removed\n\t          };\n\t        }\n\t\n\t        removed += lineLen;\n\t\n\t        if (this.text[removed] === '\\n' || this.text[removed] === ' ') {\n\t          removed++;\n\t        }\n\t      }\n\t\n\t      return {\n\t        lineIndex: numLines - 1,\n\t        charIndex: this._textLines[numLines - 1].length\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Overrides superclass function and uses text wrapping data to get cursor\n\t     * boundary offsets instead of the array of chars.\n\t     * @param {Array} chars Unused\n\t     * @param {String} typeOfBoundaries Can be 'cursor' or 'selection'\n\t     * @returns {Object} Object with 'top', 'left', and 'lineLeft' properties set.\n\t     */\n\t    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {\n\t      var topOffset      = 0,\n\t          leftOffset     = 0,\n\t          cursorLocation = this.get2DCursorLocation(),\n\t          lineChars      = this._textLines[cursorLocation.lineIndex].split(''),\n\t          lineLeftOffset = this._getCachedLineOffset(cursorLocation.lineIndex);\n\t\n\t      for (var i = 0; i < cursorLocation.charIndex; i++) {\n\t        leftOffset += this._getWidthOfChar(this.ctx, lineChars[i], cursorLocation.lineIndex, i);\n\t      }\n\t\n\t      for (i = 0; i < cursorLocation.lineIndex; i++) {\n\t        topOffset += this._getHeightOfLine(this.ctx, i);\n\t      }\n\t\n\t      if (typeOfBoundaries === 'cursor') {\n\t        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, cursorLocation.lineIndex)\n\t          / this.lineHeight - this.getCurrentCharFontSize(cursorLocation.lineIndex, cursorLocation.charIndex)\n\t          * (1 - this._fontSizeFraction);\n\t      }\n\t\n\t      return {\n\t        top: topOffset,\n\t        left: leftOffset,\n\t        lineLeft: lineLeftOffset\n\t      };\n\t    },\n\t\n\t    getMinWidth: function() {\n\t      return Math.max(this.minWidth, this.dynamicMinWidth);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @method toObject\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {\n\t        minWidth: this.minWidth\n\t      });\n\t    }\n\t  });\n\t  /**\n\t   * Returns fabric.Textbox instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Textbox\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Textbox} instance of fabric.Textbox\n\t   */\n\t  fabric.Textbox.fromObject = function(object) {\n\t    return new fabric.Textbox(object.text, clone(object));\n\t  };\n\t  /**\n\t   * Returns the default controls visibility required for Textboxes.\n\t   * @returns {Object}\n\t   */\n\t  fabric.Textbox.getTextboxControlVisibility = function() {\n\t    return {\n\t      tl: false,\n\t      tr: false,\n\t      br: false,\n\t      bl: false,\n\t      ml: true,\n\t      mt: false,\n\t      mr: true,\n\t      mb: false,\n\t      mtr: true\n\t    };\n\t  };\n\t  /**\n\t   * Contains all fabric.Textbox objects that have been created\n\t   * @static\n\t   * @memberOf fabric.Textbox\n\t   * @type Array\n\t   */\n\t  fabric.Textbox.instances = [];\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * Override _setObjectScale and add Textbox specific resizing behavior. Resizing\n\t   * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.\n\t   */\n\t  var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;\n\t\n\t  fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,\n\t                                                     lockScalingX, lockScalingY, by, lockScalingFlip) {\n\t\n\t    var t = transform.target;\n\t    if (t instanceof fabric.Textbox) {\n\t      var w = t.width * ((localMouse.x / transform.scaleX) / (t.width + t.strokeWidth));\n\t      if (w >= t.getMinWidth()) {\n\t        t.set('width', w);\n\t      }\n\t    }\n\t    else {\n\t      setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,\n\t        lockScalingX, lockScalingY, by, lockScalingFlip);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Sets controls of this group to the Textbox's special configuration if\n\t   * one is present in the group. Deletes _controlsVisibility otherwise, so that\n\t   * it gets initialized to default value at runtime.\n\t   */\n\t  fabric.Group.prototype._refreshControlsVisibility = function() {\n\t    if (typeof fabric.Textbox === 'undefined') {\n\t      return;\n\t    }\n\t    for (var i = this._objects.length; i--;) {\n\t      if (this._objects[i] instanceof fabric.Textbox) {\n\t        this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());\n\t        return;\n\t      }\n\t    }\n\t  };\n\t\n\t  var clone = fabric.util.object.clone;\n\t\n\t  fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {\n\t    /**\n\t     * @private\n\t     */\n\t    _removeExtraneousStyles: function() {\n\t      for (var prop in this._styleMap) {\n\t        if (!this._textLines[prop]) {\n\t          delete this.styles[this._styleMap[prop].line];\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Inserts style object for a given line/char index\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} charIndex Index of a char\n\t     * @param {Object} [style] Style object to insert, if given\n\t     */\n\t    insertCharStyleObject: function(lineIndex, charIndex, style) {\n\t      // adjust lineIndex and charIndex\n\t      var map = this._styleMap[lineIndex];\n\t      lineIndex = map.line;\n\t      charIndex = map.offset + charIndex;\n\t\n\t      fabric.IText.prototype.insertCharStyleObject.apply(this, [lineIndex, charIndex, style]);\n\t    },\n\t\n\t    /**\n\t     * Inserts new style object\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} charIndex Index of a char\n\t     * @param {Boolean} isEndOfLine True if it's end of line\n\t     */\n\t    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {\n\t      // adjust lineIndex and charIndex\n\t      var map = this._styleMap[lineIndex];\n\t      lineIndex = map.line;\n\t      charIndex = map.offset + charIndex;\n\t\n\t      fabric.IText.prototype.insertNewlineStyleObject.apply(this, [lineIndex, charIndex, isEndOfLine]);\n\t    },\n\t\n\t    /**\n\t     * Shifts line styles up or down. This function is slightly different than the one in\n\t     * itext_behaviour as it takes into account the styleMap.\n\t     *\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} offset Can be -1 or +1\n\t     */\n\t    shiftLineStyles: function(lineIndex, offset) {\n\t      // shift all line styles by 1 upward\n\t      var clonedStyles = clone(this.styles),\n\t          map          = this._styleMap[lineIndex];\n\t\n\t      // adjust line index\n\t      lineIndex = map.line;\n\t\n\t      for (var line in this.styles) {\n\t        var numericLine = parseInt(line, 10);\n\t\n\t        if (numericLine > lineIndex) {\n\t          this.styles[numericLine + offset] = clonedStyles[numericLine];\n\t\n\t          if (!clonedStyles[numericLine - offset]) {\n\t            delete this.styles[numericLine];\n\t          }\n\t        }\n\t      }\n\t      //TODO: evaluate if delete old style lines with offset -1\n\t    },\n\t\n\t    /**\n\t     * Figure out programatically the text on previous actual line (actual = separated by \\n);\n\t     *\n\t     * @param {Number} lIndex\n\t     * @returns {String}\n\t     * @private\n\t     */\n\t    _getTextOnPreviousLine: function(lIndex) {\n\t      var textOnPreviousLine = this._textLines[lIndex - 1];\n\t\n\t      while (this._styleMap[lIndex - 2] && this._styleMap[lIndex - 2].line === this._styleMap[lIndex - 1].line) {\n\t        textOnPreviousLine = this._textLines[lIndex - 2] + textOnPreviousLine;\n\t\n\t        lIndex--;\n\t      }\n\t\n\t      return textOnPreviousLine;\n\t    },\n\t\n\t    /**\n\t     * Removes style object\n\t     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line\n\t     * @param {Number} [index] Optional index. When not given, current selectionStart is used.\n\t     */\n\t    removeStyleObject: function(isBeginningOfLine, index) {\n\t\n\t      var cursorLocation = this.get2DCursorLocation(index),\n\t          map            = this._styleMap[cursorLocation.lineIndex],\n\t          lineIndex      = map.line,\n\t          charIndex      = map.offset + cursorLocation.charIndex;\n\t\n\t      if (isBeginningOfLine) {\n\t        var textOnPreviousLine     = this._getTextOnPreviousLine(cursorLocation.lineIndex),\n\t            newCharIndexOnPrevLine = textOnPreviousLine ? textOnPreviousLine.length : 0;\n\t\n\t        if (!this.styles[lineIndex - 1]) {\n\t          this.styles[lineIndex - 1] = {};\n\t        }\n\t\n\t        for (charIndex in this.styles[lineIndex]) {\n\t          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]\n\t            = this.styles[lineIndex][charIndex];\n\t        }\n\t\n\t        this.shiftLineStyles(cursorLocation.lineIndex, -1);\n\t\n\t      }\n\t      else {\n\t        var currentLineStyles = this.styles[lineIndex];\n\t\n\t        if (currentLineStyles) {\n\t          delete currentLineStyles[charIndex];\n\t          //console.log('deleting', lineIndex, charIndex + offset);\n\t        }\n\t\n\t        var currentLineStylesCloned = clone(currentLineStyles);\n\t\n\t        // shift all styles by 1 backwards\n\t        for (var i in currentLineStylesCloned) {\n\t          var numericIndex = parseInt(i, 10);\n\t          if (numericIndex >= charIndex && numericIndex !== 0) {\n\t            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];\n\t            delete currentLineStyles[numericIndex];\n\t          }\n\t        }\n\t      }\n\t    }\n\t  });\n\t})();\n\t\n\t\n\t(function() {\n\t  var override = fabric.IText.prototype._getNewSelectionStartFromOffset;\n\t  /**\n\t   * Overrides the IText implementation and adjusts character index as there is not always a linebreak\n\t   *\n\t   * @param {Number} mouseOffset\n\t   * @param {Number} prevWidth\n\t   * @param {Number} width\n\t   * @param {Number} index\n\t   * @param {Number} jlen\n\t   * @returns {Number}\n\t   */\n\t  fabric.IText.prototype._getNewSelectionStartFromOffset = function(mouseOffset, prevWidth, width, index, jlen) {\n\t    index = override.call(this, mouseOffset, prevWidth, width, index, jlen);\n\t\n\t    // the index passed into the function is padded by the amount of lines from _textLines (to account for \\n)\n\t    // we need to remove this padding, and pad it by actual lines, and / or spaces that are meant to be there\n\t    var tmp     = 0,\n\t        removed = 0;\n\t\n\t    // account for removed characters\n\t    for (var i = 0; i < this._textLines.length; i++) {\n\t      tmp += this._textLines[i].length;\n\t\n\t      if (tmp + removed >= index) {\n\t        break;\n\t      }\n\t\n\t      if (this.text[tmp + removed] === '\\n' || this.text[tmp + removed] === ' ') {\n\t        removed++;\n\t      }\n\t    }\n\t\n\t    return index - i + removed;\n\t  };\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\n\t    return;\n\t  }\n\t\n\t  var DOMParser = __webpack_require__(1931).DOMParser,\n\t      URL = __webpack_require__(1806),\n\t      HTTP = __webpack_require__(1804),\n\t      HTTPS = __webpack_require__(1834),\n\t\n\t      Canvas = __webpack_require__(1768),\n\t      Image = __webpack_require__(1768).Image;\n\t\n\t  /** @private */\n\t  function request(url, encoding, callback) {\n\t    var oURL = URL.parse(url);\n\t\n\t    // detect if http or https is used\n\t    if ( !oURL.port ) {\n\t      oURL.port = ( oURL.protocol.indexOf('https:') === 0 ) ? 443 : 80;\n\t    }\n\t\n\t    // assign request handler based on protocol\n\t    var reqHandler = (oURL.protocol.indexOf('https:') === 0 ) ? HTTPS : HTTP,\n\t        req = reqHandler.request({\n\t          hostname: oURL.hostname,\n\t          port: oURL.port,\n\t          path: oURL.path,\n\t          method: 'GET'\n\t        }, function(response) {\n\t          var body = '';\n\t          if (encoding) {\n\t            response.setEncoding(encoding);\n\t          }\n\t          response.on('end', function () {\n\t            callback(body);\n\t          });\n\t          response.on('data', function (chunk) {\n\t            if (response.statusCode === 200) {\n\t              body += chunk;\n\t            }\n\t          });\n\t        });\n\t\n\t    req.on('error', function(err) {\n\t      if (err.errno === process.ECONNREFUSED) {\n\t        fabric.log('ECONNREFUSED: connection refused to ' + oURL.hostname + ':' + oURL.port);\n\t      }\n\t      else {\n\t        fabric.log(err.message);\n\t      }\n\t      callback(null);\n\t    });\n\t\n\t    req.end();\n\t  }\n\t\n\t  /** @private */\n\t  function requestFs(path, callback) {\n\t    var fs = __webpack_require__(1929);\n\t    fs.readFile(path, function (err, data) {\n\t      if (err) {\n\t        fabric.log(err);\n\t        throw err;\n\t      }\n\t      else {\n\t        callback(data);\n\t      }\n\t    });\n\t  }\n\t\n\t  fabric.util.loadImage = function(url, callback, context) {\n\t    function createImageAndCallBack(data) {\n\t      if (data) {\n\t        img.src = new Buffer(data, 'binary');\n\t        // preserving original url, which seems to be lost in node-canvas\n\t        img._src = url;\n\t        callback && callback.call(context, img);\n\t      }\n\t      else {\n\t        img = null;\n\t        callback && callback.call(context, null, true);\n\t      }\n\t    }\n\t    var img = new Image();\n\t    if (url && (url instanceof Buffer || url.indexOf('data') === 0)) {\n\t      img.src = img._src = url;\n\t      callback && callback.call(context, img);\n\t    }\n\t    else if (url && url.indexOf('http') !== 0) {\n\t      requestFs(url, createImageAndCallBack);\n\t    }\n\t    else if (url) {\n\t      request(url, 'binary', createImageAndCallBack);\n\t    }\n\t    else {\n\t      callback && callback.call(context, url);\n\t    }\n\t  };\n\t\n\t  fabric.loadSVGFromURL = function(url, callback, reviver) {\n\t    url = url.replace(/^\\n\\s*/, '').replace(/\\?.*$/, '').trim();\n\t    if (url.indexOf('http') !== 0) {\n\t      requestFs(url, function(body) {\n\t        fabric.loadSVGFromString(body.toString(), callback, reviver);\n\t      });\n\t    }\n\t    else {\n\t      request(url, '', function(body) {\n\t        fabric.loadSVGFromString(body, callback, reviver);\n\t      });\n\t    }\n\t  };\n\t\n\t  fabric.loadSVGFromString = function(string, callback, reviver) {\n\t    var doc = new DOMParser().parseFromString(string);\n\t    fabric.parseSVGDocument(doc.documentElement, function(results, options) {\n\t      callback && callback(results, options);\n\t    }, reviver);\n\t  };\n\t\n\t  fabric.util.getScript = function(url, callback) {\n\t    request(url, '', function(body) {\n\t      eval(body);\n\t      callback && callback();\n\t    });\n\t  };\n\t\n\t  fabric.Image.fromObject = function(object, callback) {\n\t    fabric.util.loadImage(object.src, function(img) {\n\t      var oImg = new fabric.Image(img);\n\t\n\t      oImg._initConfig(object);\n\t      oImg._initFilters(object.filters, function(filters) {\n\t        oImg.filters = filters || [ ];\n\t        oImg._initFilters(object.resizeFilters, function(resizeFilters) {\n\t          oImg.resizeFilters = resizeFilters || [ ];\n\t          callback && callback(oImg);\n\t        });\n\t      });\n\t    });\n\t  };\n\t  /**\n\t   * Only available when running fabric on node.js\n\t   * @param {Number} width Canvas width\n\t   * @param {Number} height Canvas height\n\t   * @param {Object} [options] Options to pass to FabricCanvas.\n\t   * @param {Object} [nodeCanvasOptions] Options to pass to NodeCanvas.\n\t   * @return {Object} wrapped canvas instance\n\t   */\n\t  fabric.createCanvasForNode = function(width, height, options, nodeCanvasOptions) {\n\t    nodeCanvasOptions = nodeCanvasOptions || options;\n\t\n\t    var canvasEl = fabric.document.createElement('canvas'),\n\t        nodeCanvas = new Canvas(width || 600, height || 600, nodeCanvasOptions);\n\t\n\t    // jsdom doesn't create style on canvas element, so here be temp. workaround\n\t    canvasEl.style = { };\n\t\n\t    canvasEl.width = nodeCanvas.width;\n\t    canvasEl.height = nodeCanvas.height;\n\t\n\t    var FabricCanvas = fabric.Canvas || fabric.StaticCanvas,\n\t        fabricCanvas = new FabricCanvas(canvasEl, options);\n\t\n\t    fabricCanvas.contextContainer = nodeCanvas.getContext('2d');\n\t    fabricCanvas.nodeCanvas = nodeCanvas;\n\t    fabricCanvas.Font = Canvas.Font;\n\t\n\t    return fabricCanvas;\n\t  };\n\t\n\t  /** @ignore */\n\t  fabric.StaticCanvas.prototype.createPNGStream = function() {\n\t    return this.nodeCanvas.createPNGStream();\n\t  };\n\t\n\t  fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n\t    return this.nodeCanvas.createJPEGStream(opts);\n\t  };\n\t\n\t  var origSetWidth = fabric.StaticCanvas.prototype.setWidth;\n\t  fabric.StaticCanvas.prototype.setWidth = function(width, options) {\n\t    origSetWidth.call(this, width, options);\n\t    this.nodeCanvas.width = width;\n\t    return this;\n\t  };\n\t  if (fabric.Canvas) {\n\t    fabric.Canvas.prototype.setWidth = fabric.StaticCanvas.prototype.setWidth;\n\t  }\n\t\n\t  var origSetHeight = fabric.StaticCanvas.prototype.setHeight;\n\t  fabric.StaticCanvas.prototype.setHeight = function(height, options) {\n\t    origSetHeight.call(this, height, options);\n\t    this.nodeCanvas.height = height;\n\t    return this;\n\t  };\n\t  if (fabric.Canvas) {\n\t    fabric.Canvas.prototype.setHeight = fabric.StaticCanvas.prototype.setHeight;\n\t  }\n\t\n\t})();\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(116).Buffer, __webpack_require__(42)))\n\n/***/ },\n\n/***/ 1834:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar http = __webpack_require__(1804);\n\t\n\tvar https = module.exports;\n\t\n\tfor (var key in http) {\n\t    if (http.hasOwnProperty(key)) https[key] = http[key];\n\t};\n\t\n\thttps.request = function (params, cb) {\n\t    if (!params) params = {};\n\t    params.scheme = 'https';\n\t    params.protocol = 'https:';\n\t    return http.request.call(this, params, cb);\n\t}\n\n\n/***/ },\n\n/***/ 1843:\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\t'use strict';\n\t\n\t// If obj.hasOwnProperty has been overridden, then calling\n\t// obj.hasOwnProperty(prop) will break.\n\t// See: https://github.com/joyent/node/issues/1707\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\t\n\tmodule.exports = function(qs, sep, eq, options) {\n\t  sep = sep || '&';\n\t  eq = eq || '=';\n\t  var obj = {};\n\t\n\t  if (typeof qs !== 'string' || qs.length === 0) {\n\t    return obj;\n\t  }\n\t\n\t  var regexp = /\\+/g;\n\t  qs = qs.split(sep);\n\t\n\t  var maxKeys = 1000;\n\t  if (options && typeof options.maxKeys === 'number') {\n\t    maxKeys = options.maxKeys;\n\t  }\n\t\n\t  var len = qs.length;\n\t  // maxKeys <= 0 means that we should not limit keys count\n\t  if (maxKeys > 0 && len > maxKeys) {\n\t    len = maxKeys;\n\t  }\n\t\n\t  for (var i = 0; i < len; ++i) {\n\t    var x = qs[i].replace(regexp, '%20'),\n\t        idx = x.indexOf(eq),\n\t        kstr, vstr, k, v;\n\t\n\t    if (idx >= 0) {\n\t      kstr = x.substr(0, idx);\n\t      vstr = x.substr(idx + 1);\n\t    } else {\n\t      kstr = x;\n\t      vstr = '';\n\t    }\n\t\n\t    k = decodeURIComponent(kstr);\n\t    v = decodeURIComponent(vstr);\n\t\n\t    if (!hasOwnProperty(obj, k)) {\n\t      obj[k] = v;\n\t    } else if (Array.isArray(obj[k])) {\n\t      obj[k].push(v);\n\t    } else {\n\t      obj[k] = [obj[k], v];\n\t    }\n\t  }\n\t\n\t  return obj;\n\t};\n\n\n/***/ },\n\n/***/ 1844:\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\t'use strict';\n\t\n\tvar stringifyPrimitive = function(v) {\n\t  switch (typeof v) {\n\t    case 'string':\n\t      return v;\n\t\n\t    case 'boolean':\n\t      return v ? 'true' : 'false';\n\t\n\t    case 'number':\n\t      return isFinite(v) ? v : '';\n\t\n\t    default:\n\t      return '';\n\t  }\n\t};\n\t\n\tmodule.exports = function(obj, sep, eq, name) {\n\t  sep = sep || '&';\n\t  eq = eq || '=';\n\t  if (obj === null) {\n\t    obj = undefined;\n\t  }\n\t\n\t  if (typeof obj === 'object') {\n\t    return Object.keys(obj).map(function(k) {\n\t      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\t      if (Array.isArray(obj[k])) {\n\t        return obj[k].map(function(v) {\n\t          return ks + encodeURIComponent(stringifyPrimitive(v));\n\t        }).join(sep);\n\t      } else {\n\t        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n\t      }\n\t    }).join(sep);\n\t\n\t  }\n\t\n\t  if (!name) return '';\n\t  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n\t         encodeURIComponent(stringifyPrimitive(obj));\n\t};\n\n\n/***/ },\n\n/***/ 1845:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.decode = exports.parse = __webpack_require__(1843);\n\texports.encode = exports.stringify = __webpack_require__(1844);\n\n\n/***/ },\n\n/***/ 1913:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(1805)\n\tvar inherits = __webpack_require__(239)\n\tvar response = __webpack_require__(1914)\n\tvar stream = __webpack_require__(1177)\n\tvar toArrayBuffer = __webpack_require__(1921)\n\t\n\tvar IncomingMessage = response.IncomingMessage\n\tvar rStates = response.readyStates\n\t\n\tfunction decideMode (preferBinary, useFetch) {\n\t\tif (capability.fetch && useFetch) {\n\t\t\treturn 'fetch'\n\t\t} else if (capability.mozchunkedarraybuffer) {\n\t\t\treturn 'moz-chunked-arraybuffer'\n\t\t} else if (capability.msstream) {\n\t\t\treturn 'ms-stream'\n\t\t} else if (capability.arraybuffer && preferBinary) {\n\t\t\treturn 'arraybuffer'\n\t\t} else if (capability.vbArray && preferBinary) {\n\t\t\treturn 'text:vbarray'\n\t\t} else {\n\t\t\treturn 'text'\n\t\t}\n\t}\n\t\n\tvar ClientRequest = module.exports = function (opts) {\n\t\tvar self = this\n\t\tstream.Writable.call(self)\n\t\n\t\tself._opts = opts\n\t\tself._body = []\n\t\tself._headers = {}\n\t\tif (opts.auth)\n\t\t\tself.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))\n\t\tObject.keys(opts.headers).forEach(function (name) {\n\t\t\tself.setHeader(name, opts.headers[name])\n\t\t})\n\t\n\t\tvar preferBinary\n\t\tvar useFetch = true\n\t\tif (opts.mode === 'disable-fetch' || 'timeout' in opts) {\n\t\t\t// If the use of XHR should be preferred and includes preserving the 'content-type' header.\n\t\t\t// Force XHR to be used since the Fetch API does not yet support timeouts.\n\t\t\tuseFetch = false\n\t\t\tpreferBinary = true\n\t\t} else if (opts.mode === 'prefer-streaming') {\n\t\t\t// If streaming is a high priority but binary compatibility and\n\t\t\t// the accuracy of the 'content-type' header aren't\n\t\t\tpreferBinary = false\n\t\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t\t// If streaming is more important than preserving the 'content-type' header\n\t\t\tpreferBinary = !capability.overrideMimeType\n\t\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\t\tpreferBinary = true\n\t\t} else {\n\t\t\tthrow new Error('Invalid value for opts.mode')\n\t\t}\n\t\tself._mode = decideMode(preferBinary, useFetch)\n\t\n\t\tself.on('finish', function () {\n\t\t\tself._onFinish()\n\t\t})\n\t}\n\t\n\tinherits(ClientRequest, stream.Writable)\n\t\n\tClientRequest.prototype.setHeader = function (name, value) {\n\t\tvar self = this\n\t\tvar lowerName = name.toLowerCase()\n\t\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t\t// http-browserify did it, so I will too.\n\t\tif (unsafeHeaders.indexOf(lowerName) !== -1)\n\t\t\treturn\n\t\n\t\tself._headers[lowerName] = {\n\t\t\tname: name,\n\t\t\tvalue: value\n\t\t}\n\t}\n\t\n\tClientRequest.prototype.getHeader = function (name) {\n\t\tvar self = this\n\t\treturn self._headers[name.toLowerCase()].value\n\t}\n\t\n\tClientRequest.prototype.removeHeader = function (name) {\n\t\tvar self = this\n\t\tdelete self._headers[name.toLowerCase()]\n\t}\n\t\n\tClientRequest.prototype._onFinish = function () {\n\t\tvar self = this\n\t\n\t\tif (self._destroyed)\n\t\t\treturn\n\t\tvar opts = self._opts\n\t\n\t\tvar headersObj = self._headers\n\t\tvar body = null\n\t\tif (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH' || opts.method === 'MERGE') {\n\t\t\tif (capability.blobConstructor) {\n\t\t\t\tbody = new global.Blob(self._body.map(function (buffer) {\n\t\t\t\t\treturn toArrayBuffer(buffer)\n\t\t\t\t}), {\n\t\t\t\t\ttype: (headersObj['content-type'] || {}).value || ''\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// get utf8 string\n\t\t\t\tbody = Buffer.concat(self._body).toString()\n\t\t\t}\n\t\t}\n\t\n\t\tif (self._mode === 'fetch') {\n\t\t\tvar headers = Object.keys(headersObj).map(function (name) {\n\t\t\t\treturn [headersObj[name].name, headersObj[name].value]\n\t\t\t})\n\t\n\t\t\tglobal.fetch(self._opts.url, {\n\t\t\t\tmethod: self._opts.method,\n\t\t\t\theaders: headers,\n\t\t\t\tbody: body || undefined,\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin'\n\t\t\t}).then(function (response) {\n\t\t\t\tself._fetchResponse = response\n\t\t\t\tself._connect()\n\t\t\t}, function (reason) {\n\t\t\t\tself.emit('error', reason)\n\t\t\t})\n\t\t} else {\n\t\t\tvar xhr = self._xhr = new global.XMLHttpRequest()\n\t\t\ttry {\n\t\t\t\txhr.open(self._opts.method, self._opts.url, true)\n\t\t\t} catch (err) {\n\t\t\t\tprocess.nextTick(function () {\n\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\n\t\t\t// Can't set responseType on really old browsers\n\t\t\tif ('responseType' in xhr)\n\t\t\t\txhr.responseType = self._mode.split(':')[0]\n\t\n\t\t\tif ('withCredentials' in xhr)\n\t\t\t\txhr.withCredentials = !!opts.withCredentials\n\t\n\t\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr)\n\t\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined')\n\t\n\t\t\tif ('timeout' in opts) {\n\t\t\t\txhr.timeout = opts.timeout\n\t\t\t\txhr.ontimeout = function () {\n\t\t\t\t\tself.emit('timeout')\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tObject.keys(headersObj).forEach(function (name) {\n\t\t\t\txhr.setRequestHeader(headersObj[name].name, headersObj[name].value)\n\t\t\t})\n\t\n\t\t\tself._response = null\n\t\t\txhr.onreadystatechange = function () {\n\t\t\t\tswitch (xhr.readyState) {\n\t\t\t\t\tcase rStates.LOADING:\n\t\t\t\t\tcase rStates.DONE:\n\t\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\t\txhr.onprogress = function () {\n\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\txhr.onerror = function () {\n\t\t\t\tif (self._destroyed)\n\t\t\t\t\treturn\n\t\t\t\tself.emit('error', new Error('XHR error'))\n\t\t\t}\n\t\n\t\t\ttry {\n\t\t\t\txhr.send(body)\n\t\t\t} catch (err) {\n\t\t\t\tprocess.nextTick(function () {\n\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Checks if xhr.status is readable and non-zero, indicating no error.\n\t * Even though the spec says it should be available in readyState 3,\n\t * accessing it throws an exception in IE8\n\t */\n\tfunction statusValid (xhr) {\n\t\ttry {\n\t\t\tvar status = xhr.status\n\t\t\treturn (status !== null && status !== 0)\n\t\t} catch (e) {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\tClientRequest.prototype._onXHRProgress = function () {\n\t\tvar self = this\n\t\n\t\tif (!statusValid(self._xhr) || self._destroyed)\n\t\t\treturn\n\t\n\t\tif (!self._response)\n\t\t\tself._connect()\n\t\n\t\tself._response._onXHRProgress()\n\t}\n\t\n\tClientRequest.prototype._connect = function () {\n\t\tvar self = this\n\t\n\t\tif (self._destroyed)\n\t\t\treturn\n\t\n\t\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)\n\t\tself._response.on('error', function(err) {\n\t\t\tself.emit('error', err)\n\t\t})\n\t\n\t\tself.emit('response', self._response)\n\t}\n\t\n\tClientRequest.prototype._write = function (chunk, encoding, cb) {\n\t\tvar self = this\n\t\n\t\tself._body.push(chunk)\n\t\tcb()\n\t}\n\t\n\tClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n\t\tvar self = this\n\t\tself._destroyed = true\n\t\tif (self._response)\n\t\t\tself._response._destroyed = true\n\t\tif (self._xhr)\n\t\t\tself._xhr.abort()\n\t\t// Currently, there isn't a way to truly abort a fetch.\n\t\t// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27\n\t}\n\t\n\tClientRequest.prototype.end = function (data, encoding, cb) {\n\t\tvar self = this\n\t\tif (typeof data === 'function') {\n\t\t\tcb = data\n\t\t\tdata = undefined\n\t\t}\n\t\n\t\tstream.Writable.prototype.end.call(self, data, encoding, cb)\n\t}\n\t\n\tClientRequest.prototype.flushHeaders = function () {}\n\tClientRequest.prototype.setTimeout = function () {}\n\tClientRequest.prototype.setNoDelay = function () {}\n\tClientRequest.prototype.setSocketKeepAlive = function () {}\n\t\n\t// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n\tvar unsafeHeaders = [\n\t\t'accept-charset',\n\t\t'accept-encoding',\n\t\t'access-control-request-headers',\n\t\t'access-control-request-method',\n\t\t'connection',\n\t\t'content-length',\n\t\t'cookie',\n\t\t'cookie2',\n\t\t'date',\n\t\t'dnt',\n\t\t'expect',\n\t\t'host',\n\t\t'keep-alive',\n\t\t'origin',\n\t\t'referer',\n\t\t'te',\n\t\t'trailer',\n\t\t'transfer-encoding',\n\t\t'upgrade',\n\t\t'user-agent',\n\t\t'via'\n\t]\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(116).Buffer, (function() { return this; }()), __webpack_require__(42)))\n\n/***/ },\n\n/***/ 1914:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(1805)\n\tvar inherits = __webpack_require__(239)\n\tvar stream = __webpack_require__(1177)\n\t\n\tvar rStates = exports.readyStates = {\n\t\tUNSENT: 0,\n\t\tOPENED: 1,\n\t\tHEADERS_RECEIVED: 2,\n\t\tLOADING: 3,\n\t\tDONE: 4\n\t}\n\t\n\tvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {\n\t\tvar self = this\n\t\tstream.Readable.call(self)\n\t\n\t\tself._mode = mode\n\t\tself.headers = {}\n\t\tself.rawHeaders = []\n\t\tself.trailers = {}\n\t\tself.rawTrailers = []\n\t\n\t\t// Fake the 'close' event, but only once 'end' fires\n\t\tself.on('end', function () {\n\t\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('close')\n\t\t\t})\n\t\t})\n\t\n\t\tif (mode === 'fetch') {\n\t\t\tself._fetchResponse = response\n\t\n\t\t\tself.url = response.url\n\t\t\tself.statusCode = response.status\n\t\t\tself.statusMessage = response.statusText\n\t\t\t\n\t\t\tresponse.headers.forEach(function(header, key){\n\t\t\t\tself.headers[key.toLowerCase()] = header\n\t\t\t\tself.rawHeaders.push(key, header)\n\t\t\t})\n\t\n\t\n\t\t\t// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed\n\t\t\tvar reader = response.body.getReader()\n\t\t\tfunction read () {\n\t\t\t\treader.read().then(function (result) {\n\t\t\t\t\tif (self._destroyed)\n\t\t\t\t\t\treturn\n\t\t\t\t\tif (result.done) {\n\t\t\t\t\t\tself.push(null)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tself.push(new Buffer(result.value))\n\t\t\t\t\tread()\n\t\t\t\t}).catch(function(err) {\n\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t}\n\t\t\tread()\n\t\n\t\t} else {\n\t\t\tself._xhr = xhr\n\t\t\tself._pos = 0\n\t\n\t\t\tself.url = xhr.responseURL\n\t\t\tself.statusCode = xhr.status\n\t\t\tself.statusMessage = xhr.statusText\n\t\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/)\n\t\t\theaders.forEach(function (header) {\n\t\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/)\n\t\t\t\tif (matches) {\n\t\t\t\t\tvar key = matches[1].toLowerCase()\n\t\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\t\tself.headers[key] = []\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.headers[key].push(matches[2])\n\t\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\t\tself.headers[key] += ', ' + matches[2]\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.headers[key] = matches[2]\n\t\t\t\t\t}\n\t\t\t\t\tself.rawHeaders.push(matches[1], matches[2])\n\t\t\t\t}\n\t\t\t})\n\t\n\t\t\tself._charset = 'x-user-defined'\n\t\t\tif (!capability.overrideMimeType) {\n\t\t\t\tvar mimeType = self.rawHeaders['mime-type']\n\t\t\t\tif (mimeType) {\n\t\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/)\n\t\t\t\t\tif (charsetMatch) {\n\t\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!self._charset)\n\t\t\t\t\tself._charset = 'utf-8' // best guess\n\t\t\t}\n\t\t}\n\t}\n\t\n\tinherits(IncomingMessage, stream.Readable)\n\t\n\tIncomingMessage.prototype._read = function () {}\n\t\n\tIncomingMessage.prototype._onXHRProgress = function () {\n\t\tvar self = this\n\t\n\t\tvar xhr = self._xhr\n\t\n\t\tvar response = null\n\t\tswitch (self._mode) {\n\t\t\tcase 'text:vbarray': // For IE9\n\t\t\t\tif (xhr.readyState !== rStates.DONE)\n\t\t\t\t\tbreak\n\t\t\t\ttry {\n\t\t\t\t\t// This fails in IE8\n\t\t\t\t\tresponse = new global.VBArray(xhr.responseBody).toArray()\n\t\t\t\t} catch (e) {}\n\t\t\t\tif (response !== null) {\n\t\t\t\t\tself.push(new Buffer(response))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t// Falls through in IE8\t\n\t\t\tcase 'text':\n\t\t\t\ttry { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n\t\t\t\t\tresponse = xhr.responseText\n\t\t\t\t} catch (e) {\n\t\t\t\t\tself._mode = 'text:vbarray'\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif (response.length > self._pos) {\n\t\t\t\t\tvar newData = response.substr(self._pos)\n\t\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\t\tvar buffer = new Buffer(newData.length)\n\t\t\t\t\t\tfor (var i = 0; i < newData.length; i++)\n\t\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff\n\t\n\t\t\t\t\t\tself.push(buffer)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.push(newData, self._charset)\n\t\t\t\t\t}\n\t\t\t\t\tself._pos = response.length\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'arraybuffer':\n\t\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response)\n\t\t\t\t\tbreak\n\t\t\t\tresponse = xhr.response\n\t\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\t\tbreak\n\t\t\tcase 'moz-chunked-arraybuffer': // take whole\n\t\t\t\tresponse = xhr.response\n\t\t\t\tif (xhr.readyState !== rStates.LOADING || !response)\n\t\t\t\t\tbreak\n\t\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\t\tbreak\n\t\t\tcase 'ms-stream':\n\t\t\t\tresponse = xhr.response\n\t\t\t\tif (xhr.readyState !== rStates.LOADING)\n\t\t\t\t\tbreak\n\t\t\t\tvar reader = new global.MSStreamReader()\n\t\t\t\treader.onprogress = function () {\n\t\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\t\tself.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))\n\t\t\t\t\t\tself._pos = reader.result.byteLength\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treader.onload = function () {\n\t\t\t\t\tself.push(null)\n\t\t\t\t}\n\t\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\t\treader.readAsArrayBuffer(response)\n\t\t\t\tbreak\n\t\t}\n\t\n\t\t// The ms-stream case handles end separately in reader.onload()\n\t\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\t\tself.push(null)\n\t\t}\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(42), __webpack_require__(116).Buffer, (function() { return this; }())))\n\n/***/ },\n\n/***/ 1921:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Buffer = __webpack_require__(116).Buffer\n\t\n\tmodule.exports = function (buf) {\n\t\t// If the buffer is backed by a Uint8Array, a faster version will work\n\t\tif (buf instanceof Uint8Array) {\n\t\t\t// If the buffer isn't a subarray, return the underlying ArrayBuffer\n\t\t\tif (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n\t\t\t\treturn buf.buffer\n\t\t\t} else if (typeof buf.buffer.slice === 'function') {\n\t\t\t\t// Otherwise we need to get a proper copy\n\t\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)\n\t\t\t}\n\t\t}\n\t\n\t\tif (Buffer.isBuffer(buf)) {\n\t\t\t// This is the slow version that will work with any Buffer\n\t\t\t// implementation (even in old browsers)\n\t\t\tvar arrayCopy = new Uint8Array(buf.length)\n\t\t\tvar len = buf.length\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tarrayCopy[i] = buf[i]\n\t\t\t}\n\t\t\treturn arrayCopy.buffer\n\t\t} else {\n\t\t\tthrow new Error('Argument must be a Buffer')\n\t\t}\n\t}\n\n\n/***/ },\n\n/***/ 1923:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */\n\t;(function(root) {\n\t\n\t\t/** Detect free variables */\n\t\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t\t!exports.nodeType && exports;\n\t\tvar freeModule = typeof module == 'object' && module &&\n\t\t\t!module.nodeType && module;\n\t\tvar freeGlobal = typeof global == 'object' && global;\n\t\tif (\n\t\t\tfreeGlobal.global === freeGlobal ||\n\t\t\tfreeGlobal.window === freeGlobal ||\n\t\t\tfreeGlobal.self === freeGlobal\n\t\t) {\n\t\t\troot = freeGlobal;\n\t\t}\n\t\n\t\t/**\n\t\t * The `punycode` object.\n\t\t * @name punycode\n\t\t * @type Object\n\t\t */\n\t\tvar punycode,\n\t\n\t\t/** Highest positive signed 32-bit float value */\n\t\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\t\n\t\t/** Bootstring parameters */\n\t\tbase = 36,\n\t\ttMin = 1,\n\t\ttMax = 26,\n\t\tskew = 38,\n\t\tdamp = 700,\n\t\tinitialBias = 72,\n\t\tinitialN = 128, // 0x80\n\t\tdelimiter = '-', // '\\x2D'\n\t\n\t\t/** Regular expressions */\n\t\tregexPunycode = /^xn--/,\n\t\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\t\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\t\n\t\t/** Error messages */\n\t\terrors = {\n\t\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t\t'invalid-input': 'Invalid input'\n\t\t},\n\t\n\t\t/** Convenience shortcuts */\n\t\tbaseMinusTMin = base - tMin,\n\t\tfloor = Math.floor,\n\t\tstringFromCharCode = String.fromCharCode,\n\t\n\t\t/** Temporary variable */\n\t\tkey;\n\t\n\t\t/*--------------------------------------------------------------------------*/\n\t\n\t\t/**\n\t\t * A generic error utility function.\n\t\t * @private\n\t\t * @param {String} type The error type.\n\t\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t\t */\n\t\tfunction error(type) {\n\t\t\tthrow RangeError(errors[type]);\n\t\t}\n\t\n\t\t/**\n\t\t * A generic `Array#map` utility function.\n\t\t * @private\n\t\t * @param {Array} array The array to iterate over.\n\t\t * @param {Function} callback The function that gets called for every array\n\t\t * item.\n\t\t * @returns {Array} A new array of values returned by the callback function.\n\t\t */\n\t\tfunction map(array, fn) {\n\t\t\tvar length = array.length;\n\t\t\tvar result = [];\n\t\t\twhile (length--) {\n\t\t\t\tresult[length] = fn(array[length]);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\n\t\t/**\n\t\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t\t * addresses.\n\t\t * @private\n\t\t * @param {String} domain The domain name or email address.\n\t\t * @param {Function} callback The function that gets called for every\n\t\t * character.\n\t\t * @returns {Array} A new string of characters returned by the callback\n\t\t * function.\n\t\t */\n\t\tfunction mapDomain(string, fn) {\n\t\t\tvar parts = string.split('@');\n\t\t\tvar result = '';\n\t\t\tif (parts.length > 1) {\n\t\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\t\tresult = parts[0] + '@';\n\t\t\t\tstring = parts[1];\n\t\t\t}\n\t\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\t\tvar labels = string.split('.');\n\t\t\tvar encoded = map(labels, fn).join('.');\n\t\t\treturn result + encoded;\n\t\t}\n\t\n\t\t/**\n\t\t * Creates an array containing the numeric code points of each Unicode\n\t\t * character in the string. While JavaScript uses UCS-2 internally,\n\t\t * this function will convert a pair of surrogate halves (each of which\n\t\t * UCS-2 exposes as separate characters) into a single code point,\n\t\t * matching UTF-16.\n\t\t * @see `punycode.ucs2.encode`\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode.ucs2\n\t\t * @name decode\n\t\t * @param {String} string The Unicode input string (UCS-2).\n\t\t * @returns {Array} The new array of code points.\n\t\t */\n\t\tfunction ucs2decode(string) {\n\t\t\tvar output = [],\n\t\t\t    counter = 0,\n\t\t\t    length = string.length,\n\t\t\t    value,\n\t\t\t    extra;\n\t\t\twhile (counter < length) {\n\t\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\t\toutput.push(value);\n\t\t\t\t\t\tcounter--;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\t\n\t\t/**\n\t\t * Creates a string based on an array of numeric code points.\n\t\t * @see `punycode.ucs2.decode`\n\t\t * @memberOf punycode.ucs2\n\t\t * @name encode\n\t\t * @param {Array} codePoints The array of numeric code points.\n\t\t * @returns {String} The new Unicode string (UCS-2).\n\t\t */\n\t\tfunction ucs2encode(array) {\n\t\t\treturn map(array, function(value) {\n\t\t\t\tvar output = '';\n\t\t\t\tif (value > 0xFFFF) {\n\t\t\t\t\tvalue -= 0x10000;\n\t\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t\t}\n\t\t\t\toutput += stringFromCharCode(value);\n\t\t\t\treturn output;\n\t\t\t}).join('');\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a basic code point into a digit/integer.\n\t\t * @see `digitToBasic()`\n\t\t * @private\n\t\t * @param {Number} codePoint The basic numeric code point value.\n\t\t * @returns {Number} The numeric value of a basic code point (for use in\n\t\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t\t * the code point does not represent a value.\n\t\t */\n\t\tfunction basicToDigit(codePoint) {\n\t\t\tif (codePoint - 48 < 10) {\n\t\t\t\treturn codePoint - 22;\n\t\t\t}\n\t\t\tif (codePoint - 65 < 26) {\n\t\t\t\treturn codePoint - 65;\n\t\t\t}\n\t\t\tif (codePoint - 97 < 26) {\n\t\t\t\treturn codePoint - 97;\n\t\t\t}\n\t\t\treturn base;\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a digit/integer into a basic code point.\n\t\t * @see `basicToDigit()`\n\t\t * @private\n\t\t * @param {Number} digit The numeric value of a basic code point.\n\t\t * @returns {Number} The basic code point whose value (when used for\n\t\t * representing integers) is `digit`, which needs to be in the range\n\t\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t\t * used; else, the lowercase form is used. The behavior is undefined\n\t\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t\t */\n\t\tfunction digitToBasic(digit, flag) {\n\t\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t\t// 26..35 map to ASCII 0..9\n\t\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t\t}\n\t\n\t\t/**\n\t\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t\t * @private\n\t\t */\n\t\tfunction adapt(delta, numPoints, firstTime) {\n\t\t\tvar k = 0;\n\t\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\t\tdelta += floor(delta / numPoints);\n\t\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t\t}\n\t\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t\t * symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t\t * @returns {String} The resulting string of Unicode symbols.\n\t\t */\n\t\tfunction decode(input) {\n\t\t\t// Don't use UCS-2\n\t\t\tvar output = [],\n\t\t\t    inputLength = input.length,\n\t\t\t    out,\n\t\t\t    i = 0,\n\t\t\t    n = initialN,\n\t\t\t    bias = initialBias,\n\t\t\t    basic,\n\t\t\t    j,\n\t\t\t    index,\n\t\t\t    oldi,\n\t\t\t    w,\n\t\t\t    k,\n\t\t\t    digit,\n\t\t\t    t,\n\t\t\t    /** Cached calculation results */\n\t\t\t    baseMinusT;\n\t\n\t\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t\t// the first basic code points to the output.\n\t\n\t\t\tbasic = input.lastIndexOf(delimiter);\n\t\t\tif (basic < 0) {\n\t\t\t\tbasic = 0;\n\t\t\t}\n\t\n\t\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t\t// if it's not a basic code point\n\t\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\t\terror('not-basic');\n\t\t\t\t}\n\t\t\t\toutput.push(input.charCodeAt(j));\n\t\t\t}\n\t\n\t\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t\t// points were copied; start at the beginning otherwise.\n\t\n\t\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\t\n\t\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t\t// value at the end to obtain `delta`.\n\t\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\t\n\t\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\t\terror('invalid-input');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\t\n\t\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\t\n\t\t\t\t\ti += digit * w;\n\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\n\t\t\t\t\tif (digit < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tw *= baseMinusT;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tout = output.length + 1;\n\t\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\t\n\t\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\t\n\t\t\t\tn += floor(i / out);\n\t\t\t\ti %= out;\n\t\n\t\t\t\t// Insert `n` at position `i` of the output\n\t\t\t\toutput.splice(i++, 0, n);\n\t\n\t\t\t}\n\t\n\t\t\treturn ucs2encode(output);\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t\t * Punycode string of ASCII-only symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The string of Unicode symbols.\n\t\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t\t */\n\t\tfunction encode(input) {\n\t\t\tvar n,\n\t\t\t    delta,\n\t\t\t    handledCPCount,\n\t\t\t    basicLength,\n\t\t\t    bias,\n\t\t\t    j,\n\t\t\t    m,\n\t\t\t    q,\n\t\t\t    k,\n\t\t\t    t,\n\t\t\t    currentValue,\n\t\t\t    output = [],\n\t\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t\t    inputLength,\n\t\t\t    /** Cached calculation results */\n\t\t\t    handledCPCountPlusOne,\n\t\t\t    baseMinusT,\n\t\t\t    qMinusT;\n\t\n\t\t\t// Convert the input in UCS-2 to Unicode\n\t\t\tinput = ucs2decode(input);\n\t\n\t\t\t// Cache the length\n\t\t\tinputLength = input.length;\n\t\n\t\t\t// Initialize the state\n\t\t\tn = initialN;\n\t\t\tdelta = 0;\n\t\t\tbias = initialBias;\n\t\n\t\t\t// Handle the basic code points\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue < 0x80) {\n\t\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\thandledCPCount = basicLength = output.length;\n\t\n\t\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t\t// `basicLength` is the number of basic code points.\n\t\n\t\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\t\tif (basicLength) {\n\t\t\t\toutput.push(delimiter);\n\t\t\t}\n\t\n\t\t\t// Main encoding loop:\n\t\t\twhile (handledCPCount < inputLength) {\n\t\n\t\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t\t// larger one:\n\t\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\t\tcurrentValue = input[j];\n\t\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\t\tm = currentValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t\t// but guard against overflow\n\t\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\t\n\t\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\t\tn = m;\n\t\n\t\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\t\tcurrentValue = input[j];\n\t\n\t\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\t\tdelta = 0;\n\t\t\t\t\t\t++handledCPCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t++delta;\n\t\t\t\t++n;\n\t\n\t\t\t}\n\t\t\treturn output.join('');\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a Punycode string representing a domain name or an email address\n\t\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t\t * it doesn't matter if you call it on a string that has already been\n\t\t * converted to Unicode.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycoded domain name or email address to\n\t\t * convert to Unicode.\n\t\t * @returns {String} The Unicode representation of the given Punycode\n\t\t * string.\n\t\t */\n\t\tfunction toUnicode(input) {\n\t\t\treturn mapDomain(input, function(string) {\n\t\t\t\treturn regexPunycode.test(string)\n\t\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t\t: string;\n\t\t\t});\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a Unicode string representing a domain name or an email address to\n\t\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t\t * ASCII.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The domain name or email address to convert, as a\n\t\t * Unicode string.\n\t\t * @returns {String} The Punycode representation of the given domain name or\n\t\t * email address.\n\t\t */\n\t\tfunction toASCII(input) {\n\t\t\treturn mapDomain(input, function(string) {\n\t\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t\t: string;\n\t\t\t});\n\t\t}\n\t\n\t\t/*--------------------------------------------------------------------------*/\n\t\n\t\t/** Define the public API */\n\t\tpunycode = {\n\t\t\t/**\n\t\t\t * A string representing the current Punycode.js version number.\n\t\t\t * @memberOf punycode\n\t\t\t * @type String\n\t\t\t */\n\t\t\t'version': '1.3.2',\n\t\t\t/**\n\t\t\t * An object of methods to convert from JavaScript's internal character\n\t\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t\t * @memberOf punycode\n\t\t\t * @type Object\n\t\t\t */\n\t\t\t'ucs2': {\n\t\t\t\t'decode': ucs2decode,\n\t\t\t\t'encode': ucs2encode\n\t\t\t},\n\t\t\t'decode': decode,\n\t\t\t'encode': encode,\n\t\t\t'toASCII': toASCII,\n\t\t\t'toUnicode': toUnicode\n\t\t};\n\t\n\t\t/** Expose `punycode` */\n\t\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t\t// like the following:\n\t\tif (\n\t\t\ttrue\n\t\t) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\t\treturn punycode;\n\t\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (freeExports && freeModule) {\n\t\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\t\tfreeModule.exports = punycode;\n\t\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\t\tfor (key in punycode) {\n\t\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // in Rhino or a web browser\n\t\t\troot.punycode = punycode;\n\t\t}\n\t\n\t}(this));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)(module), (function() { return this; }())))\n\n/***/ },\n\n/***/ 1924:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = {\n\t  isString: function(arg) {\n\t    return typeof(arg) === 'string';\n\t  },\n\t  isObject: function(arg) {\n\t    return typeof(arg) === 'object' && arg !== null;\n\t  },\n\t  isNull: function(arg) {\n\t    return arg === null;\n\t  },\n\t  isNullOrUndefined: function(arg) {\n\t    return arg == null;\n\t  }\n\t};\n\n\n/***/ },\n\n/***/ 1928:\n/***/ function(module, exports) {\n\n\tmodule.exports = extend\n\t\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\t\n\tfunction extend() {\n\t    var target = {}\n\t\n\t    for (var i = 0; i < arguments.length; i++) {\n\t        var source = arguments[i]\n\t\n\t        for (var key in source) {\n\t            if (hasOwnProperty.call(source, key)) {\n\t                target[key] = source[key]\n\t            }\n\t        }\n\t    }\n\t\n\t    return target\n\t}\n\n\n/***/ },\n\n/***/ 1929:\n1932,\n\n/***/ 1930:\n1932,\n\n/***/ 1931:\n1932\n\n});\n\n\n// WEBPACK FOOTER //\n// 2.2.js","var ClientRequest = require('./lib/request')\nvar extend = require('xtend')\nvar statusCodes = require('builtin-status-codes')\nvar url = require('url')\n\nvar http = exports\n\nhttp.request = function (opts, cb) {\n\tif (typeof opts === 'string')\n\t\topts = url.parse(opts)\n\telse\n\t\topts = extend(opts)\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nhttp.get = function get (opts, cb) {\n\tvar req = http.request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nhttp.Agent = function () {}\nhttp.Agent.defaultMaxSockets = 4\n\nhttp.STATUS_CODES = statusCodes\n\nhttp.METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/stream-http/index.js\n// module id = 1804\n// module chunks = 2","exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\nexports.blobConstructor = false\ntry {\n\tnew Blob([new ArrayBuffer(1)])\n\texports.blobConstructor = true\n} catch (e) {}\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr\nfunction getXHR () {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest()\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t} catch(e) {\n\t\t\txhr = null\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null\n\t}\n\treturn xhr\n}\n\nfunction checkTypeSupport (type) {\n\tvar xhr = getXHR()\n\tif (!xhr) return false\n\ttry {\n\t\txhr.responseType = type\n\t\treturn xhr.responseType === type\n\t} catch (e) {}\n\treturn false\n}\n\n// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&\n\tcheckTypeSupport('moz-chunked-arraybuffer')\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\nexports.vbArray = isFunction(global.VBArray)\n\nfunction isFunction (value) {\n\treturn typeof value === 'function'\n}\n\nxhr = null // Help gc\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/stream-http/lib/capability.js\n// module id = 1805\n// module chunks = 2","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/url/url.js\n// module id = 1806\n// module chunks = 2","module.exports = {\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"200\": \"OK\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Payload Too Large\",\n  \"414\": \"URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Range Not Satisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Unordered Collection\",\n  \"426\": \"Upgrade Required\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/builtin-status-codes/browser.js\n// module id = 1818\n// module chunks = 2","/* build: `node build.js modules=ALL exclude=json,gestures minifier=uglifyjs` */\n/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\n\nvar fabric = fabric || { version: \"1.6.0-rc.1\" };\nif (typeof exports !== 'undefined') {\n  exports.fabric = fabric;\n}\n\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  fabric.document = document;\n  fabric.window = window;\n  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\n  window.fabric = fabric;\n}\nelse {\n  // assume we're running under node.js when document/window are not present\n  fabric.document = require(\"jsdom\")\n    .jsdom(\"<!DOCTYPE html><html><head></head><body></body></html>\");\n\n  if (fabric.document.createWindow) {\n    fabric.window = fabric.document.createWindow();\n  } else {\n    fabric.window = fabric.document.parentWindow;\n  }\n}\n\n/**\n * True when in environment that supports touch events\n * @type boolean\n */\nfabric.isTouchSupported = \"ontouchstart\" in fabric.document.documentElement;\n\n/**\n * True when in environment that's probably Node.js\n * @type boolean\n */\nfabric.isLikelyNode = typeof Buffer !== 'undefined' &&\n                      typeof window === 'undefined';\n\n/* _FROM_SVG_START_ */\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nfabric.SHARED_ATTRIBUTES = [\n  \"display\",\n  \"transform\",\n  \"fill\", \"fill-opacity\", \"fill-rule\",\n  \"opacity\",\n  \"stroke\", \"stroke-dasharray\", \"stroke-linecap\",\n  \"stroke-linejoin\", \"stroke-miterlimit\",\n  \"stroke-opacity\", \"stroke-width\",\n  \"id\"\n];\n/* _FROM_SVG_END_ */\n\n/**\n * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n */\nfabric.DPI = 96;\nfabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)';\n\n\n/**\n * Device Pixel Ratio\n * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n */\nfabric.devicePixelRatio = fabric.window.devicePixelRatio ||\n                          fabric.window.webkitDevicePixelRatio ||\n                          fabric.window.mozDevicePixelRatio ||\n                          1;\n\n\n(function() {\n\n  /**\n   * @private\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  function _removeEventListener(eventName, handler) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      fabric.util.removeFromArray(this.__eventListeners[eventName], handler);\n    }\n    else {\n      this.__eventListeners[eventName].length = 0;\n    }\n  }\n\n  /**\n   * Observes specified event\n   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\n   * @memberOf fabric.Observable\n   * @alias on\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function observe(eventName, handler) {\n    if (!this.__eventListeners) {\n      this.__eventListeners = { };\n    }\n    // one object with key/value pairs was passed\n    if (arguments.length === 1) {\n      for (var prop in eventName) {\n        this.on(prop, eventName[prop]);\n      }\n    }\n    else {\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [ ];\n      }\n      this.__eventListeners[eventName].push(handler);\n    }\n    return this;\n  }\n\n  /**\n   * Stops event observing for a particular event handler. Calling this method\n   * without arguments removes all handlers for all events\n   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\n   * @memberOf fabric.Observable\n   * @alias off\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function to be deleted from EventListeners\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function stopObserving(eventName, handler) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (arguments.length === 0) {\n      this.__eventListeners = { };\n    }\n    // one object with key/value pairs was passed\n    else if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      for (var prop in eventName) {\n        _removeEventListener.call(this, prop, eventName[prop]);\n      }\n    }\n    else {\n      _removeEventListener.call(this, eventName, handler);\n    }\n    return this;\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\n   * @memberOf fabric.Observable\n   * @alias trigger\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function fire(eventName, options) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    var listenersForEvent = this.__eventListeners[eventName];\n    if (!listenersForEvent) {\n      return;\n    }\n\n    for (var i = 0, len = listenersForEvent.length; i < len; i++) {\n      // avoiding try/catch for perf. reasons\n      listenersForEvent[i].call(this, options || { });\n    }\n    return this;\n  }\n\n  /**\n   * @namespace fabric.Observable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#events}\n   * @see {@link http://fabricjs.com/events/|Events demo}\n   */\n  fabric.Observable = {\n    observe: observe,\n    stopObserving: stopObserving,\n    fire: fire,\n\n    on: observe,\n    off: stopObserving,\n    trigger: fire\n  };\n})();\n\n\n/**\n * @namespace fabric.Collection\n */\nfabric.Collection = {\n\n  /**\n   * Adds objects to collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * Objects should be instances of (or inherit from) fabric.Object\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   */\n  add: function () {\n    this._objects.push.apply(this._objects, arguments);\n    for (var i = 0, length = arguments.length; i < length; i++) {\n      this._onObjectAdded(arguments[i]);\n    }\n    this.renderOnAddRemove && this.renderAll();\n    return this;\n  },\n\n  /**\n   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * An object should be an instance of (or inherit from) fabric.Object\n   * @param {Object} object Object to insert\n   * @param {Number} index Index to insert object at\n   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  insertAt: function (object, index, nonSplicing) {\n    var objects = this.getObjects();\n    if (nonSplicing) {\n      objects[index] = object;\n    }\n    else {\n      objects.splice(index, 0, object);\n    }\n    this._onObjectAdded(object);\n    this.renderOnAddRemove && this.renderAll();\n    return this;\n  },\n\n  /**\n   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */\n  remove: function() {\n    var objects = this.getObjects(),\n        index;\n\n    for (var i = 0, length = arguments.length; i < length; i++) {\n      index = objects.indexOf(arguments[i]);\n\n      // only call onObjectRemoved if an object was actually removed\n      if (index !== -1) {\n        objects.splice(index, 1);\n        this._onObjectRemoved(arguments[i]);\n      }\n    }\n\n    this.renderOnAddRemove && this.renderAll();\n    return this;\n  },\n\n  /**\n   * Executes given function for each object in this group\n   * @param {Function} callback\n   *                   Callback invoked with current object as first argument,\n   *                   index - as second and an array of all objects - as third.\n   *                   Iteration happens in reverse order (for performance reasons).\n   *                   Callback is invoked in a context of Global Object (e.g. `window`)\n   *                   when no `context` argument is given\n   *\n   * @param {Object} context Context (aka thisObject)\n   * @return {Self} thisArg\n   */\n  forEachObject: function(callback, context) {\n    var objects = this.getObjects(),\n        i = objects.length;\n    while (i--) {\n      callback.call(context, objects[i], i, objects);\n    }\n    return this;\n  },\n\n  /**\n   * Returns an array of children objects of this instance\n   * Type parameter introduced in 1.3.10\n   * @param {String} [type] When specified, only objects of this type are returned\n   * @return {Array}\n   */\n  getObjects: function(type) {\n    if (typeof type === 'undefined') {\n      return this._objects;\n    }\n    return this._objects.filter(function(o) {\n      return o.type === type;\n    });\n  },\n\n  /**\n   * Returns object at specified index\n   * @param {Number} index\n   * @return {Self} thisArg\n   */\n  item: function (index) {\n    return this.getObjects()[index];\n  },\n\n  /**\n   * Returns true if collection contains no objects\n   * @return {Boolean} true if collection is empty\n   */\n  isEmpty: function () {\n    return this.getObjects().length === 0;\n  },\n\n  /**\n   * Returns a size of a collection (i.e: length of an array containing its objects)\n   * @return {Number} Collection size\n   */\n  size: function() {\n    return this.getObjects().length;\n  },\n\n  /**\n   * Returns true if collection contains an object\n   * @param {Object} object Object to check against\n   * @return {Boolean} `true` if collection contains an object\n   */\n  contains: function(object) {\n    return this.getObjects().indexOf(object) > -1;\n  },\n\n  /**\n   * Returns number representation of a collection complexity\n   * @return {Number} complexity\n   */\n  complexity: function () {\n    return this.getObjects().reduce(function (memo, current) {\n      memo += current.complexity ? current.complexity() : 0;\n      return memo;\n    }, 0);\n  }\n};\n\n\n(function(global) {\n\n  var sqrt = Math.sqrt,\n      atan2 = Math.atan2,\n      PiBy180 = Math.PI / 180;\n\n  /**\n   * @namespace fabric.util\n   */\n  fabric.util = {\n\n    /**\n     * Removes value from an array.\n     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} array\n     * @param {Any} value\n     * @return {Array} original array\n     */\n    removeFromArray: function(array, value) {\n      var idx = array.indexOf(value);\n      if (idx !== -1) {\n        array.splice(idx, 1);\n      }\n      return array;\n    },\n\n    /**\n     * Returns random number between 2 specified ones.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} min lower limit\n     * @param {Number} max upper limit\n     * @return {Number} random value (between min and max)\n     */\n    getRandomInt: function(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\n     * Transforms degrees to radians.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} degrees value in degrees\n     * @return {Number} value in radians\n     */\n    degreesToRadians: function(degrees) {\n      return degrees * PiBy180;\n    },\n\n    /**\n     * Transforms radians to degrees.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} radians value in radians\n     * @return {Number} value in degrees\n     */\n    radiansToDegrees: function(radians) {\n      return radians / PiBy180;\n    },\n\n    /**\n     * Rotates `point` around `origin` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {fabric.Point} point The point to rotate\n     * @param {fabric.Point} origin The origin of the rotation\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {fabric.Point} The new rotated point\n     */\n    rotatePoint: function(point, origin, radians) {\n      point.subtractEquals(origin);\n      var sin = Math.sin(radians),\n          cos = Math.cos(radians),\n          rx = point.x * cos - point.y * sin,\n          ry = point.x * sin + point.y * cos;\n      return new fabric.Point(rx, ry).addEquals(origin);\n    },\n\n    /**\n     * Apply transform t to point p\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Point} p The point to transform\n     * @param  {Array} t The transform\n     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n     * @return {fabric.Point} The transformed point\n     */\n    transformPoint: function(p, t, ignoreOffset) {\n      if (ignoreOffset) {\n        return new fabric.Point(\n          t[0] * p.x + t[2] * p.y,\n          t[1] * p.x + t[3] * p.y\n        );\n      }\n      return new fabric.Point(\n        t[0] * p.x + t[2] * p.y + t[4],\n        t[1] * p.x + t[3] * p.y + t[5]\n      );\n    },\n\n    /**\n     * Invert transformation t\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} t The transform\n     * @return {Array} The inverted transform\n     */\n    invertTransform: function(t) {\n      var a = 1 / (t[0] * t[3] - t[1] * t[2]),\n          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\n          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\n      r[4] = -o.x;\n      r[5] = -o.y;\n      return r;\n    },\n\n    /**\n     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number|String} number number to operate on\n     * @param {Number} fractionDigits number of fraction digits to \"leave\"\n     * @return {Number}\n     */\n    toFixed: function(number, fractionDigits) {\n      return parseFloat(Number(number).toFixed(fractionDigits));\n    },\n\n    /**\n     * Converts from attribute value to pixel value if applicable.\n     * Returns converted pixels or original value not converted.\n     * @param {Number|String} value number to operate on\n     * @return {Number|String}\n     */\n    parseUnit: function(value, fontSize) {\n      var unit = /\\D{0,2}$/.exec(value),\n          number = parseFloat(value);\n      if (!fontSize) {\n        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n      }\n      switch (unit[0]) {\n        case 'mm':\n          return number * fabric.DPI / 25.4;\n\n        case 'cm':\n          return number * fabric.DPI / 2.54;\n\n        case 'in':\n          return number * fabric.DPI;\n\n        case 'pt':\n          return number * fabric.DPI / 72; // or * 4 / 3\n\n        case 'pc':\n          return number * fabric.DPI / 72 * 12; // or * 16\n\n        case 'em':\n          return number * fontSize;\n\n        default:\n          return number;\n      }\n    },\n\n    /**\n     * Function which always returns `false`.\n     * @static\n     * @memberOf fabric.util\n     * @return {Boolean}\n     */\n    falseFunction: function() {\n      return false;\n    },\n\n    /**\n     * Returns klass \"Class\" object of given namespace\n     * @memberOf fabric.util\n     * @param {String} type Type of object (eg. 'circle')\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @return {Object} klass \"Class\"\n     */\n    getKlass: function(type, namespace) {\n      // capitalize first letter only\n      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n      return fabric.util.resolveNamespace(namespace)[type];\n    },\n\n    /**\n     * Returns object of given namespace\n     * @memberOf fabric.util\n     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n     * @return {Object} Object for given namespace (default fabric)\n     */\n    resolveNamespace: function(namespace) {\n      if (!namespace) {\n        return fabric;\n      }\n\n      var parts = namespace.split('.'),\n          len = parts.length,\n          obj = global || fabric.window;\n\n      for (var i = 0; i < len; ++i) {\n        obj = obj[parts[i]];\n      }\n\n      return obj;\n    },\n\n    /**\n     * Loads image element from given url and passes it to a callback\n     * @memberOf fabric.util\n     * @param {String} url URL representing an image\n     * @param {Function} callback Callback; invoked with loaded image\n     * @param {Any} [context] Context to invoke callback in\n     * @param {Object} [crossOrigin] crossOrigin value to set image element to\n     */\n    loadImage: function(url, callback, context, crossOrigin) {\n      if (!url) {\n        callback && callback.call(context, url);\n        return;\n      }\n\n      var img = fabric.util.createImage();\n\n      /** @ignore */\n      img.onload = function () {\n        callback && callback.call(context, img);\n        img = img.onload = img.onerror = null;\n      };\n\n      /** @ignore */\n      img.onerror = function() {\n        fabric.log('Error loading ' + img.src);\n        callback && callback.call(context, null, true);\n        img = img.onload = img.onerror = null;\n      };\n\n      // data-urls appear to be buggy with crossOrigin\n      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n      // see https://code.google.com/p/chromium/issues/detail?id=315152\n      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n      if (url.indexOf('data') !== 0 && typeof crossOrigin !== 'undefined') {\n        img.crossOrigin = crossOrigin;\n      }\n\n      img.src = url;\n    },\n\n    /**\n     * Creates corresponding fabric instances from their object representations\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} objects Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @param {Function} reviver Method for further parsing of object elements,\n     * called after each fabric object created.\n     */\n    enlivenObjects: function(objects, callback, namespace, reviver) {\n      objects = objects || [ ];\n\n      function onLoaded() {\n        if (++numLoadedObjects === numTotalObjects) {\n          callback && callback(enlivenedObjects);\n        }\n      }\n\n      var enlivenedObjects = [ ],\n          numLoadedObjects = 0,\n          numTotalObjects = objects.length;\n\n      if (!numTotalObjects) {\n        callback && callback(enlivenedObjects);\n        return;\n      }\n\n      objects.forEach(function (o, index) {\n        // if sparse array\n        if (!o || !o.type) {\n          onLoaded();\n          return;\n        }\n        var klass = fabric.util.getKlass(o.type, namespace);\n        if (klass.async) {\n          klass.fromObject(o, function (obj, error) {\n            if (!error) {\n              enlivenedObjects[index] = obj;\n              reviver && reviver(o, enlivenedObjects[index]);\n            }\n            onLoaded();\n          });\n        }\n        else {\n          enlivenedObjects[index] = klass.fromObject(o);\n          reviver && reviver(o, enlivenedObjects[index]);\n          onLoaded();\n        }\n      });\n    },\n\n    /**\n     * Groups SVG elements (usually those retrieved from SVG document)\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} elements SVG elements to group\n     * @param {Object} [options] Options object\n     * @return {fabric.Object|fabric.PathGroup}\n     */\n    groupSVGElements: function(elements, options, path) {\n      var object;\n\n      object = new fabric.PathGroup(elements, options);\n\n      if (typeof path !== 'undefined') {\n        object.setSourcePath(path);\n      }\n      return object;\n    },\n\n    /**\n     * Populates an object with properties of another object\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} source Source object\n     * @param {Object} destination Destination object\n     * @return {Array} properties Propertie names to include\n     */\n    populateWithProperties: function(source, destination, properties) {\n      if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\n        for (var i = 0, len = properties.length; i < len; i++) {\n          if (properties[i] in source) {\n            destination[properties[i]] = source[properties[i]];\n          }\n        }\n      }\n    },\n\n    /**\n     * Draws a dashed line between two points\n     *\n     * This method is used to draw dashed line around selection area.\n     * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\n     *\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x  start x coordinate\n     * @param {Number} y start y coordinate\n     * @param {Number} x2 end x coordinate\n     * @param {Number} y2 end y coordinate\n     * @param {Array} da dash array pattern\n     */\n    drawDashedLine: function(ctx, x, y, x2, y2, da) {\n      var dx = x2 - x,\n          dy = y2 - y,\n          len = sqrt(dx * dx + dy * dy),\n          rot = atan2(dy, dx),\n          dc = da.length,\n          di = 0,\n          draw = true;\n\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.moveTo(0, 0);\n      ctx.rotate(rot);\n\n      x = 0;\n      while (len > x) {\n        x += da[di++ % dc];\n        if (x > len) {\n          x = len;\n        }\n        ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\n        draw = !draw;\n      }\n\n      ctx.restore();\n    },\n\n    /**\n     * Creates canvas element and initializes it via excanvas if necessary\n     * @static\n     * @memberOf fabric.util\n     * @param {CanvasElement} [canvasEl] optional canvas element to initialize;\n     * when not given, element is created implicitly\n     * @return {CanvasElement} initialized canvas element\n     */\n    createCanvasElement: function(canvasEl) {\n      canvasEl || (canvasEl = fabric.document.createElement('canvas'));\n      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n      if (!canvasEl.getContext && typeof G_vmlCanvasManager !== 'undefined') {\n        G_vmlCanvasManager.initElement(canvasEl);\n      }\n      //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n      return canvasEl;\n    },\n\n    /**\n     * Creates image element (works on client and node)\n     * @static\n     * @memberOf fabric.util\n     * @return {HTMLImageElement} HTML image element\n     */\n    createImage: function() {\n      return fabric.isLikelyNode\n        ? new (require('canvas').Image)()\n        : fabric.document.createElement('img');\n    },\n\n    /**\n     * Creates accessors (getXXX, setXXX) for a \"class\", based on \"stateProperties\" array\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} klass \"Class\" to create accessors for\n     */\n    createAccessors: function(klass) {\n      var proto = klass.prototype;\n\n      for (var i = proto.stateProperties.length; i--; ) {\n\n        var propName = proto.stateProperties[i],\n            capitalizedPropName = propName.charAt(0).toUpperCase() + propName.slice(1),\n            setterName = 'set' + capitalizedPropName,\n            getterName = 'get' + capitalizedPropName;\n\n        // using `new Function` for better introspection\n        if (!proto[getterName]) {\n          proto[getterName] = (function(property) {\n            return new Function('return this.get(\"' + property + '\")');\n          })(propName);\n        }\n        if (!proto[setterName]) {\n          proto[setterName] = (function(property) {\n            return new Function('value', 'return this.set(\"' + property + '\", value)');\n          })(propName);\n        }\n      }\n    },\n\n    /**\n     * @static\n     * @memberOf fabric.util\n     * @param {fabric.Object} receiver Object implementing `clipTo` method\n     * @param {CanvasRenderingContext2D} ctx Context to clip\n     */\n    clipContext: function(receiver, ctx) {\n      ctx.save();\n      ctx.beginPath();\n      receiver.clipTo(ctx);\n      ctx.clip();\n    },\n\n    /**\n     * Multiply matrix A by matrix B to nest transformations\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a First transformMatrix\n     * @param  {Array} b Second transformMatrix\n     * @return {Array} The product of the two transform matrices\n     */\n    multiplyTransformMatrices: function(a, b) {\n      // Matrix multiply a * b\n      return [\n        a[0] * b[0] + a[2] * b[1],\n        a[1] * b[0] + a[3] * b[1],\n        a[0] * b[2] + a[2] * b[3],\n        a[1] * b[2] + a[3] * b[3],\n        a[0] * b[4] + a[2] * b[5] + a[4],\n        a[1] * b[4] + a[3] * b[5] + a[5]\n      ];\n    },\n\n    /**\n     * Returns string representation of function body\n     * @param {Function} fn Function to get body of\n     * @return {String} Function body\n     */\n    getFunctionBody: function(fn) {\n      return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\n    },\n\n    /**\n     * Returns true if context has transparent pixel\n     * at specified location (taking tolerance into account)\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x x coordinate\n     * @param {Number} y y coordinate\n     * @param {Number} tolerance Tolerance\n     */\n    isTransparent: function(ctx, x, y, tolerance) {\n\n      // If tolerance is > 0 adjust start coords to take into account.\n      // If moves off Canvas fix to 0\n      if (tolerance > 0) {\n        if (x > tolerance) {\n          x -= tolerance;\n        }\n        else {\n          x = 0;\n        }\n        if (y > tolerance) {\n          y -= tolerance;\n        }\n        else {\n          y = 0;\n        }\n      }\n\n      var _isTransparent = true,\n          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1);\n\n      // Split image data - for tolerance > 1, pixelDataSize = 4;\n      for (var i = 3, l = imageData.data.length; i < l; i += 4) {\n        var temp = imageData.data[i];\n        _isTransparent = temp <= 0;\n        if (_isTransparent === false) {\n          break; // Stop if colour found\n        }\n      }\n\n      imageData = null;\n\n      return _isTransparent;\n    }\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var arcToSegmentsCache = { },\n      segmentToBezierCache = { },\n      boundsOfCurveCache = { },\n      _join = Array.prototype.join;\n\n  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n   * http://mozilla.org/MPL/2.0/\n   */\n  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n    var argsString = _join.call(arguments);\n    if (arcToSegmentsCache[argsString]) {\n      return arcToSegmentsCache[argsString];\n    }\n\n    var PI = Math.PI, th = rotateX * PI / 180,\n        sinTh = Math.sin(th),\n        cosTh = Math.cos(th),\n        fromX = 0, fromY = 0;\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\n        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\n        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\n        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\n        root = 0;\n\n    if (pl < 0) {\n      var s = Math.sqrt(1 - pl/(rx2 * ry2));\n      rx *= s;\n      ry *= s;\n    }\n    else {\n      root = (large === sweep ? -1.0 : 1.0) *\n              Math.sqrt( pl /(rx2 * py2 + ry2 * px2));\n    }\n\n    var cx = root * rx * py / ry,\n        cy = -root * ry * px / rx,\n        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\n        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\n        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\n        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n\n    if (sweep === 0 && dtheta > 0) {\n      dtheta -= 2 * PI;\n    }\n    else if (sweep === 1 && dtheta < 0) {\n      dtheta += 2 * PI;\n    }\n\n    // Convert into cubic bezier segments <= 90deg\n    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\n        result = [], mDelta = dtheta / segments,\n        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\n        th3 = mTheta + mDelta;\n\n    for (var i = 0; i < segments; i++) {\n      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n      fromX = result[i][4];\n      fromY = result[i][5];\n      mTheta = th3;\n      th3 += mDelta;\n    }\n    arcToSegmentsCache[argsString] = result;\n    return result;\n  }\n\n  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n    var argsString2 = _join.call(arguments);\n    if (segmentToBezierCache[argsString2]) {\n      return segmentToBezierCache[argsString2];\n    }\n\n    var costh2 = Math.cos(th2),\n        sinth2 = Math.sin(th2),\n        costh3 = Math.cos(th3),\n        sinth3 = Math.sin(th3),\n        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\n        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\n        cp1X = fromX + mT * ( - cosTh * rx * sinth2 - sinTh * ry * costh2),\n        cp1Y = fromY + mT * ( - sinTh * rx * sinth2 + cosTh * ry * costh2),\n        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\n        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\n\n    segmentToBezierCache[argsString2] = [\n      cp1X, cp1Y,\n      cp2X, cp2Y,\n      toX, toY\n    ];\n    return segmentToBezierCache[argsString2];\n  }\n\n  /*\n   * Private\n   */\n  function calcVectorAngle(ux, uy, vx, vy) {\n    var ta = Math.atan2(uy, ux),\n        tb = Math.atan2(vy, vx);\n    if (tb >= ta) {\n      return tb - ta;\n    }\n    else {\n      return 2 * Math.PI - (ta - tb);\n    }\n  }\n\n  /**\n   * Draws arc\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Number} fx\n   * @param {Number} fy\n   * @param {Array} coords\n   */\n  fabric.util.drawArc = function(ctx, fx, fy, coords) {\n    var rx = coords[0],\n        ry = coords[1],\n        rot = coords[2],\n        large = coords[3],\n        sweep = coords[4],\n        tx = coords[5],\n        ty = coords[6],\n        segs = [[ ], [ ], [ ], [ ]],\n        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n    for (var i = 0, len = segsNorm.length; i < len; i++) {\n      segs[i][0] = segsNorm[i][0] + fx;\n      segs[i][1] = segsNorm[i][1] + fy;\n      segs[i][2] = segsNorm[i][2] + fx;\n      segs[i][3] = segsNorm[i][3] + fy;\n      segs[i][4] = segsNorm[i][4] + fx;\n      segs[i][5] = segsNorm[i][5] + fy;\n      ctx.bezierCurveTo.apply(ctx, segs[i]);\n    }\n  };\n\n  /**\n   * Calculate bounding box of a elliptic-arc\n   * @param {Number} fx start point of arc\n   * @param {Number} fy\n   * @param {Number} rx horizontal radius\n   * @param {Number} ry vertical radius\n   * @param {Number} rot angle of horizontal axe\n   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\n   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\n   * @param {Number} tx end point of arc\n   * @param {Number} ty\n   */\n  fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\n\n    var fromX = 0, fromY = 0, bound = [ ], bounds = [ ],\n    segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot),\n    boundCopy = [[ ], [ ]];\n\n    for (var i = 0, len = segs.length; i < len; i++) {\n      bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\n      boundCopy[0].x = bound[0].x + fx;\n      boundCopy[0].y = bound[0].y + fy;\n      boundCopy[1].x = bound[1].x + fx;\n      boundCopy[1].y = bound[1].y + fy;\n      bounds.push(boundCopy[0]);\n      bounds.push(boundCopy[1]);\n      fromX = segs[i][4];\n      fromY = segs[i][5];\n    }\n    return bounds;\n  };\n\n  /**\n   * Calculate bounding box of a beziercurve\n   * @param {Number} x0 starting point\n   * @param {Number} y0\n   * @param {Number} x1 first control point\n   * @param {Number} y1\n   * @param {Number} x2 secondo control point\n   * @param {Number} y2\n   * @param {Number} x3 end of beizer\n   * @param {Number} y3\n   */\n  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var argsString = _join.call(arguments);\n    if (boundsOfCurveCache[argsString]) {\n      return boundsOfCurveCache[argsString];\n    }\n\n    var sqrt = Math.sqrt,\n        min = Math.min, max = Math.max,\n        abs = Math.abs, tvalues = [ ],\n        bounds = [[ ], [ ]],\n        a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n    b = 6 * x0 - 12 * x1 + 6 * x2;\n    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n    c = 3 * x1 - 3 * x0;\n\n    for (var i = 0; i < 2; ++i) {\n      if (i > 0) {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n\n      if (abs(a) < 1e-12) {\n        if (abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      if (b2ac < 0) {\n        continue;\n      }\n      sqrtb2ac = sqrt(b2ac);\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    var x, y, j = tvalues.length, jlen = j, mt;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n      bounds[0][j] = x;\n\n      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n      bounds[1][j] = y;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    var result = [\n      {\n        x: min.apply(null, bounds[0]),\n        y: min.apply(null, bounds[1])\n      },\n      {\n        x: max.apply(null, bounds[0]),\n        y: max.apply(null, bounds[1])\n      }\n    ];\n    boundsOfCurveCache[argsString] = result;\n    return result;\n  }\n\n  fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n\n})();\n\n\n(function() {\n\n  var slice = Array.prototype.slice;\n\n  /* _ES5_COMPAT_START_ */\n\n  if (!Array.prototype.indexOf) {\n    /**\n     * Finds index of an element in an array\n     * @param {Any} searchElement\n     * @param {Number} [fromIndex]\n     * @return {Number}\n     */\n    Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n      if (this === void 0 || this === null) {\n        throw new TypeError();\n      }\n      var t = Object(this), len = t.length >>> 0;\n      if (len === 0) {\n        return -1;\n      }\n      var n = 0;\n      if (arguments.length > 0) {\n        n = Number(arguments[1]);\n        if (n !== n) { // shortcut for verifying if it's NaN\n          n = 0;\n        }\n        else if (n !== 0 && n !== Number.POSITIVE_INFINITY && n !== Number.NEGATIVE_INFINITY) {\n          n = (n > 0 || -1) * Math.floor(Math.abs(n));\n        }\n      }\n      if (n >= len) {\n        return -1;\n      }\n      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n      for (; k < len; k++) {\n        if (k in t && t[k] === searchElement) {\n          return k;\n        }\n      }\n      return -1;\n    };\n  }\n\n  if (!Array.prototype.forEach) {\n    /**\n     * Iterates an array, invoking callback for each element\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Array}\n     */\n    Array.prototype.forEach = function(fn, context) {\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this) {\n          fn.call(context, this[i], i, this);\n        }\n      }\n    };\n  }\n\n  if (!Array.prototype.map) {\n    /**\n     * Returns a result of iterating over an array, invoking callback for each element\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Array}\n     */\n    Array.prototype.map = function(fn, context) {\n      var result = [ ];\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this) {\n          result[i] = fn.call(context, this[i], i, this);\n        }\n      }\n      return result;\n    };\n  }\n\n  if (!Array.prototype.every) {\n    /**\n     * Returns true if a callback returns truthy value for all elements in an array\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Boolean}\n     */\n    Array.prototype.every = function(fn, context) {\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this && !fn.call(context, this[i], i, this)) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n\n  if (!Array.prototype.some) {\n    /**\n     * Returns true if a callback returns truthy value for at least one element in an array\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Boolean}\n     */\n    Array.prototype.some = function(fn, context) {\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this && fn.call(context, this[i], i, this)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n\n  if (!Array.prototype.filter) {\n    /**\n     * Returns the result of iterating over elements in an array\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Array}\n     */\n    Array.prototype.filter = function(fn, context) {\n      var result = [ ], val;\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this) {\n          val = this[i]; // in case fn mutates this\n          if (fn.call(context, val, i, this)) {\n            result.push(val);\n          }\n        }\n      }\n      return result;\n    };\n  }\n\n  if (!Array.prototype.reduce) {\n    /**\n     * Returns \"folded\" (reduced) result of iterating over elements in an array\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [initial] Object to use as the first argument to the first call of the callback\n     * @return {Any}\n     */\n    Array.prototype.reduce = function(fn /*, initial*/) {\n      var len = this.length >>> 0,\n          i = 0,\n          rv;\n\n      if (arguments.length > 1) {\n        rv = arguments[1];\n      }\n      else {\n        do {\n          if (i in this) {\n            rv = this[i++];\n            break;\n          }\n          // if array contains no values, no initial value to return\n          if (++i >= len) {\n            throw new TypeError();\n          }\n        }\n        while (true);\n      }\n      for (; i < len; i++) {\n        if (i in this) {\n          rv = fn.call(null, rv, this[i], i, this);\n        }\n      }\n      return rv;\n    };\n  }\n\n  /* _ES5_COMPAT_END_ */\n\n  /**\n   * Invokes method on all items in a given array\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} method Name of a method to invoke\n   * @return {Array}\n   */\n  function invoke(array, method) {\n    var args = slice.call(arguments, 2), result = [ ];\n    for (var i = 0, len = array.length; i < len; i++) {\n      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n    }\n    return result;\n  }\n\n  /**\n   * Finds maximum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {Any}\n   */\n  function max(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 >= value2;\n    });\n  }\n\n  /**\n   * Finds minimum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {Any}\n   */\n  function min(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 < value2;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function find(array, byProperty, condition) {\n    if (!array || array.length === 0) {\n      return;\n    }\n\n    var i = array.length - 1,\n        result = byProperty ? array[i][byProperty] : array[i];\n    if (byProperty) {\n      while (i--) {\n        if (condition(array[i][byProperty], result)) {\n          result = array[i][byProperty];\n        }\n      }\n    }\n    else {\n      while (i--) {\n        if (condition(array[i], result)) {\n          result = array[i];\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @namespace fabric.util.array\n   */\n  fabric.util.array = {\n    invoke: invoke,\n    min: min,\n    max: max\n  };\n\n})();\n\n\n(function() {\n\n  /**\n   * Copies all enumerable properties of one object to another\n   * @memberOf fabric.util.object\n   * @param {Object} destination Where to copy to\n   * @param {Object} source Where to copy from\n   * @return {Object}\n   */\n  function extend(destination, source) {\n    // JScript DontEnum bug is not taken care of\n    for (var property in source) {\n      destination[property] = source[property];\n    }\n    return destination;\n  }\n\n  /**\n   * Creates an empty object and copies all enumerable properties of another object to it\n   * @memberOf fabric.util.object\n   * @param {Object} object Object to clone\n   * @return {Object}\n   */\n  function clone(object) {\n    return extend({ }, object);\n  }\n\n  /** @namespace fabric.util.object */\n  fabric.util.object = {\n    extend: extend,\n    clone: clone\n  };\n\n})();\n\n\n(function() {\n\n  /* _ES5_COMPAT_START_ */\n  if (!String.prototype.trim) {\n    /**\n     * Trims a string (removing whitespace from the beginning and the end)\n     * @function external:String#trim\n     * @see <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/Trim\">String#trim on MDN</a>\n     */\n    String.prototype.trim = function () {\n      // this trim is not fully ES3 or ES5 compliant, but it should cover most cases for now\n      return this.replace(/^[\\s\\xA0]+/, '').replace(/[\\s\\xA0]+$/, '');\n    };\n  }\n  /* _ES5_COMPAT_END_ */\n\n  /**\n   * Camelizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to camelize\n   * @return {String} Camelized version of a string\n   */\n  function camelize(string) {\n    return string.replace(/-+(.)?/g, function(match, character) {\n      return character ? character.toUpperCase() : '';\n    });\n  }\n\n  /**\n   * Capitalizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to capitalize\n   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n   * and other letters stay untouched, if false first letter is capitalized\n   * and other letters are converted to lowercase.\n   * @return {String} Capitalized version of a string\n   */\n  function capitalize(string, firstLetterOnly) {\n    return string.charAt(0).toUpperCase() +\n      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n  }\n\n  /**\n   * Escapes XML in a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to escape\n   * @return {String} Escaped version of a string\n   */\n  function escapeXml(string) {\n    return string.replace(/&/g, '&amp;')\n       .replace(/\"/g, '&quot;')\n       .replace(/'/g, '&apos;')\n       .replace(/</g, '&lt;')\n       .replace(/>/g, '&gt;');\n  }\n\n  /**\n   * String utilities\n   * @namespace fabric.util.string\n   */\n  fabric.util.string = {\n    camelize: camelize,\n    capitalize: capitalize,\n    escapeXml: escapeXml\n  };\n}());\n\n\n/* _ES5_COMPAT_START_ */\n(function() {\n\n  var slice = Array.prototype.slice,\n      apply = Function.prototype.apply,\n      Dummy = function() { };\n\n  if (!Function.prototype.bind) {\n    /**\n     * Cross-browser approximation of ES5 Function.prototype.bind (not fully spec conforming)\n     * @see <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\">Function#bind on MDN</a>\n     * @param {Object} thisArg Object to bind function to\n     * @param {Any[]} [...] Values to pass to a bound function\n     * @return {Function}\n     */\n    Function.prototype.bind = function(thisArg) {\n      var _this = this, args = slice.call(arguments, 1), bound;\n      if (args.length) {\n        bound = function() {\n          return apply.call(_this, this instanceof Dummy ? this : thisArg, args.concat(slice.call(arguments)));\n        };\n      }\n      else {\n        /** @ignore */\n        bound = function() {\n          return apply.call(_this, this instanceof Dummy ? this : thisArg, arguments);\n        };\n      }\n      Dummy.prototype = this.prototype;\n      bound.prototype = new Dummy();\n\n      return bound;\n    };\n  }\n\n})();\n/* _ES5_COMPAT_END_ */\n\n\n(function() {\n\n  var slice = Array.prototype.slice, emptyFunction = function() { },\n\n      IS_DONTENUM_BUGGY = (function() {\n        for (var p in { toString: 1 }) {\n          if (p === 'toString') {\n            return false;\n          }\n        }\n        return true;\n      })(),\n\n      /** @ignore */\n      addMethods = function(klass, source, parent) {\n        for (var property in source) {\n\n          if (property in klass.prototype &&\n              typeof klass.prototype[property] === 'function' &&\n              (source[property] + '').indexOf('callSuper') > -1) {\n\n            klass.prototype[property] = (function(property) {\n              return function() {\n\n                var superclass = this.constructor.superclass;\n                this.constructor.superclass = parent;\n                var returnValue = source[property].apply(this, arguments);\n                this.constructor.superclass = superclass;\n\n                if (property !== 'initialize') {\n                  return returnValue;\n                }\n              };\n            })(property);\n          }\n          else {\n            klass.prototype[property] = source[property];\n          }\n\n          if (IS_DONTENUM_BUGGY) {\n            if (source.toString !== Object.prototype.toString) {\n              klass.prototype.toString = source.toString;\n            }\n            if (source.valueOf !== Object.prototype.valueOf) {\n              klass.prototype.valueOf = source.valueOf;\n            }\n          }\n        }\n      };\n\n  function Subclass() { }\n\n  function callSuper(methodName) {\n    var fn = this.constructor.superclass.prototype[methodName];\n    return (arguments.length > 1)\n      ? fn.apply(this, slice.call(arguments, 1))\n      : fn.call(this);\n  }\n\n  /**\n   * Helper for creation of \"classes\".\n   * @memberOf fabric.util\n   * @param {Function} [parent] optional \"Class\" to inherit from\n   * @param {Object} [properties] Properties shared by all instances of this class\n   *                  (be careful modifying objects defined here as this would affect all instances)\n   */\n  function createClass() {\n    var parent = null,\n        properties = slice.call(arguments, 0);\n\n    if (typeof properties[0] === 'function') {\n      parent = properties.shift();\n    }\n    function klass() {\n      this.initialize.apply(this, arguments);\n    }\n\n    klass.superclass = parent;\n    klass.subclasses = [ ];\n\n    if (parent) {\n      Subclass.prototype = parent.prototype;\n      klass.prototype = new Subclass();\n      parent.subclasses.push(klass);\n    }\n    for (var i = 0, length = properties.length; i < length; i++) {\n      addMethods(klass, properties[i], parent);\n    }\n    if (!klass.prototype.initialize) {\n      klass.prototype.initialize = emptyFunction;\n    }\n    klass.prototype.constructor = klass;\n    klass.prototype.callSuper = callSuper;\n    return klass;\n  }\n\n  fabric.util.createClass = createClass;\n})();\n\n\n(function () {\n\n  var unknown = 'unknown';\n\n  /* EVENT HANDLING */\n\n  function areHostMethods(object) {\n    var methodNames = Array.prototype.slice.call(arguments, 1),\n        t, i, len = methodNames.length;\n    for (i = 0; i < len; i++) {\n      t = typeof object[methodNames[i]];\n      if (!(/^(?:function|object|unknown)$/).test(t)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** @ignore */\n  var getElement,\n      setElement,\n      getUniqueId = (function () {\n        var uid = 0;\n        return function (element) {\n          return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);\n        };\n      })();\n\n  (function () {\n    var elements = { };\n    /** @ignore */\n    getElement = function (uid) {\n      return elements[uid];\n    };\n    /** @ignore */\n    setElement = function (uid, element) {\n      elements[uid] = element;\n    };\n  })();\n\n  function createListener(uid, handler) {\n    return {\n      handler: handler,\n      wrappedHandler: createWrappedHandler(uid, handler)\n    };\n  }\n\n  function createWrappedHandler(uid, handler) {\n    return function (e) {\n      handler.call(getElement(uid), e || fabric.window.event);\n    };\n  }\n\n  function createDispatcher(uid, eventName) {\n    return function (e) {\n      if (handlers[uid] && handlers[uid][eventName]) {\n        var handlersForEvent = handlers[uid][eventName];\n        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n          handlersForEvent[i].call(this, e || fabric.window.event);\n        }\n      }\n    };\n  }\n\n  var shouldUseAddListenerRemoveListener = (\n        areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&\n        areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),\n\n      shouldUseAttachEventDetachEvent = (\n        areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&\n        areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),\n\n      // IE branch\n      listeners = { },\n\n      // DOM L0 branch\n      handlers = { },\n\n      addListener, removeListener;\n\n  if (shouldUseAddListenerRemoveListener) {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      element.addEventListener(eventName, handler, false);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      element.removeEventListener(eventName, handler, false);\n    };\n  }\n\n  else if (shouldUseAttachEventDetachEvent) {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      var uid = getUniqueId(element);\n      setElement(uid, element);\n      if (!listeners[uid]) {\n        listeners[uid] = { };\n      }\n      if (!listeners[uid][eventName]) {\n        listeners[uid][eventName] = [ ];\n\n      }\n      var listener = createListener(uid, handler);\n      listeners[uid][eventName].push(listener);\n      element.attachEvent('on' + eventName, listener.wrappedHandler);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      var uid = getUniqueId(element), listener;\n      if (listeners[uid] && listeners[uid][eventName]) {\n        for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {\n          listener = listeners[uid][eventName][i];\n          if (listener && listener.handler === handler) {\n            element.detachEvent('on' + eventName, listener.wrappedHandler);\n            listeners[uid][eventName][i] = null;\n          }\n        }\n      }\n    };\n  }\n  else {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      var uid = getUniqueId(element);\n      if (!handlers[uid]) {\n        handlers[uid] = { };\n      }\n      if (!handlers[uid][eventName]) {\n        handlers[uid][eventName] = [ ];\n        var existingHandler = element['on' + eventName];\n        if (existingHandler) {\n          handlers[uid][eventName].push(existingHandler);\n        }\n        element['on' + eventName] = createDispatcher(uid, eventName);\n      }\n      handlers[uid][eventName].push(handler);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      var uid = getUniqueId(element);\n      if (handlers[uid] && handlers[uid][eventName]) {\n        var handlersForEvent = handlers[uid][eventName];\n        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n          if (handlersForEvent[i] === handler) {\n            handlersForEvent.splice(i, 1);\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Adds an event listener to an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.addListener = addListener;\n\n  /**\n   * Removes an event listener from an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.removeListener = removeListener;\n\n  /**\n   * Cross-browser wrapper for getting event's coordinates\n   * @memberOf fabric.util\n   * @param {Event} event Event object\n   */\n  function getPointer(event) {\n    event || (event = fabric.window.event);\n\n    var element = event.target ||\n                  (typeof event.srcElement !== unknown ? event.srcElement : null),\n\n        scroll = fabric.util.getScrollLeftTop(element);\n\n    return {\n      x: pointerX(event) + scroll.left,\n      y: pointerY(event) + scroll.top\n    };\n  }\n\n  var pointerX = function(event) {\n    // looks like in IE (<9) clientX at certain point (apparently when mouseup fires on VML element)\n    // is represented as COM object, with all the consequences, like \"unknown\" type and error on [[Get]]\n    // need to investigate later\n    return (typeof event.clientX !== unknown ? event.clientX : 0);\n  },\n\n  pointerY = function(event) {\n    return (typeof event.clientY !== unknown ? event.clientY : 0);\n  };\n\n  function _getPointer(event, pageProp, clientProp) {\n    var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';\n\n    return (event[touchProp] && event[touchProp][0]\n      ? (event[touchProp][0][pageProp] - (event[touchProp][0][pageProp] - event[touchProp][0][clientProp]))\n        || event[clientProp]\n      : event[clientProp]);\n  }\n\n  if (fabric.isTouchSupported) {\n    pointerX = function(event) {\n      return _getPointer(event, 'pageX', 'clientX');\n    };\n    pointerY = function(event) {\n      return _getPointer(event, 'pageY', 'clientY');\n    };\n  }\n\n  fabric.util.getPointer = getPointer;\n\n  fabric.util.object.extend(fabric.util, fabric.Observable);\n\n})();\n\n\n(function () {\n\n  /**\n   * Cross-browser wrapper for setting element's style\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {Object} styles\n   * @return {HTMLElement} Element that was passed as a first argument\n   */\n  function setStyle(element, styles) {\n    var elementStyle = element.style;\n    if (!elementStyle) {\n      return element;\n    }\n    if (typeof styles === 'string') {\n      element.style.cssText += ';' + styles;\n      return styles.indexOf('opacity') > -1\n        ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\n        : element;\n    }\n    for (var property in styles) {\n      if (property === 'opacity') {\n        setOpacity(element, styles[property]);\n      }\n      else {\n        var normalizedProperty = (property === 'float' || property === 'cssFloat')\n          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\n          : property;\n        elementStyle[normalizedProperty] = styles[property];\n      }\n    }\n    return element;\n  }\n\n  var parseEl = fabric.document.createElement('div'),\n      supportsOpacity = typeof parseEl.style.opacity === 'string',\n      supportsFilters = typeof parseEl.style.filter === 'string',\n      reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\n\n      /** @ignore */\n      setOpacity = function (element) { return element; };\n\n  if (supportsOpacity) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      element.style.opacity = value;\n      return element;\n    };\n  }\n  else if (supportsFilters) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      var es = element.style;\n      if (element.currentStyle && !element.currentStyle.hasLayout) {\n        es.zoom = 1;\n      }\n      if (reOpacity.test(es.filter)) {\n        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\n        es.filter = es.filter.replace(reOpacity, value);\n      }\n      else {\n        es.filter += ' alpha(opacity=' + (value * 100) + ')';\n      }\n      return element;\n    };\n  }\n\n  fabric.util.setStyle = setStyle;\n\n})();\n\n\n(function() {\n\n  var _slice = Array.prototype.slice;\n\n  /**\n   * Takes id and returns an element with that id (if one exists in a document)\n   * @memberOf fabric.util\n   * @param {String|HTMLElement} id\n   * @return {HTMLElement|null}\n   */\n  function getById(id) {\n    return typeof id === 'string' ? fabric.document.getElementById(id) : id;\n  }\n\n  var sliceCanConvertNodelists,\n      /**\n       * Converts an array-like object (e.g. arguments or NodeList) to an array\n       * @memberOf fabric.util\n       * @param {Object} arrayLike\n       * @return {Array}\n       */\n      toArray = function(arrayLike) {\n        return _slice.call(arrayLike, 0);\n      };\n\n  try {\n    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n  }\n  catch (err) { }\n\n  if (!sliceCanConvertNodelists) {\n    toArray = function(arrayLike) {\n      var arr = new Array(arrayLike.length), i = arrayLike.length;\n      while (i--) {\n        arr[i] = arrayLike[i];\n      }\n      return arr;\n    };\n  }\n\n  /**\n   * Creates specified element with specified attributes\n   * @memberOf fabric.util\n   * @param {String} tagName Type of an element to create\n   * @param {Object} [attributes] Attributes to set on an element\n   * @return {HTMLElement} Newly created element\n   */\n  function makeElement(tagName, attributes) {\n    var el = fabric.document.createElement(tagName);\n    for (var prop in attributes) {\n      if (prop === 'class') {\n        el.className = attributes[prop];\n      }\n      else if (prop === 'for') {\n        el.htmlFor = attributes[prop];\n      }\n      else {\n        el.setAttribute(prop, attributes[prop]);\n      }\n    }\n    return el;\n  }\n\n  /**\n   * Adds class to an element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to add class to\n   * @param {String} className Class to add to an element\n   */\n  function addClass(element, className) {\n    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\n      element.className += (element.className ? ' ' : '') + className;\n    }\n  }\n\n  /**\n   * Wraps element with another element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to wrap\n   * @param {HTMLElement|String} wrapper Element to wrap with\n   * @param {Object} [attributes] Attributes to set on a wrapper\n   * @return {HTMLElement} wrapper\n   */\n  function wrapElement(element, wrapper, attributes) {\n    if (typeof wrapper === 'string') {\n      wrapper = makeElement(wrapper, attributes);\n    }\n    if (element.parentNode) {\n      element.parentNode.replaceChild(wrapper, element);\n    }\n    wrapper.appendChild(element);\n    return wrapper;\n  }\n\n  /**\n   * Returns element scroll offsets\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to operate on\n   * @return {Object} Object with left/top values\n   */\n  function getScrollLeftTop(element) {\n\n    var left = 0,\n        top = 0,\n        docElement = fabric.document.documentElement,\n        body = fabric.document.body || {\n          scrollLeft: 0, scrollTop: 0\n        };\n\n    while (element && element.parentNode) {\n\n      element = element.parentNode;\n\n      if (element === fabric.document) {\n        left = body.scrollLeft || docElement.scrollLeft || 0;\n        top = body.scrollTop ||  docElement.scrollTop || 0;\n      }\n      else {\n        left += element.scrollLeft || 0;\n        top += element.scrollTop || 0;\n      }\n\n      if (element.nodeType === 1 &&\n          fabric.util.getElementStyle(element, 'position') === 'fixed') {\n        break;\n      }\n    }\n\n    return { left: left, top: top };\n  }\n\n  /**\n   * Returns offset for a given element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get offset for\n   * @return {Object} Object with \"left\" and \"top\" properties\n   */\n  function getElementOffset(element) {\n    var docElem,\n        doc = element && element.ownerDocument,\n        box = { left: 0, top: 0 },\n        offset = { left: 0, top: 0 },\n        scrollLeftTop,\n        offsetAttributes = {\n          borderLeftWidth: 'left',\n          borderTopWidth:  'top',\n          paddingLeft:     'left',\n          paddingTop:      'top'\n        };\n\n    if (!doc) {\n      return offset;\n    }\n\n    for (var attr in offsetAttributes) {\n      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n    }\n\n    docElem = doc.documentElement;\n    if ( typeof element.getBoundingClientRect !== 'undefined' ) {\n      box = element.getBoundingClientRect();\n    }\n\n    scrollLeftTop = getScrollLeftTop(element);\n\n    return {\n      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\n    };\n  }\n\n  /**\n   * Returns style attribute value of a given element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get style attribute for\n   * @param {String} attr Style attribute to get for element\n   * @return {String} Style attribute value of the given element.\n   */\n  var getElementStyle;\n  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n    getElementStyle = function(element, attr) {\n      var style = fabric.document.defaultView.getComputedStyle(element, null);\n      return style ? style[attr] : undefined;\n    };\n  }\n  else {\n    getElementStyle = function(element, attr) {\n      var value = element.style[attr];\n      if (!value && element.currentStyle) {\n        value = element.currentStyle[attr];\n      }\n      return value;\n    };\n  }\n\n  (function () {\n    var style = fabric.document.documentElement.style,\n        selectProp = 'userSelect' in style\n          ? 'userSelect'\n          : 'MozUserSelect' in style\n            ? 'MozUserSelect'\n            : 'WebkitUserSelect' in style\n              ? 'WebkitUserSelect'\n              : 'KhtmlUserSelect' in style\n                ? 'KhtmlUserSelect'\n                : '';\n\n    /**\n     * Makes element unselectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make unselectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementUnselectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = fabric.util.falseFunction;\n      }\n      if (selectProp) {\n        element.style[selectProp] = 'none';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = 'on';\n      }\n      return element;\n    }\n\n    /**\n     * Makes element selectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make selectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementSelectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = null;\n      }\n      if (selectProp) {\n        element.style[selectProp] = '';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = '';\n      }\n      return element;\n    }\n\n    fabric.util.makeElementUnselectable = makeElementUnselectable;\n    fabric.util.makeElementSelectable = makeElementSelectable;\n  })();\n\n  (function() {\n\n    /**\n     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\n     * @memberOf fabric.util\n     * @param {String} url URL of a script to load\n     * @param {Function} callback Callback to execute when script is finished loading\n     */\n    function getScript(url, callback) {\n      var headEl = fabric.document.getElementsByTagName('head')[0],\n          scriptEl = fabric.document.createElement('script'),\n          loading = true;\n\n      /** @ignore */\n      scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\n        if (loading) {\n          if (typeof this.readyState === 'string' &&\n              this.readyState !== 'loaded' &&\n              this.readyState !== 'complete') {\n            return;\n          }\n          loading = false;\n          callback(e || fabric.window.event);\n          scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\n        }\n      };\n      scriptEl.src = url;\n      headEl.appendChild(scriptEl);\n      // causes issue in Opera\n      // headEl.removeChild(scriptEl);\n    }\n\n    fabric.util.getScript = getScript;\n  })();\n\n  fabric.util.getById = getById;\n  fabric.util.toArray = toArray;\n  fabric.util.makeElement = makeElement;\n  fabric.util.addClass = addClass;\n  fabric.util.wrapElement = wrapElement;\n  fabric.util.getScrollLeftTop = getScrollLeftTop;\n  fabric.util.getElementOffset = getElementOffset;\n  fabric.util.getElementStyle = getElementStyle;\n\n})();\n\n\n(function() {\n\n  function addParamToUrl(url, param) {\n    return url + (/\\?/.test(url) ? '&' : '?') + param;\n  }\n\n  var makeXHR = (function() {\n    var factories = [\n      function() { return new ActiveXObject('Microsoft.XMLHTTP'); },\n      function() { return new ActiveXObject('Msxml2.XMLHTTP'); },\n      function() { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); },\n      function() { return new XMLHttpRequest(); }\n    ];\n    for (var i = factories.length; i--; ) {\n      try {\n        var req = factories[i]();\n        if (req) {\n          return factories[i];\n        }\n      }\n      catch (err) { }\n    }\n  })();\n\n  function emptyFn() { }\n\n  /**\n   * Cross-browser abstraction for sending XMLHttpRequest\n   * @memberOf fabric.util\n   * @param {String} url URL to send XMLHttpRequest to\n   * @param {Object} [options] Options object\n   * @param {String} [options.method=\"GET\"]\n   * @param {Function} options.onComplete Callback to invoke when request is completed\n   * @return {XMLHttpRequest} request\n   */\n  function request(url, options) {\n\n    options || (options = { });\n\n    var method = options.method ? options.method.toUpperCase() : 'GET',\n        onComplete = options.onComplete || function() { },\n        xhr = makeXHR(),\n        body;\n\n    /** @ignore */\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        onComplete(xhr);\n        xhr.onreadystatechange = emptyFn;\n      }\n    };\n\n    if (method === 'GET') {\n      body = null;\n      if (typeof options.parameters === 'string') {\n        url = addParamToUrl(url, options.parameters);\n      }\n    }\n\n    xhr.open(method, url, true);\n\n    if (method === 'POST' || method === 'PUT') {\n      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    }\n\n    xhr.send(body);\n    return xhr;\n  }\n\n  fabric.util.request = request;\n})();\n\n\n/**\n * Wrapper around `console.log` (when available)\n * @param {Any} [values] Values to log\n */\nfabric.log = function() { };\n\n/**\n * Wrapper around `console.warn` (when available)\n * @param {Any} [values] Values to log as a warning\n */\nfabric.warn = function() { };\n\n/* jshint ignore:start */\nif (typeof console !== 'undefined') {\n\n  ['log', 'warn'].forEach(function(methodName) {\n\n    if (typeof console[methodName] !== 'undefined' &&\n        typeof console[methodName].apply === 'function') {\n\n      fabric[methodName] = function() {\n        return console[methodName].apply(console, arguments);\n      };\n    }\n  });\n}\n/* jshint ignore:end */\n\n\n(function() {\n\n  /**\n   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {Object} [options] Animation options\n   * @param {Function} [options.onChange] Callback; invoked on every value change\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n   * @param {Number} [options.startValue=0] Starting value\n   * @param {Number} [options.endValue=100] Ending value\n   * @param {Number} [options.byValue=100] Value to modify the property by\n   * @param {Function} [options.easing] Easing function\n   * @param {Number} [options.duration=500] Duration of change (in ms)\n   */\n  function animate(options) {\n\n    requestAnimFrame(function(timestamp) {\n      options || (options = { });\n\n      var start = timestamp || +new Date(),\n          duration = options.duration || 500,\n          finish = start + duration, time,\n          onChange = options.onChange || function() { },\n          abort = options.abort || function() { return false; },\n          easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},\n          startValue = 'startValue' in options ? options.startValue : 0,\n          endValue = 'endValue' in options ? options.endValue : 100,\n          byValue = options.byValue || endValue - startValue;\n\n      options.onStart && options.onStart();\n\n      (function tick(ticktime) {\n        time = ticktime || +new Date();\n        var currentTime = time > finish ? duration : (time - start);\n        if (abort()) {\n          options.onComplete && options.onComplete();\n          return;\n        }\n        onChange(easing(currentTime, startValue, byValue, duration));\n        if (time > finish) {\n          options.onComplete && options.onComplete();\n          return;\n        }\n        requestAnimFrame(tick);\n      })(start);\n    });\n\n  }\n\n  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\n                          fabric.window.webkitRequestAnimationFrame ||\n                          fabric.window.mozRequestAnimationFrame    ||\n                          fabric.window.oRequestAnimationFrame      ||\n                          fabric.window.msRequestAnimationFrame     ||\n                          function(callback) {\n                            fabric.window.setTimeout(callback, 1000 / 60);\n                          };\n\n  /**\n   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n   * @memberOf fabric.util\n   * @param {Function} callback Callback to invoke\n   * @param {DOMElement} element optional Element to associate with animation\n   */\n  function requestAnimFrame() {\n    return _requestAnimFrame.apply(fabric.window, arguments);\n  }\n\n  fabric.util.animate = animate;\n  fabric.util.requestAnimFrame = requestAnimFrame;\n\n})();\n\n\n(function() {\n\n  function normalize(a, c, p, s) {\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    }\n    else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return { a: a, c: c, p: p, s: s };\n  }\n\n  function elastic(opts, t, d) {\n    return opts.a *\n      Math.pow(2, 10 * (t -= 1)) *\n      Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\n  }\n\n  /**\n   * Cubic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n  }\n\n  /**\n   * Cubic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutCubic(t, b, c, d) {\n    t /= d/2;\n    if (t < 1) {\n      return c / 2 * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n  }\n\n  /**\n   * Quartic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n  }\n\n  /**\n   * Quartic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  }\n\n  /**\n   * Quartic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutQuart(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t * t + b;\n    }\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n  }\n\n  /**\n   * Quintic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n  }\n\n  /**\n   * Quintic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  }\n\n  /**\n   * Quintic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutQuint(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n  }\n\n  /**\n   * Sinusoidal easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  }\n\n  /**\n   * Sinusoidal easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  }\n\n  /**\n   * Sinusoidal easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n  }\n\n  /**\n   * Exponential easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n  }\n\n  /**\n   * Exponential easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n  }\n\n  /**\n   * Exponential easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutExpo(t, b, c, d) {\n    if (t === 0) {\n      return b;\n    }\n    if (t === d) {\n      return b + c;\n    }\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    }\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n  }\n\n  /**\n   * Circular easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n  }\n\n  /**\n   * Circular easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n  }\n\n  /**\n   * Circular easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutCirc(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    }\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n  }\n\n  /**\n   * Elastic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d;\n    if (t === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    var opts = normalize(a, c, p, s);\n    return -elastic(opts, t, d) + b;\n  }\n\n  /**\n   * Elastic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d;\n    if (t === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    var opts = normalize(a, c, p, s);\n    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\n  }\n\n  /**\n   * Elastic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d / 2;\n    if (t === 2) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * (0.3 * 1.5);\n    }\n    var opts = normalize(a, c, p, s);\n    if (t < 1) {\n      return -0.5 * elastic(opts, t, d) + b;\n    }\n    return opts.a * Math.pow(2, -10 * (t -= 1)) *\n      Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\n  }\n\n  /**\n   * Backwards easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  }\n\n  /**\n   * Backwards easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  }\n\n  /**\n   * Backwards easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    }\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n  }\n\n  /**\n   * Bouncing easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInBounce(t, b, c, d) {\n    return c - easeOutBounce (d - t, 0, c, d) + b;\n  }\n\n  /**\n   * Bouncing easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n      return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2/2.75)) {\n      return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n    }\n    else if (t < (2.5/2.75)) {\n      return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n    }\n    else {\n      return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n    }\n  }\n\n  /**\n   * Bouncing easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutBounce(t, b, c, d) {\n    if (t < d / 2) {\n      return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\n    }\n    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n  }\n\n  /**\n   * Easing functions\n   * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\n   * @namespace fabric.util.ease\n   */\n  fabric.util.ease = {\n\n    /**\n     * Quadratic easing in\n     * @memberOf fabric.util.ease\n     */\n    easeInQuad: function(t, b, c, d) {\n      return c * (t /= d) * t + b;\n    },\n\n    /**\n     * Quadratic easing out\n     * @memberOf fabric.util.ease\n     */\n    easeOutQuad: function(t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b;\n    },\n\n    /**\n     * Quadratic easing in and out\n     * @memberOf fabric.util.ease\n     */\n    easeInOutQuad: function(t, b, c, d) {\n      t /= (d / 2);\n      if (t < 1) {\n        return c / 2 * t * t + b;\n      }\n      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    },\n\n    /**\n     * Cubic easing in\n     * @memberOf fabric.util.ease\n     */\n    easeInCubic: function(t, b, c, d) {\n      return c * (t /= d) * t * t + b;\n    },\n\n    easeOutCubic: easeOutCubic,\n    easeInOutCubic: easeInOutCubic,\n    easeInQuart: easeInQuart,\n    easeOutQuart: easeOutQuart,\n    easeInOutQuart: easeInOutQuart,\n    easeInQuint: easeInQuint,\n    easeOutQuint: easeOutQuint,\n    easeInOutQuint: easeInOutQuint,\n    easeInSine: easeInSine,\n    easeOutSine: easeOutSine,\n    easeInOutSine: easeInOutSine,\n    easeInExpo: easeInExpo,\n    easeOutExpo: easeOutExpo,\n    easeInOutExpo: easeInOutExpo,\n    easeInCirc: easeInCirc,\n    easeOutCirc: easeOutCirc,\n    easeInOutCirc: easeInOutCirc,\n    easeInElastic: easeInElastic,\n    easeOutElastic: easeOutElastic,\n    easeInOutElastic: easeInOutElastic,\n    easeInBack: easeInBack,\n    easeOutBack: easeOutBack,\n    easeInOutBack: easeInOutBack,\n    easeInBounce: easeInBounce,\n    easeOutBounce: easeOutBounce,\n    easeInOutBounce: easeInOutBounce\n  };\n\n}());\n\n\n(function(global) {\n\n  'use strict';\n\n  /**\n   * @name fabric\n   * @namespace\n   */\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      capitalize = fabric.util.string.capitalize,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      parseUnit = fabric.util.parseUnit,\n      multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\n\n      reAllowedSVGTagNames = /^(path|circle|polygon|polyline|ellipse|rect|line|image|text)$/i,\n      reViewBoxTagNames = /^(symbol|image|marker|pattern|view|svg)$/i,\n      reNotAllowedAncestors = /^(?:pattern|defs|symbol|metadata)$/i,\n      reAllowedParents = /^(symbol|g|a|svg)$/i,\n\n      attributesMap = {\n        cx:                   'left',\n        x:                    'left',\n        r:                    'radius',\n        cy:                   'top',\n        y:                    'top',\n        display:              'visible',\n        visibility:           'visible',\n        transform:            'transformMatrix',\n        'fill-opacity':       'fillOpacity',\n        'fill-rule':          'fillRule',\n        'font-family':        'fontFamily',\n        'font-size':          'fontSize',\n        'font-style':         'fontStyle',\n        'font-weight':        'fontWeight',\n        'stroke-dasharray':   'strokeDashArray',\n        'stroke-linecap':     'strokeLineCap',\n        'stroke-linejoin':    'strokeLineJoin',\n        'stroke-miterlimit':  'strokeMiterLimit',\n        'stroke-opacity':     'strokeOpacity',\n        'stroke-width':       'strokeWidth',\n        'text-decoration':    'textDecoration',\n        'text-anchor':        'originX'\n      },\n\n      colorAttributes = {\n        stroke: 'strokeOpacity',\n        fill:   'fillOpacity'\n      };\n\n  fabric.cssRules = { };\n  fabric.gradientDefs = { };\n\n  function normalizeAttr(attr) {\n    // transform attribute names\n    if (attr in attributesMap) {\n      return attributesMap[attr];\n    }\n    return attr;\n  }\n\n  function normalizeValue(attr, value, parentAttributes, fontSize) {\n    var isArray = Object.prototype.toString.call(value) === '[object Array]',\n        parsed;\n\n    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\n      value = '';\n    }\n    else if (attr === 'strokeDashArray') {\n      value = value.replace(/,/g, ' ').split(/\\s+/).map(function(n) {\n        return parseFloat(n);\n      });\n    }\n    else if (attr === 'transformMatrix') {\n      if (parentAttributes && parentAttributes.transformMatrix) {\n        value = multiplyTransformMatrices(\n          parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\n      }\n      else {\n        value = fabric.parseTransformAttribute(value);\n      }\n    }\n    else if (attr === 'visible') {\n      value = (value === 'none' || value === 'hidden') ? false : true;\n      // display=none on parent element always takes precedence over child element\n      if (parentAttributes && parentAttributes.visible === false) {\n        value = false;\n      }\n    }\n    else if (attr === 'originX' /* text-anchor */) {\n      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\n    }\n    else {\n      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\n    }\n\n    return (!isArray && isNaN(parsed) ? value : parsed);\n  }\n\n  /**\n   * @private\n   * @param {Object} attributes Array of attributes to parse\n   */\n  function _setStrokeFillOpacity(attributes) {\n    for (var attr in colorAttributes) {\n\n      if (!attributes[attr] || typeof attributes[colorAttributes[attr]] === 'undefined') {\n        continue;\n      }\n\n      if (attributes[attr].indexOf('url(') === 0) {\n        continue;\n      }\n\n      var color = new fabric.Color(attributes[attr]);\n      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\n    }\n    return attributes;\n  }\n\n  /**\n   * Parses \"transform\" attribute, returning an array of values\n   * @static\n   * @function\n   * @memberOf fabric\n   * @param {String} attributeValue String containing attribute value\n   * @return {Array} Array of 6 elements representing transformation matrix\n   */\n  fabric.parseTransformAttribute = (function() {\n    function rotateMatrix(matrix, args) {\n      var angle = args[0];\n\n      matrix[0] = Math.cos(angle);\n      matrix[1] = Math.sin(angle);\n      matrix[2] = -Math.sin(angle);\n      matrix[3] = Math.cos(angle);\n    }\n\n    function scaleMatrix(matrix, args) {\n      var multiplierX = args[0],\n          multiplierY = (args.length === 2) ? args[1] : args[0];\n\n      matrix[0] = multiplierX;\n      matrix[3] = multiplierY;\n    }\n\n    function skewXMatrix(matrix, args) {\n      matrix[2] = Math.tan(fabric.util.degreesToRadians(args[0]));\n    }\n\n    function skewYMatrix(matrix, args) {\n      matrix[1] = Math.tan(fabric.util.degreesToRadians(args[0]));\n    }\n\n    function translateMatrix(matrix, args) {\n      matrix[4] = args[0];\n      if (args.length === 2) {\n        matrix[5] = args[1];\n      }\n    }\n\n    // identity matrix\n    var iMatrix = [\n          1, // a\n          0, // b\n          0, // c\n          1, // d\n          0, // e\n          0  // f\n        ],\n\n        // == begin transform regexp\n        number = fabric.reNum,\n\n        commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\n\n        skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n        skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n        rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + ')' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' +\n                  '\\\\s*\\\\))',\n\n        transform = '(?:' +\n                    matrix + '|' +\n                    translate + '|' +\n                    scale + '|' +\n                    rotate + '|' +\n                    skewX + '|' +\n                    skewY +\n                    ')',\n\n        transforms = '(?:' + transform + '(?:' + commaWsp + transform + ')*' + ')',\n\n        transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\n\n        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n        reTransformList = new RegExp(transformList),\n        // == end transform regexp\n\n        reTransform = new RegExp(transform, 'g');\n\n    return function(attributeValue) {\n\n      // start with identity matrix\n      var matrix = iMatrix.concat(),\n          matrices = [ ];\n\n      // return if no argument was given or\n      // an argument does not match transform attribute regexp\n      if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\n        return matrix;\n      }\n\n      attributeValue.replace(reTransform, function(match) {\n\n        var m = new RegExp(transform).exec(match).filter(function (match) {\n              return (match !== '' && match != null);\n            }),\n            operation = m[1],\n            args = m.slice(2).map(parseFloat);\n\n        switch (operation) {\n          case 'translate':\n            translateMatrix(matrix, args);\n            break;\n          case 'rotate':\n            args[0] = fabric.util.degreesToRadians(args[0]);\n            rotateMatrix(matrix, args);\n            break;\n          case 'scale':\n            scaleMatrix(matrix, args);\n            break;\n          case 'skewX':\n            skewXMatrix(matrix, args);\n            break;\n          case 'skewY':\n            skewYMatrix(matrix, args);\n            break;\n          case 'matrix':\n            matrix = args;\n            break;\n        }\n\n        // snapshot current matrix into matrices array\n        matrices.push(matrix.concat());\n        // reset\n        matrix = iMatrix.concat();\n      });\n\n      var combinedMatrix = matrices[0];\n      while (matrices.length > 1) {\n        matrices.shift();\n        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\n      }\n      return combinedMatrix;\n    };\n  })();\n\n  /**\n   * @private\n   */\n  function parseStyleString(style, oStyle) {\n    var attr, value;\n    style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\n      var pair = chunk.split(':');\n\n      attr = normalizeAttr(pair[0].trim().toLowerCase());\n      value = normalizeValue(attr, pair[1].trim());\n\n      oStyle[attr] = value;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function parseStyleObject(style, oStyle) {\n    var attr, value;\n    for (var prop in style) {\n      if (typeof style[prop] === 'undefined') {\n        continue;\n      }\n\n      attr = normalizeAttr(prop.toLowerCase());\n      value = normalizeValue(attr, style[prop]);\n\n      oStyle[attr] = value;\n    }\n  }\n\n  /**\n   * @private\n   */\n  function getGlobalStylesForElement(element, svgUid) {\n    var styles = { };\n    for (var rule in fabric.cssRules[svgUid]) {\n      if (elementMatchesRule(element, rule.split(' '))) {\n        for (var property in fabric.cssRules[svgUid][rule]) {\n          styles[property] = fabric.cssRules[svgUid][rule][property];\n        }\n      }\n    }\n    return styles;\n  }\n\n  /**\n   * @private\n   */\n  function elementMatchesRule(element, selectors) {\n    var firstMatching, parentMatching = true;\n    //start from rightmost selector.\n    firstMatching = selectorMatches(element, selectors.pop());\n    if (firstMatching && selectors.length) {\n      parentMatching = doesSomeParentMatch(element, selectors);\n    }\n    return firstMatching && parentMatching && (selectors.length === 0);\n  }\n\n  function doesSomeParentMatch(element, selectors) {\n    var selector, parentMatching = true;\n    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\n      if (parentMatching) {\n        selector = selectors.pop();\n      }\n      element = element.parentNode;\n      parentMatching = selectorMatches(element, selector);\n    }\n    return selectors.length === 0;\n  }\n\n  /**\n   * @private\n   */\n  function selectorMatches(element, selector) {\n    var nodeName = element.nodeName,\n        classNames = element.getAttribute('class'),\n        id = element.getAttribute('id'), matcher;\n    // i check if a selector matches slicing away part from it.\n    // if i get empty string i should match\n    matcher = new RegExp('^' + nodeName, 'i');\n    selector = selector.replace(matcher, '');\n    if (id && selector.length) {\n      matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\n      selector = selector.replace(matcher, '');\n    }\n    if (classNames && selector.length) {\n      classNames = classNames.split(' ');\n      for (var i = classNames.length; i--;) {\n        matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\n        selector = selector.replace(matcher, '');\n      }\n    }\n    return selector.length === 0;\n  }\n\n  /**\n   * @private\n   * to support IE8 missing getElementById on SVGdocument\n   */\n  function elementById(doc, id) {\n    var el;\n    doc.getElementById && (el = doc.getElementById(id));\n    if (el) {\n      return el;\n    }\n    var node, i, idAttr, nodelist = doc.getElementsByTagName('*');\n    for (i = 0; i < nodelist.length; i++) {\n      node = nodelist[i];\n      if (idAttr === node.getAttribute('id')) {\n        return node;\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  function parseUseDirectives(doc) {\n    var nodelist = doc.getElementsByTagName('use'), i = 0;\n    while (nodelist.length && i < nodelist.length) {\n      var el = nodelist[i],\n          xlink = el.getAttribute('xlink:href').substr(1),\n          x = el.getAttribute('x') || 0,\n          y = el.getAttribute('y') || 0,\n          el2 = elementById(doc, xlink).cloneNode(true),\n          currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\n          parentNode, oldLength = nodelist.length, attr, j, attrs, l;\n\n      applyViewboxTransform(el2);\n      if (/^svg$/i.test(el2.nodeName)) {\n        var el3 = el2.ownerDocument.createElement('g');\n        for (j = 0, attrs = el2.attributes, l = attrs.length; j < l; j++) {\n          attr = attrs.item(j);\n          el3.setAttribute(attr.nodeName, attr.nodeValue);\n        }\n        while (el2.firstChild != null) {\n          el3.appendChild(el2.firstChild);\n        }\n        el2 = el3;\n      }\n\n      for (j = 0, attrs = el.attributes, l = attrs.length; j < l; j++) {\n        attr = attrs.item(j);\n        if (attr.nodeName === 'x' || attr.nodeName === 'y' || attr.nodeName === 'xlink:href') {\n          continue;\n        }\n\n        if (attr.nodeName === 'transform') {\n          currentTrans = attr.nodeValue + ' ' + currentTrans;\n        }\n        else {\n          el2.setAttribute(attr.nodeName, attr.nodeValue);\n        }\n      }\n\n      el2.setAttribute('transform', currentTrans);\n      el2.setAttribute('instantiated_by_use', '1');\n      el2.removeAttribute('id');\n      parentNode = el.parentNode;\n      parentNode.replaceChild(el2, el);\n      // some browsers do not shorten nodelist after replaceChild (IE8)\n      if (nodelist.length === oldLength) {\n        i++;\n      }\n    }\n  }\n\n  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n  // matches, e.g.: +14.56e-12, etc.\n  var reViewBoxAttrValue = new RegExp(\n    '^' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\n    '$'\n  );\n\n  /**\n   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n   */\n  function applyViewboxTransform(element) {\n\n    var viewBoxAttr = element.getAttribute('viewBox'),\n        scaleX = 1,\n        scaleY = 1,\n        minX = 0,\n        minY = 0,\n        viewBoxWidth, viewBoxHeight, matrix, el,\n        widthAttr = element.getAttribute('width'),\n        heightAttr = element.getAttribute('height'),\n        missingViewBox = (!viewBoxAttr || !reViewBoxTagNames.test(element.tagName)\n                           || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\n        missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\n        toBeParsed = missingViewBox && missingDimAttr,\n        parsedDim = { };\n\n    parsedDim.width = 0;\n    parsedDim.height = 0;\n    parsedDim.toBeParsed = toBeParsed;\n\n    if (toBeParsed) {\n      return parsedDim;\n    }\n\n    if (missingViewBox) {\n      parsedDim.width = parseUnit(widthAttr);\n      parsedDim.height = parseUnit(heightAttr);\n      return parsedDim;\n    }\n\n    minX = -parseFloat(viewBoxAttr[1]),\n    minY = -parseFloat(viewBoxAttr[2]),\n    viewBoxWidth = parseFloat(viewBoxAttr[3]),\n    viewBoxHeight = parseFloat(viewBoxAttr[4]);\n\n    if (!missingDimAttr) {\n      parsedDim.width = parseUnit(widthAttr);\n      parsedDim.height = parseUnit(heightAttr);\n      scaleX = parsedDim.width / viewBoxWidth;\n      scaleY = parsedDim.height / viewBoxHeight;\n    }\n    else {\n      parsedDim.width = viewBoxWidth;\n      parsedDim.height = viewBoxHeight;\n    }\n\n    // default is to preserve aspect ratio\n    // preserveAspectRatio attribute to be implemented\n    scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\n\n    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0) {\n      return parsedDim;\n    }\n\n    matrix = ' matrix(' + scaleX +\n                  ' 0' +\n                  ' 0 ' +\n                  scaleY + ' ' +\n                  (minX * scaleX) + ' ' +\n                  (minY * scaleY) + ') ';\n\n    if (element.tagName === 'svg') {\n      el = element.ownerDocument.createElement('g');\n      while (element.firstChild != null) {\n        el.appendChild(element.firstChild);\n      }\n      element.appendChild(el);\n    }\n    else {\n      el = element;\n      matrix = el.getAttribute('transform') + matrix;\n    }\n\n    el.setAttribute('transform', matrix);\n    return parsedDim;\n  }\n\n  /**\n   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n   * @static\n   * @function\n   * @memberOf fabric\n   * @param {SVGDocument} doc SVG document to parse\n   * @param {Function} callback Callback to call when parsing is finished; It's being passed an array of elements (parsed from a document).\n   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n   */\n  fabric.parseSVGDocument = (function() {\n\n    function hasAncestorWithNodeName(element, nodeName) {\n      while (element && (element = element.parentNode)) {\n        if (nodeName.test(element.nodeName) && !element.getAttribute('instantiated_by_use')) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    return function(doc, callback, reviver) {\n      if (!doc) {\n        return;\n      }\n\n      parseUseDirectives(doc);\n\n      var startTime = new Date(),\n          svgUid =  fabric.Object.__uid++,\n          options = applyViewboxTransform(doc),\n          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\n\n      options.svgUid = svgUid;\n\n      if (descendants.length === 0 && fabric.isLikelyNode) {\n        // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\n        // https://github.com/ajaxorg/node-o3-xml/issues/21\n        descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\n        var arr = [ ];\n        for (var i = 0, len = descendants.length; i < len; i++) {\n          arr[i] = descendants[i];\n        }\n        descendants = arr;\n      }\n\n      var elements = descendants.filter(function(el) {\n        applyViewboxTransform(el);\n        return reAllowedSVGTagNames.test(el.tagName) &&\n              !hasAncestorWithNodeName(el, reNotAllowedAncestors); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n      });\n\n      if (!elements || (elements && !elements.length)) {\n        callback && callback([], {});\n        return;\n      }\n\n      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\n      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\n      // Precedence of rules:   style > class > attribute\n      fabric.parseElements(elements, function(instances) {\n        fabric.documentParsingTime = new Date() - startTime;\n        if (callback) {\n          callback(instances, options);\n        }\n      }, clone(options), reviver);\n    };\n  })();\n\n  /**\n   * Used for caching SVG documents (loaded via `fabric.Canvas#loadSVGFromURL`)\n   * @namespace\n   */\n  var svgCache = {\n\n    /**\n     * @param {String} name\n     * @param {Function} callback\n     */\n    has: function (name, callback) {\n      callback(false);\n    },\n\n    get: function () {\n      /* NOOP */\n    },\n\n    set: function () {\n      /* NOOP */\n    }\n  };\n\n  /**\n   * @private\n   */\n  function _enlivenCachedObject(cachedObject) {\n\n    var objects = cachedObject.objects,\n        options = cachedObject.options;\n\n    objects = objects.map(function (o) {\n      return fabric[capitalize(o.type)].fromObject(o);\n    });\n\n    return ({ objects: objects, options: options });\n  }\n\n  /**\n   * @private\n   */\n  function _createSVGPattern(markup, canvas, property) {\n    if (canvas[property] && canvas[property].toSVG) {\n      markup.push(\n        '<pattern x=\"0\" y=\"0\" id=\"', property, 'Pattern\" ',\n          'width=\"', canvas[property].source.width,\n          '\" height=\"', canvas[property].source.height,\n          '\" patternUnits=\"userSpaceOnUse\">',\n        '<image x=\"0\" y=\"0\" ',\n        'width=\"', canvas[property].source.width,\n        '\" height=\"', canvas[property].source.height,\n        '\" xlink:href=\"', canvas[property].source.src,\n        '\"></image></pattern>'\n      );\n    }\n  }\n\n  var reFontDeclaration = new RegExp(\n    '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n      fabric.reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\n\n  extend(fabric, {\n    /**\n     * Parses a short font declaration, building adding its properties to a style object\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {String} value font declaration\n     * @param {Object} oStyle definition\n     */\n    parseFontDeclaration: function(value, oStyle) {\n      var match = value.match(reFontDeclaration);\n\n      if (!match) {\n        return;\n      }\n      var fontStyle = match[1],\n          // font variant is not used\n          // fontVariant = match[2],\n          fontWeight = match[3],\n          fontSize = match[4],\n          lineHeight = match[5],\n          fontFamily = match[6];\n\n      if (fontStyle) {\n        oStyle.fontStyle = fontStyle;\n      }\n      if (fontWeight) {\n        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\n      }\n      if (fontSize) {\n        oStyle.fontSize = parseUnit(fontSize);\n      }\n      if (fontFamily) {\n        oStyle.fontFamily = fontFamily;\n      }\n      if (lineHeight) {\n        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n      }\n    },\n\n    /**\n     * Parses an SVG document, returning all of the gradient declarations found in it\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n     */\n    getGradientDefs: function(doc) {\n      var linearGradientEls = doc.getElementsByTagName('linearGradient'),\n          radialGradientEls = doc.getElementsByTagName('radialGradient'),\n          el, i, j = 0, id, xlink, elList = [ ],\n          gradientDefs = { }, idsToXlinkMap = { };\n\n      elList.length = linearGradientEls.length + radialGradientEls.length;\n      i = linearGradientEls.length;\n      while (i--) {\n        elList[j++] = linearGradientEls[i];\n      }\n      i = radialGradientEls.length;\n      while (i--) {\n        elList[j++] = radialGradientEls[i];\n      }\n\n      while (j--) {\n        el = elList[j];\n        xlink = el.getAttribute('xlink:href');\n        id = el.getAttribute('id');\n        if (xlink) {\n          idsToXlinkMap[id] = xlink.substr(1);\n        }\n        gradientDefs[id] = el;\n      }\n\n      for (id in idsToXlinkMap) {\n        var el2 = gradientDefs[idsToXlinkMap[id]].cloneNode(true);\n        el = gradientDefs[id];\n        while (el2.firstChild) {\n          el.appendChild(el2.firstChild);\n        }\n      }\n      return gradientDefs;\n    },\n\n    /**\n     * Returns an object of attributes' name/value, given element and an array of attribute names;\n     * Parses parent \"g\" nodes recursively upwards.\n     * @static\n     * @memberOf fabric\n     * @param {DOMElement} element Element to parse\n     * @param {Array} attributes Array of attributes to parse\n     * @return {Object} object containing parsed attributes' names/values\n     */\n    parseAttributes: function(element, attributes, svgUid) {\n\n      if (!element) {\n        return;\n      }\n\n      var value,\n          parentAttributes = { },\n          fontSize;\n\n      if (typeof svgUid === 'undefined') {\n        svgUid = element.getAttribute('svgUid');\n      }\n      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n      if (element.parentNode && reAllowedParents.test(element.parentNode.nodeName)) {\n        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\n      }\n      fontSize = (parentAttributes && parentAttributes.fontSize ) ||\n                 element.getAttribute('font-size') || fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\n      var ownAttributes = attributes.reduce(function(memo, attr) {\n        value = element.getAttribute(attr);\n        if (value) {\n          attr = normalizeAttr(attr);\n          value = normalizeValue(attr, value, parentAttributes, fontSize);\n\n          memo[attr] = value;\n        }\n        return memo;\n      }, { });\n\n      // add values parsed from style, which take precedence over attributes\n      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n      ownAttributes = extend(ownAttributes,\n        extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));\n      if (ownAttributes.font) {\n        fabric.parseFontDeclaration(ownAttributes.font, ownAttributes);\n      }\n      return _setStrokeFillOpacity(extend(parentAttributes, ownAttributes));\n    },\n\n    /**\n     * Transforms an array of svg elements to corresponding fabric.* instances\n     * @static\n     * @memberOf fabric\n     * @param {Array} elements Array of elements to parse\n     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\n     * @param {Object} [options] Options object\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     */\n    parseElements: function(elements, callback, options, reviver) {\n      new fabric.ElementsParser(elements, callback, options, reviver).parse();\n    },\n\n    /**\n     * Parses \"style\" attribute, retuning an object with values\n     * @static\n     * @memberOf fabric\n     * @param {SVGElement} element Element to parse\n     * @return {Object} Objects with values parsed from style attribute of an element\n     */\n    parseStyleAttribute: function(element) {\n      var oStyle = { },\n          style = element.getAttribute('style');\n\n      if (!style) {\n        return oStyle;\n      }\n\n      if (typeof style === 'string') {\n        parseStyleString(style, oStyle);\n      }\n      else {\n        parseStyleObject(style, oStyle);\n      }\n\n      return oStyle;\n    },\n\n    /**\n     * Parses \"points\" attribute, returning an array of values\n     * @static\n     * @memberOf fabric\n     * @param {String} points points attribute string\n     * @return {Array} array of points\n     */\n    parsePointsAttribute: function(points) {\n\n      // points attribute is required and must not be empty\n      if (!points) {\n        return null;\n      }\n\n      // replace commas with whitespace and remove bookending whitespace\n      points = points.replace(/,/g, ' ').trim();\n\n      points = points.split(/\\s+/);\n      var parsedPoints = [ ], i, len;\n\n      i = 0;\n      len = points.length;\n      for (; i < len; i+=2) {\n        parsedPoints.push({\n          x: parseFloat(points[i]),\n          y: parseFloat(points[i + 1])\n        });\n      }\n\n      // odd number of points is an error\n      // if (parsedPoints.length % 2 !== 0) {\n      //   return null;\n      // }\n\n      return parsedPoints;\n    },\n\n    /**\n     * Returns CSS rules for a given SVG document\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @return {Object} CSS rules of this document\n     */\n    getCSSRules: function(doc) {\n      var styles = doc.getElementsByTagName('style'),\n          allRules = { }, rules;\n\n      // very crude parsing of style contents\n      for (var i = 0, len = styles.length; i < len; i++) {\n        var styleContents = styles[i].textContent;\n\n        // remove comments\n        styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n        if (styleContents.trim() === '') {\n          continue;\n        }\n        rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n        rules = rules.map(function(rule) { return rule.trim(); });\n\n        rules.forEach(function(rule) {\n\n          var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\n          ruleObj = { }, declaration = match[2].trim(),\n          propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\n\n          for (var i = 0, len = propertyValuePairs.length; i < len; i++) {\n            var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\n                property = normalizeAttr(pair[0]),\n                value = normalizeValue(property, pair[1], pair[0]);\n            ruleObj[property] = value;\n          }\n          rule = match[1];\n          rule.split(',').forEach(function(_rule) {\n            _rule = _rule.replace(/^svg/i, '').trim();\n            if (_rule === '') {\n              return;\n            }\n            allRules[_rule] = fabric.util.object.clone(ruleObj);\n          });\n        });\n      }\n      return allRules;\n    },\n\n    /**\n     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects. Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n     * @memberOf fabric\n     * @param {String} url\n     * @param {Function} callback\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     */\n    loadSVGFromURL: function(url, callback, reviver) {\n\n      url = url.replace(/^\\n\\s*/, '').trim();\n      svgCache.has(url, function (hasUrl) {\n        if (hasUrl) {\n          svgCache.get(url, function (value) {\n            var enlivedRecord = _enlivenCachedObject(value);\n            callback(enlivedRecord.objects, enlivedRecord.options);\n          });\n        }\n        else {\n          new fabric.util.request(url, {\n            method: 'get',\n            onComplete: onComplete\n          });\n        }\n      });\n\n      function onComplete(r) {\n\n        var xml = r.responseXML;\n        if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\n          xml = new ActiveXObject('Microsoft.XMLDOM');\n          xml.async = 'false';\n          //IE chokes on DOCTYPE\n          xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n        }\n        if (!xml || !xml.documentElement) {\n          return;\n        }\n\n        fabric.parseSVGDocument(xml.documentElement, function (results, options) {\n          svgCache.set(url, {\n            objects: fabric.util.array.invoke(results, 'toObject'),\n            options: options\n          });\n          callback(results, options);\n        }, reviver);\n      }\n    },\n\n    /**\n     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n     * @memberOf fabric\n     * @param {String} string\n     * @param {Function} callback\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     */\n    loadSVGFromString: function(string, callback, reviver) {\n      string = string.trim();\n      var doc;\n      if (typeof DOMParser !== 'undefined') {\n        var parser = new DOMParser();\n        if (parser && parser.parseFromString) {\n          doc = parser.parseFromString(string, 'text/xml');\n        }\n      }\n      else if (fabric.window.ActiveXObject) {\n        doc = new ActiveXObject('Microsoft.XMLDOM');\n        doc.async = 'false';\n        // IE chokes on DOCTYPE\n        doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n      }\n\n      fabric.parseSVGDocument(doc.documentElement, function (results, options) {\n        callback(results, options);\n      }, reviver);\n    },\n\n    /**\n     * Creates markup containing SVG font faces\n     * @param {Array} objects Array of fabric objects\n     * @return {String}\n     */\n    createSVGFontFacesMarkup: function(objects) {\n      var markup = '';\n\n      for (var i = 0, len = objects.length; i < len; i++) {\n        if (objects[i].type !== 'text' || !objects[i].path) {\n          continue;\n        }\n\n        markup += [\n          //jscs:disable validateIndentation\n          '@font-face {',\n            'font-family: ', objects[i].fontFamily, '; ',\n            'src: url(\\'', objects[i].path, '\\')',\n          '}'\n          //jscs:enable validateIndentation\n        ].join('');\n      }\n\n      if (markup) {\n        markup = [\n          //jscs:disable validateIndentation\n          '<style type=\"text/css\">',\n            '<![CDATA[',\n              markup,\n            ']]>',\n          '</style>'\n          //jscs:enable validateIndentation\n        ].join('');\n      }\n\n      return markup;\n    },\n\n    /**\n     * Creates markup containing SVG referenced elements like patterns, gradients etc.\n     * @param {fabric.Canvas} canvas instance of fabric.Canvas\n     * @return {String}\n     */\n    createSVGRefElementsMarkup: function(canvas) {\n      var markup = [ ];\n\n      _createSVGPattern(markup, canvas, 'backgroundColor');\n      _createSVGPattern(markup, canvas, 'overlayColor');\n\n      return markup.join('');\n    }\n  });\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\nfabric.ElementsParser = function(elements, callback, options, reviver) {\n  this.elements = elements;\n  this.callback = callback;\n  this.options = options;\n  this.reviver = reviver;\n  this.svgUid = (options && options.svgUid) || 0;\n};\n\nfabric.ElementsParser.prototype.parse = function() {\n  this.instances = new Array(this.elements.length);\n  this.numElements = this.elements.length;\n\n  this.createObjects();\n};\n\nfabric.ElementsParser.prototype.createObjects = function() {\n  for (var i = 0, len = this.elements.length; i < len; i++) {\n    this.elements[i].setAttribute('svgUid', this.svgUid);\n    (function(_this, i) {\n      setTimeout(function() {\n        _this.createObject(_this.elements[i], i);\n      }, 0);\n    })(this, i);\n  }\n};\n\nfabric.ElementsParser.prototype.createObject = function(el, index) {\n  var klass = fabric[fabric.util.string.capitalize(el.tagName)];\n  if (klass && klass.fromElement) {\n    try {\n      this._createObject(klass, el, index);\n    }\n    catch (err) {\n      fabric.log(err);\n    }\n  }\n  else {\n    this.checkIfDone();\n  }\n};\n\nfabric.ElementsParser.prototype._createObject = function(klass, el, index) {\n  if (klass.async) {\n    klass.fromElement(el, this.createCallback(index, el), this.options);\n  }\n  else {\n    var obj = klass.fromElement(el, this.options);\n    this.resolveGradient(obj, 'fill');\n    this.resolveGradient(obj, 'stroke');\n    this.reviver && this.reviver(el, obj);\n    this.instances[index] = obj;\n    this.checkIfDone();\n  }\n};\n\nfabric.ElementsParser.prototype.createCallback = function(index, el) {\n  var _this = this;\n  return function(obj) {\n    _this.resolveGradient(obj, 'fill');\n    _this.resolveGradient(obj, 'stroke');\n    _this.reviver && _this.reviver(el, obj);\n    _this.instances[index] = obj;\n    _this.checkIfDone();\n  };\n};\n\nfabric.ElementsParser.prototype.resolveGradient = function(obj, property) {\n\n  var instanceFillValue = obj.get(property);\n  if (!(/^url\\(/).test(instanceFillValue)) {\n    return;\n  }\n  var gradientId = instanceFillValue.slice(5, instanceFillValue.length - 1);\n  if (fabric.gradientDefs[this.svgUid][gradientId]) {\n    obj.set(property,\n      fabric.Gradient.fromElement(fabric.gradientDefs[this.svgUid][gradientId], obj));\n  }\n};\n\nfabric.ElementsParser.prototype.checkIfDone = function() {\n  if (--this.numElements === 0) {\n    this.instances = this.instances.filter(function(el) {\n      return el != null;\n    });\n    this.callback(this.instances);\n  }\n};\n\n\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Point) {\n    fabric.warn('fabric.Point is already defined');\n    return;\n  }\n\n  fabric.Point = Point;\n\n  /**\n   * Point class\n   * @class fabric.Point\n   * @memberOf fabric\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @return {fabric.Point} thisArg\n   */\n  function Point(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  Point.prototype = /** @lends fabric.Point.prototype */ {\n\n    constructor: Point,\n\n    /**\n     * Adds another point to this one and returns another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point instance with added values\n     */\n    add: function (that) {\n      return new Point(this.x + that.x, this.y + that.y);\n    },\n\n    /**\n     * Adds another point to this one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     */\n    addEquals: function (that) {\n      this.x += that.x;\n      this.y += that.y;\n      return this;\n    },\n\n    /**\n     * Adds value to this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point} new Point with added value\n     */\n    scalarAdd: function (scalar) {\n      return new Point(this.x + scalar, this.y + scalar);\n    },\n\n    /**\n     * Adds value to this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     */\n    scalarAddEquals: function (scalar) {\n      this.x += scalar;\n      this.y += scalar;\n      return this;\n    },\n\n    /**\n     * Subtracts another point from this point and returns a new one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point object with subtracted values\n     */\n    subtract: function (that) {\n      return new Point(this.x - that.x, this.y - that.y);\n    },\n\n    /**\n     * Subtracts another point from this point\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     */\n    subtractEquals: function (that) {\n      this.x -= that.x;\n      this.y -= that.y;\n      return this;\n    },\n\n    /**\n     * Subtracts value from this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    scalarSubtract: function (scalar) {\n      return new Point(this.x - scalar, this.y - scalar);\n    },\n\n    /**\n     * Subtracts value from this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     */\n    scalarSubtractEquals: function (scalar) {\n      this.x -= scalar;\n      this.y -= scalar;\n      return this;\n    },\n\n    /**\n     * Miltiplies this point by a value and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    multiply: function (scalar) {\n      return new Point(this.x * scalar, this.y * scalar);\n    },\n\n    /**\n     * Miltiplies this point by a value\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     */\n    multiplyEquals: function (scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      return this;\n    },\n\n    /**\n     * Divides this point by a value and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    divide: function (scalar) {\n      return new Point(this.x / scalar, this.y / scalar);\n    },\n\n    /**\n     * Divides this point by a value\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     */\n    divideEquals: function (scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      return this;\n    },\n\n    /**\n     * Returns true if this point is equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    eq: function (that) {\n      return (this.x === that.x && this.y === that.y);\n    },\n\n    /**\n     * Returns true if this point is less than another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lt: function (that) {\n      return (this.x < that.x && this.y < that.y);\n    },\n\n    /**\n     * Returns true if this point is less than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lte: function (that) {\n      return (this.x <= that.x && this.y <= that.y);\n    },\n\n    /**\n\n     * Returns true if this point is greater another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gt: function (that) {\n      return (this.x > that.x && this.y > that.y);\n    },\n\n    /**\n     * Returns true if this point is greater than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gte: function (that) {\n      return (this.x >= that.x && this.y >= that.y);\n    },\n\n    /**\n     * Returns new point which is the result of linear interpolation with this one and another one\n     * @param {fabric.Point} that\n     * @param {Number} t\n     * @return {fabric.Point}\n     */\n    lerp: function (that, t) {\n      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n    },\n\n    /**\n     * Returns distance from this point and another one\n     * @param {fabric.Point} that\n     * @return {Number}\n     */\n    distanceFrom: function (that) {\n      var dx = this.x - that.x,\n          dy = this.y - that.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /**\n     * Returns the point between this point and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    midPointFrom: function (that) {\n      return new Point(this.x + (that.x - this.x)/2, this.y + (that.y - this.y)/2);\n    },\n\n    /**\n     * Returns a new point which is the min of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    min: function (that) {\n      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n    },\n\n    /**\n     * Returns a new point which is the max of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    max: function (that) {\n      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n    },\n\n    /**\n     * Returns string representation of this point\n     * @return {String}\n     */\n    toString: function () {\n      return this.x + ',' + this.y;\n    },\n\n    /**\n     * Sets x/y of this point\n     * @param {Number} x\n     * @param {Number} y\n     */\n    setXY: function (x, y) {\n      this.x = x;\n      this.y = y;\n    },\n\n    /**\n     * Sets x/y of this point from another point\n     * @param {fabric.Point} that\n     */\n    setFromPoint: function (that) {\n      this.x = that.x;\n      this.y = that.y;\n    },\n\n    /**\n     * Swaps x/y of this point and another point\n     * @param {fabric.Point} that\n     */\n    swap: function (that) {\n      var x = this.x,\n          y = this.y;\n      this.x = that.x;\n      this.y = that.y;\n      that.x = x;\n      that.y = y;\n    }\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Intersection) {\n    fabric.warn('fabric.Intersection is already defined');\n    return;\n  }\n\n  /**\n   * Intersection class\n   * @class fabric.Intersection\n   * @memberOf fabric\n   * @constructor\n   */\n  function Intersection(status) {\n    this.status = status;\n    this.points = [];\n  }\n\n  fabric.Intersection = Intersection;\n\n  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n\n    /**\n     * Appends a point to intersection\n     * @param {fabric.Point} point\n     */\n    appendPoint: function (point) {\n      this.points.push(point);\n    },\n\n    /**\n     * Appends points to intersection\n     * @param {Array} points\n     */\n    appendPoints: function (points) {\n      this.points = this.points.concat(points);\n    }\n  };\n\n  /**\n   * Checks if one line intersects another\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {fabric.Point} b1\n   * @param {fabric.Point} b2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\n    var result,\n        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n    if (uB !== 0) {\n      var ua = uaT / uB,\n          ub = ubT / uB;\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n        result = new Intersection('Intersection');\n        result.points.push(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n      }\n      else {\n        result = new Intersection();\n      }\n    }\n    else {\n      if (uaT === 0 || ubT === 0) {\n        result = new Intersection('Coincident');\n      }\n      else {\n        result = new Intersection('Parallel');\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Checks if line intersects polygon\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {Array} points\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n    var result = new Intersection(),\n        length = points.length;\n\n    for (var i = 0; i < length; i++) {\n      var b1 = points[i],\n          b2 = points[(i + 1) % length],\n          inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects another polygon\n   * @static\n   * @param {Array} points1\n   * @param {Array} points2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\n    var result = new Intersection(),\n        length = points1.length;\n\n    for (var i = 0; i < length; i++) {\n      var a1 = points1[i],\n          a2 = points1[(i + 1) % length],\n          inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @param {Array} points\n   * @param {Number} r1\n   * @param {Number} r2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\n    var min = r1.min(r2),\n        max = r1.max(r2),\n        topRight = new fabric.Point(max.x, min.y),\n        bottomLeft = new fabric.Point(min.x, max.y),\n        inter1 = Intersection.intersectLinePolygon(min, topRight, points),\n        inter2 = Intersection.intersectLinePolygon(topRight, max, points),\n        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\n        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\n        result = new Intersection();\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Color) {\n    fabric.warn('fabric.Color is already defined.');\n    return;\n  }\n\n  /**\n   * Color class\n   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n   *\n   * @class fabric.Color\n   * @param {String} color optional in hex or rgb(a) format\n   * @return {fabric.Color} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n   */\n  function Color(color) {\n    if (!color) {\n      this.setSource([0, 0, 0, 1]);\n    }\n    else {\n      this._tryParsingColor(color);\n    }\n  }\n\n  fabric.Color = Color;\n\n  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n\n    /**\n     * @private\n     * @param {String|Array} color Color value to parse\n     */\n    _tryParsingColor: function(color) {\n      var source;\n\n      if (color in Color.colorNameMap) {\n        color = Color.colorNameMap[color];\n      }\n\n      if (color === 'transparent') {\n        this.setSource([255, 255, 255, 0]);\n        return;\n      }\n\n      source = Color.sourceFromHex(color);\n\n      if (!source) {\n        source = Color.sourceFromRgb(color);\n      }\n      if (!source) {\n        source = Color.sourceFromHsl(color);\n      }\n      if (source) {\n        this.setSource(source);\n      }\n    },\n\n    /**\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n     * @private\n     * @param {Number} r Red color value\n     * @param {Number} g Green color value\n     * @param {Number} b Blue color value\n     * @return {Array} Hsl color\n     */\n    _rgbToHsl: function(r, g, b) {\n      r /= 255, g /= 255, b /= 255;\n\n      var h, s, l,\n          max = fabric.util.array.max([r, g, b]),\n          min = fabric.util.array.min([r, g, b]);\n\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0; // achromatic\n      }\n      else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n            break;\n        }\n        h /= 6;\n      }\n\n      return [\n        Math.round(h * 360),\n        Math.round(s * 100),\n        Math.round(l * 100)\n      ];\n    },\n\n    /**\n     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @return {Array}\n     */\n    getSource: function() {\n      return this._source;\n    },\n\n    /**\n     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @param {Array} source\n     */\n    setSource: function(source) {\n      this._source = source;\n    },\n\n    /**\n     * Returns color represenation in RGB format\n     * @return {String} ex: rgb(0-255,0-255,0-255)\n     */\n    toRgb: function() {\n      var source = this.getSource();\n      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\n    },\n\n    /**\n     * Returns color represenation in RGBA format\n     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n     */\n    toRgba: function() {\n      var source = this.getSource();\n      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\n    },\n\n    /**\n     * Returns color represenation in HSL format\n     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n     */\n    toHsl: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\n    },\n\n    /**\n     * Returns color represenation in HSLA format\n     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n     */\n    toHsla: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\n    },\n\n    /**\n     * Returns color represenation in HEX format\n     * @return {String} ex: FF5555\n     */\n    toHex: function() {\n      var source = this.getSource(), r, g, b;\n\n      r = source[0].toString(16);\n      r = (r.length === 1) ? ('0' + r) : r;\n\n      g = source[1].toString(16);\n      g = (g.length === 1) ? ('0' + g) : g;\n\n      b = source[2].toString(16);\n      b = (b.length === 1) ? ('0' + b) : b;\n\n      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n    },\n\n    /**\n     * Gets value of alpha channel for this color\n     * @return {Number} 0-1\n     */\n    getAlpha: function() {\n      return this.getSource()[3];\n    },\n\n    /**\n     * Sets value of alpha channel for this color\n     * @param {Number} alpha Alpha value 0-1\n     * @return {fabric.Color} thisArg\n     */\n    setAlpha: function(alpha) {\n      var source = this.getSource();\n      source[3] = alpha;\n      this.setSource(source);\n      return this;\n    },\n\n    /**\n     * Transforms color to its grayscale representation\n     * @return {fabric.Color} thisArg\n     */\n    toGrayscale: function() {\n      var source = this.getSource(),\n          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\n          currentAlpha = source[3];\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Transforms color to its black and white representation\n     * @param {Number} threshold\n     * @return {fabric.Color} thisArg\n     */\n    toBlackWhite: function(threshold) {\n      var source = this.getSource(),\n          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\n          currentAlpha = source[3];\n\n      threshold = threshold || 127;\n\n      average = (Number(average) < Number(threshold)) ? 0 : 255;\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Overlays color with another color\n     * @param {String|fabric.Color} otherColor\n     * @return {fabric.Color} thisArg\n     */\n    overlayWith: function(otherColor) {\n      if (!(otherColor instanceof Color)) {\n        otherColor = new Color(otherColor);\n      }\n\n      var result = [],\n          alpha = this.getAlpha(),\n          otherAlpha = 0.5,\n          source = this.getSource(),\n          otherSource = otherColor.getSource();\n\n      for (var i = 0; i < 3; i++) {\n        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\n      }\n\n      result[3] = alpha;\n      this.setSource(result);\n      return this;\n    }\n  };\n\n  /**\n   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/;\n\n  /**\n   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/;\n\n  /**\n   * Regex matching color in HEX format (ex: #FF5555, 010155, aff)\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHex = /^#?([0-9a-f]{6}|[0-9a-f]{3})$/i;\n\n  /**\n   * Map of the 17 basic color names with HEX code\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   * @see: http://www.w3.org/TR/CSS2/syndata.html#color-units\n   */\n  fabric.Color.colorNameMap = {\n    aqua:    '#00FFFF',\n    black:   '#000000',\n    blue:    '#0000FF',\n    fuchsia: '#FF00FF',\n    gray:    '#808080',\n    green:   '#008000',\n    lime:    '#00FF00',\n    maroon:  '#800000',\n    navy:    '#000080',\n    olive:   '#808000',\n    orange:  '#FFA500',\n    purple:  '#800080',\n    red:     '#FF0000',\n    silver:  '#C0C0C0',\n    teal:    '#008080',\n    white:   '#FFFFFF',\n    yellow:  '#FFFF00'\n  };\n\n  /**\n   * @private\n   * @param {Number} p\n   * @param {Number} q\n   * @param {Number} t\n   * @return {Number}\n   */\n  function hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1/6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1/2) {\n      return q;\n    }\n    if (t < 2/3) {\n      return p + (q - p) * (2/3 - t) * 6;\n    }\n    return p;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgb = function(color) {\n    return Color.fromSource(Color.sourceFromRgb(color));\n  };\n\n  /**\n   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromRgb = function(color) {\n    var match = color.match(Color.reRGBa);\n    if (match) {\n      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\n          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\n          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n\n      return [\n        parseInt(r, 10),\n        parseInt(g, 10),\n        parseInt(b, 10),\n        match[4] ? parseFloat(match[4]) : 1\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgba = Color.fromRgb;\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf fabric.Color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsl = function(color) {\n    return Color.fromSource(Color.sourceFromHsl(color));\n  };\n\n  /**\n   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {Array} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  fabric.Color.sourceFromHsl = function(color) {\n    var match = color.match(Color.reHSLa);\n    if (!match) {\n      return;\n    }\n\n    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\n        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\n        r, g, b;\n\n    if (s === 0) {\n      r = g = b = l;\n    }\n    else {\n      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n          p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1/3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      match[4] ? parseFloat(match[4]) : 1\n    ];\n  };\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsla = Color.fromHsl;\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: FF5555\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHex = function(color) {\n    return Color.fromSource(Color.sourceFromHex(color));\n  };\n\n  /**\n   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color ex: FF5555\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromHex = function(color) {\n    if (color.match(Color.reHex)) {\n      var value = color.slice(color.indexOf('#') + 1),\n          isShortNotation = (value.length === 3),\n          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\n          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\n          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6);\n\n      return [\n        parseInt(r, 16),\n        parseInt(g, 16),\n        parseInt(b, 16),\n        1\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n   * @static\n   * @memberOf fabric.Color\n   * @param {Array} source\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromSource = function(source) {\n    var oColor = new Color();\n    oColor.setSource(source);\n    return oColor;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  /* _FROM_SVG_START_ */\n  function getColorStop(el) {\n    var style = el.getAttribute('style'),\n        offset = el.getAttribute('offset'),\n        color, colorAlpha, opacity;\n\n    // convert percents to absolute values\n    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\n    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\n    if (style) {\n      var keyValuePairs = style.split(/\\s*;\\s*/);\n\n      if (keyValuePairs[keyValuePairs.length - 1] === '') {\n        keyValuePairs.pop();\n      }\n\n      for (var i = keyValuePairs.length; i--; ) {\n\n        var split = keyValuePairs[i].split(/\\s*:\\s*/),\n            key = split[0].trim(),\n            value = split[1].trim();\n\n        if (key === 'stop-color') {\n          color = value;\n        }\n        else if (key === 'stop-opacity') {\n          opacity = value;\n        }\n      }\n    }\n\n    if (!color) {\n      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\n    }\n    if (!opacity) {\n      opacity = el.getAttribute('stop-opacity');\n    }\n\n    color = new fabric.Color(color);\n    colorAlpha = color.getAlpha();\n    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\n    opacity *= colorAlpha;\n\n    return {\n      offset: offset,\n      color: color.toRgb(),\n      opacity: opacity\n    };\n  }\n\n  function getLinearCoords(el) {\n    return {\n      x1: el.getAttribute('x1') || 0,\n      y1: el.getAttribute('y1') || 0,\n      x2: el.getAttribute('x2') || '100%',\n      y2: el.getAttribute('y2') || 0\n    };\n  }\n\n  function getRadialCoords(el) {\n    return {\n      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\n      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\n      r1: 0,\n      x2: el.getAttribute('cx') || '50%',\n      y2: el.getAttribute('cy') || '50%',\n      r2: el.getAttribute('r') || '50%'\n    };\n  }\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Gradient class\n   * @class fabric.Gradient\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#gradients}\n   * @see {@link fabric.Gradient#initialize} for constructor definition\n   */\n  fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\n\n    /**\n     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n     * @type Number\n     * @default 0\n     */\n    offsetX: 0,\n\n    /**\n     * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n     * @type Number\n     * @default 0\n     */\n    offsetY: 0,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops\n     * @return {fabric.Gradient} thisArg\n     */\n    initialize: function(options) {\n      options || (options = { });\n\n      var coords = { };\n\n      this.id = fabric.Object.__uid++;\n      this.type = options.type || 'linear';\n\n      coords = {\n        x1: options.coords.x1 || 0,\n        y1: options.coords.y1 || 0,\n        x2: options.coords.x2 || 0,\n        y2: options.coords.y2 || 0\n      };\n\n      if (this.type === 'radial') {\n        coords.r1 = options.coords.r1 || 0;\n        coords.r2 = options.coords.r2 || 0;\n      }\n      this.coords = coords;\n      this.colorStops = options.colorStops.slice();\n      if (options.gradientTransform) {\n        this.gradientTransform = options.gradientTransform;\n      }\n      this.offsetX = options.offsetX || this.offsetX;\n      this.offsetY = options.offsetY || this.offsetY;\n    },\n\n    /**\n     * Adds another colorStop\n     * @param {Object} colorStop Object with offset and color\n     * @return {fabric.Gradient} thisArg\n     */\n    addColorStop: function(colorStop) {\n      for (var position in colorStop) {\n        var color = new fabric.Color(colorStop[position]);\n        this.colorStops.push({\n          offset: position,\n          color: color.toRgb(),\n          opacity: color.getAlpha()\n        });\n      }\n      return this;\n    },\n\n    /**\n     * Returns object representation of a gradient\n     * @return {Object}\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        coords: this.coords,\n        colorStops: this.colorStops,\n        offsetX: this.offsetX,\n        offsetY: this.offsetY\n      };\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an gradient\n     * @param {Object} object Object to create a gradient for\n     * @param {Boolean} normalize Whether coords should be normalized\n     * @return {String} SVG representation of an gradient (linear/radial)\n     */\n    toSVG: function(object) {\n      var coords = fabric.util.object.clone(this.coords),\n          markup, commonAttributes;\n\n      // colorStops must be sorted ascending\n      this.colorStops.sort(function(a, b) {\n        return a.offset - b.offset;\n      });\n\n      if (!(object.group && object.group.type === 'path-group')) {\n        for (var prop in coords) {\n          if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n            coords[prop] += this.offsetX - object.width / 2;\n          }\n          else if (prop === 'y1' || prop === 'y2') {\n            coords[prop] += this.offsetY - object.height / 2;\n          }\n        }\n      }\n\n      commonAttributes = 'id=\"SVGID_' + this.id +\n                     '\" gradientUnits=\"userSpaceOnUse\"';\n      if (this.gradientTransform) {\n        commonAttributes += ' gradientTransform=\"matrix(' + this.gradientTransform.join(' ') + ')\" ';\n      }\n      if (this.type === 'linear') {\n        markup = [\n          //jscs:disable validateIndentation\n          '<linearGradient ',\n            commonAttributes,\n            ' x1=\"', coords.x1,\n            '\" y1=\"', coords.y1,\n            '\" x2=\"', coords.x2,\n            '\" y2=\"', coords.y2,\n          '\">\\n'\n          //jscs:enable validateIndentation\n        ];\n      }\n      else if (this.type === 'radial') {\n        markup = [\n          //jscs:disable validateIndentation\n          '<radialGradient ',\n            commonAttributes,\n            ' cx=\"', coords.x2,\n            '\" cy=\"', coords.y2,\n            '\" r=\"', coords.r2,\n            '\" fx=\"', coords.x1,\n            '\" fy=\"', coords.y1,\n          '\">\\n'\n          //jscs:enable validateIndentation\n        ];\n      }\n\n      for (var i = 0; i < this.colorStops.length; i++) {\n        markup.push(\n          //jscs:disable validateIndentation\n          '<stop ',\n            'offset=\"', (this.colorStops[i].offset * 100) + '%',\n            '\" style=\"stop-color:', this.colorStops[i].color,\n            (this.colorStops[i].opacity != null ? ';stop-opacity: ' + this.colorStops[i].opacity : ';'),\n          '\"/>\\n'\n          //jscs:enable validateIndentation\n        );\n      }\n\n      markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\n\n      return markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns an instance of CanvasGradient\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {CanvasGradient}\n     */\n    toLive: function(ctx, object) {\n      var gradient, prop, coords = fabric.util.object.clone(this.coords);\n\n      if (!this.type) {\n        return;\n      }\n\n      if (object.group && object.group.type === 'path-group') {\n        for (prop in coords) {\n          if (prop === 'x1' || prop === 'x2') {\n            coords[prop] += -this.offsetX + object.width / 2;\n          }\n          else if (prop === 'y1' || prop === 'y2') {\n            coords[prop] += -this.offsetY + object.height / 2;\n          }\n        }\n      }\n\n      if (this.type === 'linear') {\n        gradient = ctx.createLinearGradient(\n          coords.x1, coords.y1, coords.x2, coords.y2);\n      }\n      else if (this.type === 'radial') {\n        gradient = ctx.createRadialGradient(\n          coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);\n      }\n\n      for (var i = 0, len = this.colorStops.length; i < len; i++) {\n        var color = this.colorStops[i].color,\n            opacity = this.colorStops[i].opacity,\n            offset = this.colorStops[i].offset;\n\n        if (typeof opacity !== 'undefined') {\n          color = new fabric.Color(color).setAlpha(opacity).toRgba();\n        }\n        gradient.addColorStop(parseFloat(offset), color);\n      }\n\n      return gradient;\n    }\n  });\n\n  fabric.util.object.extend(fabric.Gradient, {\n\n    /* _FROM_SVG_START_ */\n    /**\n     * Returns {@link fabric.Gradient} instance from an SVG element\n     * @static\n     * @memberOf fabric.Gradient\n     * @param {SVGGradientElement} el SVG gradient element\n     * @param {fabric.Object} instance\n     * @return {fabric.Gradient} Gradient instance\n     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n     */\n    fromElement: function(el, instance) {\n\n      /**\n       *  @example:\n       *\n       *  <linearGradient id=\"linearGrad1\">\n       *    <stop offset=\"0%\" stop-color=\"white\"/>\n       *    <stop offset=\"100%\" stop-color=\"black\"/>\n       *  </linearGradient>\n       *\n       *  OR\n       *\n       *  <linearGradient id=\"linearGrad2\">\n       *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n       *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n       *  </linearGradient>\n       *\n       *  OR\n       *\n       *  <radialGradient id=\"radialGrad1\">\n       *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n       *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n       *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n       *  </radialGradient>\n       *\n       *  OR\n       *\n       *  <radialGradient id=\"radialGrad2\">\n       *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n       *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n       *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n       *  </radialGradient>\n       *\n       */\n\n      var colorStopEls = el.getElementsByTagName('stop'),\n          type = (el.nodeName === 'linearGradient' ? 'linear' : 'radial'),\n          gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',\n          gradientTransform = el.getAttribute('gradientTransform'),\n          colorStops = [],\n          coords = { }, ellipseMatrix;\n\n      if (type === 'linear') {\n        coords = getLinearCoords(el);\n      }\n      else if (type === 'radial') {\n        coords = getRadialCoords(el);\n      }\n\n      for (var i = colorStopEls.length; i--; ) {\n        colorStops.push(getColorStop(colorStopEls[i]));\n      }\n\n      ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);\n\n      var gradient = new fabric.Gradient({\n        type: type,\n        coords: coords,\n        colorStops: colorStops,\n        offsetX: -instance.left,\n        offsetY: -instance.top\n      });\n\n      if (gradientTransform || ellipseMatrix !== '') {\n        gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);\n      }\n      return gradient;\n    },\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns {@link fabric.Gradient} instance from its object representation\n     * @static\n     * @memberOf fabric.Gradient\n     * @param {Object} obj\n     * @param {Object} [options] Options object\n     */\n    forObject: function(obj, options) {\n      options || (options = { });\n      _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');\n      return new fabric.Gradient(options);\n    }\n  });\n\n  /**\n   * @private\n   */\n  function _convertPercentUnitsToValues(object, options, gradientUnits) {\n    var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';\n    for (var prop in options) {\n      propValue = parseFloat(options[prop], 10);\n      if (typeof options[prop] === 'string' && /^\\d+%$/.test(options[prop])) {\n        multFactor = 0.01;\n      }\n      else {\n        multFactor = 1;\n      }\n      if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n        multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;\n        addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;\n      }\n      else if (prop === 'y1' || prop === 'y2') {\n        multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;\n        addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;\n      }\n      options[prop] = propValue * multFactor + addFactor;\n    }\n    if (object.type === 'ellipse' &&\n        options.r2 !== null &&\n        gradientUnits === 'objectBoundingBox' &&\n        object.rx !== object.ry) {\n\n      var scaleFactor = object.ry/object.rx;\n      ellipseMatrix = ' scale(1, ' + scaleFactor + ')';\n      if (options.y1) {\n        options.y1 /= scaleFactor;\n      }\n      if (options.y2) {\n        options.y2 /= scaleFactor;\n      }\n    }\n    return ellipseMatrix;\n  }\n})();\n\n\n/**\n * Pattern class\n * @class fabric.Pattern\n * @see {@link http://fabricjs.com/patterns/|Pattern demo}\n * @see {@link http://fabricjs.com/dynamic-patterns/|DynamicPattern demo}\n * @see {@link fabric.Pattern#initialize} for constructor definition\n */\nfabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\n\n  /**\n   * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n   * @type String\n   * @default\n   */\n  repeat: 'repeat',\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX: 0,\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY: 0,\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @return {fabric.Pattern} thisArg\n   */\n  initialize: function(options) {\n    options || (options = { });\n\n    this.id = fabric.Object.__uid++;\n\n    if (options.source) {\n      if (typeof options.source === 'string') {\n        // function string\n        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\n          this.source = new Function(fabric.util.getFunctionBody(options.source));\n        }\n        else {\n          // img src string\n          var _this = this;\n          this.source = fabric.util.createImage();\n          fabric.util.loadImage(options.source, function(img) {\n            _this.source = img;\n          });\n        }\n      }\n      else {\n        // img element\n        this.source = options.source;\n      }\n    }\n    if (options.repeat) {\n      this.repeat = options.repeat;\n    }\n    if (options.offsetX) {\n      this.offsetX = options.offsetX;\n    }\n    if (options.offsetY) {\n      this.offsetY = options.offsetY;\n    }\n  },\n\n  /**\n   * Returns object representation of a pattern\n   * @return {Object} Object representation of a pattern instance\n   */\n  toObject: function() {\n\n    var source;\n\n    // callback\n    if (typeof this.source === 'function') {\n      source = String(this.source);\n    }\n    // <img> element\n    else if (typeof this.source.src === 'string') {\n      source = this.source.src;\n    }\n    // <canvas> element\n    else if (typeof this.source === 'object' && this.source.toDataURL) {\n      source = this.source.toDataURL();\n    }\n\n    return {\n      source: source,\n      repeat: this.repeat,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY\n    };\n  },\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   * @param {fabric.Object} object\n   * @return {String} SVG representation of a pattern\n   */\n  toSVG: function(object) {\n    var patternSource = typeof this.source === 'function' ? this.source() : this.source,\n        patternWidth = patternSource.width / object.getWidth(),\n        patternHeight = patternSource.height / object.getHeight(),\n        patternOffsetX = this.offsetX / object.getWidth(),\n        patternOffsetY = this.offsetY / object.getHeight(),\n        patternImgSrc = '';\n    if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\n      patternHeight = 1;\n    }\n    if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\n      patternWidth = 1;\n    }\n    if (patternSource.src) {\n      patternImgSrc = patternSource.src;\n    }\n    else if (patternSource.toDataURL) {\n      patternImgSrc = patternSource.toDataURL();\n    }\n\n    return '<pattern id=\"SVGID_' + this.id +\n                  '\" x=\"' + patternOffsetX +\n                  '\" y=\"' + patternOffsetY +\n                  '\" width=\"' + patternWidth +\n                  '\" height=\"' + patternHeight + '\">\\n' +\n             '<image x=\"0\" y=\"0\"' +\n                    ' width=\"' + patternSource.width +\n                    '\" height=\"' + patternSource.height +\n                    '\" xlink:href=\"' + patternImgSrc +\n             '\"></image>\\n' +\n           '</pattern>\\n';\n  },\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive: function(ctx) {\n    var source = typeof this.source === 'function'\n      ? this.source()\n      : this.source;\n\n    // if the image failed to load, return, and allow rest to continue loading\n    if (!source) {\n      return '';\n    }\n\n    // if an image\n    if (typeof source.src !== 'undefined') {\n      if (!source.complete) {\n        return '';\n      }\n      if (source.naturalWidth === 0 || source.naturalHeight === 0) {\n        return '';\n      }\n    }\n    return ctx.createPattern(source, this.repeat);\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Shadow) {\n    fabric.warn('fabric.Shadow is already defined.');\n    return;\n  }\n\n  /**\n   * Shadow class\n   * @class fabric.Shadow\n   * @see {@link http://fabricjs.com/shadows/|Shadow demo}\n   * @see {@link fabric.Shadow#initialize} for constructor definition\n   */\n  fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\n\n    /**\n     * Shadow color\n     * @type String\n     * @default\n     */\n    color: 'rgb(0,0,0)',\n\n    /**\n     * Shadow blur\n     * @type Number\n     */\n    blur: 0,\n\n    /**\n     * Shadow horizontal offset\n     * @type Number\n     * @default\n     */\n    offsetX: 0,\n\n    /**\n     * Shadow vertical offset\n     * @type Number\n     * @default\n     */\n    offsetY: 0,\n\n    /**\n     * Whether the shadow should affect stroke operations\n     * @type Boolean\n     * @default\n     */\n    affectStroke: false,\n\n    /**\n     * Indicates whether toObject should include default values\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Constructor\n     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetX properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px, \"2px 2px 10px rgba(0,0,0,0.2)\")\n     * @return {fabric.Shadow} thisArg\n     */\n    initialize: function(options) {\n\n      if (typeof options === 'string') {\n        options = this._parseShadow(options);\n      }\n\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n\n      this.id = fabric.Object.__uid++;\n    },\n\n    /**\n     * @private\n     * @param {String} shadow Shadow value to parse\n     * @return {Object} Shadow object with color, offsetX, offsetY and blur\n     */\n    _parseShadow: function(shadow) {\n      var shadowStr = shadow.trim(),\n          offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [ ],\n          color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\n\n      return {\n        color: color.trim(),\n        offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n        offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\n        blur: parseInt(offsetsAndBlur[3], 10) || 0\n      };\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n     * @return {String} Returns CSS3 text-shadow declaration\n     */\n    toString: function() {\n      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of a shadow\n     * @param {fabric.Object} object\n     * @return {String} SVG representation of a shadow\n     */\n    toSVG: function(object) {\n      var fBoxX = 40, fBoxY = 40;\n\n      if (object.width && object.height) {\n        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n        // we add some extra space to filter box to contain the blur ( 20 )\n        fBoxX = toFixed((Math.abs(this.offsetX) + this.blur) / object.width, 2) * 100 + 20;\n        fBoxY = toFixed((Math.abs(this.offsetY) + this.blur) / object.height, 2) * 100 + 20;\n      }\n\n      return (\n        '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\n          'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\n          '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\n            toFixed(this.blur ? this.blur / 2 : 0, 3) + '\"></feGaussianBlur>\\n' +\n          '\\t<feOffset dx=\"' + this.offsetX + '\" dy=\"' + this.offsetY + '\" result=\"oBlur\" ></feOffset>\\n' +\n          '\\t<feFlood flood-color=\"' + this.color + '\"/>\\n' +\n          '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\n          '\\t<feMerge>\\n' +\n            '\\t\\t<feMergeNode></feMergeNode>\\n' +\n            '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\n          '\\t</feMerge>\\n' +\n        '</filter>\\n');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns object representation of a shadow\n     * @return {Object} Object representation of a shadow instance\n     */\n    toObject: function() {\n      if (this.includeDefaultValues) {\n        return {\n          color: this.color,\n          blur: this.blur,\n          offsetX: this.offsetX,\n          offsetY: this.offsetY\n        };\n      }\n      var obj = { }, proto = fabric.Shadow.prototype;\n      if (this.color !== proto.color) {\n        obj.color = this.color;\n      }\n      if (this.blur !== proto.blur) {\n        obj.blur = this.blur;\n      }\n      if (this.offsetX !== proto.offsetX) {\n        obj.offsetX = this.offsetX;\n      }\n      if (this.offsetY !== proto.offsetY) {\n        obj.offsetY = this.offsetY;\n      }\n      return obj;\n    }\n  });\n\n  /**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * @static\n   * @field\n   * @memberOf fabric.Shadow\n   */\n  fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function () {\n\n  'use strict';\n\n  if (fabric.StaticCanvas) {\n    fabric.warn('fabric.StaticCanvas is already defined.');\n    return;\n  }\n\n  // aliases for faster resolution\n  var extend = fabric.util.object.extend,\n      getElementOffset = fabric.util.getElementOffset,\n      removeFromArray = fabric.util.removeFromArray,\n\n      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\n\n  /**\n   * Static canvas class\n   * @class fabric.StaticCanvas\n   * @mixes fabric.Collection\n   * @mixes fabric.Observable\n   * @see {@link http://fabricjs.com/static_canvas/|StaticCanvas demo}\n   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n   * @fires before:render\n   * @fires after:render\n   * @fires canvas:cleared\n   * @fires object:added\n   * @fires object:removed\n   */\n  fabric.StaticCanvas = fabric.util.createClass(/** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n\n      this._initStatic(el, options);\n      fabric.StaticCanvas.activeInstance = this;\n    },\n\n    /**\n     * Background color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    backgroundColor: '',\n\n    /**\n     * Background image of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\n     * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\n     * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\n     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\n     * @type fabric.Image\n     * @default\n     */\n    backgroundImage: null,\n\n    /**\n     * Overlay color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n     * @since 1.3.9\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    overlayColor: '',\n\n    /**\n     * Overlay image of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\n     * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\n     * and \"overlayImageTop\" properties are deprecated since 1.3.9.\n     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\n     * @type fabric.Image\n     * @default\n     */\n    overlayImage: null,\n\n    /**\n     * Indicates whether toObject/toDatalessObject should include default values\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Indicates whether objects' state should be saved\n     * @type Boolean\n     * @default\n     */\n    stateful: true,\n\n    /**\n     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove} should also re-render canvas.\n     * Disabling this option could give a great performance boost when adding/removing a lot of objects to/from canvas at once\n     * (followed by a manual rendering after addition/deletion)\n     * @type Boolean\n     * @default\n     */\n    renderOnAddRemove: true,\n\n    /**\n     * Function that determines clipping of entire canvas area\n     * Being passed context as first argument. See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\n     * @type Function\n     * @default\n     */\n    clipTo: null,\n\n    /**\n     * Indicates whether object controls (borders/controls) are rendered above overlay image\n     * @type Boolean\n     * @default\n     */\n    controlsAboveOverlay: false,\n\n    /**\n     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n     * @type Boolean\n     * @default\n     */\n    allowTouchScrolling: false,\n\n    /**\n     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n     * @type Boolean\n     * @default\n     */\n    imageSmoothingEnabled: true,\n\n    /**\n     * Indicates whether objects should remain in current stack position when selected. When false objects are brought to top and rendered as part of the selection group\n     * @type Boolean\n     * @default\n     */\n    preserveObjectStacking: false,\n\n    /**\n     * The transformation (in the format of Canvas transform) which focuses the viewport\n     * @type Array\n     * @default\n     */\n    viewportTransform: [1, 0, 0, 1, 0, 0],\n\n    /**\n     * Callback; invoked right before object is about to be scaled/rotated\n     */\n    onBeforeScaleRotate: function () {\n      /* NOOP */\n    },\n\n    /**\n     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n     */\n    enableRetinaScaling: true,\n\n    /**\n     * @private\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     */\n    _initStatic: function(el, options) {\n      this._objects = [];\n\n      this._createLowerCanvas(el);\n      this._initOptions(options);\n      this._setImageSmoothing();\n\n      // only initialize retina scaling once\n      if (!this.interactive) {\n        this._initRetinaScaling();\n      }\n\n      if (options.overlayImage) {\n        this.setOverlayImage(options.overlayImage, this.renderAll.bind(this));\n      }\n      if (options.backgroundImage) {\n        this.setBackgroundImage(options.backgroundImage, this.renderAll.bind(this));\n      }\n      if (options.backgroundColor) {\n        this.setBackgroundColor(options.backgroundColor, this.renderAll.bind(this));\n      }\n      if (options.overlayColor) {\n        this.setOverlayColor(options.overlayColor, this.renderAll.bind(this));\n      }\n      this.calcOffset();\n    },\n\n    /**\n     * @private\n     */\n    _initRetinaScaling: function() {\n      if (fabric.devicePixelRatio === 1 || !this.enableRetinaScaling) {\n        return;\n      }\n\n      this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);\n      this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);\n\n      this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);\n    },\n\n    /**\n     * Calculates canvas element offset relative to the document\n     * This method is also attached as \"resize\" event handler of window\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    calcOffset: function () {\n      this._offset = getElementOffset(this.lowerCanvasEl);\n      return this;\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n     * @example <caption>Normal overlayImage with left/top = 0</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage with different properties</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage loaded from cross-origin</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    setOverlayImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('overlayImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/YH9yD/|jsFiddle demo}\n     * @example <caption>Normal backgroundImage with left/top = 0</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage with different properties</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage loaded from cross-origin</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    setBackgroundImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('backgroundImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayColor|background color} for this canvas\n     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set background color to\n     * @param {Function} callback Callback to invoke when background color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n     * @example <caption>Normal overlayColor - color value</caption>\n     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setOverlayColor: function(overlayColor, callback) {\n      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n     * @param {Function} callback Callback to invoke when background color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n     * @example <caption>Normal backgroundColor - color value</caption>\n     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setBackgroundColor: function(backgroundColor, callback) {\n      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\n    },\n\n    /**\n     * @private\n     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\n     */\n    _setImageSmoothing: function() {\n      var ctx = this.getContext();\n\n      if (typeof ctx.imageSmoothingEnabled !== 'undefined') {\n        ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n        return;\n      }\n      ctx.webkitImageSmoothingEnabled = this.imageSmoothingEnabled;\n      ctx.mozImageSmoothingEnabled    = this.imageSmoothingEnabled;\n      ctx.msImageSmoothingEnabled     = this.imageSmoothingEnabled;\n      ctx.oImageSmoothingEnabled      = this.imageSmoothingEnabled;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n     */\n    __setBgOverlayImage: function(property, image, callback, options) {\n      if (typeof image === 'string') {\n        fabric.util.loadImage(image, function(img) {\n          this[property] = new fabric.Image(img, options);\n          callback && callback();\n        }, this, options && options.crossOrigin);\n      }\n      else {\n        options && image.setOptions(options);\n        this[property] = image;\n        callback && callback();\n      }\n\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n     * @param {(Object|String|null)} color Object with pattern information, color value or null\n     * @param {Function} [callback] Callback is invoked when color is set\n     */\n    __setBgOverlayColor: function(property, color, callback) {\n      if (color && color.source) {\n        var _this = this;\n        fabric.util.loadImage(color.source, function(img) {\n          _this[property] = new fabric.Pattern({\n            source: img,\n            repeat: color.repeat,\n            offsetX: color.offsetX,\n            offsetY: color.offsetY\n          });\n          callback && callback();\n        });\n      }\n      else {\n        this[property] = color;\n        callback && callback();\n      }\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _createCanvasElement: function() {\n      var element = fabric.document.createElement('canvas');\n      if (!element.style) {\n        element.style = { };\n      }\n      if (!element) {\n        throw CANVAS_INIT_ERROR;\n      }\n      this._initCanvasElement(element);\n      return element;\n    },\n\n    /**\n     * @private\n     * @param {HTMLElement} element\n     */\n    _initCanvasElement: function(element) {\n      fabric.util.createCanvasElement(element);\n\n      if (typeof element.getContext === 'undefined') {\n        throw CANVAS_INIT_ERROR;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initOptions: function (options) {\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n\n      this.width = this.width || parseInt(this.lowerCanvasEl.width, 10) || 0;\n      this.height = this.height || parseInt(this.lowerCanvasEl.height, 10) || 0;\n\n      if (!this.lowerCanvasEl.style) {\n        return;\n      }\n\n      this.lowerCanvasEl.width = this.width;\n      this.lowerCanvasEl.height = this.height;\n\n      this.lowerCanvasEl.style.width = this.width + 'px';\n      this.lowerCanvasEl.style.height = this.height + 'px';\n\n      this.viewportTransform = this.viewportTransform.slice();\n    },\n\n    /**\n     * Creates a bottom canvas\n     * @private\n     * @param {HTMLElement} [canvasEl]\n     */\n    _createLowerCanvas: function (canvasEl) {\n      this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n      this._initCanvasElement(this.lowerCanvasEl);\n\n      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\n\n      if (this.interactive) {\n        this._applyCanvasStyle(this.lowerCanvasEl);\n      }\n\n      this.contextContainer = this.lowerCanvasEl.getContext('2d');\n    },\n\n    /**\n     * Returns canvas width (in px)\n     * @return {Number}\n     */\n    getWidth: function () {\n      return this.width;\n    },\n\n    /**\n     * Returns canvas height (in px)\n     * @return {Number}\n     */\n    getHeight: function () {\n      return this.height;\n    },\n\n    /**\n     * Sets width of this canvas instance\n     * @param {Number|String} value                         Value to set width to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setWidth: function (value, options) {\n      return this.setDimensions({ width: value }, options);\n    },\n\n    /**\n     * Sets height of this canvas instance\n     * @param {Number|String} value                         Value to set height to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setHeight: function (value, options) {\n      return this.setDimensions({ height: value }, options);\n    },\n\n    /**\n     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n     * @param {Object}        dimensions                    Object with width/height properties\n     * @param {Number|String} [dimensions.width]            Width of canvas element\n     * @param {Number|String} [dimensions.height]           Height of canvas element\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setDimensions: function (dimensions, options) {\n      var cssValue;\n\n      options = options || {};\n\n      for (var prop in dimensions) {\n        cssValue = dimensions[prop];\n\n        if (!options.cssOnly) {\n          this._setBackstoreDimension(prop, dimensions[prop]);\n          cssValue += 'px';\n        }\n\n        if (!options.backstoreOnly) {\n          this._setCssDimension(prop, cssValue);\n        }\n      }\n\n      this._setImageSmoothing();\n      this.calcOffset();\n\n      if (!options.cssOnly) {\n        this.renderAll();\n      }\n\n      return this;\n    },\n\n    /**\n     * Helper for setting width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {Number} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setBackstoreDimension: function (prop, value) {\n      this.lowerCanvasEl[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl[prop] = value;\n      }\n\n      if (this.cacheCanvasEl) {\n        this.cacheCanvasEl[prop] = value;\n      }\n\n      this[prop] = value;\n\n      return this;\n    },\n\n    /**\n     * Helper for setting css width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {String} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setCssDimension: function (prop, value) {\n      this.lowerCanvasEl.style[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl.style[prop] = value;\n      }\n\n      if (this.wrapperEl) {\n        this.wrapperEl.style[prop] = value;\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns canvas zoom level\n     * @return {Number}\n     */\n    getZoom: function () {\n      return Math.sqrt(this.viewportTransform[0] * this.viewportTransform[3]);\n    },\n\n    /**\n     * Sets viewport transform of this canvas instance\n     * @param {Array} vpt the transform in the form of context.transform\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setViewportTransform: function (vpt) {\n      var activeGroup = this.getActiveGroup();\n      this.viewportTransform = vpt;\n      this.renderAll();\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].setCoords();\n      }\n      if (activeGroup) {\n        activeGroup.setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Sets zoom level of this canvas instance, zoom centered around point\n     * @param {fabric.Point} point to zoom with respect to\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    zoomToPoint: function (point, value) {\n      // TODO: just change the scale, preserve other transformations\n      var before = point;\n      point = fabric.util.transformPoint(point, fabric.util.invertTransform(this.viewportTransform));\n      this.viewportTransform[0] = value;\n      this.viewportTransform[3] = value;\n      var after = fabric.util.transformPoint(point, this.viewportTransform);\n      this.viewportTransform[4] += before.x - after.x;\n      this.viewportTransform[5] += before.y - after.y;\n      this.renderAll();\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Sets zoom level of this canvas instance\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setZoom: function (value) {\n      this.zoomToPoint(new fabric.Point(0, 0), value);\n      return this;\n    },\n\n    /**\n     * Pan viewport so as to place point at top left corner of canvas\n     * @param {fabric.Point} point to move to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    absolutePan: function (point) {\n      this.viewportTransform[4] = -point.x;\n      this.viewportTransform[5] = -point.y;\n      this.renderAll();\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Pans viewpoint relatively\n     * @param {fabric.Point} point (position vector) to move by\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    relativePan: function (point) {\n      return this.absolutePan(new fabric.Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5]\n      ));\n    },\n\n    /**\n     * Returns &lt;canvas> element corresponding to this instance\n     * @return {HTMLCanvasElement}\n     */\n    getElement: function () {\n      return this.lowerCanvasEl;\n    },\n\n    /**\n     * Returns currently selected object, if any\n     * @return {fabric.Object}\n     */\n    getActiveObject: function() {\n      return null;\n    },\n\n    /**\n     * Returns currently selected group of object, if any\n     * @return {fabric.Group}\n     */\n    getActiveGroup: function() {\n      return null;\n    },\n\n    /**\n     * Given a context, renders an object on that context\n     * @param {CanvasRenderingContext2D} ctx Context to render object on\n     * @param {fabric.Object} object Object to render\n     * @private\n     */\n    _draw: function (ctx, object) {\n      if (!object) {\n        return;\n      }\n\n      ctx.save();\n      var v = this.viewportTransform;\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      if (this._shouldRenderObject(object)) {\n        object.render(ctx);\n      }\n      ctx.restore();\n      if (!this.controlsAboveOverlay) {\n        object._renderControls(ctx);\n      }\n    },\n\n    _shouldRenderObject: function(object) {\n      if (!object) {\n        return false;\n      }\n      return (object !== this.getActiveGroup() || !this.preserveObjectStacking);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was added\n     */\n    _onObjectAdded: function(obj) {\n      this.stateful && obj.setupState();\n      obj._set('canvas', this);\n      obj.setCoords();\n      this.fire('object:added', { target: obj });\n      obj.fire('added');\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */\n    _onObjectRemoved: function(obj) {\n      // removing active object should fire \"selection:cleared\" events\n      if (this.getActiveObject() === obj) {\n        this.fire('before:selection:cleared', { target: obj });\n        this._discardActiveObject();\n        this.fire('selection:cleared');\n      }\n\n      this.fire('object:removed', { target: obj });\n      obj.fire('removed');\n    },\n\n    /**\n     * Clears specified context of canvas element\n     * @param {CanvasRenderingContext2D} ctx Context to clear\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clearContext: function(ctx) {\n      ctx.clearRect(0, 0, this.width, this.height);\n      return this;\n    },\n\n    /**\n     * Returns context of canvas where objects are drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getContext: function () {\n      return this.contextContainer;\n    },\n\n    /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clear: function () {\n      this._objects.length = 0;\n      if (this.discardActiveGroup) {\n        this.discardActiveGroup();\n      }\n      if (this.discardActiveObject) {\n        this.discardActiveObject();\n      }\n      this.clearContext(this.contextContainer);\n      if (this.contextTop) {\n        this.clearContext(this.contextTop);\n      }\n      this.fire('canvas:cleared');\n      this.renderAll();\n      return this;\n    },\n\n    /**\n     * Renders both the top canvas and the secondary container canvas.\n     * @param {Boolean} [allOnTop] Whether we want to force all images to be rendered on the top canvas\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAll: function (allOnTop) {\n      var canvasToDrawOn = this[(allOnTop === true && this.interactive) ? 'contextTop' : 'contextContainer'],\n          activeGroup = this.getActiveGroup();\n\n      if (this.contextTop && this.selection && !this._groupSelector) {\n        this.clearContext(this.contextTop);\n      }\n\n      if (!allOnTop) {\n        this.clearContext(canvasToDrawOn);\n      }\n\n      this.fire('before:render');\n\n      if (this.clipTo) {\n        fabric.util.clipContext(this, canvasToDrawOn);\n      }\n\n      this._renderBackground(canvasToDrawOn);\n      this._renderObjects(canvasToDrawOn, activeGroup);\n      this._renderActiveGroup(canvasToDrawOn, activeGroup);\n\n      if (this.clipTo) {\n        canvasToDrawOn.restore();\n      }\n\n      this._renderOverlay(canvasToDrawOn);\n\n      if (this.controlsAboveOverlay && this.interactive) {\n        this.drawControls(canvasToDrawOn);\n      }\n\n      this.fire('after:render');\n\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {fabric.Group} activeGroup\n     */\n    _renderObjects: function(ctx, activeGroup) {\n      var i, length;\n\n      // fast path\n      if (!activeGroup || this.preserveObjectStacking) {\n        for (i = 0, length = this._objects.length; i < length; ++i) {\n          this._draw(ctx, this._objects[i]);\n        }\n      }\n      else {\n        for (i = 0, length = this._objects.length; i < length; ++i) {\n          if (this._objects[i] && !activeGroup.contains(this._objects[i])) {\n            this._draw(ctx, this._objects[i]);\n          }\n        }\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {fabric.Group} activeGroup\n     */\n    _renderActiveGroup: function(ctx, activeGroup) {\n\n      // delegate rendering to group selection (if one exists)\n      if (activeGroup) {\n\n        //Store objects in group preserving order, then replace\n        var sortedObjects = [];\n        this.forEachObject(function (object) {\n          if (activeGroup.contains(object)) {\n            sortedObjects.push(object);\n          }\n        });\n        // forEachObject reverses the object, so we reverse again\n        activeGroup._set('_objects', sortedObjects.reverse());\n        this._draw(ctx, activeGroup);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderBackground: function(ctx) {\n      if (this.backgroundColor) {\n        ctx.fillStyle = this.backgroundColor.toLive\n          ? this.backgroundColor.toLive(ctx)\n          : this.backgroundColor;\n\n        ctx.fillRect(\n          this.backgroundColor.offsetX || 0,\n          this.backgroundColor.offsetY || 0,\n          this.width,\n          this.height);\n      }\n      if (this.backgroundImage) {\n        this._draw(ctx, this.backgroundImage);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderOverlay: function(ctx) {\n      if (this.overlayColor) {\n        ctx.fillStyle = this.overlayColor.toLive\n          ? this.overlayColor.toLive(ctx)\n          : this.overlayColor;\n\n        ctx.fillRect(\n          this.overlayColor.offsetX || 0,\n          this.overlayColor.offsetY || 0,\n          this.width,\n          this.height);\n      }\n      if (this.overlayImage) {\n        this._draw(ctx, this.overlayImage);\n      }\n    },\n\n    /**\n     * Method to render only the top canvas.\n     * Also used to render the group selection box.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    renderTop: function () {\n      var ctx = this.contextTop || this.contextContainer;\n      this.clearContext(ctx);\n\n      // we render the top context - last object\n      if (this.selection && this._groupSelector) {\n        this._drawSelection();\n      }\n\n      // delegate rendering to group selection if one exists\n      // used for drawing selection borders/controls\n      var activeGroup = this.getActiveGroup();\n      if (activeGroup) {\n        activeGroup.render(ctx);\n      }\n\n      this._renderOverlay(ctx);\n\n      this.fire('after:render');\n\n      return this;\n    },\n\n    /**\n     * Returns coordinates of a center of canvas.\n     * Returned value is an object with top and left properties\n     * @return {Object} object with \"top\" and \"left\" number values\n     */\n    getCenter: function () {\n      return {\n        top: this.getHeight() / 2,\n        left: this.getWidth() / 2\n      };\n    },\n\n    /**\n     * Centers object horizontally.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @param {fabric.Object} object Object to center horizontally\n     * @return {fabric.Canvas} thisArg\n     */\n    centerObjectH: function (object) {\n      this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\n      this.renderAll();\n      return this;\n    },\n\n    /**\n     * Centers object vertically.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @param {fabric.Object} object Object to center vertically\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObjectV: function (object) {\n      this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\n      this.renderAll();\n      return this;\n    },\n\n    /**\n     * Centers object vertically and horizontally.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObject: function(object) {\n      var center = this.getCenter();\n\n      this._centerObject(object, new fabric.Point(center.left, center.top));\n      this.renderAll();\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} object Object to center\n     * @param {fabric.Point} center Center point\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    _centerObject: function(object, center) {\n      object.setPositionByOrigin(center, 'center', 'center');\n      return this;\n    },\n\n    /**\n     * Returs dataless JSON representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {String} json string\n     */\n    toDatalessJSON: function (propertiesToInclude) {\n      return this.toDatalessObject(propertiesToInclude);\n    },\n\n    /**\n     * Returns object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toObject', propertiesToInclude);\n    },\n\n    /**\n     * Returns dataless object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n    },\n\n    /**\n     * @private\n     */\n    _toObjectMethod: function (methodName, propertiesToInclude) {\n\n      var data = {\n        objects: this._toObjects(methodName, propertiesToInclude)\n      };\n\n      extend(data, this.__serializeBgOverlay());\n\n      fabric.util.populateWithProperties(this, data, propertiesToInclude);\n\n      return data;\n    },\n\n    /**\n     * @private\n     */\n    _toObjects: function(methodName, propertiesToInclude) {\n      return this.getObjects().map(function(instance) {\n        return this._toObject(instance, methodName, propertiesToInclude);\n      }, this);\n    },\n\n    /**\n     * @private\n     */\n    _toObject: function(instance, methodName, propertiesToInclude) {\n      var originalValue;\n\n      if (!this.includeDefaultValues) {\n        originalValue = instance.includeDefaultValues;\n        instance.includeDefaultValues = false;\n      }\n\n      //If the object is part of the current selection group, it should\n      //be transformed appropriately\n      //i.e. it should be serialised as it would appear if the selection group\n      //were to be destroyed.\n      var originalProperties = this._realizeGroupTransformOnObject(instance),\n          object = instance[methodName](propertiesToInclude);\n      if (!this.includeDefaultValues) {\n        instance.includeDefaultValues = originalValue;\n      }\n\n      //Undo the damage we did by changing all of its properties\n      this._unwindGroupTransformOnObject(instance, originalProperties);\n\n      return object;\n    },\n\n    /**\n     * Realises an object's group transformation on it\n     * @private\n     * @param {fabric.Object} [instance] the object to transform (gets mutated)\n     * @returns the original values of instance which were changed\n     */\n    _realizeGroupTransformOnObject: function(instance) {\n      var layoutProps = ['angle', 'flipX', 'flipY', 'height', 'left', 'scaleX', 'scaleY', 'top', 'width'];\n      if (instance.group && instance.group === this.getActiveGroup()) {\n        //Copy all the positionally relevant properties across now\n        var originalValues = {};\n        layoutProps.forEach(function(prop) {\n          originalValues[prop] = instance[prop];\n        });\n        this.getActiveGroup().realizeTransform(instance);\n        return originalValues;\n      }\n      else {\n        return null;\n      }\n    },\n\n    /**\n     * Restores the changed properties of instance\n     * @private\n     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n     */\n    _unwindGroupTransformOnObject: function(instance, originalValues) {\n      if (originalValues) {\n        instance.set(originalValues);\n      }\n    },\n\n    /**\n     * @private\n     */\n    __serializeBgOverlay: function() {\n      var data = {\n        background: (this.backgroundColor && this.backgroundColor.toObject)\n          ? this.backgroundColor.toObject()\n          : this.backgroundColor\n      };\n\n      if (this.overlayColor) {\n        data.overlay = this.overlayColor.toObject\n          ? this.overlayColor.toObject()\n          : this.overlayColor;\n      }\n      if (this.backgroundImage) {\n        data.backgroundImage = this.backgroundImage.toObject();\n      }\n      if (this.overlayImage) {\n        data.overlayImage = this.overlayImage.toObject();\n      }\n\n      return data;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n     * a zoomed canvas will then produce zoomed SVG output.\n     * @type Boolean\n     * @default\n     */\n    svgViewportTransformation: true,\n\n    /**\n     * Returns SVG representation of canvas\n     * @function\n     * @param {Object} [options] Options object for SVG output\n     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n     * @param {Object} [options.viewBox] SVG viewbox object\n     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\n     * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n     * @param {Number} [options.viewBox.width] Width of viewbox\n     * @param {Number} [options.viewBox.height] Height of viewbox\n     * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n     * @return {String} SVG string\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#serialization}\n     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n     * @example <caption>Normal SVG output</caption>\n     * var svg = canvas.toSVG();\n     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n     * var svg = canvas.toSVG({suppressPreamble: true});\n     * @example <caption>SVG output with viewBox attribute</caption>\n     * var svg = canvas.toSVG({\n     *   viewBox: {\n     *     x: 100,\n     *     y: 100,\n     *     width: 200,\n     *     height: 300\n     *   }\n     * });\n     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n     * @example <caption>Modify SVG output with reviver function</caption>\n     * var svg = canvas.toSVG(null, function(svg) {\n     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n     * });\n     */\n    toSVG: function(options, reviver) {\n      options || (options = { });\n\n      var markup = [];\n\n      this._setSVGPreamble(markup, options);\n      this._setSVGHeader(markup, options);\n\n      this._setSVGBgOverlayColor(markup, 'backgroundColor');\n      this._setSVGBgOverlayImage(markup, 'backgroundImage');\n\n      this._setSVGObjects(markup, reviver);\n\n      this._setSVGBgOverlayColor(markup, 'overlayColor');\n      this._setSVGBgOverlayImage(markup, 'overlayImage');\n\n      markup.push('</svg>');\n\n      return markup.join('');\n    },\n\n    /**\n     * @private\n     */\n    _setSVGPreamble: function(markup, options) {\n      if (!options.suppressPreamble) {\n        markup.push(\n          '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>',\n            '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n              '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\n        );\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGHeader: function(markup, options) {\n      var width, height, vpt;\n\n      if (options.viewBox) {\n        width = options.viewBox.width;\n        height = options.viewBox.height;\n      }\n      else {\n        width = this.width;\n        height = this.height;\n        if (!this.svgViewportTransformation) {\n          vpt = this.viewportTransform;\n          width /= vpt[0];\n          height /= vpt[3];\n        }\n      }\n\n      markup.push(\n        '<svg ',\n          'xmlns=\"http://www.w3.org/2000/svg\" ',\n          'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n          'version=\"1.1\" ',\n          'width=\"', width, '\" ',\n          'height=\"', height, '\" ',\n          (this.backgroundColor && !this.backgroundColor.toLive\n            ? 'style=\"background-color: ' + this.backgroundColor + '\" '\n            : null),\n          (options.viewBox\n              ? 'viewBox=\"' +\n                options.viewBox.x + ' ' +\n                options.viewBox.y + ' ' +\n                options.viewBox.width + ' ' +\n                options.viewBox.height + '\" '\n              : null),\n          'xml:space=\"preserve\">',\n        '<desc>Created with Fabric.js ', fabric.version, '</desc>',\n        '<defs>',\n          fabric.createSVGFontFacesMarkup(this.getObjects()),\n          fabric.createSVGRefElementsMarkup(this),\n        '</defs>'\n      );\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObjects: function(markup, reviver) {\n      for (var i = 0, objects = this.getObjects(), len = objects.length; i < len; i++) {\n        var instance = objects[i],\n            //If the object is in a selection group, simulate what would happen to that\n            //object when the group is deselected\n            originalProperties = this._realizeGroupTransformOnObject(instance);\n        markup.push(instance.toSVG(reviver));\n        this._unwindGroupTransformOnObject(instance, originalProperties);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGBgOverlayImage: function(markup, property) {\n      if (this[property] && this[property].toSVG) {\n        markup.push(this[property].toSVG());\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGBgOverlayColor: function(markup, property) {\n      if (this[property] && this[property].source) {\n        markup.push(\n          '<rect x=\"', this[property].offsetX, '\" y=\"', this[property].offsetY, '\" ',\n            'width=\"',\n              (this[property].repeat === 'repeat-y' || this[property].repeat === 'no-repeat'\n                ? this[property].source.width\n                : this.width),\n            '\" height=\"',\n              (this[property].repeat === 'repeat-x' || this[property].repeat === 'no-repeat'\n                ? this[property].source.height\n                : this.height),\n            '\" fill=\"url(#' + property + 'Pattern)\"',\n          '></rect>'\n        );\n      }\n      else if (this[property] && property === 'overlayColor') {\n        markup.push(\n          '<rect x=\"0\" y=\"0\" ',\n            'width=\"', this.width,\n            '\" height=\"', this.height,\n            '\" fill=\"', this[property], '\"',\n          '></rect>'\n        );\n      }\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Moves an object to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendToBack: function (object) {\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      return this.renderAll && this.renderAll();\n    },\n\n    /**\n     * Moves an object to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringToFront: function (object) {\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      return this.renderAll && this.renderAll();\n    },\n\n    /**\n     * Moves an object down in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendBackwards: function (object, intersecting) {\n      var idx = this._objects.indexOf(object);\n\n      // if object is not on the bottom of stack\n      if (idx !== 0) {\n        var newIdx = this._findNewLowerIndex(object, idx, intersecting);\n\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this.renderAll && this.renderAll();\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewLowerIndex: function(object, idx, intersecting) {\n      var newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse down the stack looking for the nearest intersecting object\n        for (var i = idx - 1; i >= 0; --i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object up in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringForward: function (object, intersecting) {\n      var idx = this._objects.indexOf(object);\n\n      // if object is not on top of stack (last item in an array)\n      if (idx !== this._objects.length - 1) {\n        var newIdx = this._findNewUpperIndex(object, idx, intersecting);\n\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this.renderAll && this.renderAll();\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewUpperIndex: function(object, idx, intersecting) {\n      var newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse up the stack looking for the nearest intersecting object\n        for (var i = idx + 1; i < this._objects.length; ++i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Number} index Position to move to\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    moveTo: function (object, index) {\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      return this.renderAll && this.renderAll();\n    },\n\n    /**\n     * Clears a canvas element and removes all event listeners\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    dispose: function () {\n      this.clear();\n      this.interactive && this.removeListeners();\n      return this;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function () {\n      return '#<fabric.Canvas (' + this.complexity() + '): ' +\n               '{ objects: ' + this.getObjects().length + ' }>';\n    }\n  });\n\n  extend(fabric.StaticCanvas.prototype, fabric.Observable);\n  extend(fabric.StaticCanvas.prototype, fabric.Collection);\n  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n\n  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n\n    /**\n     * @static\n     * @type String\n     * @default\n     */\n    EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n\n    /**\n     * Provides a way to check support of some of the canvas methods\n     * (either those of HTMLCanvasElement itself, or rendering context)\n     *\n     * @param {String} methodName Method to check support for;\n     *                            Could be one of \"getImageData\", \"toDataURL\", \"toDataURLWithQuality\" or \"setLineDash\"\n     * @return {Boolean | null} `true` if method is supported (or at least exists),\n     *                          `null` if canvas element or context can not be initialized\n     */\n    supports: function (methodName) {\n      var el = fabric.util.createCanvasElement();\n\n      if (!el || !el.getContext) {\n        return null;\n      }\n\n      var ctx = el.getContext('2d');\n      if (!ctx) {\n        return null;\n      }\n\n      switch (methodName) {\n\n        case 'getImageData':\n          return typeof ctx.getImageData !== 'undefined';\n\n        case 'setLineDash':\n          return typeof ctx.setLineDash !== 'undefined';\n\n        case 'toDataURL':\n          return typeof el.toDataURL !== 'undefined';\n\n        case 'toDataURLWithQuality':\n          try {\n            el.toDataURL('image/jpeg', 0);\n            return true;\n          }\n          catch (e) { }\n          return false;\n\n        default:\n          return null;\n      }\n    }\n  });\n\n  /**\n   * Returns JSON representation of canvas\n   * @function\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} JSON string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\n   * @example <caption>JSON without default values</caption>\n   * canvas.includeDefaultValues = false;\n   * var json = canvas.toJSON();\n   */\n  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n\n})();\n\n\n/**\n * BaseBrush class\n * @class fabric.BaseBrush\n * @see {@link http://fabricjs.com/freedrawing/|Freedrawing demo}\n */\nfabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color:            'rgb(0, 0, 0)',\n\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width:            1,\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type fabric.Shadow\n   * @default\n   */\n  shadow:           null,\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap:    'round',\n\n  /**\n   * Corner style of a brush (one of \"bevil\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin:   'round',\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray:  null,\n\n  /**\n   * Sets shadow of an object\n   * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  setShadow: function(options) {\n    this.shadow = new fabric.Shadow(options);\n    return this;\n  },\n\n  /**\n   * Sets brush styles\n   * @private\n   */\n  _setBrushStyles: function() {\n    var ctx = this.canvas.contextTop;\n\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineJoin = this.strokeLineJoin;\n    if (this.strokeDashArray && fabric.StaticCanvas.supports('setLineDash')) {\n      ctx.setLineDash(this.strokeDashArray);\n    }\n  },\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  _setShadow: function() {\n    if (!this.shadow) {\n      return;\n    }\n\n    var ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = this.shadow.color;\n    ctx.shadowBlur = this.shadow.blur;\n    ctx.shadowOffsetX = this.shadow.offsetX;\n    ctx.shadowOffsetY = this.shadow.offsetY;\n  },\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  _resetShadow: function() {\n    var ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n});\n\n\n(function() {\n\n  /**\n   * PencilBrush class\n   * @class fabric.PencilBrush\n   * @extends fabric.BaseBrush\n   */\n  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n\n    /**\n     * Constructor\n     * @param {fabric.Canvas} canvas\n     * @return {fabric.PencilBrush} Instance of a pencil brush\n     */\n    initialize: function(canvas) {\n      this.canvas = canvas;\n      this._points = [ ];\n    },\n\n    /**\n     * Inovoked on mouse down\n     * @param {Object} pointer\n     */\n    onMouseDown: function(pointer) {\n      this._prepareForDrawing(pointer);\n      // capture coordinates immediately\n      // this allows to draw dots (when movement never occurs)\n      this._captureDrawingPath(pointer);\n      this._render();\n    },\n\n    /**\n     * Inovoked on mouse move\n     * @param {Object} pointer\n     */\n    onMouseMove: function(pointer) {\n      this._captureDrawingPath(pointer);\n      // redraw curve\n      // clear top canvas\n      this.canvas.clearContext(this.canvas.contextTop);\n      this._render();\n    },\n\n    /**\n     * Invoked on mouse up\n     */\n    onMouseUp: function() {\n      this._finalizeAndAddPath();\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _prepareForDrawing: function(pointer) {\n\n      var p = new fabric.Point(pointer.x, pointer.y);\n\n      this._reset();\n      this._addPoint(p);\n\n      this.canvas.contextTop.moveTo(p.x, p.y);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Point} point Point to be added to points array\n     */\n    _addPoint: function(point) {\n      this._points.push(point);\n    },\n\n    /**\n     * Clear points array and set contextTop canvas style.\n     * @private\n     */\n    _reset: function() {\n      this._points.length = 0;\n\n      this._setBrushStyles();\n      this._setShadow();\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _captureDrawingPath: function(pointer) {\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n      this._addPoint(pointerPoint);\n    },\n\n    /**\n     * Draw a smooth path on the topCanvas using quadraticCurveTo\n     * @private\n     */\n    _render: function() {\n      var ctx  = this.canvas.contextTop,\n          v = this.canvas.viewportTransform,\n          p1 = this._points[0],\n          p2 = this._points[1];\n\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      ctx.beginPath();\n\n      //if we only have 2 points in the path and they are the same\n      //it means that the user only clicked the canvas without moving the mouse\n      //then we should be drawing a dot. A path isn't drawn between two identical dots\n      //that's why we set them apart a bit\n      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n        p1.x -= 0.5;\n        p2.x += 0.5;\n      }\n      ctx.moveTo(p1.x, p1.y);\n\n      for (var i = 1, len = this._points.length; i < len; i++) {\n        // we pick the point between pi + 1 & pi + 2 as the\n        // end point and p1 as our control point.\n        var midPoint = p1.midPointFrom(p2);\n        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n\n        p1 = this._points[i];\n        p2 = this._points[i + 1];\n      }\n      // Draw last line as a straight line while\n      // we wait for the next point to be able to calculate\n      // the bezier control point\n      ctx.lineTo(p1.x, p1.y);\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * Converts points to SVG path\n     * @param {Array} points Array of points\n     * @param {Number} minX\n     * @param {Number} minY\n     * @return {String} SVG path\n     */\n    convertPointsToSVGPath: function(points) {\n      var path = [],\n          p1 = new fabric.Point(points[0].x, points[0].y),\n          p2 = new fabric.Point(points[1].x, points[1].y);\n\n      path.push('M ', points[0].x, ' ', points[0].y, ' ');\n      for (var i = 1, len = points.length; i < len; i++) {\n        var midPoint = p1.midPointFrom(p2);\n        // p1 is our bezier control point\n        // midpoint is our endpoint\n        // start point is p(i-1) value.\n        path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\n        p1 = new fabric.Point(points[i].x, points[i].y);\n        if ((i + 1) < points.length) {\n          p2 = new fabric.Point(points[i + 1].x, points[i + 1].y);\n        }\n      }\n      path.push('L ', p1.x, ' ', p1.y, ' ');\n      return path;\n    },\n\n    /**\n     * Creates fabric.Path object to add on canvas\n     * @param {String} pathData Path data\n     * @return {fabric.Path} Path to add on canvas\n     */\n    createPath: function(pathData) {\n      var path = new fabric.Path(pathData, {\n                   fill: null,\n                   stroke: this.color,\n                   strokeWidth: this.width,\n                   strokeLineCap: this.strokeLineCap,\n                   strokeLineJoin: this.strokeLineJoin,\n                   strokeDashArray: this.strokeDashArray,\n                   originX: 'center',\n                   originY: 'center'\n                 });\n\n      if (this.shadow) {\n        this.shadow.affectStroke = true;\n        path.setShadow(this.shadow);\n      }\n\n      return path;\n    },\n\n    /**\n     * On mouseup after drawing the path on contextTop canvas\n     * we use the points captured to create an new fabric path object\n     * and add it to the fabric canvas.\n     */\n    _finalizeAndAddPath: function() {\n      var ctx = this.canvas.contextTop;\n      ctx.closePath();\n\n      var pathData = this.convertPointsToSVGPath(this._points).join('');\n      if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\n        // do not create 0 width/height paths, as they are\n        // rendered inconsistently across browsers\n        // Firefox 4, for example, renders a dot,\n        // whereas Chrome 10 renders nothing\n        this.canvas.renderAll();\n        return;\n      }\n\n      var path = this.createPath(pathData);\n\n      this.canvas.add(path);\n      path.setCoords();\n\n      this.canvas.clearContext(this.canvas.contextTop);\n      this._resetShadow();\n      this.canvas.renderAll();\n\n      // fire event 'path' created\n      this.canvas.fire('path:created', { path: path });\n    }\n  });\n})();\n\n\n/**\n * CircleBrush class\n * @class fabric.CircleBrush\n */\nfabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width: 10,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.CircleBrush} Instance of a circle brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.points = [ ];\n  },\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Object} pointer\n   */\n  drawDot: function(pointer) {\n    var point = this.addPoint(pointer),\n        ctx = this.canvas.contextTop,\n        v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.restore();\n  },\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown: function(pointer) {\n    this.points.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    var circles = [ ];\n\n    for (var i = 0, len = this.points.length; i < len; i++) {\n      var point = this.points[i],\n          circle = new fabric.Circle({\n            radius: point.radius,\n            left: point.x,\n            top: point.y,\n            originX: 'center',\n            originY: 'center',\n            fill: point.fill\n          });\n\n      this.shadow && circle.setShadow(this.shadow);\n\n      circles.push(circle);\n    }\n    var group = new fabric.Group(circles, { originX: 'center', originY: 'center' });\n    group.canvas = this.canvas;\n\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.renderAll();\n  },\n\n  /**\n   * @param {Object} pointer\n   * @return {fabric.Point} Just added pointer point\n   */\n  addPoint: function(pointer) {\n    var pointerPoint = new fabric.Point(pointer.x, pointer.y),\n\n        circleRadius = fabric.util.getRandomInt(\n                        Math.max(0, this.width - 20), this.width + 20) / 2,\n\n        circleColor = new fabric.Color(this.color)\n                        .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\n                        .toRgba();\n\n    pointerPoint.radius = circleRadius;\n    pointerPoint.fill = circleColor;\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n});\n\n\n/**\n * SprayBrush class\n * @class fabric.SprayBrush\n */\nfabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width:              10,\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density:            20,\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth:           1,\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance:   1,\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity:        false,\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping:  true,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.SprayBrush} Instance of a spray brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.sprayChunks = [ ];\n  },\n\n  /**\n   * Invoked on mouse down\n   * @param {Object} pointer\n   */\n  onMouseDown: function(pointer) {\n    this.sprayChunks.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.render();\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    this.addSprayChunk(pointer);\n    this.render();\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    var rects = [ ];\n\n    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n      var sprayChunk = this.sprayChunks[i];\n\n      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\n\n        var rect = new fabric.Rect({\n          width: sprayChunk[j].width,\n          height: sprayChunk[j].width,\n          left: sprayChunk[j].x + 1,\n          top: sprayChunk[j].y + 1,\n          originX: 'center',\n          originY: 'center',\n          fill: this.color\n        });\n\n        this.shadow && rect.setShadow(this.shadow);\n        rects.push(rect);\n      }\n    }\n\n    if (this.optimizeOverlapping) {\n      rects = this._getOptimizedRects(rects);\n    }\n\n    var group = new fabric.Group(rects, { originX: 'center', originY: 'center' });\n    group.canvas = this.canvas;\n\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.renderAll();\n  },\n\n  /**\n   * @private\n   * @param {Array} rects\n   */\n  _getOptimizedRects: function(rects) {\n\n    // avoid creating duplicate rects at the same coordinates\n    var uniqueRects = { }, key;\n\n    for (var i = 0, len = rects.length; i < len; i++) {\n      key = rects[i].left + '' + rects[i].top;\n      if (!uniqueRects[key]) {\n        uniqueRects[key] = rects[i];\n      }\n    }\n    var uniqueRectsArray = [ ];\n    for (key in uniqueRects) {\n      uniqueRectsArray.push(uniqueRects[key]);\n    }\n\n    return uniqueRectsArray;\n  },\n\n  /**\n   * Renders brush\n   */\n  render: function() {\n    var ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    var v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\n    for (var i = 0, len = this.sprayChunkPoints.length; i < len; i++) {\n      var point = this.sprayChunkPoints[i];\n      if (typeof point.opacity !== 'undefined') {\n        ctx.globalAlpha = point.opacity;\n      }\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * @param {Object} pointer\n   */\n  addSprayChunk: function(pointer) {\n    this.sprayChunkPoints = [ ];\n\n    var x, y, width, radius = this.width / 2;\n\n    for (var i = 0; i < this.density; i++) {\n\n      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n\n      if (this.dotWidthVariance) {\n        width = fabric.util.getRandomInt(\n          // bottom clamp width to 1\n          Math.max(1, this.dotWidth - this.dotWidthVariance),\n          this.dotWidth + this.dotWidthVariance);\n      }\n      else {\n        width = this.dotWidth;\n      }\n\n      var point = new fabric.Point(x, y);\n      point.width = width;\n\n      if (this.randomOpacity) {\n        point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n      }\n\n      this.sprayChunkPoints.push(point);\n    }\n\n    this.sprayChunks.push(this.sprayChunkPoints);\n  }\n});\n\n\n/**\n * PatternBrush class\n * @class fabric.PatternBrush\n * @extends fabric.BaseBrush\n */\nfabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n\n  getPatternSrc: function() {\n\n    var dotWidth = 20,\n        dotDistance = 5,\n        patternCanvas = fabric.document.createElement('canvas'),\n        patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n\n    patternCtx.fillStyle = this.color;\n    patternCtx.beginPath();\n    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n    patternCtx.closePath();\n    patternCtx.fill();\n\n    return patternCanvas;\n  },\n\n  getPatternSrcFunction: function() {\n    return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\n  },\n\n  /**\n   * Creates \"pattern\" instance property\n   */\n  getPattern: function() {\n    return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  },\n\n  /**\n   * Sets brush styles\n   */\n  _setBrushStyles: function() {\n    this.callSuper('_setBrushStyles');\n    this.canvas.contextTop.strokeStyle = this.getPattern();\n  },\n\n  /**\n   * Creates path\n   */\n  createPath: function(pathData) {\n    var path = this.callSuper('createPath', pathData);\n    path.stroke = new fabric.Pattern({\n      source: this.source || this.getPatternSrcFunction()\n    });\n    return path;\n  }\n});\n\n\n(function() {\n\n  var getPointer = fabric.util.getPointer,\n      degreesToRadians = fabric.util.degreesToRadians,\n      radiansToDegrees = fabric.util.radiansToDegrees,\n      atan2 = Math.atan2,\n      abs = Math.abs,\n\n      STROKE_OFFSET = 0.5;\n\n  /**\n   * Canvas class\n   * @class fabric.Canvas\n   * @extends fabric.StaticCanvas\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#canvas}\n   * @see {@link fabric.Canvas#initialize} for constructor definition\n   *\n   * @fires object:modified\n   * @fires object:rotating\n   * @fires object:scaling\n   * @fires object:moving\n   * @fires object:selected\n   *\n   * @fires before:selection:cleared\n   * @fires selection:cleared\n   * @fires selection:created\n   *\n   * @fires path:created\n   * @fires mouse:down\n   * @fires mouse:move\n   * @fires mouse:up\n   * @fires mouse:over\n   * @fires mouse:out\n   *\n   */\n  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n\n      this._initStatic(el, options);\n      this._initInteractive();\n      this._createCacheCanvas();\n\n      fabric.Canvas.activeInstance = this;\n    },\n\n    /**\n     * When true, objects can be transformed by one side (unproportionally)\n     * @type Boolean\n     * @default\n     */\n    uniScaleTransform:      false,\n\n    /**\n     * When true, objects use center point as the origin of scale transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:        false,\n\n    /**\n     * When true, objects use center point as the origin of rotate transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:       false,\n\n    /**\n     * Indicates that canvas is interactive. This property should not be changed.\n     * @type Boolean\n     * @default\n     */\n    interactive:            true,\n\n    /**\n     * Indicates whether group selection should be enabled\n     * @type Boolean\n     * @default\n     */\n    selection:              true,\n\n    /**\n     * Color of selection\n     * @type String\n     * @default\n     */\n    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\n\n    /**\n     * Default dash array pattern\n     * If not empty the selection border is dashed\n     * @type Array\n     */\n    selectionDashArray:     [ ],\n\n    /**\n     * Color of the border of selection (usually slightly darker than color of selection itself)\n     * @type String\n     * @default\n     */\n    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\n\n    /**\n     * Width of a line used in object/group selection\n     * @type Number\n     * @default\n     */\n    selectionLineWidth:     1,\n\n    /**\n     * Default cursor value used when hovering over an object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:            'move',\n\n    /**\n     * Default cursor value used when moving an object on canvas\n     * @type String\n     * @default\n     */\n    moveCursor:             'move',\n\n    /**\n     * Default cursor value used for the entire canvas\n     * @type String\n     * @default\n     */\n    defaultCursor:          'default',\n\n    /**\n     * Cursor value used during free drawing\n     * @type String\n     * @default\n     */\n    freeDrawingCursor:      'crosshair',\n\n    /**\n     * Cursor value used for rotation point\n     * @type String\n     * @default\n     */\n    rotationCursor:         'crosshair',\n\n    /**\n     * Default element class that's given to wrapper (div) element of canvas\n     * @type String\n     * @default\n     */\n    containerClass:         'canvas-container',\n\n    /**\n     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:     false,\n\n    /**\n     * Number of pixels around target pixel to tolerate (consider active) during object detection\n     * @type Number\n     * @default\n     */\n    targetFindTolerance:    0,\n\n    /**\n     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\n     * @type Boolean\n     * @default\n     */\n    skipTargetFind:         false,\n\n    /**\n     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n     * After mousedown, mousemove creates a shape,\n     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4/#free_drawing}\n     * @type Boolean\n     * @default\n     */\n    isDrawingMode:          false,\n\n    /**\n     * @private\n     */\n    _initInteractive: function() {\n      this._currentTransform = null;\n      this._groupSelector = null;\n      this._initWrapperElement();\n      this._createUpperCanvas();\n      this._initEventListeners();\n\n      this._initRetinaScaling();\n\n      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n\n      this.calcOffset();\n    },\n\n    /**\n     * Resets the current transform to its original values and chooses the type of resizing based on the event\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _resetCurrentTransform: function(e) {\n      var t = this._currentTransform;\n\n      t.target.set({\n        scaleX: t.original.scaleX,\n        scaleY: t.original.scaleY,\n        left: t.original.left,\n        top: t.original.top\n      });\n\n      if (this._shouldCenterTransform(e, t.target)) {\n        if (t.action === 'rotate') {\n          this._setOriginToCenter(t.target);\n        }\n        else {\n          if (t.originX !== 'center') {\n            if (t.originX === 'right') {\n              t.mouseXSign = -1;\n            }\n            else {\n              t.mouseXSign = 1;\n            }\n          }\n          if (t.originY !== 'center') {\n            if (t.originY === 'bottom') {\n              t.mouseYSign = -1;\n            }\n            else {\n              t.mouseYSign = 1;\n            }\n          }\n\n          t.originX = 'center';\n          t.originY = 'center';\n        }\n      }\n      else {\n        t.originX = t.original.originX;\n        t.originY = t.original.originY;\n      }\n    },\n\n    /**\n     * Checks if point is contained within an area of given object\n     * @param {Event} e Event object\n     * @param {fabric.Object} target Object to test against\n     * @return {Boolean} true if point is contained within an area of given object\n     */\n    containsPoint: function (e, target) {\n      var pointer = this.getPointer(e, true),\n          xy = this._normalizePointer(target, pointer);\n\n      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n      return (target.containsPoint(xy) || target._findTargetCorner(pointer));\n    },\n\n    /**\n     * @private\n     */\n    _normalizePointer: function (object, pointer) {\n      var activeGroup = this.getActiveGroup(),\n          x = pointer.x,\n          y = pointer.y,\n          isObjectInGroup = (\n            activeGroup &&\n            object.type !== 'group' &&\n            activeGroup.contains(object)),\n          lt;\n\n      if (isObjectInGroup) {\n        lt = fabric.util.transformPoint(activeGroup.getCenterPoint(), this.viewportTransform, true);\n        x -= lt.x;\n        y -= lt.y;\n        x /= activeGroup.scaleX;\n        y /= activeGroup.scaleY;\n      }\n      return { x: x, y: y };\n    },\n\n    /**\n     * Returns true if object is transparent at a certain location\n     * @param {fabric.Object} target Object to check\n     * @param {Number} x Left coordinate\n     * @param {Number} y Top coordinate\n     * @return {Boolean}\n     */\n    isTargetTransparent: function (target, x, y) {\n      var hasBorders = target.hasBorders,\n          transparentCorners = target.transparentCorners;\n\n      target.hasBorders = target.transparentCorners = false;\n\n      this._draw(this.contextCache, target);\n\n      target.hasBorders = hasBorders;\n      target.transparentCorners = transparentCorners;\n\n      var isTransparent = fabric.util.isTransparent(\n        this.contextCache, x, y, this.targetFindTolerance);\n\n      this.clearContext(this.contextCache);\n\n      return isTransparent;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _shouldClearSelection: function (e, target) {\n      var activeGroup = this.getActiveGroup(),\n          activeObject = this.getActiveObject();\n\n      return (\n        !target\n        ||\n        (target &&\n          activeGroup &&\n          !activeGroup.contains(target) &&\n          activeGroup !== target &&\n          !e.shiftKey)\n        ||\n        (target && !target.evented)\n        ||\n        (target &&\n          !target.selectable &&\n          activeObject &&\n          activeObject !== target)\n      );\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _shouldCenterTransform: function (e, target) {\n      if (!target) {\n        return;\n      }\n\n      var t = this._currentTransform,\n          centerTransform;\n\n      if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\n        centerTransform = this.centeredScaling || target.centeredScaling;\n      }\n      else if (t.action === 'rotate') {\n        centerTransform = this.centeredRotation || target.centeredRotation;\n      }\n\n      return centerTransform ? !e.altKey : e.altKey;\n    },\n\n    /**\n     * @private\n     */\n    _getOriginFromCorner: function(target, corner) {\n      var origin = {\n        x: target.originX,\n        y: target.originY\n      };\n\n      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\n        origin.x = 'right';\n      }\n      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\n        origin.x = 'left';\n      }\n\n      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\n        origin.y = 'bottom';\n      }\n      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\n        origin.y = 'top';\n      }\n\n      return origin;\n    },\n\n    /**\n     * @private\n     */\n    _getActionFromCorner: function(target, corner) {\n      var action = 'drag';\n      if (corner) {\n        action = (corner === 'ml' || corner === 'mr')\n          ? 'scaleX'\n          : (corner === 'mt' || corner === 'mb')\n            ? 'scaleY'\n            : corner === 'mtr'\n              ? 'rotate'\n              : 'scale';\n      }\n      return action;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _setupCurrentTransform: function (e, target) {\n      if (!target) {\n        return;\n      }\n\n      var pointer = this.getPointer(e),\n          corner = target._findTargetCorner(this.getPointer(e, true)),\n          action = this._getActionFromCorner(target, corner),\n          origin = this._getOriginFromCorner(target, corner);\n\n      this._currentTransform = {\n        target: target,\n        action: action,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        left: target.left,\n        top: target.top,\n        theta: degreesToRadians(target.angle),\n        width: target.width * target.scaleX,\n        mouseXSign: 1,\n        mouseYSign: 1\n      };\n\n      this._currentTransform.original = {\n        left: target.left,\n        top: target.top,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        originX: origin.x,\n        originY: origin.y\n      };\n\n      this._resetCurrentTransform(e);\n    },\n\n    /**\n     * Translates object by \"setting\" its left/top\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     */\n    _translateObject: function (x, y) {\n      var target = this._currentTransform.target;\n\n      if (!target.get('lockMovementX')) {\n        target.set('left', x - this._currentTransform.offsetX);\n      }\n      if (!target.get('lockMovementY')) {\n        target.set('top', y - this._currentTransform.offsetY);\n      }\n    },\n\n    /**\n     * Scales object by invoking its scaleX/scaleY methods\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\n     *                    When not provided, an object is scaled by both dimensions equally\n     */\n    _scaleObject: function (x, y, by) {\n      var t = this._currentTransform,\n          target = t.target,\n          lockScalingX = target.get('lockScalingX'),\n          lockScalingY = target.get('lockScalingY'),\n          lockScalingFlip = target.get('lockScalingFlip');\n\n      if (lockScalingX && lockScalingY) {\n        return;\n      }\n\n      // Get the constraint point\n      var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\n          localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY);\n\n      this._setLocalMouse(localMouse, t);\n\n      // Actually scale the object\n      this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip);\n\n      // Make sure the constraints apply\n      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n    },\n\n    /**\n     * @private\n     */\n    _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip) {\n      var target = transform.target, forbidScalingX = false, forbidScalingY = false,\n          dim = target._getNonTransformedDimensions();\n\n      transform.newScaleX = localMouse.x / dim.x;\n      transform.newScaleY = localMouse.y / dim.y;\n\n      if (lockScalingFlip && transform.newScaleX <= 0 && transform.newScaleX < target.scaleX) {\n        forbidScalingX = true;\n      }\n\n      if (lockScalingFlip && transform.newScaleY <= 0 && transform.newScaleY < target.scaleY) {\n        forbidScalingY = true;\n      }\n\n      if (by === 'equally' && !lockScalingX && !lockScalingY) {\n        forbidScalingX || forbidScalingY || this._scaleObjectEqually(localMouse, target, transform);\n      }\n      else if (!by) {\n        forbidScalingX || lockScalingX || target.set('scaleX', transform.newScaleX);\n        forbidScalingY || lockScalingY || target.set('scaleY', transform.newScaleY);\n      }\n      else if (by === 'x' && !target.get('lockUniScaling')) {\n        forbidScalingX || lockScalingX || target.set('scaleX', transform.newScaleX);\n      }\n      else if (by === 'y' && !target.get('lockUniScaling')) {\n        forbidScalingY || lockScalingY || target.set('scaleY', transform.newScaleY);\n      }\n\n      forbidScalingX || forbidScalingY || this._flipObject(transform, by);\n\n    },\n\n    /**\n     * @private\n     */\n    _scaleObjectEqually: function(localMouse, target, transform) {\n\n      var dist = localMouse.y + localMouse.x,\n          dim = target._getNonTransformedDimensions(),\n          lastDist = dim.y * transform.original.scaleY +\n                     dim.x * transform.original.scaleX;\n\n      // We use transform.scaleX/Y instead of target.scaleX/Y\n      // because the object may have a min scale and we'll loose the proportions\n      transform.newScaleX = transform.original.scaleX * dist / lastDist;\n      transform.newScaleY = transform.original.scaleY * dist / lastDist;\n\n      target.set('scaleX', transform.newScaleX);\n      target.set('scaleY', transform.newScaleY);\n    },\n\n    /**\n     * @private\n     */\n    _flipObject: function(transform, by) {\n      if (transform.newScaleX < 0 && by !== 'y') {\n        if (transform.originX === 'left') {\n          transform.originX = 'right';\n        }\n        else if (transform.originX === 'right') {\n          transform.originX = 'left';\n        }\n      }\n\n      if (transform.newScaleY < 0 && by !== 'x') {\n        if (transform.originY === 'top') {\n          transform.originY = 'bottom';\n        }\n        else if (transform.originY === 'bottom') {\n          transform.originY = 'top';\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setLocalMouse: function(localMouse, t) {\n      var target = t.target;\n\n      if (t.originX === 'right') {\n        localMouse.x *= -1;\n      }\n      else if (t.originX === 'center') {\n        localMouse.x *= t.mouseXSign * 2;\n\n        if (localMouse.x < 0) {\n          t.mouseXSign = -t.mouseXSign;\n        }\n      }\n\n      if (t.originY === 'bottom') {\n        localMouse.y *= -1;\n      }\n      else if (t.originY === 'center') {\n        localMouse.y *= t.mouseYSign * 2;\n\n        if (localMouse.y < 0) {\n          t.mouseYSign = -t.mouseYSign;\n        }\n      }\n\n      // adjust the mouse coordinates when dealing with padding\n      if (abs(localMouse.x) > target.padding) {\n        if (localMouse.x < 0) {\n          localMouse.x += target.padding;\n        }\n        else {\n          localMouse.x -= target.padding;\n        }\n      }\n      else { // mouse is within the padding, set to 0\n        localMouse.x = 0;\n      }\n\n      if (abs(localMouse.y) > target.padding) {\n        if (localMouse.y < 0) {\n          localMouse.y += target.padding;\n        }\n        else {\n          localMouse.y -= target.padding;\n        }\n      }\n      else {\n        localMouse.y = 0;\n      }\n    },\n\n    /**\n     * Rotates object by invoking its rotate method\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     */\n    _rotateObject: function (x, y) {\n\n      var t = this._currentTransform;\n\n      if (t.target.get('lockRotation')) {\n        return;\n      }\n\n      var lastAngle = atan2(t.ey - t.top, t.ex - t.left),\n          curAngle = atan2(y - t.top, x - t.left),\n          angle = radiansToDegrees(curAngle - lastAngle + t.theta);\n\n      // normalize angle to positive value\n      if (angle < 0) {\n        angle = 360 + angle;\n      }\n\n      t.target.angle = angle % 360;\n    },\n\n    /**\n     * Set the cursor type of the canvas element\n     * @param {String} value Cursor type of the canvas element.\n     * @see http://www.w3.org/TR/css3-ui/#cursor\n     */\n    setCursor: function (value) {\n      this.upperCanvasEl.style.cursor = value;\n    },\n\n    /**\n     * @private\n     */\n    _resetObjectTransform: function (target) {\n      target.scaleX = 1;\n      target.scaleY = 1;\n      target.setAngle(0);\n    },\n\n    /**\n     * @private\n     */\n    _drawSelection: function () {\n      var ctx = this.contextTop,\n          groupSelector = this._groupSelector,\n          left = groupSelector.left,\n          top = groupSelector.top,\n          aleft = abs(left),\n          atop = abs(top);\n\n      ctx.fillStyle = this.selectionColor;\n\n      ctx.fillRect(\n        groupSelector.ex - ((left > 0) ? 0 : -left),\n        groupSelector.ey - ((top > 0) ? 0 : -top),\n        aleft,\n        atop\n      );\n\n      ctx.lineWidth = this.selectionLineWidth;\n      ctx.strokeStyle = this.selectionBorderColor;\n\n      // selection border\n      if (this.selectionDashArray.length > 1) {\n\n        var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0: aleft),\n            py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0: atop);\n\n        ctx.beginPath();\n\n        fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\n\n        ctx.closePath();\n        ctx.stroke();\n      }\n      else {\n        ctx.strokeRect(\n          groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n          groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\n          aleft,\n          atop\n        );\n      }\n    },\n\n    /**\n     * @private\n     */\n    _isLastRenderedObject: function(e) {\n      return (\n        this.controlsAboveOverlay &&\n        this.lastRenderedObjectWithControlsAboveOverlay &&\n        this.lastRenderedObjectWithControlsAboveOverlay.visible &&\n        this.containsPoint(e, this.lastRenderedObjectWithControlsAboveOverlay) &&\n        this.lastRenderedObjectWithControlsAboveOverlay._findTargetCorner(this.getPointer(e, true)));\n    },\n\n    /**\n     * Method that determines what object we are clicking on\n     * @param {Event} e mouse event\n     * @param {Boolean} skipGroup when true, group is skipped and only objects are traversed through\n     */\n    findTarget: function (e, skipGroup) {\n      if (this.skipTargetFind) {\n        return;\n      }\n\n      if (this._isLastRenderedObject(e)) {\n        return this.lastRenderedObjectWithControlsAboveOverlay;\n      }\n\n      // first check current group (if one exists)\n      var activeGroup = this.getActiveGroup();\n      if (activeGroup && !skipGroup && this.containsPoint(e, activeGroup)) {\n        return activeGroup;\n      }\n\n      var target = this._searchPossibleTargets(e, skipGroup);\n      this._fireOverOutEvents(target, e);\n\n      return target;\n    },\n\n    /**\n     * @private\n     */\n    _fireOverOutEvents: function(target, e) {\n      if (target) {\n        if (this._hoveredTarget !== target) {\n          if (this._hoveredTarget) {\n            this.fire('mouse:out', { target: this._hoveredTarget, e: e });\n            this._hoveredTarget.fire('mouseout');\n          }\n          this.fire('mouse:over', { target: target, e: e });\n          target.fire('mouseover');\n          this._hoveredTarget = target;\n        }\n      }\n      else if (this._hoveredTarget) {\n        this.fire('mouse:out', { target: this._hoveredTarget, e: e });\n        this._hoveredTarget.fire('mouseout');\n        this._hoveredTarget = null;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _checkTarget: function(e, obj, pointer) {\n      if (obj &&\n          obj.visible &&\n          obj.evented &&\n          this.containsPoint(e, obj)){\n        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n          var isTransparent = this.isTargetTransparent(obj, pointer.x, pointer.y);\n          if (!isTransparent) {\n            return true;\n          }\n        }\n        else {\n          return true;\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _searchPossibleTargets: function(e, skipGroup) {\n\n      // Cache all targets where their bounding box contains point.\n      var target,\n          pointer = this.getPointer(e, true),\n          i = this._objects.length;\n      // Do not check for currently grouped objects, since we check the parent group itself.\n      // untill we call this function specifically to search inside the activeGroup\n      while (i--) {\n        if ((!this._objects[i].group || skipGroup) && this._checkTarget(e, this._objects[i], pointer)){\n          this.relatedTarget = this._objects[i];\n          target = this._objects[i];\n          break;\n        }\n      }\n\n      return target;\n    },\n\n    /**\n     * Returns pointer coordinates relative to canvas.\n     * @param {Event} e\n     * @return {Object} object with \"x\" and \"y\" number values\n     */\n    getPointer: function (e, ignoreZoom, upperCanvasEl) {\n      if (!upperCanvasEl) {\n        upperCanvasEl = this.upperCanvasEl;\n      }\n      var pointer = getPointer(e),\n          bounds = upperCanvasEl.getBoundingClientRect(),\n          boundsWidth = bounds.width || 0,\n          boundsHeight = bounds.height || 0,\n          cssScale;\n\n      if (!boundsWidth || !boundsHeight ) {\n        if ('top' in bounds && 'bottom' in bounds) {\n          boundsHeight = Math.abs( bounds.top - bounds.bottom );\n        }\n        if ('right' in bounds && 'left' in bounds) {\n          boundsWidth = Math.abs( bounds.right - bounds.left );\n        }\n      }\n\n      this.calcOffset();\n\n      pointer.x = pointer.x - this._offset.left;\n      pointer.y = pointer.y - this._offset.top;\n      if (!ignoreZoom) {\n        pointer = fabric.util.transformPoint(\n          pointer,\n          fabric.util.invertTransform(this.viewportTransform)\n        );\n      }\n\n      if (boundsWidth === 0 || boundsHeight === 0) {\n        // If bounds are not available (i.e. not visible), do not apply scale.\n        cssScale = { width: 1, height: 1 };\n      }\n      else {\n        cssScale = {\n          width: upperCanvasEl.width / boundsWidth,\n          height: upperCanvasEl.height / boundsHeight\n        };\n      }\n\n      return {\n        x: pointer.x * cssScale.width,\n        y: pointer.y * cssScale.height\n      };\n    },\n\n    /**\n     * @private\n     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n     */\n    _createUpperCanvas: function () {\n      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, '');\n\n      this.upperCanvasEl = this._createCanvasElement();\n      fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\n\n      this.wrapperEl.appendChild(this.upperCanvasEl);\n\n      this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);\n      this._applyCanvasStyle(this.upperCanvasEl);\n      this.contextTop = this.upperCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _createCacheCanvas: function () {\n      this.cacheCanvasEl = this._createCanvasElement();\n      this.cacheCanvasEl.setAttribute('width', this.width);\n      this.cacheCanvasEl.setAttribute('height', this.height);\n      this.contextCache = this.cacheCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _initWrapperElement: function () {\n      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\n        'class': this.containerClass\n      });\n      fabric.util.setStyle(this.wrapperEl, {\n        width: this.getWidth() + 'px',\n        height: this.getHeight() + 'px',\n        position: 'relative'\n      });\n      fabric.util.makeElementUnselectable(this.wrapperEl);\n    },\n\n    /**\n     * @private\n     * @param {HTMLElement} element canvas element to apply styles on\n     */\n    _applyCanvasStyle: function (element) {\n      var width = this.getWidth() || element.width,\n          height = this.getHeight() || element.height;\n\n      fabric.util.setStyle(element, {\n        position: 'absolute',\n        width: width + 'px',\n        height: height + 'px',\n        left: 0,\n        top: 0\n      });\n      element.width = width;\n      element.height = height;\n      fabric.util.makeElementUnselectable(element);\n    },\n\n    /**\n     * Copys the the entire inline style from one element (fromEl) to another (toEl)\n     * @private\n     * @param {Element} fromEl Element style is copied from\n     * @param {Element} toEl Element copied style is applied to\n     */\n    _copyCanvasStyle: function (fromEl, toEl) {\n      toEl.style.cssText = fromEl.style.cssText;\n    },\n\n    /**\n     * Returns context of canvas where object selection is drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getSelectionContext: function() {\n      return this.contextTop;\n    },\n\n    /**\n     * Returns &lt;canvas> element on which object selection is drawn\n     * @return {HTMLCanvasElement}\n     */\n    getSelectionElement: function () {\n      return this.upperCanvasEl;\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     */\n    _setActiveObject: function(object) {\n      if (this._activeObject) {\n        this._activeObject.set('active', false);\n      }\n      this._activeObject = object;\n      object.set('active', true);\n    },\n\n    /**\n     * Sets given object as the only active object on canvas\n     * @param {fabric.Object} object Object to set as an active one\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setActiveObject: function (object, e) {\n      this._setActiveObject(object);\n      this.renderAll();\n      this.fire('object:selected', { target: object, e: e });\n      object.fire('selected', { e: e });\n      return this;\n    },\n\n    /**\n     * Returns currently active object\n     * @return {fabric.Object} active object\n     */\n    getActiveObject: function () {\n      return this._activeObject;\n    },\n\n    /**\n     * @private\n     */\n    _discardActiveObject: function() {\n      if (this._activeObject) {\n        this._activeObject.set('active', false);\n      }\n      this._activeObject = null;\n    },\n\n    /**\n     * Discards currently active object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    discardActiveObject: function (e) {\n      this._discardActiveObject();\n      this.renderAll();\n      this.fire('selection:cleared', { e: e });\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {fabric.Group} group\n     */\n    _setActiveGroup: function(group) {\n      this._activeGroup = group;\n      if (group) {\n        group.set('active', true);\n      }\n    },\n\n    /**\n     * Sets active group to a speicified one\n     * @param {fabric.Group} group Group to set as a current one\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setActiveGroup: function (group, e) {\n      this._setActiveGroup(group);\n      if (group) {\n        this.fire('object:selected', { target: group, e: e });\n        group.fire('selected', { e: e });\n      }\n      return this;\n    },\n\n    /**\n     * Returns currently active group\n     * @return {fabric.Group} Current group\n     */\n    getActiveGroup: function () {\n      return this._activeGroup;\n    },\n\n    /**\n     * @private\n     */\n    _discardActiveGroup: function() {\n      var g = this.getActiveGroup();\n      if (g) {\n        g.destroy();\n      }\n      this.setActiveGroup(null);\n    },\n\n    /**\n     * Discards currently active group\n     * @return {fabric.Canvas} thisArg\n     */\n    discardActiveGroup: function (e) {\n      this._discardActiveGroup();\n      this.fire('selection:cleared', { e: e });\n      return this;\n    },\n\n    /**\n     * Deactivates all objects on canvas, removing any active group or object\n     * @return {fabric.Canvas} thisArg\n     */\n    deactivateAll: function () {\n      var allObjects = this.getObjects(),\n          i = 0,\n          len = allObjects.length;\n      for ( ; i < len; i++) {\n        allObjects[i].set('active', false);\n      }\n      this._discardActiveGroup();\n      this._discardActiveObject();\n      return this;\n    },\n\n    /**\n     * Deactivates all objects and dispatches appropriate events\n     * @return {fabric.Canvas} thisArg\n     */\n    deactivateAllWithDispatch: function (e) {\n      var activeObject = this.getActiveGroup() || this.getActiveObject();\n      if (activeObject) {\n        this.fire('before:selection:cleared', { target: activeObject, e: e });\n      }\n      this.deactivateAll();\n      if (activeObject) {\n        this.fire('selection:cleared', { e: e });\n      }\n      return this;\n    },\n\n    /**\n     * Draws objects' controls (borders/controls)\n     * @param {CanvasRenderingContext2D} ctx Context to render controls on\n     */\n    drawControls: function(ctx) {\n      var activeGroup = this.getActiveGroup();\n      if (activeGroup) {\n        this._drawGroupControls(ctx, activeGroup);\n      }\n      else {\n        this._drawObjectsControls(ctx);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _drawGroupControls: function(ctx, activeGroup) {\n      activeGroup._renderControls(ctx);\n    },\n\n    /**\n     * @private\n     */\n    _drawObjectsControls: function(ctx) {\n      for (var i = 0, len = this._objects.length; i < len; ++i) {\n        if (!this._objects[i] || !this._objects[i].active) {\n          continue;\n        }\n        this._objects[i]._renderControls(ctx);\n        this.lastRenderedObjectWithControlsAboveOverlay = this._objects[i];\n      }\n    }\n  });\n\n  // copying static properties manually to work around Opera's bug,\n  // where \"prototype\" property is enumerable and overrides existing prototype\n  for (var prop in fabric.StaticCanvas) {\n    if (prop !== 'prototype') {\n      fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n    }\n  }\n\n  if (fabric.isTouchSupported) {\n    /** @ignore */\n    fabric.Canvas.prototype._setCursorFromEvent = function() { };\n  }\n\n  /**\n   * @class fabric.Element\n   * @alias fabric.Canvas\n   * @deprecated Use {@link fabric.Canvas} instead.\n   * @constructor\n   */\n  fabric.Element = fabric.Canvas;\n})();\n\n\n(function() {\n\n  var cursorOffset = {\n    mt: 0, // n\n    tr: 1, // ne\n    mr: 2, // e\n    br: 3, // se\n    mb: 4, // s\n    bl: 5, // sw\n    ml: 6, // w\n    tl: 7 // nw\n  },\n  addListener = fabric.util.addListener,\n  removeListener = fabric.util.removeListener;\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Map of cursor style values for each of the object controls\n     * @private\n     */\n    cursorMap: [\n      'n-resize',\n      'ne-resize',\n      'e-resize',\n      'se-resize',\n      's-resize',\n      'sw-resize',\n      'w-resize',\n      'nw-resize'\n    ],\n\n    /**\n     * Adds mouse listeners to canvas\n     * @private\n     */\n    _initEventListeners: function () {\n\n      this._bindEvents();\n\n      addListener(fabric.window, 'resize', this._onResize);\n\n      // mouse events\n      addListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n      addListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);\n\n      // touch events\n      addListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);\n      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\n      if (typeof eventjs !== 'undefined' && 'add' in eventjs) {\n        eventjs.add(this.upperCanvasEl, 'gesture', this._onGesture);\n        eventjs.add(this.upperCanvasEl, 'drag', this._onDrag);\n        eventjs.add(this.upperCanvasEl, 'orientation', this._onOrientationChange);\n        eventjs.add(this.upperCanvasEl, 'shake', this._onShake);\n        eventjs.add(this.upperCanvasEl, 'longpress', this._onLongPress);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _bindEvents: function() {\n      this._onMouseDown = this._onMouseDown.bind(this);\n      this._onMouseMove = this._onMouseMove.bind(this);\n      this._onMouseUp = this._onMouseUp.bind(this);\n      this._onResize = this._onResize.bind(this);\n      this._onGesture = this._onGesture.bind(this);\n      this._onDrag = this._onDrag.bind(this);\n      this._onShake = this._onShake.bind(this);\n      this._onLongPress = this._onLongPress.bind(this);\n      this._onOrientationChange = this._onOrientationChange.bind(this);\n      this._onMouseWheel = this._onMouseWheel.bind(this);\n    },\n\n    /**\n     * Removes all event listeners\n     */\n    removeListeners: function() {\n      removeListener(fabric.window, 'resize', this._onResize);\n\n      removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n      removeListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);\n\n      removeListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);\n      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\n      if (typeof eventjs !== 'undefined' && 'remove' in eventjs) {\n        eventjs.remove(this.upperCanvasEl, 'gesture', this._onGesture);\n        eventjs.remove(this.upperCanvasEl, 'drag', this._onDrag);\n        eventjs.remove(this.upperCanvasEl, 'orientation', this._onOrientationChange);\n        eventjs.remove(this.upperCanvasEl, 'shake', this._onShake);\n        eventjs.remove(this.upperCanvasEl, 'longpress', this._onLongPress);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js gesture\n     * @param {Event} [self] Inner Event object\n     */\n    _onGesture: function(e, self) {\n      this.__onTransformGesture && this.__onTransformGesture(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js drag\n     * @param {Event} [self] Inner Event object\n     */\n    _onDrag: function(e, self) {\n      this.__onDrag && this.__onDrag(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js wheel event\n     * @param {Event} [self] Inner Event object\n     */\n    _onMouseWheel: function(e, self) {\n      this.__onMouseWheel && this.__onMouseWheel(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js orientation change\n     * @param {Event} [self] Inner Event object\n     */\n    _onOrientationChange: function(e, self) {\n      this.__onOrientationChange && this.__onOrientationChange(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onShake: function(e, self) {\n      this.__onShake && this.__onShake(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onLongPress: function(e, self) {\n      this.__onLongPress && this.__onLongPress(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDown: function (e) {\n      this.__onMouseDown(e);\n\n      addListener(fabric.document, 'touchend', this._onMouseUp);\n      addListener(fabric.document, 'touchmove', this._onMouseMove);\n\n      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\n      if (e.type === 'touchstart') {\n        // Unbind mousedown to prevent double triggers from touch devices\n        removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      }\n      else {\n        addListener(fabric.document, 'mouseup', this._onMouseUp);\n        addListener(fabric.document, 'mousemove', this._onMouseMove);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUp: function (e) {\n      this.__onMouseUp(e);\n\n      removeListener(fabric.document, 'mouseup', this._onMouseUp);\n      removeListener(fabric.document, 'touchend', this._onMouseUp);\n\n      removeListener(fabric.document, 'mousemove', this._onMouseMove);\n      removeListener(fabric.document, 'touchmove', this._onMouseMove);\n\n      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\n      if (e.type === 'touchend') {\n        // Wait 400ms before rebinding mousedown to prevent double triggers\n        // from touch devices\n        var _this = this;\n        setTimeout(function() {\n          addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);\n        }, 400);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMove: function (e) {\n      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n      this.__onMouseMove(e);\n    },\n\n    /**\n     * @private\n     */\n    _onResize: function () {\n      this.calcOffset();\n    },\n\n    /**\n     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n     * @private\n     * @param {Object} target\n     * @param {Object} pointer\n     */\n    _shouldRender: function(target, pointer) {\n      var activeObject = this.getActiveGroup() || this.getActiveObject();\n\n      return !!(\n        (target && (\n          target.isMoving ||\n          target !== activeObject))\n        ||\n        (!target && !!activeObject)\n        ||\n        (!target && !activeObject && !this._groupSelector)\n        ||\n        (pointer &&\n          this._previousPointer &&\n          this.selection && (\n          pointer.x !== this._previousPointer.x ||\n          pointer.y !== this._previousPointer.y))\n      );\n    },\n\n    /**\n     * Method that defines the actions when mouse is released on canvas.\n     * The method resets the currentTransform parameters, store the image corner\n     * position in the image object and render the canvas on top.\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    __onMouseUp: function (e) {\n      var target;\n\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n        this._onMouseUpInDrawingMode(e);\n        return;\n      }\n\n      if (this._currentTransform) {\n        this._finalizeCurrentTransform();\n        target = this._currentTransform.target;\n      }\n      else {\n        target = this.findTarget(e, true);\n      }\n\n      var shouldRender = this._shouldRender(target, this.getPointer(e));\n\n      this._maybeGroupObjects(e);\n\n      if (target) {\n        target.isMoving = false;\n      }\n\n      shouldRender && this.renderAll();\n\n      this._handleCursorAndEvent(e, target);\n    },\n\n    _handleCursorAndEvent: function(e, target) {\n      this._setCursorFromEvent(e, target);\n\n      // TODO: why are we doing this?\n      var _this = this;\n      setTimeout(function () {\n        _this._setCursorFromEvent(e, target);\n      }, 50);\n\n      this.fire('mouse:up', { target: target, e: e });\n      target && target.fire('mouseup', { e: e });\n    },\n\n    /**\n     * @private\n     */\n    _finalizeCurrentTransform: function() {\n\n      var transform = this._currentTransform,\n          target = transform.target;\n\n      if (target._scaling) {\n        target._scaling = false;\n      }\n\n      target.setCoords();\n\n      // only fire :modified event if target coordinates were changed during mousedown-mouseup\n      if (this.stateful && target.hasStateChanged()) {\n        this.fire('object:modified', { target: target });\n        target.fire('modified');\n      }\n\n      this._restoreOriginXY(target);\n    },\n\n    /**\n     * @private\n     * @param {Object} target Object to restore\n     */\n    _restoreOriginXY: function(target) {\n      if (this._previousOriginX && this._previousOriginY) {\n\n        var originPoint = target.translateToOriginPoint(\n          target.getCenterPoint(),\n          this._previousOriginX,\n          this._previousOriginY);\n\n        target.originX = this._previousOriginX;\n        target.originY = this._previousOriginY;\n\n        target.left = originPoint.x;\n        target.top = originPoint.y;\n\n        this._previousOriginX = null;\n        this._previousOriginY = null;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDownInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = true;\n      this.discardActiveObject(e).renderAll();\n      if (this.clipTo) {\n        fabric.util.clipContext(this, this.contextTop);\n      }\n      var ivt = fabric.util.invertTransform(this.viewportTransform),\n          pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);\n      this.freeDrawingBrush.onMouseDown(pointer);\n      this.fire('mouse:down', { e: e });\n\n      var target = this.findTarget(e);\n      if (typeof target !== 'undefined') {\n        target.fire('mousedown', { e: e, target: target });\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMoveInDrawingMode: function(e) {\n      if (this._isCurrentlyDrawing) {\n        var ivt = fabric.util.invertTransform(this.viewportTransform),\n            pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);\n        this.freeDrawingBrush.onMouseMove(pointer);\n      }\n      this.setCursor(this.freeDrawingCursor);\n      this.fire('mouse:move', { e: e });\n\n      var target = this.findTarget(e);\n      if (typeof target !== 'undefined') {\n        target.fire('mousemove', { e: e, target: target });\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUpInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = false;\n      if (this.clipTo) {\n        this.contextTop.restore();\n      }\n      this.freeDrawingBrush.onMouseUp();\n      this.fire('mouse:up', { e: e });\n\n      var target = this.findTarget(e);\n      if (typeof target !== 'undefined') {\n        target.fire('mouseup', { e: e, target: target });\n      }\n    },\n\n    /**\n     * Method that defines the actions when mouse is clic ked on canvas.\n     * The method inits the currentTransform parameters and renders all the\n     * canvas so the current image can be placed on the top canvas and the rest\n     * in on the container one.\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    __onMouseDown: function (e) {\n\n      // accept only left clicks\n      var isLeftClick  = 'which' in e ? e.which === 1 : e.button === 1;\n      if (!isLeftClick && !fabric.isTouchSupported) {\n        return;\n      }\n\n      if (this.isDrawingMode) {\n        this._onMouseDownInDrawingMode(e);\n        return;\n      }\n\n      // ignore if some object is being transformed at this moment\n      if (this._currentTransform) {\n        return;\n      }\n\n      var target = this.findTarget(e),\n          pointer = this.getPointer(e, true);\n\n      // save pointer for check in __onMouseUp event\n      this._previousPointer = pointer;\n\n      var shouldRender = this._shouldRender(target, pointer),\n          shouldGroup = this._shouldGroup(e, target);\n\n      if (this._shouldClearSelection(e, target)) {\n        this._clearSelection(e, target, pointer);\n      }\n      else if (shouldGroup) {\n        this._handleGrouping(e, target);\n        target = this.getActiveGroup();\n      }\n\n      if (target && target.selectable && !shouldGroup) {\n        this._beforeTransform(e, target);\n        this._setupCurrentTransform(e, target);\n      }\n      // we must renderAll so that active image is placed on the top canvas\n      shouldRender && this.renderAll();\n\n      this.fire('mouse:down', { target: target, e: e });\n      target && target.fire('mousedown', { e: e });\n    },\n\n    /**\n     * @private\n     */\n    _beforeTransform: function(e, target) {\n      this.stateful && target.saveState();\n\n      // determine if it's a drag or rotate case\n      if (target._findTargetCorner(this.getPointer(e))) {\n        this.onBeforeScaleRotate(target);\n      }\n\n      if (target !== this.getActiveGroup() && target !== this.getActiveObject()) {\n        this.deactivateAll();\n        this.setActiveObject(target, e);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _clearSelection: function(e, target, pointer) {\n      this.deactivateAllWithDispatch(e);\n\n      if (target && target.selectable) {\n        this.setActiveObject(target, e);\n      }\n      else if (this.selection) {\n        this._groupSelector = {\n          ex: pointer.x,\n          ey: pointer.y,\n          top: 0,\n          left: 0\n        };\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} target Object for that origin is set to center\n     */\n    _setOriginToCenter: function(target) {\n      this._previousOriginX = this._currentTransform.target.originX;\n      this._previousOriginY = this._currentTransform.target.originY;\n\n      var center = target.getCenterPoint();\n\n      target.originX = 'center';\n      target.originY = 'center';\n\n      target.left = center.x;\n      target.top = center.y;\n\n      this._currentTransform.left = target.left;\n      this._currentTransform.top = target.top;\n    },\n\n    /**\n     * @private\n     * @param {Object} target Object for that center is set to origin\n     */\n    _setCenterToOrigin: function(target) {\n      var originPoint = target.translateToOriginPoint(\n        target.getCenterPoint(),\n        this._previousOriginX,\n        this._previousOriginY);\n\n      target.originX = this._previousOriginX;\n      target.originY = this._previousOriginY;\n\n      target.left = originPoint.x;\n      target.top = originPoint.y;\n\n      this._previousOriginX = null;\n      this._previousOriginY = null;\n    },\n\n    /**\n     * Method that defines the actions when mouse is hovering the canvas.\n     * The currentTransform parameter will definde whether the user is rotating/scaling/translating\n     * an image or neither of them (only hovering). A group selection is also possible and would cancel\n     * all any other type of action.\n     * In case of an image transformation only the top canvas will be rendered.\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    __onMouseMove: function (e) {\n\n      var target, pointer;\n\n      if (this.isDrawingMode) {\n        this._onMouseMoveInDrawingMode(e);\n        return;\n      }\n      if (typeof e.touches !== 'undefined' && e.touches.length > 1) {\n        return;\n      }\n\n      var groupSelector = this._groupSelector;\n\n      // We initially clicked in an empty area, so we draw a box for multiple selection\n      if (groupSelector) {\n        pointer = this.getPointer(e, true);\n\n        groupSelector.left = pointer.x - groupSelector.ex;\n        groupSelector.top = pointer.y - groupSelector.ey;\n\n        this.renderTop();\n      }\n      else if (!this._currentTransform) {\n\n        target = this.findTarget(e);\n\n        if (!target || target && !target.selectable) {\n          this.setCursor(this.defaultCursor);\n        }\n        else {\n          this._setCursorFromEvent(e, target);\n        }\n      }\n      else {\n        this._transformObject(e);\n      }\n\n      this.fire('mouse:move', { target: target, e: e });\n      target && target.fire('mousemove', { e: e });\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event fired on mousemove\n     */\n    _transformObject: function(e) {\n      var pointer = this.getPointer(e),\n          transform = this._currentTransform;\n\n      transform.reset = false,\n      transform.target.isMoving = true;\n\n      this._beforeScaleTransform(e, transform);\n      this._performTransformAction(e, transform, pointer);\n\n      this.renderAll();\n    },\n\n    /**\n     * @private\n     */\n    _performTransformAction: function(e, transform, pointer) {\n      var x = pointer.x,\n          y = pointer.y,\n          target = transform.target,\n          action = transform.action;\n\n      if (action === 'rotate') {\n        this._rotateObject(x, y);\n        this._fire('rotating', target, e);\n      }\n      else if (action === 'scale') {\n        this._onScale(e, transform, x, y);\n        this._fire('scaling', target, e);\n      }\n      else if (action === 'scaleX') {\n        this._scaleObject(x, y, 'x');\n        this._fire('scaling', target, e);\n      }\n      else if (action === 'scaleY') {\n        this._scaleObject(x, y, 'y');\n        this._fire('scaling', target, e);\n      }\n      else {\n        this._translateObject(x, y);\n        this._fire('moving', target, e);\n        this.setCursor(this.moveCursor);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _fire: function(eventName, target, e) {\n      this.fire('object:' + eventName, { target: target, e: e });\n      target.fire(eventName, { e: e });\n    },\n\n    /**\n     * @private\n     */\n    _beforeScaleTransform: function(e, transform) {\n      if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\n        var centerTransform = this._shouldCenterTransform(e, transform.target);\n\n        // Switch from a normal resize to center-based\n        if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\n           // Switch from center-based resize to normal one\n           (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\n        ) {\n          this._resetCurrentTransform(e);\n          transform.reset = true;\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _onScale: function(e, transform, x, y) {\n      // rotate object only if shift key is not pressed\n      // and if it is not a group we are transforming\n      if ((e.shiftKey || this.uniScaleTransform) && !transform.target.get('lockUniScaling')) {\n        transform.currentAction = 'scale';\n        this._scaleObject(x, y);\n      }\n      else {\n        // Switch from a normal resize to proportional\n        if (!transform.reset && transform.currentAction === 'scale') {\n          this._resetCurrentTransform(e, transform.target);\n        }\n\n        transform.currentAction = 'scaleEqually';\n        this._scaleObject(x, y, 'equally');\n      }\n    },\n\n    /**\n     * Sets the cursor depending on where the canvas is being hovered.\n     * Note: very buggy in Opera\n     * @param {Event} e Event object\n     * @param {Object} target Object that the mouse is hovering, if so.\n     */\n    _setCursorFromEvent: function (e, target) {\n      if (!target || !target.selectable) {\n        this.setCursor(this.defaultCursor);\n        return false;\n      }\n      else {\n        var activeGroup = this.getActiveGroup(),\n            // only show proper corner when group selection is not active\n            corner = target._findTargetCorner\n                      && (!activeGroup || !activeGroup.contains(target))\n                      && target._findTargetCorner(this.getPointer(e, true));\n\n        if (!corner) {\n          this.setCursor(target.hoverCursor || this.hoverCursor);\n        }\n        else {\n          this._setCornerCursor(corner, target);\n        }\n      }\n      return true;\n    },\n\n    /**\n     * @private\n     */\n    _setCornerCursor: function(corner, target) {\n      if (corner in cursorOffset) {\n        this.setCursor(this._getRotatedCornerCursor(corner, target));\n      }\n      else if (corner === 'mtr' && target.hasRotatingPoint) {\n        this.setCursor(this.rotationCursor);\n      }\n      else {\n        this.setCursor(this.defaultCursor);\n        return false;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getRotatedCornerCursor: function(corner, target) {\n      var n = Math.round((target.getAngle() % 360) / 45);\n\n      if (n < 0) {\n        n += 8; // full circle ahead\n      }\n      n += cursorOffset[corner];\n      // normalize n to be from 0 to 7\n      n %= 8;\n\n      return this.cursorMap[n];\n    }\n  });\n})();\n\n\n(function() {\n\n  var min = Math.min,\n      max = Math.max;\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     * @return {Boolean}\n     */\n    _shouldGroup: function(e, target) {\n      var activeObject = this.getActiveObject();\n      return e.shiftKey &&\n            (this.getActiveGroup() || (activeObject && activeObject !== target))\n            && this.selection;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _handleGrouping: function (e, target) {\n\n      if (target === this.getActiveGroup()) {\n\n        // if it's a group, find target again, this time skipping group\n        target = this.findTarget(e, true);\n\n        // if even object is not found, bail out\n        if (!target || target.isType('group')) {\n          return;\n        }\n      }\n      if (this.getActiveGroup()) {\n        this._updateActiveGroup(target, e);\n      }\n      else {\n        this._createActiveGroup(target, e);\n      }\n\n      if (this._activeGroup) {\n        this._activeGroup.saveCoords();\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateActiveGroup: function(target, e) {\n      var activeGroup = this.getActiveGroup();\n\n      if (activeGroup.contains(target)) {\n\n        activeGroup.removeWithUpdate(target);\n        this._resetObjectTransform(activeGroup);\n        target.set('active', false);\n\n        if (activeGroup.size() === 1) {\n          // remove group alltogether if after removal it only contains 1 object\n          this.discardActiveGroup(e);\n          // activate last remaining object\n          this.setActiveObject(activeGroup.item(0));\n          return;\n        }\n      }\n      else {\n        activeGroup.addWithUpdate(target);\n        this._resetObjectTransform(activeGroup);\n      }\n      this.fire('selection:created', { target: activeGroup, e: e });\n      activeGroup.set('active', true);\n    },\n\n    /**\n     * @private\n     */\n    _createActiveGroup: function(target, e) {\n\n      if (this._activeObject && target !== this._activeObject) {\n\n        var group = this._createGroup(target);\n        group.addWithUpdate();\n\n        this.setActiveGroup(group);\n        this._activeObject = null;\n\n        this.fire('selection:created', { target: group, e: e });\n      }\n\n      target.set('active', true);\n    },\n\n    /**\n     * @private\n     * @param {Object} target\n     */\n    _createGroup: function(target) {\n\n      var objects = this.getObjects(),\n          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\n          groupObjects = isActiveLower\n            ? [ this._activeObject, target ]\n            : [ target, this._activeObject ];\n\n      return new fabric.Group(groupObjects, {\n        canvas: this\n      });\n    },\n\n    /**\n     * @private\n     * @param {Event} e mouse event\n     */\n    _groupSelectedObjects: function (e) {\n\n      var group = this._collectObjects();\n\n      // do not create group for 1 element only\n      if (group.length === 1) {\n        this.setActiveObject(group[0], e);\n      }\n      else if (group.length > 1) {\n        group = new fabric.Group(group.reverse(), {\n          canvas: this\n        });\n        group.addWithUpdate();\n        this.setActiveGroup(group, e);\n        group.saveCoords();\n        this.fire('selection:created', { target: group });\n        this.renderAll();\n      }\n    },\n\n    /**\n     * @private\n     */\n    _collectObjects: function() {\n      var group = [ ],\n          currentObject,\n          x1 = this._groupSelector.ex,\n          y1 = this._groupSelector.ey,\n          x2 = x1 + this._groupSelector.left,\n          y2 = y1 + this._groupSelector.top,\n          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\n          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\n          isClick = x1 === x2 && y1 === y2;\n\n      for (var i = this._objects.length; i--; ) {\n        currentObject = this._objects[i];\n\n        if (!currentObject || !currentObject.selectable || !currentObject.visible) {\n          continue;\n        }\n\n        if (currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2) ||\n            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\n            currentObject.containsPoint(selectionX1Y1) ||\n            currentObject.containsPoint(selectionX2Y2)\n        ) {\n          currentObject.set('active', true);\n          group.push(currentObject);\n\n          // only add one object if it's a click\n          if (isClick) {\n            break;\n          }\n        }\n      }\n\n      return group;\n    },\n\n    /**\n     * @private\n     */\n    _maybeGroupObjects: function(e) {\n      if (this.selection && this._groupSelector) {\n        this._groupSelectedObjects(e);\n      }\n\n      var activeGroup = this.getActiveGroup();\n      if (activeGroup) {\n        activeGroup.setObjectsCoords().setCoords();\n        activeGroup.isMoving = false;\n        this.setCursor(this.defaultCursor);\n      }\n\n      // clear selection and current transformation\n      this._groupSelector = null;\n      this._currentTransform = null;\n    }\n  });\n\n})();\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   */\n  toDataURL: function (options) {\n    options || (options = { });\n\n    var format = options.format || 'png',\n        quality = options.quality || 1,\n        multiplier = options.multiplier || 1,\n        cropping = {\n          left: options.left,\n          top: options.top,\n          width: options.width,\n          height: options.height\n        };\n\n    if (multiplier !== 1) {\n      return this.__toDataURLWithMultiplier(format, quality, cropping, multiplier);\n    }\n    else {\n      return this.__toDataURL(format, quality, cropping);\n    }\n  },\n\n  /**\n   * @private\n   */\n  __toDataURL: function(format, quality, cropping) {\n\n    this.renderAll(true);\n\n    var canvasEl = this.upperCanvasEl || this.lowerCanvasEl,\n        croppedCanvasEl = this.__getCroppedCanvas(canvasEl, cropping);\n\n    // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n    if (format === 'jpg') {\n      format = 'jpeg';\n    }\n\n    var data = (fabric.StaticCanvas.supports('toDataURLWithQuality'))\n              ? (croppedCanvasEl || canvasEl).toDataURL('image/' + format, quality)\n              : (croppedCanvasEl || canvasEl).toDataURL('image/' + format);\n\n    this.contextTop && this.clearContext(this.contextTop);\n    this.renderAll();\n\n    if (croppedCanvasEl) {\n      croppedCanvasEl = null;\n    }\n\n    return data;\n  },\n\n  /**\n   * @private\n   */\n  __getCroppedCanvas: function(canvasEl, cropping) {\n\n    var croppedCanvasEl,\n        croppedCtx,\n        shouldCrop = 'left' in cropping ||\n                     'top' in cropping ||\n                     'width' in cropping ||\n                     'height' in cropping;\n\n    if (shouldCrop) {\n\n      croppedCanvasEl = fabric.util.createCanvasElement();\n      croppedCtx = croppedCanvasEl.getContext('2d');\n\n      croppedCanvasEl.width = cropping.width || this.width;\n      croppedCanvasEl.height = cropping.height || this.height;\n\n      croppedCtx.drawImage(canvasEl, -cropping.left || 0, -cropping.top || 0);\n    }\n\n    return croppedCanvasEl;\n  },\n\n  /**\n   * @private\n   */\n  __toDataURLWithMultiplier: function(format, quality, cropping, multiplier) {\n\n    var origWidth = this.getWidth(),\n        origHeight = this.getHeight(),\n        scaledWidth = origWidth * multiplier,\n        scaledHeight = origHeight * multiplier,\n        activeObject = this.getActiveObject(),\n        activeGroup = this.getActiveGroup(),\n\n        ctx = this.contextTop || this.contextContainer;\n\n    if (multiplier > 1) {\n      this.setWidth(scaledWidth).setHeight(scaledHeight);\n    }\n    ctx.scale(multiplier, multiplier);\n\n    if (cropping.left) {\n      cropping.left *= multiplier;\n    }\n    if (cropping.top) {\n      cropping.top *= multiplier;\n    }\n    if (cropping.width) {\n      cropping.width *= multiplier;\n    }\n    else if (multiplier < 1) {\n      cropping.width = scaledWidth;\n    }\n    if (cropping.height) {\n      cropping.height *= multiplier;\n    }\n    else if (multiplier < 1) {\n      cropping.height = scaledHeight;\n    }\n\n    if (activeGroup) {\n      // not removing group due to complications with restoring it with correct state afterwords\n      this._tempRemoveBordersControlsFromGroup(activeGroup);\n    }\n    else if (activeObject && this.deactivateAll) {\n      this.deactivateAll();\n    }\n\n    this.renderAll(true);\n\n    var data = this.__toDataURL(format, quality, cropping);\n\n    // restoring width, height for `renderAll` to draw\n    // background properly (while context is scaled)\n    this.width = origWidth;\n    this.height = origHeight;\n\n    ctx.scale(1 / multiplier,  1 / multiplier);\n    this.setWidth(origWidth).setHeight(origHeight);\n\n    if (activeGroup) {\n      this._restoreBordersControlsOnGroup(activeGroup);\n    }\n    else if (activeObject && this.setActiveObject) {\n      this.setActiveObject(activeObject);\n    }\n\n    this.contextTop && this.clearContext(this.contextTop);\n    this.renderAll();\n\n    return data;\n  },\n\n  /**\n   * Exports canvas element to a dataurl image (allowing to change image size via multiplier).\n   * @deprecated since 1.0.13\n   * @param {String} format (png|jpeg)\n   * @param {Number} multiplier\n   * @param {Number} quality (0..1)\n   * @return {String}\n   */\n  toDataURLWithMultiplier: function (format, multiplier, quality) {\n    return this.toDataURL({\n      format: format,\n      multiplier: multiplier,\n      quality: quality\n    });\n  },\n\n  /**\n   * @private\n   */\n  _tempRemoveBordersControlsFromGroup: function(group) {\n    group.origHasControls = group.hasControls;\n    group.origBorderColor = group.borderColor;\n\n    group.hasControls = true;\n    group.borderColor = 'rgba(0,0,0,0)';\n\n    group.forEachObject(function(o) {\n      o.origBorderColor = o.borderColor;\n      o.borderColor = 'rgba(0,0,0,0)';\n    });\n  },\n\n  /**\n   * @private\n   */\n  _restoreBordersControlsOnGroup: function(group) {\n    group.hideControls = group.origHideControls;\n    group.borderColor = group.origBorderColor;\n\n    group.forEachObject(function(o) {\n      o.borderColor = o.origBorderColor;\n      delete o.origBorderColor;\n    });\n  }\n});\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Populates canvas with data from the specified dataless JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\n   * @deprecated since 1.2.2\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#deserialization}\n   */\n  loadFromDatalessJSON: function (json, callback, reviver) {\n    return this.loadFromJSON(json, callback, reviver);\n  },\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * });\n   */\n  loadFromJSON: function (json, callback, reviver) {\n    if (!json) {\n      return;\n    }\n\n    // serialize if it wasn't already\n    var serialized = (typeof json === 'string')\n      ? JSON.parse(json)\n      : json;\n\n    this.clear();\n\n    var _this = this;\n    this._enlivenObjects(serialized.objects, function () {\n      _this._setBgOverlay(serialized, callback);\n    }, reviver);\n\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {Object} serialized Object with background and overlay information\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n   */\n  _setBgOverlay: function(serialized, callback) {\n    var _this = this,\n        loaded = {\n          backgroundColor: false,\n          overlayColor: false,\n          backgroundImage: false,\n          overlayImage: false\n        };\n\n    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n      callback && callback();\n      return;\n    }\n\n    var cbIfLoaded = function () {\n      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n        _this.renderAll();\n        callback && callback();\n      }\n    };\n\n    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\n\n    cbIfLoaded();\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n   * @param {(Object|String)} value Value to set\n   * @param {Object} loaded Set loaded property to true if property is set\n   * @param {Object} callback Callback function to invoke after property is set\n   */\n  __setBgOverlay: function(property, value, loaded, callback) {\n    var _this = this;\n\n    if (!value) {\n      loaded[property] = true;\n      return;\n    }\n\n    if (property === 'backgroundImage' || property === 'overlayImage') {\n      fabric.Image.fromObject(value, function(img) {\n        _this[property] = img;\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n    else {\n      this['set' + fabric.util.string.capitalize(property, true)](value, function() {\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n  },\n\n  /**\n   * @private\n   * @param {Array} objects\n   * @param {Function} callback\n   * @param {Function} [reviver]\n   */\n  _enlivenObjects: function (objects, callback, reviver) {\n    var _this = this;\n\n    if (!objects || objects.length === 0) {\n      callback && callback();\n      return;\n    }\n\n    var renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n      enlivenedObjects.forEach(function(obj, index) {\n        _this.insertAt(obj, index, true);\n      });\n\n      _this.renderOnAddRemove = renderOnAddRemove;\n      callback && callback();\n    }, null, reviver);\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Function} callback\n   */\n  _toDataURL: function (format, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURL(format));\n    });\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Number} multiplier\n   * @param {Function} callback\n   */\n  _toDataURLWithMultiplier: function (format, multiplier, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURLWithMultiplier(format, multiplier));\n    });\n  },\n\n  /**\n   * Clones canvas instance\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone: function (callback, properties) {\n    var data = JSON.stringify(this.toJSON(properties));\n    this.cloneWithoutData(function(clone) {\n      clone.loadFromJSON(data, function() {\n        callback && callback(clone);\n      });\n    });\n  },\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions, clipping properties, etc.\n   * but leaves data empty (so that you can populate it with your own)\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   */\n  cloneWithoutData: function(callback) {\n    var el = fabric.document.createElement('canvas');\n\n    el.width = this.getWidth();\n    el.height = this.getHeight();\n\n    var clone = new fabric.Canvas(el);\n    clone.clipTo = this.clipTo;\n    if (this.backgroundImage) {\n      clone.setBackgroundImage(this.backgroundImage.src, function() {\n        clone.renderAll();\n        callback && callback(clone);\n      });\n      clone.backgroundImageOpacity = this.backgroundImageOpacity;\n      clone.backgroundImageStretch = this.backgroundImageStretch;\n    }\n    else {\n      callback && callback(clone);\n    }\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      toFixed = fabric.util.toFixed,\n      capitalize = fabric.util.string.capitalize,\n      degreesToRadians = fabric.util.degreesToRadians,\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\n  if (fabric.Object) {\n    return;\n  }\n\n  /**\n   * Root object class from which all 2d shape classes inherit from\n   * @class fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#objects}\n   * @see {@link fabric.Object#initialize} for constructor definition\n   *\n   * @fires added\n   * @fires removed\n   *\n   * @fires selected\n   * @fires modified\n   * @fires rotating\n   * @fires scaling\n   * @fires moving\n   *\n   * @fires mousedown\n   * @fires mouseup\n   */\n  fabric.Object = fabric.util.createClass(/** @lends fabric.Object.prototype */ {\n\n    /**\n     * Retrieves object's {@link fabric.Object#clipTo|clipping function}\n     * @method getClipTo\n     * @memberOf fabric.Object.prototype\n     * @return {Function}\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#clipTo|clipping function}\n     * @method setClipTo\n     * @memberOf fabric.Object.prototype\n     * @param {Function} clipTo Clipping function\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#transformMatrix|transformMatrix}\n     * @method getTransformMatrix\n     * @memberOf fabric.Object.prototype\n     * @return {Array} transformMatrix\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#transformMatrix|transformMatrix}\n     * @method setTransformMatrix\n     * @memberOf fabric.Object.prototype\n     * @param {Array} transformMatrix\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#visible|visible} state\n     * @method getVisible\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean} True if visible\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#visible|visible} state\n     * @method setVisible\n     * @memberOf fabric.Object.prototype\n     * @param {Boolean} value visible value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#shadow|shadow}\n     * @method getShadow\n     * @memberOf fabric.Object.prototype\n     * @return {Object} Shadow instance\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#stroke|stroke}\n     * @method getStroke\n     * @memberOf fabric.Object.prototype\n     * @return {String} stroke value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#stroke|stroke}\n     * @method setStroke\n     * @memberOf fabric.Object.prototype\n     * @param {String} value stroke value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#strokeWidth|strokeWidth}\n     * @method getStrokeWidth\n     * @memberOf fabric.Object.prototype\n     * @return {Number} strokeWidth value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#strokeWidth|strokeWidth}\n     * @method setStrokeWidth\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value strokeWidth value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#originX|originX}\n     * @method getOriginX\n     * @memberOf fabric.Object.prototype\n     * @return {String} originX value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#originX|originX}\n     * @method setOriginX\n     * @memberOf fabric.Object.prototype\n     * @param {String} value originX value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#originY|originY}\n     * @method getOriginY\n     * @memberOf fabric.Object.prototype\n     * @return {String} originY value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#originY|originY}\n     * @method setOriginY\n     * @memberOf fabric.Object.prototype\n     * @param {String} value originY value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#fill|fill}\n     * @method getFill\n     * @memberOf fabric.Object.prototype\n     * @return {String} Fill value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#fill|fill}\n     * @method setFill\n     * @memberOf fabric.Object.prototype\n     * @param {String} value Fill value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#opacity|opacity}\n     * @method getOpacity\n     * @memberOf fabric.Object.prototype\n     * @return {Number} Opacity value (0-1)\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#opacity|opacity}\n     * @method setOpacity\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value Opacity value (0-1)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#angle|angle} (in degrees)\n     * @method getAngle\n     * @memberOf fabric.Object.prototype\n     * @return {Number}\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#top|top position}\n     * @method getTop\n     * @memberOf fabric.Object.prototype\n     * @return {Number} Top value (in pixels)\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#top|top position}\n     * @method setTop\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value Top value (in pixels)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#left|left position}\n     * @method getLeft\n     * @memberOf fabric.Object.prototype\n     * @return {Number} Left value (in pixels)\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#left|left position}\n     * @method setLeft\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value Left value (in pixels)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#scaleX|scaleX} value\n     * @method getScaleX\n     * @memberOf fabric.Object.prototype\n     * @return {Number} scaleX value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#scaleX|scaleX} value\n     * @method setScaleX\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value scaleX value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#scaleY|scaleY} value\n     * @method getScaleY\n     * @memberOf fabric.Object.prototype\n     * @return {Number} scaleY value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#scaleY|scaleY} value\n     * @method setScaleY\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value scaleY value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#flipX|flipX} value\n     * @method getFlipX\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean} flipX value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#flipX|flipX} value\n     * @method setFlipX\n     * @memberOf fabric.Object.prototype\n     * @param {Boolean} value flipX value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#flipY|flipY} value\n     * @method getFlipY\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean} flipY value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#flipY|flipY} value\n     * @method setFlipY\n     * @memberOf fabric.Object.prototype\n     * @param {Boolean} value flipY value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Type of an object (rect, circle, path, etc.).\n     * Note that this property is meant to be read-only and not meant to be modified.\n     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n     * @type String\n     * @default\n     */\n    type:                     'object',\n\n    /**\n     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originX:                  'left',\n\n    /**\n     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originY:                  'top',\n\n    /**\n     * Top position of an object. Note that by default it's relative to object center. You can change this by setting originY={top/center/bottom}\n     * @type Number\n     * @default\n     */\n    top:                      0,\n\n    /**\n     * Left position of an object. Note that by default it's relative to object center. You can change this by setting originX={left/center/right}\n     * @type Number\n     * @default\n     */\n    left:                     0,\n\n    /**\n     * Object width\n     * @type Number\n     * @default\n     */\n    width:                    0,\n\n    /**\n     * Object height\n     * @type Number\n     * @default\n     */\n    height:                   0,\n\n    /**\n     * Object scale factor (horizontal)\n     * @type Number\n     * @default\n     */\n    scaleX:                   1,\n\n    /**\n     * Object scale factor (vertical)\n     * @type Number\n     * @default\n     */\n    scaleY:                   1,\n\n    /**\n     * When true, an object is rendered as flipped horizontally\n     * @type Boolean\n     * @default\n     */\n    flipX:                    false,\n\n    /**\n     * When true, an object is rendered as flipped vertically\n     * @type Boolean\n     * @default\n     */\n    flipY:                    false,\n\n    /**\n     * Opacity of an object\n     * @type Number\n     * @default\n     */\n    opacity:                  1,\n\n    /**\n     * Angle of rotation of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    angle:                    0,\n\n    /**\n     * Size of object's controlling corners (in pixels)\n     * @type Number\n     * @default\n     */\n    cornerSize:               12,\n\n    /**\n     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n     * @type Boolean\n     * @default\n     */\n    transparentCorners:       true,\n\n    /**\n     * Default cursor value used when hovering over this object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:              null,\n\n    /**\n     * Padding between object and its controlling borders (in pixels)\n     * @type Number\n     * @default\n     */\n    padding:                  0,\n\n    /**\n     * Color of controlling borders of an object (when it's active)\n     * @type String\n     * @default\n     */\n    borderColor:              'rgba(102,153,255,0.75)',\n\n    /**\n     * Color of controlling corners of an object (when it's active)\n     * @type String\n     * @default\n     */\n    cornerColor:              'rgba(102,153,255,0.5)',\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being scaled via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:          false,\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being rotated via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:         true,\n\n    /**\n     * Color of object's fill\n     * @type String\n     * @default\n     */\n    fill:                     'rgb(0,0,0)',\n\n    /**\n     * Fill rule used to fill an object\n     * accepted values are nonzero, evenodd\n     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n     * @type String\n     * @default\n     */\n    fillRule:                 'nonzero',\n\n    /**\n     * Composite rule used for canvas globalCompositeOperation\n     * @type String\n     * @default\n     */\n    globalCompositeOperation: 'source-over',\n\n    /**\n     * Background color of an object. Only works with text objects at the moment.\n     * @type String\n     * @default\n     */\n    backgroundColor:          '',\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color\n     * @type String\n     * @default\n     */\n    stroke:                   null,\n\n    /**\n     * Width of a stroke used to render this object\n     * @type Number\n     * @default\n     */\n    strokeWidth:              1,\n\n    /**\n     * Array specifying dash pattern of an object's stroke (stroke must be defined)\n     * @type Array\n     */\n    strokeDashArray:          null,\n\n    /**\n     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n     * @type String\n     * @default\n     */\n    strokeLineCap:            'butt',\n\n    /**\n     * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\n     * @type String\n     * @default\n     */\n    strokeLineJoin:           'miter',\n\n    /**\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n     * @type Number\n     * @default\n     */\n    strokeMiterLimit:         10,\n\n    /**\n     * Shadow object representing shadow of this shape\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:                   null,\n\n    /**\n     * Opacity of object's controlling borders when object is active and moving\n     * @type Number\n     * @default\n     */\n    borderOpacityWhenMoving:  0.4,\n\n    /**\n     * Scale factor of object's controlling borders\n     * @type Number\n     * @default\n     */\n    borderScaleFactor:        1,\n\n    /**\n     * Transform matrix (similar to SVG's transform matrix)\n     * @type Array\n     */\n    transformMatrix:          null,\n\n    /**\n     * Minimum allowed scale value of an object\n     * @type Number\n     * @default\n     */\n    minScaleLimit:            0.01,\n\n    /**\n     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n     * But events still fire on it.\n     * @type Boolean\n     * @default\n     */\n    selectable:               true,\n\n    /**\n     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n     * @type Boolean\n     * @default\n     */\n    evented:                  true,\n\n    /**\n     * When set to `false`, an object is not rendered on canvas\n     * @type Boolean\n     * @default\n     */\n    visible:                  true,\n\n    /**\n     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n     * @type Boolean\n     * @default\n     */\n    hasControls:              true,\n\n    /**\n     * When set to `false`, object's controlling borders are not rendered\n     * @type Boolean\n     * @default\n     */\n    hasBorders:               true,\n\n    /**\n     * When set to `false`, object's controlling rotating point will not be visible or selectable\n     * @type Boolean\n     * @default\n     */\n    hasRotatingPoint:         true,\n\n    /**\n     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\n     * @type Number\n     * @default\n     */\n    rotatingPointOffset:      40,\n\n    /**\n     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:       false,\n\n    /**\n     * When `false`, default object's values are not included in its serialization\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues:     true,\n\n    /**\n     * Function that determines clipping of an object (context is passed as a first argument)\n     * Note that context origin is at the object's center point (not left/top corner)\n     * @type Function\n     */\n    clipTo:                   null,\n\n    /**\n     * When `true`, object horizontal movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementX:            false,\n\n    /**\n     * When `true`, object vertical movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementY:            false,\n\n    /**\n     * When `true`, object rotation is locked\n     * @type Boolean\n     * @default\n     */\n    lockRotation:             false,\n\n    /**\n     * When `true`, object horizontal scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingX:             false,\n\n    /**\n     * When `true`, object vertical scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingY:             false,\n\n    /**\n     * When `true`, object non-uniform scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockUniScaling:           false,\n\n    /**\n     * When `true`, object cannot be flipped by scaling into negative values\n     * @type Boolean\n     * @default\n     */\n\n    lockScalingFlip:          false,\n    /**\n     * List of properties to consider when checking if state\n     * of an object is changed (fabric.Object#hasStateChanged)\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties:  (\n      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\n      'stroke strokeWidth strokeDashArray strokeLineCap strokeLineJoin strokeMiterLimit ' +\n      'angle opacity fill fillRule globalCompositeOperation shadow clipTo visible backgroundColor ' +\n      'alignX alignY meetOrSlice'\n    ).split(' '),\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      if (options) {\n        this.setOptions(options);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initGradient: function(options) {\n      if (options.fill && options.fill.colorStops && !(options.fill instanceof fabric.Gradient)) {\n        this.set('fill', new fabric.Gradient(options.fill));\n      }\n      if (options.stroke && options.stroke.colorStops && !(options.stroke instanceof fabric.Gradient)) {\n        this.set('stroke', new fabric.Gradient(options.stroke));\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initPattern: function(options) {\n      if (options.fill && options.fill.source && !(options.fill instanceof fabric.Pattern)) {\n        this.set('fill', new fabric.Pattern(options.fill));\n      }\n      if (options.stroke && options.stroke.source && !(options.stroke instanceof fabric.Pattern)) {\n        this.set('stroke', new fabric.Pattern(options.stroke));\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initClipping: function(options) {\n      if (!options.clipTo || typeof options.clipTo !== 'string') {\n        return;\n      }\n\n      var functionBody = fabric.util.getFunctionBody(options.clipTo);\n      if (typeof functionBody !== 'undefined') {\n        this.clipTo = new Function('ctx', functionBody);\n      }\n    },\n\n    /**\n     * Sets object's properties from options\n     * @param {Object} [options] Options object\n     */\n    setOptions: function(options) {\n      for (var prop in options) {\n        this.set(prop, options[prop]);\n      }\n      this._initGradient(options);\n      this._initPattern(options);\n      this._initClipping(options);\n    },\n\n    /**\n     * Transforms context when rendering an object\n     * @param {CanvasRenderingContext2D} ctx Context\n     * @param {Boolean} fromLeft When true, context is transformed to object's top/left corner. This is used when rendering text on Node\n     */\n    transform: function(ctx, fromLeft) {\n      if (this.group && this.canvas.preserveObjectStacking && this.group === this.canvas._activeGroup) {\n        this.group.transform(ctx);\n      }\n      var center = fromLeft ? this._getLeftTopCoords() : this.getCenterPoint();\n      ctx.translate(center.x, center.y);\n      ctx.rotate(degreesToRadians(this.angle));\n      ctx.scale(\n        this.scaleX * (this.flipX ? -1 : 1),\n        this.scaleY * (this.flipY ? -1 : 1)\n      );\n    },\n\n    /**\n     * Returns an object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n          object = {\n            type:                     this.type,\n            originX:                  this.originX,\n            originY:                  this.originY,\n            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\n            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\n            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\n            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\n            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\n            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\n            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n            strokeDashArray:          this.strokeDashArray,\n            strokeLineCap:            this.strokeLineCap,\n            strokeLineJoin:           this.strokeLineJoin,\n            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n            angle:                    toFixed(this.getAngle(), NUM_FRACTION_DIGITS),\n            flipX:                    this.flipX,\n            flipY:                    this.flipY,\n            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\n            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\n            visible:                  this.visible,\n            clipTo:                   this.clipTo && String(this.clipTo),\n            backgroundColor:          this.backgroundColor,\n            fillRule:                 this.fillRule,\n            globalCompositeOperation: this.globalCompositeOperation,\n            transformMatrix:          this.transformMatrix\n          };\n\n      if (!this.includeDefaultValues) {\n        object = this._removeDefaultValues(object);\n      }\n\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\n      return object;\n    },\n\n    /**\n     * Returns (dataless) object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      // will be overwritten by subclasses\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     */\n    _removeDefaultValues: function(object) {\n      var prototype = fabric.util.getKlass(object.type).prototype,\n          stateProperties = prototype.stateProperties;\n\n      stateProperties.forEach(function(prop) {\n        if (object[prop] === prototype[prop]) {\n          delete object[prop];\n        }\n        var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\n                      Object.prototype.toString.call(prototype[prop]) === '[object Array]';\n\n        // basically a check for [] === []\n        if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\n          delete object[prop];\n        }\n      });\n\n      return object;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.' + capitalize(this.type) + '>';\n    },\n\n    /**\n     * Basic getter\n     * @param {String} property Property name\n     * @return {Any} value of a property\n     */\n    get: function(property) {\n      return this[property];\n    },\n\n    /**\n     * @private\n     */\n    _setObject: function(obj) {\n      for (var prop in obj) {\n        this._set(prop, obj[prop]);\n      }\n    },\n\n    /**\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    set: function(key, value) {\n      if (typeof key === 'object') {\n        this._setObject(key);\n      }\n      else {\n        if (typeof value === 'function' && key !== 'clipTo') {\n          this._set(key, value(this.get(key)));\n        }\n        else {\n          this._set(key, value);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {Any} value\n     * @return {fabric.Object} thisArg\n     */\n    _set: function(key, value) {\n      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY');\n\n      if (shouldConstrainValue) {\n        value = this._constrainScale(value);\n      }\n      if (key === 'scaleX' && value < 0) {\n        this.flipX = !this.flipX;\n        value *= -1;\n      }\n      else if (key === 'scaleY' && value < 0) {\n        this.flipY = !this.flipY;\n        value *= -1;\n      }\n      else if (key === 'width' || key === 'height') {\n        this.minScaleLimit = toFixed(Math.min(0.1, 1/Math.max(this.width, this.height)), 2);\n      }\n      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\n        value = new fabric.Shadow(value);\n      }\n\n      this[key] = value;\n\n      return this;\n    },\n\n    /**\n     * This callback function is called by the parent group of an object every\n     * time a non-delegated property changes on the group. It is passed the key\n     * and value as parameters. Not adding in this function's signature to avoid\n     * Travis build error about unused variables.\n     */\n    setOnGroup: function() {\n      // implemented by sub-classes, as needed.\n    },\n\n    /**\n     * Toggles specified property from `true` to `false` or from `false` to `true`\n     * @param {String} property Property to toggle\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    toggle: function(property) {\n      var value = this.get(property);\n      if (typeof value === 'boolean') {\n        this.set(property, !value);\n      }\n      return this;\n    },\n\n    /**\n     * Sets sourcePath of an object\n     * @param {String} value Value to set sourcePath to\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setSourcePath: function(value) {\n      this.sourcePath = value;\n      return this;\n    },\n\n    /**\n     * Retrieves viewportTransform from Object's canvas if possible\n     * @method getViewportTransform\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean} flipY value // TODO\n     */\n    getViewportTransform: function() {\n      if (this.canvas && this.canvas.viewportTransform) {\n        return this.canvas.viewportTransform;\n      }\n      return [1, 0, 0, 1, 0, 0];\n    },\n\n    /**\n     * Renders an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    render: function(ctx, noTransform) {\n      // do not render if width/height are zeros or object is not visible\n      if ((this.width === 0 && this.height === 0) || !this.visible) {\n        return;\n      }\n\n      ctx.save();\n\n      //setup fill rule for current object\n      this._setupCompositeOperation(ctx);\n      if (!noTransform) {\n        this.transform(ctx);\n      }\n      this._setStrokeStyles(ctx);\n      this._setFillStyles(ctx);\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      this._setOpacity(ctx);\n      this._setShadow(ctx);\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      this._render(ctx, noTransform);\n      this.clipTo && ctx.restore();\n\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setOpacity: function(ctx) {\n      if (this.group) {\n        this.group._setOpacity(ctx);\n      }\n      ctx.globalAlpha *= this.opacity;\n    },\n\n    _setStrokeStyles: function(ctx) {\n      if (this.stroke) {\n        ctx.lineWidth = this.strokeWidth;\n        ctx.lineCap = this.strokeLineCap;\n        ctx.lineJoin = this.strokeLineJoin;\n        ctx.miterLimit = this.strokeMiterLimit;\n        ctx.strokeStyle = this.stroke.toLive\n          ? this.stroke.toLive(ctx, this)\n          : this.stroke;\n      }\n    },\n\n    _setFillStyles: function(ctx) {\n      if (this.fill) {\n        ctx.fillStyle = this.fill.toLive\n          ? this.fill.toLive(ctx, this)\n          : this.fill;\n      }\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    _renderControls: function(ctx, noTransform) {\n      if (!this.active || noTransform) {\n        return;\n      }\n      var vpt = this.getViewportTransform();\n      ctx.save();\n      var center;\n      if (this.group) {\n        center = fabric.util.transformPoint(this.group.getCenterPoint(), vpt);\n        ctx.translate(center.x, center.y);\n        ctx.rotate(degreesToRadians(this.group.angle));\n      }\n      center = fabric.util.transformPoint(this.getCenterPoint(), vpt, null != this.group);\n      if (this.group) {\n        center.x *= this.group.scaleX;\n        center.y *= this.group.scaleY;\n      }\n      ctx.translate(center.x, center.y);\n      ctx.rotate(degreesToRadians(this.angle));\n      this.drawBorders(ctx);\n      this.drawControls(ctx);\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      var multX = (this.canvas && this.canvas.viewportTransform[0]) || 1,\n          multY = (this.canvas && this.canvas.viewportTransform[3]) || 1;\n\n      ctx.shadowColor = this.shadow.color;\n      ctx.shadowBlur = this.shadow.blur * (multX + multY) * (this.scaleX + this.scaleY) / 4;\n      ctx.shadowOffsetX = this.shadow.offsetX * multX * this.scaleX;\n      ctx.shadowOffsetY = this.shadow.offsetY * multY * this.scaleY;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _removeShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      ctx.shadowColor = '';\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderFill: function(ctx) {\n      if (!this.fill) {\n        return;\n      }\n\n      ctx.save();\n      if (this.fill.gradientTransform) {\n        var g = this.fill.gradientTransform;\n        ctx.transform.apply(ctx, g);\n      }\n      if (this.fill.toLive) {\n        ctx.translate(\n          -this.width / 2 + this.fill.offsetX || 0,\n          -this.height / 2 + this.fill.offsetY || 0);\n      }\n      if (this.fillRule === 'evenodd') {\n        ctx.fill('evenodd');\n      }\n      else {\n        ctx.fill();\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderStroke: function(ctx) {\n      if (!this.stroke || this.strokeWidth === 0) {\n        return;\n      }\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n\n      if (this.strokeDashArray) {\n        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n        if (1 & this.strokeDashArray.length) {\n          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);\n        }\n        if (supportsLineDash) {\n          ctx.setLineDash(this.strokeDashArray);\n          this._stroke && this._stroke(ctx);\n        }\n        else {\n          this._renderDashedStroke && this._renderDashedStroke(ctx);\n        }\n        ctx.stroke();\n      }\n      else {\n        if (this.stroke.gradientTransform) {\n          var g = this.stroke.gradientTransform;\n          ctx.transform.apply(ctx, g);\n        }\n        this._stroke ? this._stroke(ctx) : ctx.stroke();\n      }\n      ctx.restore();\n    },\n\n    /**\n     * Clones an instance\n     * @param {Function} callback Callback is invoked with a clone as a first argument\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {fabric.Object} clone of an instance\n     */\n    clone: function(callback, propertiesToInclude) {\n      if (this.constructor.fromObject) {\n        return this.constructor.fromObject(this.toObject(propertiesToInclude), callback);\n      }\n      return new fabric.Object(this.toObject(propertiesToInclude));\n    },\n\n    /**\n     * Creates an instance of fabric.Image out of an object\n     * @param {Function} callback callback, invoked with an instance as a first argument\n     * @return {fabric.Object} thisArg\n     */\n    cloneAsImage: function(callback) {\n      var dataUrl = this.toDataURL();\n      fabric.util.loadImage(dataUrl, function(img) {\n        if (callback) {\n          callback(new fabric.Image(img));\n        }\n      });\n      return this;\n    },\n\n    /**\n     * Converts an object into a data-url-like string\n     * @param {Object} options Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     */\n    toDataURL: function(options) {\n      options || (options = { });\n\n      var el = fabric.util.createCanvasElement(),\n          boundingRect = this.getBoundingRect();\n\n      el.width = boundingRect.width;\n      el.height = boundingRect.height;\n\n      fabric.util.wrapElement(el, 'div');\n      var canvas = new fabric.StaticCanvas(el);\n\n      // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n      if (options.format === 'jpg') {\n        options.format = 'jpeg';\n      }\n\n      if (options.format === 'jpeg') {\n        canvas.backgroundColor = '#fff';\n      }\n\n      var origParams = {\n        active: this.get('active'),\n        left: this.getLeft(),\n        top: this.getTop()\n      };\n\n      this.set('active', false);\n      this.setPositionByOrigin(new fabric.Point(el.width / 2, el.height / 2), 'center', 'center');\n\n      var originalCanvas = this.canvas;\n      canvas.add(this);\n      var data = canvas.toDataURL(options);\n\n      this.set(origParams).setCoords();\n      this.canvas = originalCanvas;\n\n      canvas.dispose();\n      canvas = null;\n\n      return data;\n    },\n\n    /**\n     * Returns true if specified type is identical to the type of an instance\n     * @param {String} type Type to check against\n     * @return {Boolean}\n     */\n    isType: function(type) {\n      return this.type === type;\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return 0;\n    },\n\n    /**\n     * Returns a JSON representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} JSON\n     */\n    toJSON: function(propertiesToInclude) {\n      // delegate, not alias\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * Sets gradient (fill or stroke) of an object\n     * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\n     * @param {String} property Property name 'stroke' or 'fill'\n     * @param {Object} [options] Options object\n     * @param {String} [options.type] Type of gradient 'radial' or 'linear'\n     * @param {Number} [options.x1=0] x-coordinate of start point\n     * @param {Number} [options.y1=0] y-coordinate of start point\n     * @param {Number} [options.x2=0] x-coordinate of end point\n     * @param {Number} [options.y2=0] y-coordinate of end point\n     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\n     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\n     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\n     * @example <caption>Set linear gradient</caption>\n     * object.setGradient('fill', {\n     *   type: 'linear',\n     *   x1: -object.width / 2,\n     *   y1: 0,\n     *   x2: object.width / 2,\n     *   y2: 0,\n     *   colorStops: {\n     *     0: 'red',\n     *     0.5: '#005555',\n     *     1: 'rgba(0,0,255,0.5)'\n     *   }\n     * });\n     * canvas.renderAll();\n     * @example <caption>Set radial gradient</caption>\n     * object.setGradient('fill', {\n     *   type: 'radial',\n     *   x1: 0,\n     *   y1: 0,\n     *   x2: 0,\n     *   y2: 0,\n     *   r1: object.width / 2,\n     *   r2: 10,\n     *   colorStops: {\n     *     0: 'red',\n     *     0.5: '#005555',\n     *     1: 'rgba(0,0,255,0.5)'\n     *   }\n     * });\n     * canvas.renderAll();\n     */\n    setGradient: function(property, options) {\n      options || (options = { });\n\n      var gradient = { colorStops: [] };\n\n      gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\n      gradient.coords = {\n        x1: options.x1,\n        y1: options.y1,\n        x2: options.x2,\n        y2: options.y2\n      };\n\n      if (options.r1 || options.r2) {\n        gradient.coords.r1 = options.r1;\n        gradient.coords.r2 = options.r2;\n      }\n\n      for (var position in options.colorStops) {\n        var color = new fabric.Color(options.colorStops[position]);\n        gradient.colorStops.push({\n          offset: position,\n          color: color.toRgb(),\n          opacity: color.getAlpha()\n        });\n      }\n\n      return this.set(property, fabric.Gradient.forObject(this, gradient));\n    },\n\n    /**\n     * Sets pattern fill of an object\n     * @param {Object} options Options object\n     * @param {(String|HTMLImageElement)} options.source Pattern source\n     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\n     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\n     * @example <caption>Set pattern</caption>\n     * fabric.util.loadImage('http://fabricjs.com/assets/escheresque_ste.png', function(img) {\n     *   object.setPatternFill({\n     *     source: img,\n     *     repeat: 'repeat'\n     *   });\n     *   canvas.renderAll();\n     * });\n     */\n    setPatternFill: function(options) {\n      return this.set('fill', new fabric.Pattern(options));\n    },\n\n    /**\n     * Sets {@link fabric.Object#shadow|shadow} of an object\n     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n     * @param {String} [options.color=rgb(0,0,0)] Shadow color\n     * @param {Number} [options.blur=0] Shadow blur\n     * @param {Number} [options.offsetX=0] Shadow horizontal offset\n     * @param {Number} [options.offsetY=0] Shadow vertical offset\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\n     * @example <caption>Set shadow with string notation</caption>\n     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\n     * canvas.renderAll();\n     * @example <caption>Set shadow with object notation</caption>\n     * object.setShadow({\n     *   color: 'red',\n     *   blur: 10,\n     *   offsetX: 20,\n     *   offsetY: 20\n     * });\n     * canvas.renderAll();\n     */\n    setShadow: function(options) {\n      return this.set('shadow', options ? new fabric.Shadow(options) : null);\n    },\n\n    /**\n     * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\n     * @param {String} color Color value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setColor: function(color) {\n      this.set('fill', color);\n      return this;\n    },\n\n    /**\n     * Sets \"angle\" of an instance\n     * @param {Number} angle Angle value (in degrees)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setAngle: function(angle) {\n      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\n\n      if (shouldCenterOrigin) {\n        this._setOriginToCenter();\n      }\n\n      this.set('angle', angle);\n\n      if (shouldCenterOrigin) {\n        this._resetOrigin();\n      }\n\n      return this;\n    },\n\n    /**\n     * Centers object horizontally on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerH: function () {\n      this.canvas.centerObjectH(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerV: function () {\n      this.canvas.centerObjectV(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically and horizontally on canvas to which is was added last\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    center: function () {\n      this.canvas.centerObject(this);\n      return this;\n    },\n\n    /**\n     * Removes object from canvas to which it was added last\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    remove: function() {\n      this.canvas.remove(this);\n      return this;\n    },\n\n    /**\n     * Returns coordinates of a pointer relative to an object\n     * @param {Event} e Event to operate upon\n     * @param {Object} [pointer] Pointer to operate upon (instead of event)\n     * @return {Object} Coordinates of a pointer (x, y)\n     */\n    getLocalPointer: function(e, pointer) {\n      pointer = pointer || this.canvas.getPointer(e);\n      var pClicked = new fabric.Point(pointer.x, pointer.y),\n          objectLeftTop = this._getLeftTopCoords();\n      if (this.angle) {\n        pClicked = fabric.util.rotatePoint(\n          pClicked, objectLeftTop, fabric.util.degreesToRadians(-this.angle));\n      }\n      return {\n        x: pClicked.x - objectLeftTop.x,\n        y: pClicked.y - objectLeftTop.y\n      };\n    },\n\n    /**\n     * Sets canvas globalCompositeOperation for specific object\n     * custom composition operation for the particular object can be specifed using globalCompositeOperation property\n     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n     */\n    _setupCompositeOperation: function (ctx) {\n      if (this.globalCompositeOperation) {\n        ctx.globalCompositeOperation = this.globalCompositeOperation;\n      }\n    }\n  });\n\n  fabric.util.createAccessors(fabric.Object);\n\n  /**\n   * Alias for {@link fabric.Object.prototype.setAngle}\n   * @alias rotate -> setAngle\n   * @memberOf fabric.Object\n   */\n  fabric.Object.prototype.rotate = fabric.Object.prototype.setAngle;\n\n  extend(fabric.Object.prototype, fabric.Observable);\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   * @static\n   * @memberOf fabric.Object\n   * @constant\n   * @type Number\n   */\n  fabric.Object.NUM_FRACTION_DIGITS = 2;\n\n  /**\n   * Unique id used internally when creating SVG elements\n   * @static\n   * @memberOf fabric.Object\n   * @type Number\n   */\n  fabric.Object.__uid = 0;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      originXOffset = {\n        left: -0.5,\n        center: 0,\n        right: 0.5\n      },\n      originYOffset = {\n        top: -0.5,\n        center: 0,\n        bottom: 0.5\n      };\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n      var x = point.x,\n          y = point.y,\n          offsetX = originXOffset[toOriginX] - originXOffset[fromOriginX],\n          offsetY = originYOffset[toOriginY] - originYOffset[fromOriginY],\n          dim;\n      if (offsetX || offsetY) {\n        dim = this._getTransformedDimensions();\n        x = point.x + offsetX * dim.x;\n        y = point.y + offsetY * dim.y;\n      }\n      return new fabric.Point(x, y);\n    },\n\n    /**\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToCenterPoint: function(point, originX, originY) {\n      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n     * @param {fabric.Point} center The point which corresponds to center of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToOriginPoint: function(center, originX, originY) {\n      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Returns the real center coordinates of the object\n     * @return {fabric.Point}\n     */\n    getCenterPoint: function() {\n      var leftTop = new fabric.Point(this.left, this.top);\n      return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n    },\n\n    /**\n     * Returns the coordinates of the object based on center coordinates\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @return {fabric.Point}\n     */\n    // getOriginPoint: function(center) {\n    //   return this.translateToOriginPoint(center, this.originX, this.originY);\n    // },\n\n    /**\n     * Returns the coordinates of the object as if it has a different origin\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    getPointByOrigin: function(originX, originY) {\n      var center = this.getCenterPoint();\n      return this.translateToOriginPoint(center, originX, originY);\n    },\n\n    /**\n     * Returns the point in local coordinates\n     * @param {fabric.Point} point The point relative to the global coordinate system\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    toLocalPoint: function(point, originX, originY) {\n      var center = this.getCenterPoint(),\n          p, p2;\n\n      if (originX && originY) {\n        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      }\n      else {\n        p = new fabric.Point(this.left, this.top);\n      }\n\n      p2 = new fabric.Point(point.x, point.y);\n      if (this.angle) {\n        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n      }\n      return p2.subtractEquals(p);\n    },\n\n    /**\n     * Returns the point in global coordinates\n     * @param {fabric.Point} The point relative to the local coordinate system\n     * @return {fabric.Point}\n     */\n    // toGlobalPoint: function(point) {\n    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n    // },\n\n    /**\n     * Sets the position of the object taking into consideration the object's origin\n     * @param {fabric.Point} pos The new position of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {void}\n     */\n    setPositionByOrigin: function(pos, originX, originY) {\n      var center = this.translateToCenterPoint(pos, originX, originY),\n          position = this.translateToOriginPoint(center, this.originX, this.originY);\n\n      this.set('left', position.x);\n      this.set('top', position.y);\n    },\n\n    /**\n     * @param {String} to One of 'left', 'center', 'right'\n     */\n    adjustPosition: function(to) {\n      var angle = degreesToRadians(this.angle),\n          hypotFull = this.getWidth(),\n          xFull = Math.cos(angle) * hypotFull,\n          yFull = Math.sin(angle) * hypotFull;\n\n      //TODO: this function does not consider mixed situation like top, center.\n      this.left += xFull * (originXOffset[to] - originXOffset[this.originX]);\n      this.top += yFull * (originXOffset[to] - originXOffset[this.originX]);\n\n      this.setCoords();\n      this.originX = to;\n    },\n\n    /**\n     * Sets the origin/position of the object to it's center point\n     * @private\n     * @return {void}\n     */\n    _setOriginToCenter: function() {\n      this._originalOriginX = this.originX;\n      this._originalOriginY = this.originY;\n\n      var center = this.getCenterPoint();\n\n      this.originX = 'center';\n      this.originY = 'center';\n\n      this.left = center.x;\n      this.top = center.y;\n    },\n\n    /**\n     * Resets the origin/position of the object to it's original origin\n     * @private\n     * @return {void}\n     */\n    _resetOrigin: function() {\n      var originPoint = this.translateToOriginPoint(\n        this.getCenterPoint(),\n        this._originalOriginX,\n        this._originalOriginY);\n\n      this.originX = this._originalOriginX;\n      this.originY = this._originalOriginY;\n\n      this.left = originPoint.x;\n      this.top = originPoint.y;\n\n      this._originalOriginX = null;\n      this._originalOriginY = null;\n    },\n\n    /**\n     * @private\n     */\n    _getLeftTopCoords: function() {\n      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\n    }\n  });\n\n})();\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Object containing coordinates of object's controls\n     * @type Object\n     * @default\n     */\n    oCoords: null,\n\n    /**\n     * Checks if object intersects with an area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @return {Boolean} true if object intersects with an area formed by 2 points\n     */\n    intersectsWithRect: function(pointTL, pointBR) {\n      var oCoords = this.oCoords,\n          tl = new fabric.Point(oCoords.tl.x, oCoords.tl.y),\n          tr = new fabric.Point(oCoords.tr.x, oCoords.tr.y),\n          bl = new fabric.Point(oCoords.bl.x, oCoords.bl.y),\n          br = new fabric.Point(oCoords.br.x, oCoords.br.y),\n          intersection = fabric.Intersection.intersectPolygonRectangle(\n            [tl, tr, br, bl],\n            pointTL,\n            pointBR\n          );\n      return intersection.status === 'Intersection';\n    },\n\n    /**\n     * Checks if object intersects with another object\n     * @param {Object} other Object to test\n     * @return {Boolean} true if object intersects with another object\n     */\n    intersectsWithObject: function(other) {\n      // extracts coords\n      function getCoords(oCoords) {\n        return {\n          tl: new fabric.Point(oCoords.tl.x, oCoords.tl.y),\n          tr: new fabric.Point(oCoords.tr.x, oCoords.tr.y),\n          bl: new fabric.Point(oCoords.bl.x, oCoords.bl.y),\n          br: new fabric.Point(oCoords.br.x, oCoords.br.y)\n        };\n      }\n      var thisCoords = getCoords(this.oCoords),\n          otherCoords = getCoords(other.oCoords),\n          intersection = fabric.Intersection.intersectPolygonPolygon(\n            [thisCoords.tl, thisCoords.tr, thisCoords.br, thisCoords.bl],\n            [otherCoords.tl, otherCoords.tr, otherCoords.br, otherCoords.bl]\n          );\n\n      return intersection.status === 'Intersection';\n    },\n\n    /**\n     * Checks if object is fully contained within area of another object\n     * @param {Object} other Object to test\n     * @return {Boolean} true if object is fully contained within area of another object\n     */\n    isContainedWithinObject: function(other) {\n      var boundingRect = other.getBoundingRect(),\n          point1 = new fabric.Point(boundingRect.left, boundingRect.top),\n          point2 = new fabric.Point(boundingRect.left + boundingRect.width, boundingRect.top + boundingRect.height);\n\n      return this.isContainedWithinRect(point1, point2);\n    },\n\n    /**\n     * Checks if object is fully contained within area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @return {Boolean} true if object is fully contained within area formed by 2 points\n     */\n    isContainedWithinRect: function(pointTL, pointBR) {\n      var boundingRect = this.getBoundingRect();\n\n      return (\n        boundingRect.left >= pointTL.x &&\n        boundingRect.left + boundingRect.width <= pointBR.x &&\n        boundingRect.top >= pointTL.y &&\n        boundingRect.top + boundingRect.height <= pointBR.y\n      );\n    },\n\n    /**\n     * Checks if point is inside the object\n     * @param {fabric.Point} point Point to check against\n     * @return {Boolean} true if point is inside the object\n     */\n    containsPoint: function(point) {\n      var lines = this._getImageLines(this.oCoords),\n          xPoints = this._findCrossPoints(point, lines);\n\n      // if xPoints is odd then point is inside the object\n      return (xPoints !== 0 && xPoints % 2 === 1);\n    },\n\n    /**\n     * Method that returns an object with the object edges in it, given the coordinates of the corners\n     * @private\n     * @param {Object} oCoords Coordinates of the object corners\n     */\n    _getImageLines: function(oCoords) {\n      return {\n        topline: {\n          o: oCoords.tl,\n          d: oCoords.tr\n        },\n        rightline: {\n          o: oCoords.tr,\n          d: oCoords.br\n        },\n        bottomline: {\n          o: oCoords.br,\n          d: oCoords.bl\n        },\n        leftline: {\n          o: oCoords.bl,\n          d: oCoords.tl\n        }\n      };\n    },\n\n    /**\n     * Helper method to determine how many cross points are between the 4 object edges\n     * and the horizontal line determined by a point on canvas\n     * @private\n     * @param {fabric.Point} point Point to check\n     * @param {Object} oCoords Coordinates of the object being evaluated\n     */\n    _findCrossPoints: function(point, oCoords) {\n      var b1, b2, a1, a2, xi, yi,\n          xcount = 0,\n          iLine;\n\n      for (var lineKey in oCoords) {\n        iLine = oCoords[lineKey];\n        // optimisation 1: line below point. no cross\n        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\n          continue;\n        }\n        // optimisation 2: line above point. no cross\n        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\n          continue;\n        }\n        // optimisation 3: vertical line case\n        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\n          xi = iLine.o.x;\n          yi = point.y;\n        }\n        // calculate the intersection point\n        else {\n          b1 = 0;\n          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n          a1 = point.y - b1 * point.x;\n          a2 = iLine.o.y - b2 * iLine.o.x;\n\n          xi = - (a1 - a2) / (b1 - b2);\n          yi = a1 + b1 * xi;\n        }\n        // dont count xi < point.x cases\n        if (xi >= point.x) {\n          xcount += 1;\n        }\n        // optimisation 4: specific for square images\n        if (xcount === 2) {\n          break;\n        }\n      }\n      return xcount;\n    },\n\n    /**\n     * Returns width of an object's bounding rectangle\n     * @deprecated since 1.0.4\n     * @return {Number} width value\n     */\n    getBoundingRectWidth: function() {\n      return this.getBoundingRect().width;\n    },\n\n    /**\n     * Returns height of an object's bounding rectangle\n     * @deprecated since 1.0.4\n     * @return {Number} height value\n     */\n    getBoundingRectHeight: function() {\n      return this.getBoundingRect().height;\n    },\n\n    /**\n     * Returns coordinates of object's bounding rectangle (left, top, width, height)\n     * @return {Object} Object with left, top, width, height properties\n     */\n    getBoundingRect: function() {\n      this.oCoords || this.setCoords();\n\n      var xCoords = [this.oCoords.tl.x, this.oCoords.tr.x, this.oCoords.br.x, this.oCoords.bl.x],\n          minX = fabric.util.array.min(xCoords),\n          maxX = fabric.util.array.max(xCoords),\n          width = Math.abs(minX - maxX),\n\n          yCoords = [this.oCoords.tl.y, this.oCoords.tr.y, this.oCoords.br.y, this.oCoords.bl.y],\n          minY = fabric.util.array.min(yCoords),\n          maxY = fabric.util.array.max(yCoords),\n          height = Math.abs(minY - maxY);\n\n      return {\n        left: minX,\n        top: minY,\n        width: width,\n        height: height\n      };\n    },\n\n    /**\n     * Returns width of an object\n     * @return {Number} width value\n     */\n    getWidth: function() {\n      return this.width * this.scaleX;\n    },\n\n    /**\n     * Returns height of an object\n     * @return {Number} height value\n     */\n    getHeight: function() {\n      return this.height * this.scaleY;\n    },\n\n    /**\n     * Makes sure the scale is valid and modifies it if necessary\n     * @private\n     * @param {Number} value\n     * @return {Number}\n     */\n    _constrainScale: function(value) {\n      if (Math.abs(value) < this.minScaleLimit) {\n        if (value < 0) {\n          return -this.minScaleLimit;\n        }\n        else {\n          return this.minScaleLimit;\n        }\n      }\n      return value;\n    },\n\n    /**\n     * Scales an object (equally by x and y)\n     * @param {Number} value Scale factor\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scale: function(value) {\n      value = this._constrainScale(value);\n\n      if (value < 0) {\n        this.flipX = !this.flipX;\n        this.flipY = !this.flipY;\n        value *= -1;\n      }\n\n      this.scaleX = value;\n      this.scaleY = value;\n      this.setCoords();\n      return this;\n    },\n\n    /**\n     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New width value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToWidth: function(value) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRectWidth() / this.getWidth();\n      return this.scale(value / this.width / boundingRectFactor);\n    },\n\n    /**\n     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New height value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToHeight: function(value) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRectHeight() / this.getHeight();\n      return this.scale(value / this.height / boundingRectFactor);\n    },\n\n    /**\n     * Sets corner position coordinates based on current angle, width and height\n     * See https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setCoords: function() {\n      var theta = degreesToRadians(this.angle),\n          vpt = this.getViewportTransform(),\n          dim = this._calculateCurrentDimensions(true),\n          currentWidth = dim.x, currentHeight = dim.y;\n\n      // If width is negative, make postive. Fixes path selection issue\n      if (currentWidth < 0) {\n        currentWidth = Math.abs(currentWidth);\n      }\n\n      var sinTh = Math.sin(theta),\n          cosTh = Math.cos(theta),\n          _angle = currentWidth > 0 ? Math.atan(currentHeight / currentWidth) : 0,\n          _hypotenuse = (currentWidth / Math.cos(_angle)) / 2,\n          offsetX = Math.cos(_angle + theta) * _hypotenuse,\n          offsetY = Math.sin(_angle + theta) * _hypotenuse,\n\n          // offset added for rotate and scale actions\n          coords = fabric.util.transformPoint(this.getCenterPoint(), vpt),\n          tl  = new fabric.Point(coords.x - offsetX, coords.y - offsetY),\n          tr  = new fabric.Point(tl.x + (currentWidth * cosTh), tl.y + (currentWidth * sinTh)),\n          bl  = new fabric.Point(tl.x - (currentHeight * sinTh), tl.y + (currentHeight * cosTh)),\n          br  = new fabric.Point(coords.x + offsetX, coords.y + offsetY),\n          ml  = new fabric.Point((tl.x + bl.x)/2, (tl.y + bl.y)/2),\n          mt  = new fabric.Point((tr.x + tl.x)/2, (tr.y + tl.y)/2),\n          mr  = new fabric.Point((br.x + tr.x)/2, (br.y + tr.y)/2),\n          mb  = new fabric.Point((br.x + bl.x)/2, (br.y + bl.y)/2),\n          mtr = new fabric.Point(mt.x + sinTh * this.rotatingPointOffset, mt.y - cosTh * this.rotatingPointOffset);\n      // debugging\n\n      /* setTimeout(function() {\n         canvas.contextTop.fillStyle = 'green';\n         canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\n         canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\n         canvas.contextTop.fillRect(br.x, br.y, 3, 3);\n         canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\n         canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\n         canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\n         canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\n         canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\n         canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\n       }, 50); */\n\n      this.oCoords = {\n        // corners\n        tl: tl, tr: tr, br: br, bl: bl,\n        // middle\n        ml: ml, mt: mt, mr: mr, mb: mb,\n        // rotating point\n        mtr: mtr\n      };\n\n      // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n      this._setCornerCoords && this._setCornerCoords();\n\n      return this;\n    },\n\n    _calcDimensionsTransformMatrix: function() {\n      // introduce skew matrix here later\n      return [this.scaleX, 0, 0, this.scaleY, 0, 0];\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Moves an object to the bottom of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendToBack: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n    }\n    else {\n      this.canvas.sendToBack(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to the top of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringToFront: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n    }\n    else {\n      this.canvas.bringToFront(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object down in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendBackwards: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n    }\n    else {\n      this.canvas.sendBackwards(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object up in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringForward: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n    }\n    else {\n      this.canvas.bringForward(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to specified level in stack of drawn objects\n   * @param {Number} index New position of object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  moveTo: function(index) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n    }\n    else {\n      this.canvas.moveTo(this, index);\n    }\n    return this;\n  }\n});\n\n\n/* _TO_SVG_START_ */\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Returns styles-string for svg-export\n   * @return {String}\n   */\n  getSvgStyles: function() {\n\n    var fill = this.fill\n          ? (this.fill.toLive ? 'url(#SVGID_' + this.fill.id + ')' : this.fill)\n          : 'none',\n        fillRule = this.fillRule,\n        stroke = this.stroke\n          ? (this.stroke.toLive ? 'url(#SVGID_' + this.stroke.id + ')' : this.stroke)\n          : 'none',\n\n        strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n        strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\n        strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n        strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n        strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n        opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n\n        visibility = this.visible ? '' : ' visibility: hidden;',\n        filter = this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\n\n    return [\n      'stroke: ', stroke, '; ',\n      'stroke-width: ', strokeWidth, '; ',\n      'stroke-dasharray: ', strokeDashArray, '; ',\n      'stroke-linecap: ', strokeLineCap, '; ',\n      'stroke-linejoin: ', strokeLineJoin, '; ',\n      'stroke-miterlimit: ', strokeMiterLimit, '; ',\n      'fill: ', fill, '; ',\n      'fill-rule: ', fillRule, '; ',\n      'opacity: ', opacity, ';',\n      filter,\n      visibility\n    ].join('');\n  },\n\n  /**\n   * Returns transform-string for svg-export\n   * @return {String}\n   */\n  getSvgTransform: function() {\n    if (this.group && this.group.type === 'path-group') {\n      return '';\n    }\n    var toFixed = fabric.util.toFixed,\n        angle = this.getAngle(),\n        vpt = !this.canvas || this.canvas.svgViewportTransformation ? this.getViewportTransform() : [1, 0, 0, 1, 0, 0],\n        center = fabric.util.transformPoint(this.getCenterPoint(), vpt),\n\n        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n        translatePart = this.type === 'path-group' ? '' : 'translate(' +\n                          toFixed(center.x, NUM_FRACTION_DIGITS) +\n                          ' ' +\n                          toFixed(center.y, NUM_FRACTION_DIGITS) +\n                        ')',\n\n        anglePart = angle !== 0\n          ? (' rotate(' + toFixed(angle, NUM_FRACTION_DIGITS) + ')')\n          : '',\n\n        scalePart = (this.scaleX === 1 && this.scaleY === 1 && vpt[0] === 1 && vpt[3] === 1)\n          ? '' :\n          (' scale(' +\n            toFixed(this.scaleX * vpt[0], NUM_FRACTION_DIGITS) +\n            ' ' +\n            toFixed(this.scaleY * vpt[3], NUM_FRACTION_DIGITS) +\n          ')'),\n\n        addTranslateX = this.type === 'path-group' ? this.width * vpt[0] : 0,\n\n        flipXPart = this.flipX ? ' matrix(-1 0 0 1 ' + addTranslateX + ' 0) ' : '',\n\n        addTranslateY = this.type === 'path-group' ? this.height * vpt[3] : 0,\n\n        flipYPart = this.flipY ? ' matrix(1 0 0 -1 0 ' + addTranslateY + ')' : '';\n\n    return [\n      translatePart, anglePart, scalePart, flipXPart, flipYPart\n    ].join('');\n  },\n\n  /**\n   * Returns transform-string for svg-export from the transform matrix of single elements\n   * @return {String}\n   */\n  getSvgTransformMatrix: function() {\n    return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ') ' : '';\n  },\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup: function() {\n    var markup = [ ];\n\n    if (this.fill && this.fill.toLive) {\n      markup.push(this.fill.toSVG(this, false));\n    }\n    if (this.stroke && this.stroke.toLive) {\n      markup.push(this.stroke.toSVG(this, false));\n    }\n    if (this.shadow) {\n      markup.push(this.shadow.toSVG(this));\n    }\n    return markup;\n  }\n});\n/* _TO_SVG_END_ */\n\n\n/*\n  Depends on `stateProperties`\n*/\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Returns true if object state (one of its state properties) was changed\n   * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n   */\n  hasStateChanged: function() {\n    return this.stateProperties.some(function(prop) {\n      return this.get(prop) !== this.originalState[prop];\n    }, this);\n  },\n\n  /**\n   * Saves state of an object\n   * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n   * @return {fabric.Object} thisArg\n   */\n  saveState: function(options) {\n    this.stateProperties.forEach(function(prop) {\n      this.originalState[prop] = this.get(prop);\n    }, this);\n\n    if (options && options.stateProperties) {\n      options.stateProperties.forEach(function(prop) {\n        this.originalState[prop] = this.get(prop);\n      }, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Setups state of an object\n   * @return {fabric.Object} thisArg\n   */\n  setupState: function() {\n    this.originalState = { };\n    this.saveState();\n\n    return this;\n  }\n});\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n      isVML = function() { return typeof G_vmlCanvasManager !== 'undefined'; };\n  //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * The object interactivity controls.\n     * @private\n     */\n    _controlsVisibility: null,\n\n    /**\n     * Determines which corner has been clicked\n     * @private\n     * @param {Object} pointer The pointer indicating the mouse position\n     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n     */\n    _findTargetCorner: function(pointer) {\n      if (!this.hasControls || !this.active) {\n        return false;\n      }\n\n      var ex = pointer.x,\n          ey = pointer.y,\n          xPoints,\n          lines;\n\n      for (var i in this.oCoords) {\n\n        if (!this.isControlVisible(i)) {\n          continue;\n        }\n\n        if (i === 'mtr' && !this.hasRotatingPoint) {\n          continue;\n        }\n\n        if (this.get('lockUniScaling') &&\n           (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\n          continue;\n        }\n\n        lines = this._getImageLines(this.oCoords[i].corner);\n\n        // debugging\n\n        // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n\n        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\n        if (xPoints !== 0 && xPoints % 2 === 1) {\n          this.__corner = i;\n          return i;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Sets the coordinates of the draggable boxes in the corners of\n     * the image used to scale/rotate it.\n     * @private\n     */\n    _setCornerCoords: function() {\n      var coords = this.oCoords,\n          newTheta = degreesToRadians(45 - this.angle),\n          /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\n          /* 0.707106 stands for sqrt(2)/2 */\n          cornerHypotenuse = this.cornerSize * 0.707106,\n          cosHalfOffset = cornerHypotenuse * Math.cos(newTheta),\n          sinHalfOffset = cornerHypotenuse * Math.sin(newTheta),\n          x, y;\n\n      for (var point in coords) {\n        x = coords[point].x;\n        y = coords[point].y;\n        coords[point].corner = {\n          tl: {\n            x: x - sinHalfOffset,\n            y: y - cosHalfOffset\n          },\n          tr: {\n            x: x + cosHalfOffset,\n            y: y - sinHalfOffset\n          },\n          bl: {\n            x: x - cosHalfOffset,\n            y: y + sinHalfOffset\n          },\n          br: {\n            x: x + sinHalfOffset,\n            y: y + cosHalfOffset\n          }\n        };\n      }\n    },\n\n    /*\n     * Calculate object dimensions from its properties\n     * @private\n     */\n    _getNonTransformedDimensions: function() {\n      var strokeWidth = this.strokeWidth,\n          w = this.width,\n          h = this.height,\n          capped = this.strokeLineCap === 'round' || this.strokeLineCap === 'square',\n          vLine = this.type === 'line' && this.width === 0,\n          hLine = this.type === 'line' && this.height === 0,\n          sLine = vLine || hLine,\n          strokeW = (capped && hLine) || !sLine,\n          strokeH = (capped && vLine) || !sLine;\n\n      if (vLine) {\n        w = strokeWidth;\n      }\n      else if (hLine) {\n        h = strokeWidth;\n      }\n      if (strokeW) {\n        w += (w < 0 ? -strokeWidth : strokeWidth);\n      }\n      if (strokeH) {\n        h += (h < 0 ? -strokeWidth : strokeWidth);\n      }\n      return { x: w, y: h };\n    },\n\n    /*\n     * @private\n     */\n    _getTransformedDimensions: function(dimensions) {\n      if (!dimensions) {\n        dimensions = this._getNonTransformedDimensions();\n      }\n      var transformMatrix = this._calcDimensionsTransformMatrix();\n      return fabric.util.transformPoint(dimensions, transformMatrix, true);\n    },\n\n    /*\n     * private\n     */\n    _calculateCurrentDimensions: function(shouldTransform)  {\n      var vpt = this.getViewportTransform(),\n          dim = this._getTransformedDimensions(),\n          w = dim.x, h = dim.y;\n\n      w += 2 * this.padding;\n      h += 2 * this.padding;\n\n      if (shouldTransform) {\n        return fabric.util.transformPoint(new fabric.Point(w, h), vpt, true);\n      }\n      return { x: w, y: h };\n    },\n\n    /**\n     * Draws borders of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawBorders: function(ctx) {\n      if (!this.hasBorders) {\n        return this;\n      }\n\n      ctx.save();\n\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      ctx.strokeStyle = this.borderColor;\n      ctx.lineWidth = 1 / this.borderScaleFactor;\n\n      var wh = this._calculateCurrentDimensions(true),\n          width = wh.x,\n          height = wh.y;\n      if (this.group) {\n        width = width * this.group.scaleX;\n        height = height * this.group.scaleY;\n      }\n\n      ctx.strokeRect(\n        ~~(-(width / 2)) - 0.5, // offset needed to make lines look sharper\n        ~~(-(height / 2)) - 0.5,\n        ~~(width) + 1, // double offset needed to make lines look sharper\n        ~~(height) + 1\n      );\n\n      if (this.hasRotatingPoint && this.isControlVisible('mtr') && !this.get('lockRotation') && this.hasControls) {\n\n        var rotateHeight = -height / 2;\n\n        ctx.beginPath();\n        ctx.moveTo(0, rotateHeight);\n        ctx.lineTo(0, rotateHeight - this.rotatingPointOffset);\n        ctx.closePath();\n        ctx.stroke();\n      }\n\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws corners of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: cornerSize, padding\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawControls: function(ctx) {\n      if (!this.hasControls) {\n        return this;\n      }\n\n      var wh = this._calculateCurrentDimensions(true),\n          width = wh.x,\n          height = wh.y,\n          left = -(width / 2),\n          top = -(height / 2),\n          scaleOffset = this.cornerSize / 2,\n          methodName = this.transparentCorners ? 'strokeRect' : 'fillRect';\n\n      ctx.save();\n\n      ctx.lineWidth = 1;\n\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      ctx.strokeStyle = ctx.fillStyle = this.cornerColor;\n\n      // top-left\n      this._drawControl('tl', ctx, methodName,\n        left - scaleOffset,\n        top - scaleOffset);\n\n      // top-right\n      this._drawControl('tr', ctx, methodName,\n        left + width - scaleOffset,\n        top - scaleOffset);\n\n      // bottom-left\n      this._drawControl('bl', ctx, methodName,\n        left - scaleOffset,\n        top + height - scaleOffset);\n\n      // bottom-right\n      this._drawControl('br', ctx, methodName,\n        left + width - scaleOffset,\n        top + height - scaleOffset);\n\n      if (!this.get('lockUniScaling')) {\n\n        // middle-top\n        this._drawControl('mt', ctx, methodName,\n          left + width/2 - scaleOffset,\n          top - scaleOffset);\n\n        // middle-bottom\n        this._drawControl('mb', ctx, methodName,\n          left + width/2 - scaleOffset,\n          top + height - scaleOffset);\n\n        // middle-right\n        this._drawControl('mr', ctx, methodName,\n          left + width - scaleOffset,\n          top + height/2 - scaleOffset);\n\n        // middle-left\n        this._drawControl('ml', ctx, methodName,\n          left - scaleOffset,\n          top + height/2 - scaleOffset);\n      }\n\n      // middle-top-rotate\n      if (this.hasRotatingPoint) {\n        this._drawControl('mtr', ctx, methodName,\n          left + width/2 - scaleOffset,\n          top - this.rotatingPointOffset - scaleOffset);\n      }\n\n      ctx.restore();\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _drawControl: function(control, ctx, methodName, left, top) {\n      if (!this.isControlVisible(control)) {\n        return;\n      }\n      var size = this.cornerSize;\n      isVML() || this.transparentCorners || ctx.clearRect(left, top, size, size);\n      ctx[methodName](left, top, size, size);\n    },\n\n    /**\n     * Returns true if the specified control is visible, false otherwise.\n     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @returns {Boolean} true if the specified control is visible, false otherwise\n     */\n    isControlVisible: function(controlName) {\n      return this._getControlsVisibility()[controlName];\n    },\n\n    /**\n     * Sets the visibility of the specified control.\n     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @param {Boolean} visible true to set the specified control visible, false otherwise\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlVisible: function(controlName, visible) {\n      this._getControlsVisibility()[controlName] = visible;\n      return this;\n    },\n\n    /**\n     * Sets the visibility state of object controls.\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlsVisibility: function(options) {\n      options || (options = { });\n\n      for (var p in options) {\n        this.setControlVisible(p, options[p]);\n      }\n      return this;\n    },\n\n    /**\n     * Returns the instance of the control visibility set for this object.\n     * @private\n     * @returns {Object}\n     */\n    _getControlsVisibility: function() {\n      if (!this._controlsVisibility) {\n        this._controlsVisibility = {\n          tl: true,\n          tr: true,\n          br: true,\n          bl: true,\n          ml: true,\n          mt: true,\n          mr: true,\n          mb: true,\n          mtr: true\n        };\n      }\n      return this._controlsVisibility;\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Animation duration (in ms) for fx* methods\n   * @type Number\n   * @default\n   */\n  FX_DURATION: 500,\n\n  /**\n   * Centers object horizontally with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxCenterObjectH: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.get('left'),\n      endValue: this.getCenter().left,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('left', value);\n        _this.renderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Centers object vertically with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxCenterObjectV: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.get('top'),\n      endValue: this.getCenter().top,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('top', value);\n        _this.renderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Same as `fabric.Canvas#remove` but animated\n   * @param {fabric.Object} object Object to remove\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxRemove: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.get('opacity'),\n      endValue: 0,\n      duration: this.FX_DURATION,\n      onStart: function() {\n        object.set('active', false);\n      },\n      onChange: function(value) {\n        object.set('opacity', value);\n        _this.renderAll();\n        onChange();\n      },\n      onComplete: function () {\n        _this.remove(object);\n        onComplete();\n      }\n    });\n\n    return this;\n  }\n});\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n  /**\n   * Animates object's properties\n   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n   * @return {fabric.Object} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#animation}\n   * @chainable\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   *\n   * As string — one property\n   *\n   * object.animate('left', ...);\n   * object.animate('left', { duration: ... });\n   *\n   */\n  animate: function() {\n    if (arguments[0] && typeof arguments[0] === 'object') {\n      var propsToAnimate = [ ], prop, skipCallbacks;\n      for (prop in arguments[0]) {\n        propsToAnimate.push(prop);\n      }\n      for (var i = 0, len = propsToAnimate.length; i < len; i++) {\n        prop = propsToAnimate[i];\n        skipCallbacks = i !== len - 1;\n        this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\n      }\n    }\n    else {\n      this._animate.apply(this, arguments);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n   */\n  _animate: function(property, to, options, skipCallbacks) {\n    var _this = this, propPair;\n\n    to = to.toString();\n\n    if (!options) {\n      options = { };\n    }\n    else {\n      options = fabric.util.object.clone(options);\n    }\n\n    if (~property.indexOf('.')) {\n      propPair = property.split('.');\n    }\n\n    var currentValue = propPair\n      ? this.get(propPair[0])[propPair[1]]\n      : this.get(property);\n\n    if (!('from' in options)) {\n      options.from = currentValue;\n    }\n\n    if (~to.indexOf('=')) {\n      to = currentValue + parseFloat(to.replace('=', ''));\n    }\n    else {\n      to = parseFloat(to);\n    }\n\n    fabric.util.animate({\n      startValue: options.from,\n      endValue: to,\n      byValue: options.by,\n      easing: options.easing,\n      duration: options.duration,\n      abort: options.abort && function() {\n        return options.abort.call(_this);\n      },\n      onChange: function(value) {\n        if (propPair) {\n          _this[propPair[0]][propPair[1]] = value;\n        }\n        else {\n          _this.set(property, value);\n        }\n        if (skipCallbacks) {\n          return;\n        }\n        options.onChange && options.onChange();\n      },\n      onComplete: function() {\n        if (skipCallbacks) {\n          return;\n        }\n\n        _this.setCoords();\n        options.onComplete && options.onComplete();\n      }\n    });\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\n  if (fabric.Line) {\n    fabric.warn('fabric.Line is already defined');\n    return;\n  }\n\n  /**\n   * Line class\n   * @class fabric.Line\n   * @extends fabric.Object\n   * @see {@link fabric.Line#initialize} for constructor definition\n   */\n  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'line',\n\n    /**\n     * x value or first line edge\n     * @type Number\n     * @default\n     */\n    x1: 0,\n\n    /**\n     * y value or first line edge\n     * @type Number\n     * @default\n     */\n    y1: 0,\n\n    /**\n     * x value or second line edge\n     * @type Number\n     * @default\n     */\n    x2: 0,\n\n    /**\n     * y value or second line edge\n     * @type Number\n     * @default\n     */\n    y2: 0,\n\n    /**\n     * Constructor\n     * @param {Array} [points] Array of points\n     * @param {Object} [options] Options object\n     * @return {fabric.Line} thisArg\n     */\n    initialize: function(points, options) {\n      options = options || { };\n\n      if (!points) {\n        points = [0, 0, 0, 0];\n      }\n\n      this.callSuper('initialize', options);\n\n      this.set('x1', points[0]);\n      this.set('y1', points[1]);\n      this.set('x2', points[2]);\n      this.set('y2', points[3]);\n\n      this._setWidthHeight(options);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options\n     */\n    _setWidthHeight: function(options) {\n      options || (options = { });\n\n      this.width = Math.abs(this.x2 - this.x1);\n      this.height = Math.abs(this.y2 - this.y1);\n\n      this.left = 'left' in options\n        ? options.left\n        : this._getLeftToOriginX();\n\n      this.top = 'top' in options\n        ? options.top\n        : this._getTopToOriginY();\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {Any} value\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n      if (typeof coordProps[key] !== 'undefined') {\n        this._setWidthHeight();\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\n     */\n    _getLeftToOriginX: makeEdgeToOriginGetter(\n      { // property names\n        origin: 'originX',\n        axis1: 'x1',\n        axis2: 'x2',\n        dimension: 'width'\n      },\n      { // possible values of origin\n        nearest: 'left',\n        center: 'center',\n        farthest: 'right'\n      }\n    ),\n\n    /**\n     * @private\n     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\n     */\n    _getTopToOriginY: makeEdgeToOriginGetter(\n      { // property names\n        origin: 'originY',\n        axis1: 'y1',\n        axis2: 'y2',\n        dimension: 'height'\n      },\n      { // possible values of origin\n        nearest: 'top',\n        center: 'center',\n        farthest: 'bottom'\n      }\n    ),\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx, noTransform) {\n      ctx.beginPath();\n\n      if (noTransform) {\n        //  Line coords are distances from left-top of canvas to origin of line.\n        //  To render line in a path-group, we need to translate them to\n        //  distances from center of path-group to center of line.\n        var cp = this.getCenterPoint();\n        ctx.translate(\n          cp.x - this.strokeWidth / 2,\n          cp.y - this.strokeWidth / 2\n        );\n      }\n\n      if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\n        // move from center (of virtual box) to its left/top corner\n        // we can't assume x1, y1 is top left and x2, y2 is bottom right\n        var p = this.calcLinePoints();\n        ctx.moveTo(p.x1, p.y1);\n        ctx.lineTo(p.x2, p.y2);\n      }\n\n      ctx.lineWidth = this.strokeWidth;\n\n      // TODO: test this\n      // make sure setting \"fill\" changes color of a line\n      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n      var origStrokeStyle = ctx.strokeStyle;\n      ctx.strokeStyle = this.stroke || ctx.fillStyle;\n      this.stroke && this._renderStroke(ctx);\n      ctx.strokeStyle = origStrokeStyle;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var p = this.calcLinePoints();\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @methd toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\n    },\n\n    /**\n     * Recalculates line points given width and height\n     * @private\n     */\n    calcLinePoints: function() {\n      var xMult = this.x1 <= this.x2 ? -1 : 1,\n          yMult = this.y1 <= this.y2 ? -1 : 1,\n          x1 = (xMult * this.width * 0.5),\n          y1 = (yMult * this.height * 0.5),\n          x2 = (xMult * this.width * -0.5),\n          y2 = (yMult * this.height * -0.5);\n\n      return {\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2\n      };\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(),\n          p = { x1: this.x1, x2: this.x2, y1: this.y1, y2: this.y2 };\n\n      if (!(this.group && this.group.type === 'path-group')) {\n        p = this.calcLinePoints();\n      }\n      markup.push(\n        '<line ',\n          'x1=\"', p.x1,\n          '\" y1=\"', p.y1,\n          '\" x2=\"', p.x2,\n          '\" y2=\"', p.y2,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(),\n        '\"/>\\n'\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\n   * @static\n   * @memberOf fabric.Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\n\n  /**\n   * Returns fabric.Line instance from an SVG element\n   * @static\n   * @memberOf fabric.Line\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Line} instance of fabric.Line\n   */\n  fabric.Line.fromElement = function(element, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\n        points = [\n          parsedAttributes.x1 || 0,\n          parsedAttributes.y1 || 0,\n          parsedAttributes.x2 || 0,\n          parsedAttributes.y2 || 0\n        ];\n    return new fabric.Line(points, extend(parsedAttributes, options));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Line instance from an object representation\n   * @static\n   * @memberOf fabric.Line\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Line} instance of fabric.Line\n   */\n  fabric.Line.fromObject = function(object) {\n    var points = [object.x1, object.y1, object.x2, object.y2];\n    return new fabric.Line(points, object);\n  };\n\n  /**\n   * Produces a function that calculates distance from canvas edge to Line origin.\n   */\n  function makeEdgeToOriginGetter(propertyNames, originValues) {\n    var origin = propertyNames.origin,\n        axis1 = propertyNames.axis1,\n        axis2 = propertyNames.axis2,\n        dimension = propertyNames.dimension,\n        nearest = originValues.nearest,\n        center = originValues.center,\n        farthest = originValues.farthest;\n\n    return function() {\n      switch (this.get(origin)) {\n      case nearest:\n        return Math.min(this.get(axis1), this.get(axis2));\n      case center:\n        return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\n      case farthest:\n        return Math.max(this.get(axis1), this.get(axis2));\n      }\n    };\n\n  }\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      pi = Math.PI,\n      extend = fabric.util.object.extend;\n\n  if (fabric.Circle) {\n    fabric.warn('fabric.Circle is already defined.');\n    return;\n  }\n\n  /**\n   * Circle class\n   * @class fabric.Circle\n   * @extends fabric.Object\n   * @see {@link fabric.Circle#initialize} for constructor definition\n   */\n  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'circle',\n\n    /**\n     * Radius of this circle\n     * @type Number\n     * @default\n     */\n    radius: 0,\n\n    /**\n     * Start angle of the circle, moving clockwise\n     * @type Number\n     * @default 0\n     */\n    startAngle: 0,\n\n    /**\n     * End angle of the circle\n     * @type Number\n     * @default 2Pi\n     */\n    endAngle: pi * 2,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {fabric.Circle} thisArg\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.callSuper('initialize', options);\n      this.set('radius', options.radius || 0);\n\n      this.startAngle = options.startAngle || this.startAngle;\n      this.endAngle = options.endAngle || this.endAngle;\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {Any} value\n     * @return {fabric.Circle} thisArg\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n\n      if (key === 'radius') {\n        this.setRadius(value);\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        radius: this.get('radius'),\n        startAngle: this.startAngle,\n        endAngle: this.endAngle\n      });\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(), x = 0, y = 0,\n      angle = (this.endAngle - this.startAngle) % ( 2 * pi);\n\n      if (angle === 0) {\n        if (this.group && this.group.type === 'path-group') {\n          x = this.left + this.radius;\n          y = this.top + this.radius;\n        }\n        markup.push(\n          '<circle ',\n            'cx=\"' + x + '\" cy=\"' + y + '\" ',\n            'r=\"', this.radius,\n            '\" style=\"', this.getSvgStyles(),\n            '\" transform=\"', this.getSvgTransform(),\n            ' ', this.getSvgTransformMatrix(),\n          '\"/>\\n'\n        );\n      }\n      else {\n        var startX = Math.cos(this.startAngle) * this.radius,\n            startY = Math.sin(this.startAngle) * this.radius,\n            endX = Math.cos(this.endAngle) * this.radius,\n            endY = Math.sin(this.endAngle) * this.radius,\n            largeFlag = angle > pi ? '1' : '0';\n\n        markup.push(\n          '<path d=\"M ' + startX + ' ' + startY,\n          ' A ' + this.radius + ' ' + this.radius,\n          ' 0 ', + largeFlag + ' 1', ' ' + endX + ' ' + endY,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          ' ', this.getSvgTransformMatrix(),\n          '\"/>\\n'\n        );\n      }\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    _render: function(ctx, noTransform) {\n      ctx.beginPath();\n      ctx.arc(noTransform ? this.left + this.radius : 0,\n              noTransform ? this.top + this.radius : 0,\n              this.radius,\n              this.startAngle,\n              this.endAngle, false);\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * Returns horizontal radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRadiusX: function() {\n      return this.get('radius') * this.get('scaleX');\n    },\n\n    /**\n     * Returns vertical radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRadiusY: function() {\n      return this.get('radius') * this.get('scaleY');\n    },\n\n    /**\n     * Sets radius of an object (and updates width accordingly)\n     * @return {fabric.Circle} thisArg\n     */\n    setRadius: function(value) {\n      this.radius = value;\n      return this.set('width', value * 2).set('height', value * 2);\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\n   * @static\n   * @memberOf fabric.Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\n\n  /**\n   * Returns {@link fabric.Circle} instance from an SVG element\n   * @static\n   * @memberOf fabric.Circle\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   * @return {fabric.Circle} Instance of fabric.Circle\n   */\n  fabric.Circle.fromElement = function(element, options) {\n    options || (options = { });\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\n\n    if (!isValidRadius(parsedAttributes)) {\n      throw new Error('value of `r` attribute is required and can not be negative');\n    }\n\n    parsedAttributes.left = parsedAttributes.left || 0;\n    parsedAttributes.top = parsedAttributes.top || 0;\n\n    var obj = new fabric.Circle(extend(parsedAttributes, options));\n\n    obj.left -= obj.radius;\n    obj.top -= obj.radius;\n    return obj;\n  };\n\n  /**\n   * @private\n   */\n  function isValidRadius(attributes) {\n    return (('radius' in attributes) && (attributes.radius >= 0));\n  }\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Circle} instance from an object representation\n   * @static\n   * @memberOf fabric.Circle\n   * @param {Object} object Object to create an instance from\n   * @return {Object} Instance of fabric.Circle\n   */\n  fabric.Circle.fromObject = function(object) {\n    return new fabric.Circle(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Triangle) {\n    fabric.warn('fabric.Triangle is already defined');\n    return;\n  }\n\n  /**\n   * Triangle class\n   * @class fabric.Triangle\n   * @extends fabric.Object\n   * @return {fabric.Triangle} thisArg\n   * @see {@link fabric.Triangle#initialize} for constructor definition\n   */\n  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'triangle',\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.callSuper('initialize', options);\n\n      this.set('width', options.width || 100)\n          .set('height', options.height || 100);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2;\n\n      ctx.beginPath();\n      ctx.moveTo(-widthBy2, heightBy2);\n      ctx.lineTo(0, -heightBy2);\n      ctx.lineTo(widthBy2, heightBy2);\n      ctx.closePath();\n\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2;\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(),\n          widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2,\n          points = [\n            -widthBy2 + ' ' + heightBy2,\n            '0 ' + -heightBy2,\n            widthBy2 + ' ' + heightBy2\n          ]\n          .join(',');\n\n      markup.push(\n        '<polygon ',\n          'points=\"', points,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n        '\"/>'\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /**\n   * Returns fabric.Triangle instance from an object representation\n   * @static\n   * @memberOf fabric.Triangle\n   * @param {Object} object Object to create an instance from\n   * @return {Object} instance of Canvas.Triangle\n   */\n  fabric.Triangle.fromObject = function(object) {\n    return new fabric.Triangle(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      piBy2   = Math.PI * 2,\n      extend = fabric.util.object.extend;\n\n  if (fabric.Ellipse) {\n    fabric.warn('fabric.Ellipse is already defined.');\n    return;\n  }\n\n  /**\n   * Ellipse class\n   * @class fabric.Ellipse\n   * @extends fabric.Object\n   * @return {fabric.Ellipse} thisArg\n   * @see {@link fabric.Ellipse#initialize} for constructor definition\n   */\n  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'ellipse',\n\n    /**\n     * Horizontal radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {fabric.Ellipse} thisArg\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.callSuper('initialize', options);\n\n      this.set('rx', options.rx || 0);\n      this.set('ry', options.ry || 0);\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {Any} value\n     * @return {fabric.Ellipse} thisArg\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n      switch (key) {\n\n        case 'rx':\n          this.rx = value;\n          this.set('width', value * 2);\n          break;\n\n        case 'ry':\n          this.ry = value;\n          this.set('height', value * 2);\n          break;\n\n      }\n      return this;\n    },\n\n    /**\n     * Returns horizontal radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRx: function() {\n      return this.get('rx') * this.get('scaleX');\n    },\n\n    /**\n     * Returns Vertical radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRy: function() {\n      return this.get('ry') * this.get('scaleY');\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        rx: this.get('rx'),\n        ry: this.get('ry')\n      });\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(), x = 0, y = 0;\n      if (this.group && this.group.type === 'path-group') {\n        x = this.left + this.rx;\n        y = this.top + this.ry;\n      }\n      markup.push(\n        '<ellipse ',\n          'cx=\"', x, '\" cy=\"', y, '\" ',\n          'rx=\"', this.rx,\n          '\" ry=\"', this.ry,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(),\n        '\"/>\\n'\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    _render: function(ctx, noTransform) {\n      ctx.beginPath();\n      ctx.save();\n      ctx.transform(1, 0, 0, this.ry/this.rx, 0, 0);\n      ctx.arc(\n        noTransform ? this.left + this.rx : 0,\n        noTransform ? (this.top + this.ry) * this.rx/this.ry : 0,\n        this.rx,\n        0,\n        piBy2,\n        false);\n      ctx.restore();\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\n   * @static\n   * @memberOf fabric.Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\n\n  /**\n   * Returns {@link fabric.Ellipse} instance from an SVG element\n   * @static\n   * @memberOf fabric.Ellipse\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Ellipse}\n   */\n  fabric.Ellipse.fromElement = function(element, options) {\n    options || (options = { });\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\n\n    parsedAttributes.left = parsedAttributes.left || 0;\n    parsedAttributes.top = parsedAttributes.top || 0;\n\n    var ellipse = new fabric.Ellipse(extend(parsedAttributes, options));\n\n    ellipse.top -= ellipse.ry;\n    ellipse.left -= ellipse.rx;\n    return ellipse;\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Ellipse} instance from an object representation\n   * @static\n   * @memberOf fabric.Ellipse\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Ellipse}\n   */\n  fabric.Ellipse.fromObject = function(object) {\n    return new fabric.Ellipse(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  if (fabric.Rect) {\n    fabric.warn('fabric.Rect is already defined');\n    return;\n  }\n\n  var stateProperties = fabric.Object.prototype.stateProperties.concat();\n  stateProperties.push('rx', 'ry', 'x', 'y');\n\n  /**\n   * Rectangle class\n   * @class fabric.Rect\n   * @extends fabric.Object\n   * @return {fabric.Rect} thisArg\n   * @see {@link fabric.Rect#initialize} for constructor definition\n   */\n  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n\n    /**\n     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: stateProperties,\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'rect',\n\n    /**\n     * Horizontal border radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical border radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    /**\n     * Used to specify dash pattern for stroke on this object\n     * @type Array\n     */\n    strokeDashArray: null,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.callSuper('initialize', options);\n      this._initRxRy();\n\n    },\n\n    /**\n     * Initializes rx/ry attributes\n     * @private\n     */\n    _initRxRy: function() {\n      if (this.rx && !this.ry) {\n        this.ry = this.rx;\n      }\n      else if (this.ry && !this.rx) {\n        this.rx = this.ry;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx, noTransform) {\n\n      // optimize 1x1 case (used in spray brush)\n      if (this.width === 1 && this.height === 1) {\n        ctx.fillRect(0, 0, 1, 1);\n        return;\n      }\n\n      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\n          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\n          w = this.width,\n          h = this.height,\n          x = noTransform ? this.left : -this.width / 2,\n          y = noTransform ? this.top : -this.height / 2,\n          isRounded = rx !== 0 || ry !== 0,\n          k = 1 - 0.5522847498 /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */;\n\n      ctx.beginPath();\n\n      ctx.moveTo(x + rx, y);\n\n      ctx.lineTo(x + w - rx, y);\n      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n\n      ctx.lineTo(x + w, y + h - ry);\n      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n\n      ctx.lineTo(x + rx, y + h);\n      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n\n      ctx.lineTo(x, y + ry);\n      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n\n      ctx.closePath();\n\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var x = -this.width / 2,\n          y = -this.height / 2,\n          w = this.width,\n          h = this.height;\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n        rx: this.get('rx') || 0,\n        ry: this.get('ry') || 0\n      });\n      if (!this.includeDefaultValues) {\n        this._removeDefaultValues(object);\n      }\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(), x = this.left, y = this.top;\n      if (!(this.group && this.group.type === 'path-group')) {\n        x = -this.width / 2;\n        y = -this.height / 2;\n      }\n      markup.push(\n        '<rect ',\n          'x=\"', x, '\" y=\"', y,\n          '\" rx=\"', this.get('rx'), '\" ry=\"', this.get('ry'),\n          '\" width=\"', this.width, '\" height=\"', this.height,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(),\n        '\"/>\\n');\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\n   * @static\n   * @memberOf fabric.Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\n\n  /**\n   * Returns {@link fabric.Rect} instance from an SVG element\n   * @static\n   * @memberOf fabric.Rect\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Rect} Instance of fabric.Rect\n   */\n  fabric.Rect.fromElement = function(element, options) {\n    if (!element) {\n      return null;\n    }\n    options = options || { };\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\n\n    parsedAttributes.left = parsedAttributes.left || 0;\n    parsedAttributes.top  = parsedAttributes.top  || 0;\n    var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n    rect.visible = rect.width > 0 && rect.height > 0;\n    return rect;\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Rect} instance from an object representation\n   * @static\n   * @memberOf fabric.Rect\n   * @param {Object} object Object to create an instance from\n   * @return {Object} instance of fabric.Rect\n   */\n  fabric.Rect.fromObject = function(object) {\n    return new fabric.Rect(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Polyline) {\n    fabric.warn('fabric.Polyline is already defined');\n    return;\n  }\n\n  /**\n   * Polyline class\n   * @class fabric.Polyline\n   * @extends fabric.Object\n   * @see {@link fabric.Polyline#initialize} for constructor definition\n   */\n  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polyline',\n\n    /**\n     * Points array\n     * @type Array\n     * @default\n     */\n    points: null,\n\n    /**\n     * Minimum X from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minX: 0,\n\n    /**\n     * Minimum Y from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minY: 0,\n\n    /**\n     * Constructor\n     * @param {Array} points Array of points (where each point is an object with x and y)\n     * @param {Object} [options] Options object\n     * @param {Boolean} [skipOffset] Whether points offsetting should be skipped\n     * @return {fabric.Polyline} thisArg\n     * @example\n     * var poly = new fabric.Polyline([\n     *     { x: 10, y: 10 },\n     *     { x: 50, y: 30 },\n     *     { x: 40, y: 70 },\n     *     { x: 60, y: 50 },\n     *     { x: 100, y: 150 },\n     *     { x: 40, y: 100 }\n     *   ], {\n     *   stroke: 'red',\n     *   left: 100,\n     *   top: 100\n     * });\n     */\n    initialize: function(points, options) {\n      return fabric.Polygon.prototype.initialize.call(this, points, options);\n    },\n\n    /**\n     * @private\n     */\n    _calcDimensions: function() {\n      return fabric.Polygon.prototype._calcDimensions.call(this);\n    },\n\n    /**\n     * @private\n     */\n    _applyPointOffset: function() {\n      return fabric.Polygon.prototype._applyPointOffset.call(this);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return fabric.Polygon.prototype.toObject.call(this, propertiesToInclude);\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      return fabric.Polygon.prototype.toSVG.call(this, reviver);\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!fabric.Polygon.prototype.commonRender.call(this, ctx)) {\n        return;\n      }\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var p1, p2;\n\n      ctx.beginPath();\n      for (var i = 0, len = this.points.length; i < len; i++) {\n        p1 = this.points[i];\n        p2 = this.points[i + 1] || p1;\n        fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\n      }\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.get('points').length;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\n   * @static\n   * @memberOf fabric.Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n  /**\n   * Returns fabric.Polyline instance from an SVG element\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Polyline} Instance of fabric.Polyline\n   */\n  fabric.Polyline.fromElement = function(element, options) {\n    if (!element) {\n      return null;\n    }\n    options || (options = { });\n\n    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n        parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);\n\n    return new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Polyline instance from an object representation\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Polyline} Instance of fabric.Polyline\n   */\n  fabric.Polyline.fromObject = function(object) {\n    var points = object.points;\n    return new fabric.Polyline(points, object, true);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Polygon) {\n    fabric.warn('fabric.Polygon is already defined');\n    return;\n  }\n\n  /**\n   * Polygon class\n   * @class fabric.Polygon\n   * @extends fabric.Object\n   * @see {@link fabric.Polygon#initialize} for constructor definition\n   */\n  fabric.Polygon = fabric.util.createClass(fabric.Object, /** @lends fabric.Polygon.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polygon',\n\n    /**\n     * Points array\n     * @type Array\n     * @default\n     */\n    points: null,\n\n    /**\n     * Minimum X from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minX: 0,\n\n    /**\n     * Minimum Y from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minY: 0,\n\n    /**\n     * Constructor\n     * @param {Array} points Array of points\n     * @param {Object} [options] Options object\n     * @return {fabric.Polygon} thisArg\n     */\n    initialize: function(points, options) {\n      options = options || { };\n      this.points = points || [ ];\n      this.callSuper('initialize', options);\n      this._calcDimensions();\n      if (!('top' in options)) {\n        this.top = this.minY;\n      }\n      if (!('left' in options)) {\n        this.left = this.minX;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _calcDimensions: function() {\n\n      var points = this.points,\n          minX = min(points, 'x'),\n          minY = min(points, 'y'),\n          maxX = max(points, 'x'),\n          maxY = max(points, 'y');\n\n      this.width = (maxX - minX) || 0;\n      this.height = (maxY - minY) || 0;\n\n      this.minX = minX || 0,\n      this.minY = minY || 0;\n    },\n\n    /**\n     * @private\n     */\n    _applyPointOffset: function() {\n      // change points to offset polygon into a bounding box\n      // executed one time\n      this.points.forEach(function(p) {\n        p.x -= (this.minX + this.width / 2);\n        p.y -= (this.minY + this.height / 2);\n      }, this);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        points: this.points.concat()\n      });\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var points = [],\n          markup = this._createBaseSVGMarkup();\n\n      for (var i = 0, len = this.points.length; i < len; i++) {\n        points.push(toFixed(this.points[i].x, 2), ',', toFixed(this.points[i].y, 2), ' ');\n      }\n\n      markup.push(\n        '<', this.type, ' ',\n          'points=\"', points.join(''),\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          ' ', this.getSvgTransformMatrix(),\n        '\"/>\\n'\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!this.commonRender(ctx)) {\n        return;\n      }\n      this._renderFill(ctx);\n      if (this.stroke || this.strokeDashArray) {\n        ctx.closePath();\n        this._renderStroke(ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    commonRender: function(ctx) {\n      var point, len = this.points.length;\n\n      if (!len || isNaN(this.points[len - 1].y)) {\n        // do not draw if no points or odd points\n        // NaN comes from parseFloat of a empty string in parser\n        return false;\n      }\n\n      ctx.beginPath();\n\n      if (this._applyPointOffset) {\n        if (!(this.group && this.group.type === 'path-group')) {\n          this._applyPointOffset();\n        }\n        this._applyPointOffset = null;\n      }\n\n      ctx.moveTo(this.points[0].x, this.points[0].y);\n      for (var i = 0; i < len; i++) {\n        point = this.points[i];\n        ctx.lineTo(point.x, point.y);\n      }\n      return true;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      fabric.Polyline.prototype._renderDashedStroke.call(this, ctx);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.points.length;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\n   * @static\n   * @memberOf fabric.Polygon\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\n   */\n  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n  /**\n   * Returns {@link fabric.Polygon} instance from an SVG element\n   * @static\n   * @memberOf fabric.Polygon\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Polygon} Instance of fabric.Polygon\n   */\n  fabric.Polygon.fromElement = function(element, options) {\n    if (!element) {\n      return null;\n    }\n\n    options || (options = { });\n\n    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n        parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);\n\n    return new fabric.Polygon(points, extend(parsedAttributes, options));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Polygon instance from an object representation\n   * @static\n   * @memberOf fabric.Polygon\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Polygon} Instance of fabric.Polygon\n   */\n  fabric.Polygon.fromObject = function(object) {\n    return new fabric.Polygon(object.points, object, true);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      extend = fabric.util.object.extend,\n      _toString = Object.prototype.toString,\n      drawArc = fabric.util.drawArc,\n      commandLengths = {\n        m: 2,\n        l: 2,\n        h: 1,\n        v: 1,\n        c: 6,\n        s: 4,\n        q: 4,\n        t: 2,\n        a: 7\n      },\n      repeatedCommands = {\n        m: 'l',\n        M: 'L'\n      };\n\n  if (fabric.Path) {\n    fabric.warn('fabric.Path is already defined');\n    return;\n  }\n\n  /**\n   * Path class\n   * @class fabric.Path\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#path_and_pathgroup}\n   * @see {@link fabric.Path#initialize} for constructor definition\n   */\n  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'path',\n\n    /**\n     * Array of path points\n     * @type Array\n     * @default\n     */\n    path: null,\n\n    /**\n     * Minimum X from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minX: 0,\n\n    /**\n     * Minimum Y from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minY: 0,\n\n    /**\n     * Constructor\n     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n     * @param {Object} [options] Options object\n     * @return {fabric.Path} thisArg\n     */\n    initialize: function(path, options) {\n      options = options || { };\n\n      this.setOptions(options);\n\n      if (!path) {\n        path = [ ];\n      }\n\n      var fromArray = _toString.call(path) === '[object Array]';\n\n      this.path = fromArray\n        ? path\n        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n        : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n\n      if (!this.path) {\n        return;\n      }\n\n      if (!fromArray) {\n        this.path = this._parsePath();\n      }\n\n      this._setPositionDimensions(options);\n\n      if (options.sourcePath) {\n        this.setSourcePath(options.sourcePath);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} options Options object\n     */\n    _setPositionDimensions: function(options) {\n      var calcDim = this._parseDimensions();\n\n      this.minX = calcDim.left;\n      this.minY = calcDim.top;\n      this.width = calcDim.width;\n      this.height = calcDim.height;\n\n      if (typeof options.left === 'undefined') {\n        this.left = calcDim.left + (this.originX === 'center'\n          ? this.width / 2\n          : this.originX === 'right'\n            ? this.width\n            : 0);\n      }\n\n      if (typeof options.top === 'undefined') {\n        this.top = calcDim.top + (this.originY === 'center'\n          ? this.height / 2\n          : this.originY === 'bottom'\n            ? this.height\n            : 0);\n      }\n\n      this.pathOffset = this.pathOffset || {\n        x: this.minX + this.width / 2,\n        y: this.minY + this.height / 2\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */\n    _render: function(ctx) {\n      var current, // current instruction\n          previous = null,\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          tempX,\n          tempY,\n          l = -this.pathOffset.x,\n          t = -this.pathOffset.y;\n\n      if (this.group && this.group.type === 'path-group') {\n        l = 0;\n        t = 0;\n      }\n\n      ctx.beginPath();\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'l': // lineto, relative\n            x += current[1];\n            y += current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'h': // horizontal lineto, relative\n            x += current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'H': // horizontal lineto, absolute\n            x = current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'v': // vertical lineto, relative\n            y += current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'V': // verical lineto, absolute\n            y = current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'm': // moveTo, relative\n            x += current[1];\n            y += current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'c': // bezierCurveTo, relative\n            tempX = x + current[5];\n            tempY = y + current[6];\n            controlX = x + current[3];\n            controlY = y + current[4];\n            ctx.bezierCurveTo(\n              x + current[1] + l, // x1\n              y + current[2] + t, // y1\n              controlX + l, // x2\n              controlY + t, // y2\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            x = current[5];\n            y = current[6];\n            controlX = current[3];\n            controlY = current[4];\n            ctx.bezierCurveTo(\n              current[1] + l,\n              current[2] + t,\n              controlX + l,\n              controlY + t,\n              x + l,\n              y + t\n            );\n            break;\n\n          case 's': // shorthand cubic bezierCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            ctx.bezierCurveTo(\n              controlX + l,\n              controlY + t,\n              x + current[1] + l,\n              y + current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = x + current[1];\n            controlY = y + current[2];\n\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'S': // shorthand cubic bezierCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            ctx.bezierCurveTo(\n              controlX + l,\n              controlY + t,\n              current[1] + l,\n              current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = current[1];\n            controlY = current[2];\n\n            break;\n\n          case 'q': // quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            controlX = x + current[1];\n            controlY = y + current[2];\n\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n\n            ctx.quadraticCurveTo(\n              current[1] + l,\n              current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 't': // shorthand quadraticCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[1];\n            tempY = y + current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n\n            break;\n\n          case 'T':\n            tempX = current[1];\n            tempY = current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'a':\n            // TODO: optimize this\n            drawArc(ctx, x + l, y + t, [\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + x + l,\n              current[7] + y + t\n            ]);\n            x += current[6];\n            y += current[7];\n            break;\n\n          case 'A':\n            // TODO: optimize this\n            drawArc(ctx, x + l, y + t, [\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + l,\n              current[7] + t\n            ]);\n            x = current[6];\n            y = current[7];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            ctx.closePath();\n            break;\n        }\n        previous = current;\n      }\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Path (' + this.complexity() +\n        '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var o = extend(this.callSuper('toObject', propertiesToInclude), {\n        path: this.path.map(function(item) { return item.slice() }),\n        pathOffset: this.pathOffset\n      });\n      if (this.sourcePath) {\n        o.sourcePath = this.sourcePath;\n      }\n      if (this.transformMatrix) {\n        o.transformMatrix = this.transformMatrix;\n      }\n      return o;\n    },\n\n    /**\n     * Returns dataless object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var o = this.toObject(propertiesToInclude);\n      if (this.sourcePath) {\n        o.path = this.sourcePath;\n      }\n      delete o.sourcePath;\n      return o;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var chunks = [],\n          markup = this._createBaseSVGMarkup(), addTransform = '';\n\n      for (var i = 0, len = this.path.length; i < len; i++) {\n        chunks.push(this.path[i].join(' '));\n      }\n      var path = chunks.join(' ');\n      if (!(this.group && this.group.type === 'path-group')) {\n        addTransform = ' translate(' + (-this.pathOffset.x) + ', ' + (-this.pathOffset.y) + ') ';\n      }\n      markup.push(\n        //jscs:disable validateIndentation\n        '<path ',\n          'd=\"', path,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(), addTransform,\n          this.getSvgTransformMatrix(), '\" stroke-linecap=\"round\" ',\n        '/>\\n'\n        //jscs:enable validateIndentation\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns number representation of an instance complexity\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.path.length;\n    },\n\n    /**\n     * @private\n     */\n    _parsePath: function() {\n      var result = [ ],\n          coords = [ ],\n          currentPath,\n          parsed,\n          re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/ig,\n          match,\n          coordsStr;\n\n      for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\n        currentPath = this.path[i];\n\n        coordsStr = currentPath.slice(1).trim();\n        coords.length = 0;\n\n        while ((match = re.exec(coordsStr))) {\n          coords.push(match[0]);\n        }\n\n        coordsParsed = [ currentPath.charAt(0) ];\n\n        for (var j = 0, jlen = coords.length; j < jlen; j++) {\n          parsed = parseFloat(coords[j]);\n          if (!isNaN(parsed)) {\n            coordsParsed.push(parsed);\n          }\n        }\n\n        var command = coordsParsed[0],\n            commandLength = commandLengths[command.toLowerCase()],\n            repeatedCommand = repeatedCommands[command] || command;\n\n        if (coordsParsed.length - 1 > commandLength) {\n          for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\n            result.push([ command ].concat(coordsParsed.slice(k, k + commandLength)));\n            command = repeatedCommand;\n          }\n        }\n        else {\n          result.push(coordsParsed);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _parseDimensions: function() {\n\n      var aX = [],\n          aY = [],\n          current, // current instruction\n          previous = null,\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          tempX,\n          tempY,\n          bounds;\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'l': // lineto, relative\n            x += current[1];\n            y += current[2];\n            bounds = [ ];\n            break;\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            bounds = [ ];\n            break;\n\n          case 'h': // horizontal lineto, relative\n            x += current[1];\n            bounds = [ ];\n            break;\n\n          case 'H': // horizontal lineto, absolute\n            x = current[1];\n            bounds = [ ];\n            break;\n\n          case 'v': // vertical lineto, relative\n            y += current[1];\n            bounds = [ ];\n            break;\n\n          case 'V': // verical lineto, absolute\n            y = current[1];\n            bounds = [ ];\n            break;\n\n          case 'm': // moveTo, relative\n            x += current[1];\n            y += current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [ ];\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [ ];\n            break;\n\n          case 'c': // bezierCurveTo, relative\n            tempX = x + current[5];\n            tempY = y + current[6];\n            controlX = x + current[3];\n            controlY = y + current[4];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              x + current[1], // x1\n              y + current[2], // y1\n              controlX, // x2\n              controlY, // y2\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            x = current[5];\n            y = current[6];\n            controlX = current[3];\n            controlY = current[4];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              current[1],\n              current[2],\n              controlX,\n              controlY,\n              x,\n              y\n            );\n            break;\n\n          case 's': // shorthand cubic bezierCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              x + current[1],\n              y + current[2],\n              tempX,\n              tempY\n            );\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = x + current[1];\n            controlY = y + current[2];\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'S': // shorthand cubic bezierCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              current[1],\n              current[2],\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 'q': // quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n            controlX = x + current[1];\n            controlY = y + current[2];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            controlX = current[1];\n            controlY = current[2];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              current[3],\n              current[4]\n            );\n            x = current[3];\n            y = current[4];\n            break;\n\n          case 't': // shorthand quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[1];\n            tempY = y + current[2];\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n\n            break;\n\n          case 'T':\n            tempX = current[1];\n            tempY = current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'a':\n            // TODO: optimize this\n            bounds = fabric.util.getBoundsOfArc(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + x,\n              current[7] + y\n            );\n            x += current[6];\n            y += current[7];\n            break;\n\n          case 'A':\n            // TODO: optimize this\n            bounds = fabric.util.getBoundsOfArc(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6],\n              current[7]\n            );\n            x = current[6];\n            y = current[7];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            break;\n        }\n        previous = current;\n        bounds.forEach(function (point) {\n          aX.push(point.x);\n          aY.push(point.y);\n        });\n        aX.push(x);\n        aY.push(y);\n      }\n\n      var minX = min(aX) || 0,\n          minY = min(aY) || 0,\n          maxX = max(aX) || 0,\n          maxY = max(aY) || 0,\n          deltaX = maxX - minX,\n          deltaY = maxY - minY,\n\n          o = {\n            left: minX,\n            top: minY,\n            width: deltaX,\n            height: deltaY\n          };\n\n      return o;\n    }\n  });\n\n  /**\n   * Creates an instance of fabric.Path from an object\n   * @static\n   * @memberOf fabric.Path\n   * @param {Object} object\n   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Path.fromObject = function(object, callback) {\n    if (typeof object.path === 'string') {\n      fabric.loadSVGFromURL(object.path, function (elements) {\n        var path = elements[0],\n            pathUrl = object.path;\n\n        delete object.path;\n\n        fabric.util.object.extend(path, object);\n        path.setSourcePath(pathUrl);\n\n        callback(path);\n      });\n    }\n    else {\n      callback(new fabric.Path(object.path, object));\n    }\n  };\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\n   * @static\n   * @memberOf fabric.Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\n\n  /**\n   * Creates an instance of fabric.Path from an SVG <path> element\n   * @static\n   * @memberOf fabric.Path\n   * @param {SVGElement} element to parse\n   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n   * @param {Object} [options] Options object\n   */\n  fabric.Path.fromElement = function(element, callback, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\n    callback && callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @memberOf fabric.Path\n   * @type Boolean\n   * @default\n   */\n  fabric.Path.async = true;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      invoke = fabric.util.array.invoke,\n      parentToObject = fabric.Object.prototype.toObject;\n\n  if (fabric.PathGroup) {\n    fabric.warn('fabric.PathGroup is already defined');\n    return;\n  }\n\n  /**\n   * Path group class\n   * @class fabric.PathGroup\n   * @extends fabric.Path\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#path_and_pathgroup}\n   * @see {@link fabric.PathGroup#initialize} for constructor definition\n   */\n  fabric.PathGroup = fabric.util.createClass(fabric.Path, /** @lends fabric.PathGroup.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'path-group',\n\n    /**\n     * Fill value\n     * @type String\n     * @default\n     */\n    fill: '',\n\n    /**\n     * Constructor\n     * @param {Array} paths\n     * @param {Object} [options] Options object\n     * @return {fabric.PathGroup} thisArg\n     */\n    initialize: function(paths, options) {\n\n      options = options || { };\n      this.paths = paths || [ ];\n\n      for (var i = this.paths.length; i--;) {\n        this.paths[i].group = this;\n      }\n\n      if (options.toBeParsed) {\n        this.parseDimensionsFromPaths(options);\n        delete options.toBeParsed;\n      }\n      this.setOptions(options);\n      this.setCoords();\n\n      if (options.sourcePath) {\n        this.setSourcePath(options.sourcePath);\n      }\n    },\n\n    /**\n     * Calculate width and height based on paths contained\n     */\n    parseDimensionsFromPaths: function(options) {\n      var points, p, xC = [ ], yC = [ ], path, height, width,\n          m;\n      for (var j = this.paths.length; j--;) {\n        path = this.paths[j];\n        height = path.height + path.strokeWidth;\n        width = path.width + path.strokeWidth;\n        points = [\n          { x: path.left, y: path.top },\n          { x: path.left + width, y: path.top },\n          { x: path.left, y: path.top + height },\n          { x: path.left + width, y: path.top + height }\n        ];\n        m = this.paths[j].transformMatrix;\n        for (var i = 0; i < points.length; i++) {\n          p = points[i];\n          if (m) {\n            p = fabric.util.transformPoint(p, m, false);\n          }\n          xC.push(p.x);\n          yC.push(p.y);\n        }\n      }\n      options.width = Math.max.apply(null, xC);\n      options.height = Math.max.apply(null, yC);\n    },\n\n    /**\n     * Renders this group on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render this instance on\n     */\n    render: function(ctx) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n\n      ctx.save();\n\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      this.transform(ctx);\n\n      this._setShadow(ctx);\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      ctx.translate(-this.width/2, -this.height/2);\n      for (var i = 0, l = this.paths.length; i < l; ++i) {\n        this.paths[i].render(ctx, true);\n      }\n      this.clipTo && ctx.restore();\n      ctx.restore();\n    },\n\n    /**\n     * Sets certain property to a certain value\n     * @param {String} prop\n     * @param {Any} value\n     * @return {fabric.PathGroup} thisArg\n     */\n    _set: function(prop, value) {\n\n      if (prop === 'fill' && value && this.isSameColor()) {\n        var i = this.paths.length;\n        while (i--) {\n          this.paths[i]._set(prop, value);\n        }\n      }\n\n      return this.callSuper('_set', prop, value);\n    },\n\n    /**\n     * Returns object representation of this path group\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var o = extend(parentToObject.call(this, propertiesToInclude), {\n        paths: invoke(this.getObjects(), 'toObject', propertiesToInclude)\n      });\n      if (this.sourcePath) {\n        o.sourcePath = this.sourcePath;\n      }\n      return o;\n    },\n\n    /**\n     * Returns dataless object representation of this path group\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} dataless object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var o = this.toObject(propertiesToInclude);\n      if (this.sourcePath) {\n        o.paths = this.sourcePath;\n      }\n      return o;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var objects = this.getObjects(),\n          p = this.getPointByOrigin('left', 'top'),\n          translatePart = 'translate(' + p.x + ' ' + p.y + ')',\n          markup = [\n            //jscs:disable validateIndentation\n            '<g ',\n              'style=\"', this.getSvgStyles(), '\" ',\n              'transform=\"', this.getSvgTransformMatrix(), translatePart, this.getSvgTransform(), '\" ',\n            '>\\n'\n            //jscs:enable validateIndentation\n          ];\n\n      for (var i = 0, len = objects.length; i < len; i++) {\n        markup.push(objects[i].toSVG(reviver));\n      }\n      markup.push('</g>\\n');\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns a string representation of this path group\n     * @return {String} string representation of an object\n     */\n    toString: function() {\n      return '#<fabric.PathGroup (' + this.complexity() +\n        '): { top: ' + this.top + ', left: ' + this.left + ' }>';\n    },\n\n    /**\n     * Returns true if all paths in this group are of same color\n     * @return {Boolean} true if all paths are of the same color (`fill`)\n     */\n    isSameColor: function() {\n      var firstPathFill = (this.getObjects()[0].get('fill') || '').toLowerCase();\n      return this.getObjects().every(function(path) {\n        return (path.get('fill') || '').toLowerCase() === firstPathFill;\n      });\n    },\n\n    /**\n     * Returns number representation of object's complexity\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return this.paths.reduce(function(total, path) {\n        return total + ((path && path.complexity) ? path.complexity() : 0);\n      }, 0);\n    },\n\n    /**\n     * Returns all paths in this path group\n     * @return {Array} array of path objects included in this path group\n     */\n    getObjects: function() {\n      return this.paths;\n    }\n  });\n\n  /**\n   * Creates fabric.PathGroup instance from an object representation\n   * @static\n   * @memberOf fabric.PathGroup\n   * @param {Object} object Object to create an instance from\n   * @param {Function} callback Callback to invoke when an fabric.PathGroup instance is created\n   */\n  fabric.PathGroup.fromObject = function(object, callback) {\n    if (typeof object.paths === 'string') {\n      fabric.loadSVGFromURL(object.paths, function (elements) {\n\n        var pathUrl = object.paths;\n        delete object.paths;\n\n        var pathGroup = fabric.util.groupSVGElements(elements, object, pathUrl);\n\n        callback(pathGroup);\n      });\n    }\n    else {\n      fabric.util.enlivenObjects(object.paths, function(enlivenedObjects) {\n        delete object.paths;\n        callback(new fabric.PathGroup(enlivenedObjects, object));\n      });\n    }\n  };\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @memberOf fabric.PathGroup\n   * @type Boolean\n   * @default\n   */\n  fabric.PathGroup.async = true;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      invoke = fabric.util.array.invoke;\n\n  if (fabric.Group) {\n    return;\n  }\n\n  // lock-related properties, for use in fabric.Group#get\n  // to enable locking behavior on group\n  // when one of its objects has lock-related properties set\n  var _lockProperties = {\n    lockMovementX:  true,\n    lockMovementY:  true,\n    lockRotation:   true,\n    lockScalingX:   true,\n    lockScalingY:   true,\n    lockUniScaling: true\n  };\n\n  /**\n   * Group class\n   * @class fabric.Group\n   * @extends fabric.Object\n   * @mixes fabric.Collection\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#groups}\n   * @see {@link fabric.Group#initialize} for constructor definition\n   */\n  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'group',\n\n    /**\n     * Width of stroke\n     * @type Number\n     * @default\n     */\n    strokeWidth: 0,\n\n    /**\n     * Constructor\n     * @param {Object} objects Group objects\n     * @param {Object} [options] Options object\n     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n     * @return {Object} thisArg\n     */\n    initialize: function(objects, options, isAlreadyGrouped) {\n      options = options || { };\n\n      this._objects = [];\n      // if objects enclosed in a group have been grouped already,\n      // we cannot change properties of objects.\n      // Thus we need to set options to group without objects,\n      // because delegatedProperties propagate to objects.\n      isAlreadyGrouped && this.callSuper('initialize', options);\n\n      this._objects = objects || [];\n      for (var i = this._objects.length; i--; ) {\n        this._objects[i].group = this;\n      }\n\n      this.originalState = { };\n\n      if (options.originX) {\n        this.originX = options.originX;\n      }\n      if (options.originY) {\n        this.originY = options.originY;\n      }\n\n      if (isAlreadyGrouped) {\n        // do not change coordinate of objects enclosed in a group,\n        // because objects coordinate system have been group coodinate system already.\n        this._updateObjectsCoords(true);\n      }\n      else {\n        this._calcBounds();\n        this._updateObjectsCoords();\n        this.callSuper('initialize', options);\n      }\n\n      this.setCoords();\n      this.saveCoords();\n    },\n\n    /**\n     * @private\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n     */\n    _updateObjectsCoords: function(skipCoordsChange) {\n      for (var i = this._objects.length; i--; ){\n        this._updateObjectCoords(this._objects[i], skipCoordsChange);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of object dose not change\n     */\n    _updateObjectCoords: function(object, skipCoordsChange) {\n      // do not display corners of objects enclosed in a group\n      object.__origHasControls = object.hasControls;\n      object.hasControls = false;\n\n      if (skipCoordsChange) {\n        return;\n      }\n\n      var objectLeft = object.getLeft(),\n          objectTop = object.getTop(),\n          center = this.getCenterPoint();\n\n      object.set({\n        originalLeft: objectLeft,\n        originalTop: objectTop,\n        left: objectLeft - center.x,\n        top: objectTop - center.y\n      });\n      object.setCoords();\n    },\n\n    /**\n     * Returns string represenation of a group\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.Group: (' + this.complexity() + ')>';\n    },\n\n    /**\n     * Adds an object to a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    addWithUpdate: function(object) {\n      this._restoreObjectsState();\n      if (object) {\n        this._objects.push(object);\n        object.group = this;\n        object._set('canvas', this.canvas);\n      }\n      // since _restoreObjectsState set objects inactive\n      this.forEachObject(this._setObjectActive, this);\n      this._calcBounds();\n      this._updateObjectsCoords();\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _setObjectActive: function(object) {\n      object.set('active', true);\n      object.group = this;\n    },\n\n    /**\n     * Removes an object from a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    removeWithUpdate: function(object) {\n      this._moveFlippedObject(object);\n      this._restoreObjectsState();\n\n      // since _restoreObjectsState set objects inactive\n      this.forEachObject(this._setObjectActive, this);\n\n      this.remove(object);\n      this._calcBounds();\n      this._updateObjectsCoords();\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _onObjectAdded: function(object) {\n      object.group = this;\n      object._set('canvas', this.canvas);\n    },\n\n    /**\n     * @private\n     */\n    _onObjectRemoved: function(object) {\n      delete object.group;\n      object.set('active', false);\n    },\n\n    /**\n     * Properties that are delegated to group objects when reading/writing\n     * @param {Object} delegatedProperties\n     */\n    delegatedProperties: {\n      fill:             true,\n      opacity:          true,\n      fontFamily:       true,\n      fontWeight:       true,\n      fontSize:         true,\n      fontStyle:        true,\n      lineHeight:       true,\n      textDecoration:   true,\n      textAlign:        true,\n      backgroundColor:  true\n    },\n\n    /**\n     * @private\n     */\n    _set: function(key, value) {\n      var i = this._objects.length;\n\n      if (this.delegatedProperties[key] || key === 'canvas') {\n        while (i--) {\n          this._objects[i].set(key, value);\n        }\n      }\n      else {\n        while (i--) {\n          this._objects[i].setOnGroup(key, value);\n        }\n      }\n\n      this.callSuper('_set', key, value);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        objects: invoke(this._objects, 'toObject', propertiesToInclude)\n      });\n    },\n\n    /**\n     * Renders instance on a given context\n     * @param {CanvasRenderingContext2D} ctx context to render instance on\n     */\n    render: function(ctx) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n\n      ctx.save();\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      this.transform(ctx);\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      // the array is now sorted in order of highest first, so start from end\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._renderObject(this._objects[i], ctx);\n      }\n\n      this.clipTo && ctx.restore();\n\n      ctx.restore();\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    _renderControls: function(ctx, noTransform) {\n      this.callSuper('_renderControls', ctx, noTransform);\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i]._renderControls(ctx);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _renderObject: function(object, ctx) {\n      // do not render if object is not visible\n      if (!object.visible) {\n        return;\n      }\n\n      var originalHasRotatingPoint = object.hasRotatingPoint;\n      object.hasRotatingPoint = false;\n      object.render(ctx);\n      object.hasRotatingPoint = originalHasRotatingPoint;\n    },\n\n    /**\n     * Retores original state of each of group objects (original state is that which was before group was created).\n     * @private\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    _restoreObjectsState: function() {\n      this._objects.forEach(this._restoreObjectState, this);\n      return this;\n    },\n\n    /**\n     * Realises the transform from this group onto the supplied object\n     * i.e. it tells you what would happen if the supplied object was in\n     * the group, and then the group was destroyed. It mutates the supplied\n     * object.\n     * @param {fabric.Object} object\n     * @return {fabric.Object} transformedObject\n     */\n    realizeTransform: function(object) {\n      this._moveFlippedObject(object);\n      this._setObjectPosition(object);\n      return object;\n    },\n\n    /**\n     * Moves a flipped object to the position where it's displayed\n     * @private\n     * @param {fabric.Object} object\n     * @return {fabric.Group} thisArg\n     */\n    _moveFlippedObject: function(object) {\n      var oldOriginX = object.get('originX'),\n          oldOriginY = object.get('originY'),\n          center = object.getCenterPoint();\n\n      object.set({\n        originX: 'center',\n        originY: 'center',\n        left: center.x,\n        top: center.y\n      });\n\n      this._toggleFlipping(object);\n\n      var newOrigin = object.getPointByOrigin(oldOriginX, oldOriginY);\n\n      object.set({\n        originX: oldOriginX,\n        originY: oldOriginY,\n        left: newOrigin.x,\n        top: newOrigin.y\n      });\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _toggleFlipping: function(object) {\n      if (this.flipX) {\n        object.toggle('flipX');\n        object.set('left', -object.get('left'));\n        object.setAngle(-object.getAngle());\n      }\n      if (this.flipY) {\n        object.toggle('flipY');\n        object.set('top', -object.get('top'));\n        object.setAngle(-object.getAngle());\n      }\n    },\n\n    /**\n     * Restores original state of a specified object in group\n     * @private\n     * @param {fabric.Object} object\n     * @return {fabric.Group} thisArg\n     */\n    _restoreObjectState: function(object) {\n      this._setObjectPosition(object);\n\n      object.setCoords();\n      object.hasControls = object.__origHasControls;\n      delete object.__origHasControls;\n      object.set('active', false);\n      object.setCoords();\n      delete object.group;\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _setObjectPosition: function(object) {\n      var center = this.getCenterPoint(),\n          rotated = this._getRotatedLeftTop(object);\n\n      object.set({\n        angle: object.getAngle() + this.getAngle(),\n        left: center.x + rotated.left,\n        top: center.y + rotated.top,\n        scaleX: object.get('scaleX') * this.get('scaleX'),\n        scaleY: object.get('scaleY') * this.get('scaleY')\n      });\n    },\n\n    /**\n     * @private\n     */\n    _getRotatedLeftTop: function(object) {\n      var groupAngle = this.getAngle() * (Math.PI / 180);\n      return {\n        left: (-Math.sin(groupAngle) * object.getTop() * this.get('scaleY') +\n                Math.cos(groupAngle) * object.getLeft() * this.get('scaleX')),\n\n        top:  (Math.cos(groupAngle) * object.getTop() * this.get('scaleY') +\n               Math.sin(groupAngle) * object.getLeft() * this.get('scaleX'))\n      };\n    },\n\n    /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    destroy: function() {\n      this._objects.forEach(this._moveFlippedObject, this);\n      return this._restoreObjectsState();\n    },\n\n    /**\n     * Saves coordinates of this instance (to be used together with `hasMoved`)\n     * @saveCoords\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    saveCoords: function() {\n      this._originalLeft = this.get('left');\n      this._originalTop = this.get('top');\n      return this;\n    },\n\n    /**\n     * Checks whether this group was moved (since `saveCoords` was called last)\n     * @return {Boolean} true if an object was moved (since fabric.Group#saveCoords was called)\n     */\n    hasMoved: function() {\n      return this._originalLeft !== this.get('left') ||\n             this._originalTop !== this.get('top');\n    },\n\n    /**\n     * Sets coordinates of all group objects\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    setObjectsCoords: function() {\n      this.forEachObject(function(object) {\n        object.setCoords();\n      });\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _calcBounds: function(onlyWidthHeight) {\n      var aX = [],\n          aY = [],\n          o, prop,\n          props = ['tr', 'br', 'bl', 'tl'],\n          i = 0, iLen = this._objects.length,\n          j, jLen = props.length;\n\n      for ( ; i < iLen; ++i) {\n        o = this._objects[i];\n        o.setCoords();\n        for (j = 0; j < jLen; j++) {\n          prop = props[j];\n          aX.push(o.oCoords[prop].x);\n          aY.push(o.oCoords[prop].y);\n        }\n      }\n\n      this.set(this._getBounds(aX, aY, onlyWidthHeight));\n    },\n\n    /**\n     * @private\n     */\n    _getBounds: function(aX, aY, onlyWidthHeight) {\n      var ivt = fabric.util.invertTransform(this.getViewportTransform()),\n          minXY = fabric.util.transformPoint(new fabric.Point(min(aX), min(aY)), ivt),\n          maxXY = fabric.util.transformPoint(new fabric.Point(max(aX), max(aY)), ivt),\n          obj = {\n            width: (maxXY.x - minXY.x) || 0,\n            height: (maxXY.y - minXY.y) || 0\n          };\n\n      if (!onlyWidthHeight) {\n        obj.left = minXY.x || 0;\n        obj.top = minXY.y || 0;\n        if (this.originX === 'center') {\n          obj.left += obj.width / 2;\n        }\n        if (this.originX === 'right') {\n          obj.left += obj.width;\n        }\n        if (this.originY === 'center') {\n          obj.top += obj.height / 2;\n        }\n        if (this.originY === 'bottom') {\n          obj.top += obj.height;\n        }\n      }\n      return obj;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = [\n        //jscs:disable validateIndentation\n        '<g ',\n          'transform=\"', this.getSvgTransform(),\n        '\">\\n'\n        //jscs:enable validateIndentation\n      ];\n\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        markup.push(this._objects[i].toSVG(reviver));\n      }\n\n      markup.push('</g>\\n');\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns requested property\n     * @param {String} prop Property to get\n     * @return {Any}\n     */\n    get: function(prop) {\n      if (prop in _lockProperties) {\n        if (this[prop]) {\n          return this[prop];\n        }\n        else {\n          for (var i = 0, len = this._objects.length; i < len; i++) {\n            if (this._objects[i][prop]) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n      else {\n        if (prop in this.delegatedProperties) {\n          return this._objects[0] && this._objects[0].get(prop);\n        }\n        return this[prop];\n      }\n    }\n  });\n\n  /**\n   * Returns {@link fabric.Group} instance from an object representation\n   * @static\n   * @memberOf fabric.Group\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an group instance is created\n   * @return {fabric.Group} An instance of fabric.Group\n   */\n  fabric.Group.fromObject = function(object, callback) {\n    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n      delete object.objects;\n      callback && callback(new fabric.Group(enlivenedObjects, object, true));\n    });\n  };\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @memberOf fabric.Group\n   * @type Boolean\n   * @default\n   */\n  fabric.Group.async = true;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var extend = fabric.util.object.extend;\n\n  if (!global.fabric) {\n    global.fabric = { };\n  }\n\n  if (global.fabric.Image) {\n    fabric.warn('fabric.Image is already defined.');\n    return;\n  }\n\n  /**\n   * Image class\n   * @class fabric.Image\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#images}\n   * @see {@link fabric.Image#initialize} for constructor definition\n   */\n  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'image',\n\n    /**\n     * crossOrigin value (one of \"\", \"anonymous\", \"allow-credentials\")\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n     * @type String\n     * @default\n     */\n    crossOrigin: '',\n\n    /**\n     * AlignX value, part of preserveAspectRatio (one of \"none\", \"mid\", \"min\", \"max\")\n     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n     * This parameter defines how the picture is aligned to its viewport when image element width differs from image width.\n     * @type String\n     * @default\n     */\n    alignX: 'none',\n\n    /**\n     * AlignY value, part of preserveAspectRatio (one of \"none\", \"mid\", \"min\", \"max\")\n     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n     * This parameter defines how the picture is aligned to its viewport when image element height differs from image height.\n     * @type String\n     * @default\n     */\n    alignY: 'none',\n\n    /**\n     * meetOrSlice value, part of preserveAspectRatio  (one of \"meet\", \"slice\").\n     * if meet the image is always fully visibile, if slice the viewport is always filled with image.\n     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n     * @type String\n     * @default\n     */\n    meetOrSlice: 'meet',\n\n    /**\n     * private\n     * contains last value of scaleX to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleX: 1,\n\n    /**\n     * private\n     * contains last value of scaleY to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleY: 1,\n\n    /**\n     * Constructor\n     * @param {HTMLImageElement | String} element Image element\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     */\n    initialize: function(element, options) {\n      options || (options = { });\n      this.filters = [ ];\n      this.resizeFilters = [ ];\n      this.callSuper('initialize', options);\n      this._initElement(element, options);\n    },\n\n    /**\n     * Returns image element which this instance if based on\n     * @return {HTMLImageElement} Image element\n     */\n    getElement: function() {\n      return this._element;\n    },\n\n    /**\n     * Sets image element for this instance to a specified one.\n     * If filters defined they are applied to new image.\n     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n     * @param {HTMLImageElement} element\n     * @param {Function} [callback] Callback is invoked when all filters have been applied and new image is generated\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setElement: function(element, callback, options) {\n      this._element = element;\n      this._originalElement = element;\n      this._initConfig(options);\n\n      if (this.filters.length !== 0) {\n        this.applyFilters(callback);\n      }\n      else if (callback) {\n        callback();\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets crossOrigin value (on an instance and corresponding image element)\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setCrossOrigin: function(value) {\n      this.crossOrigin = value;\n      this._element.crossOrigin = value;\n\n      return this;\n    },\n\n    /**\n     * Returns original size of an image\n     * @return {Object} Object with \"width\" and \"height\" properties\n     */\n    getOriginalSize: function() {\n      var element = this.getElement();\n      return {\n        width: element.width,\n        height: element.height\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _stroke: function(ctx) {\n      ctx.save();\n      this._setStrokeStyles(ctx);\n      ctx.beginPath();\n      ctx.strokeRect(-this.width / 2, -this.height / 2, this.width, this.height);\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var x = -this.width / 2,\n          y = -this.height / 2,\n          w = this.width,\n          h = this.height;\n\n      ctx.save();\n      this._setStrokeStyles(ctx);\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var filters = [ ];\n      this.filters.forEach(function(filterObj) {\n        if (filterObj) {\n          filters.push(filterObj.toObject());\n        }\n      });\n      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n        src: this._originalElement.src || this._originalElement._src,\n        filters: filters,\n        crossOrigin: this.crossOrigin,\n        alignX: this.alignX,\n        alignY: this.alignY,\n        meetOrSlice: this.meetOrSlice\n      });\n\n      if (this.resizeFilters.length > 0) {\n        object.resizeFilters = this.resizeFilters.map(function(filterObj) {\n          return filterObj && filterObj.toObject();\n        });\n      }\n\n      if (!this.includeDefaultValues) {\n        this._removeDefaultValues(object);\n      }\n\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = [], x = -this.width / 2, y = -this.height / 2,\n          preserveAspectRatio = 'none';\n      if (this.group && this.group.type === 'path-group') {\n        x = this.left;\n        y = this.top;\n      }\n      if (this.alignX !== 'none' && this.alignY !== 'none') {\n        preserveAspectRatio = 'x' + this.alignX + 'Y' + this.alignY + ' ' + this.meetOrSlice;\n      }\n      markup.push(\n        '<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n',\n          '<image xlink:href=\"', this.getSvgSrc(),\n            '\" x=\"', x, '\" y=\"', y,\n            '\" style=\"', this.getSvgStyles(),\n            // we're essentially moving origin of transformation from top/left corner to the center of the shape\n            // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n            // so that object's center aligns with container's left/top\n            '\" width=\"', this.width,\n            '\" height=\"', this.height,\n            '\" preserveAspectRatio=\"', preserveAspectRatio, '\"',\n          '></image>\\n'\n      );\n\n      if (this.stroke || this.strokeDashArray) {\n        var origFill = this.fill;\n        this.fill = null;\n        markup.push(\n          '<rect ',\n            'x=\"', x, '\" y=\"', y,\n            '\" width=\"', this.width, '\" height=\"', this.height,\n            '\" style=\"', this.getSvgStyles(),\n          '\"/>\\n'\n        );\n        this.fill = origFill;\n      }\n\n      markup.push('</g>\\n');\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns source of an image\n     * @return {String} Source of an image\n     */\n    getSrc: function() {\n      if (this.getElement()) {\n        return this.getElement().src || this.getElement()._src;\n      }\n    },\n\n    /**\n     * Sets source of an image\n     * @param {String} src Source string (URL)\n     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setSrc: function(src, callback, options) {\n      fabric.util.loadImage(src, function(img) {\n        return this.setElement(img, callback, options);\n      }, this, options && options.crossOrigin);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n    },\n\n    /**\n     * Returns a clone of an instance\n     * @param {Function} callback Callback is invoked with a clone as a first argument\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     */\n    clone: function(callback, propertiesToInclude) {\n      this.constructor.fromObject(this.toObject(propertiesToInclude), callback);\n    },\n\n    /**\n     * Applies filters assigned to this image (from \"filters\" array)\n     * @method applyFilters\n     * @param {Function} callback Callback is invoked when all filters have been applied and new image is generated\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    applyFilters: function(callback, filters, imgElement, forResizing) {\n\n      filters = filters || this.filters;\n      imgElement = imgElement || this._originalElement;\n\n      if (!imgElement) {\n        return;\n      }\n\n      var imgEl = imgElement,\n          canvasEl = fabric.util.createCanvasElement(),\n          replacement = fabric.util.createImage(),\n          _this = this;\n\n      canvasEl.width = imgEl.width;\n      canvasEl.height = imgEl.height;\n      canvasEl.getContext('2d').drawImage(imgEl, 0, 0, imgEl.width, imgEl.height);\n\n      if (filters.length === 0) {\n        this._element = imgElement;\n        callback && callback();\n        return canvasEl;\n      }\n      filters.forEach(function(filter) {\n        filter && filter.applyTo(canvasEl, filter.scaleX || _this.scaleX, filter.scaleY || _this.scaleY);\n        if (!forResizing && filter && filter.type === 'Resize') {\n          _this.width *= filter.scaleX;\n          _this.height *= filter.scaleY;\n        }\n      });\n\n      /** @ignore */\n      replacement.width = canvasEl.width;\n      replacement.height = canvasEl.height;\n\n      if (fabric.isLikelyNode) {\n        replacement.src = canvasEl.toBuffer(undefined, fabric.Image.pngCompression);\n        // onload doesn't fire in some node versions, so we invoke callback manually\n        _this._element = replacement;\n        !forResizing && (_this._filteredEl = replacement);\n        callback && callback();\n      }\n      else {\n        replacement.onload = function() {\n          _this._element = replacement;\n          !forResizing && (_this._filteredEl = replacement);\n          callback && callback();\n          replacement.onload = canvasEl = imgEl = null;\n        };\n        replacement.src = canvasEl.toDataURL('image/png');\n      }\n      return canvasEl;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx, noTransform) {\n      var x, y, imageMargins = this._findMargins(), elementToDraw;\n\n      x = (noTransform ? this.left : -this.width / 2);\n      y = (noTransform ? this.top : -this.height / 2);\n\n      if (this.meetOrSlice === 'slice') {\n        ctx.beginPath();\n        ctx.rect(x, y, this.width, this.height);\n        ctx.clip();\n      }\n\n      if (this.isMoving === false && this.resizeFilters.length && this._needsResize()) {\n        this._lastScaleX = this.scaleX;\n        this._lastScaleY = this.scaleY;\n        elementToDraw = this.applyFilters(null, this.resizeFilters, this._filteredEl || this._originalElement, true);\n      }\n      else {\n        elementToDraw = this._element;\n      }\n      elementToDraw && ctx.drawImage(elementToDraw,\n                                     x + imageMargins.marginX,\n                                     y + imageMargins.marginY,\n                                     imageMargins.width,\n                                     imageMargins.height\n                                    );\n\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * @private, needed to check if image needs resize\n     */\n    _needsResize: function() {\n      return (this.scaleX !== this._lastScaleX || this.scaleY !== this._lastScaleY);\n    },\n\n    /**\n     * @private\n     */\n    _findMargins: function() {\n      var width = this.width, height = this.height, scales,\n          scale, marginX = 0, marginY = 0;\n\n      if (this.alignX !== 'none' || this.alignY !== 'none') {\n        scales = [this.width / this._element.width, this.height / this._element.height];\n        scale = this.meetOrSlice === 'meet'\n                ? Math.min.apply(null, scales) : Math.max.apply(null, scales);\n        width = this._element.width * scale;\n        height = this._element.height * scale;\n        if (this.alignX === 'Mid') {\n          marginX = (this.width - width) / 2;\n        }\n        if (this.alignX === 'Max') {\n          marginX = this.width - width;\n        }\n        if (this.alignY === 'Mid') {\n          marginY = (this.height - height) / 2;\n        }\n        if (this.alignY === 'Max') {\n          marginY = this.height - height;\n        }\n      }\n      return {\n        width:  width,\n        height: height,\n        marginX: marginX,\n        marginY: marginY\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resetWidthHeight: function() {\n      var element = this.getElement();\n\n      this.set('width', element.width);\n      this.set('height', element.height);\n    },\n\n    /**\n     * The Image class's initialization method. This method is automatically\n     * called by the constructor.\n     * @private\n     * @param {HTMLImageElement|String} element The element representing the image\n     * @param {Object} [options] Options object\n     */\n    _initElement: function(element, options) {\n      this.setElement(fabric.util.getById(element), null, options);\n      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initConfig: function(options) {\n      options || (options = { });\n      this.setOptions(options);\n      this._setWidthHeight(options);\n      if (this._element && this.crossOrigin) {\n        this._element.crossOrigin = this.crossOrigin;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Array} filters to be initialized\n     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n     */\n    _initFilters: function(filters, callback) {\n      if (filters && filters.length) {\n        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n          callback && callback(enlivenedObjects);\n        }, 'fabric.Image.filters');\n      }\n      else {\n        callback && callback();\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Object with width/height properties\n     */\n    _setWidthHeight: function(options) {\n      this.width = 'width' in options\n        ? options.width\n        : (this.getElement()\n            ? this.getElement().width || 0\n            : 0);\n\n      this.height = 'height' in options\n        ? options.height\n        : (this.getElement()\n            ? this.getElement().height || 0\n            : 0);\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /**\n   * Default CSS class name for canvas\n   * @static\n   * @type String\n   * @default\n   */\n  fabric.Image.CSS_CANVAS = 'canvas-img';\n\n  /**\n   * Alias for getSrc\n   * @static\n   */\n  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n\n  /**\n   * Creates an instance of fabric.Image from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an image instance is created\n   */\n  fabric.Image.fromObject = function(object, callback) {\n    fabric.util.loadImage(object.src, function(img) {\n      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n        object.filters = filters || [ ];\n        fabric.Image.prototype._initFilters.call(object, object.resizeFilters, function(resizeFilters) {\n          object.resizeFilters = resizeFilters || [ ];\n          var instance = new fabric.Image(img, object);\n          callback && callback(instance);\n        });\n      });\n    }, null, object.crossOrigin);\n  };\n\n  /**\n   * Creates an instance of fabric.Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\n   * @param {Object} [imgOptions] Options object\n   */\n  fabric.Image.fromURL = function(url, callback, imgOptions) {\n    fabric.util.loadImage(url, function(img) {\n      callback && callback(new fabric.Image(img, imgOptions));\n    }, null, imgOptions && imgOptions.crossOrigin);\n  };\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  fabric.Image.ATTRIBUTE_NAMES =\n    fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href'.split(' '));\n\n  /**\n   * Returns {@link fabric.Image} instance from an SVG element\n   * @static\n   * @param {SVGElement} element Element to parse\n   * @param {Function} callback Callback to execute when fabric.Image object is created\n   * @param {Object} [options] Options object\n   * @return {fabric.Image} Instance of fabric.Image\n   */\n  fabric.Image.fromElement = function(element, callback, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES),\n        align = 'xMidYMid', meetOrSlice = 'meet', alignX, alignY, aspectRatioAttrs;\n\n    if (parsedAttributes.preserveAspectRatio) {\n      aspectRatioAttrs = parsedAttributes.preserveAspectRatio.split(' ');\n    }\n\n    if (aspectRatioAttrs && aspectRatioAttrs.length) {\n      meetOrSlice = aspectRatioAttrs.pop();\n      if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\n        align = meetOrSlice;\n        meetOrSlice = 'meet';\n      }\n      else if (aspectRatioAttrs.length) {\n        align = aspectRatioAttrs.pop();\n      }\n    }\n    //divide align in alignX and alignY\n    alignX = align !== 'none' ? align.slice(1, 4) : 'none';\n    alignY = align !== 'none' ? align.slice(5, 8) : 'none';\n    parsedAttributes.alignX = alignX;\n    parsedAttributes.alignY = alignY;\n    parsedAttributes.meetOrSlice = meetOrSlice;\n    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\n      extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @type Boolean\n   * @default\n   */\n  fabric.Image.async = true;\n\n  /**\n   * Indicates compression level used when generating PNG under Node (in applyFilters). Any of 0-9\n   * @static\n   * @type Number\n   * @default\n   */\n  fabric.Image.pngCompression = 1;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * @private\n   * @return {Number} angle value\n   */\n  _getAngleValueForStraighten: function() {\n    var angle = this.getAngle() % 360;\n    if (angle > 0) {\n      return Math.round((angle - 1) / 90) * 90;\n    }\n    return Math.round(angle / 90) * 90;\n  },\n\n  /**\n   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  straighten: function() {\n    this.setAngle(this._getAngleValueForStraighten());\n    return this;\n  },\n\n  /**\n   * Same as {@link fabric.Object.prototype.straighten} but with animation\n   * @param {Object} callbacks Object with callback functions\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  fxStraighten: function(callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: this.get('angle'),\n      endValue: this._getAngleValueForStraighten(),\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        _this.setAngle(value);\n        onChange();\n      },\n      onComplete: function() {\n        _this.setCoords();\n        onComplete();\n      },\n      onStart: function() {\n        _this.set('active', false);\n      }\n    });\n\n    return this;\n  }\n});\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Straightens object, then rerenders canvas\n   * @param {fabric.Object} object Object to straighten\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  straightenObject: function (object) {\n    object.straighten();\n    this.renderAll();\n    return this;\n  },\n\n  /**\n   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\n   * @param {fabric.Object} object Object to straighten\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxStraightenObject: function (object) {\n    object.fxStraighten({\n      onChange: this.renderAll.bind(this)\n    });\n    return this;\n  }\n});\n\n\n/**\n * @namespace fabric.Image.filters\n * @memberOf fabric.Image\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#image_filters}\n * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n */\nfabric.Image.filters = fabric.Image.filters || { };\n\n/**\n * Root filter class from which all filter classes inherit from\n * @class fabric.Image.filters.BaseFilter\n * @memberOf fabric.Image.filters\n */\nfabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  type: 'BaseFilter',\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  initialize: function(options) {\n    if (options) {\n      this.setOptions(options);\n    }\n  },\n\n  /**\n   * Sets filter's properties from options\n   * @param {Object} [options] Options object\n   */\n  setOptions: function(options) {\n    for (var prop in options) {\n      this[prop] = options[prop];\n    }\n  },\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject: function() {\n    return { type: this.type };\n  },\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON: function() {\n    // delegate, not alias\n    return this.toObject();\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Brightness filter class\n   * @class fabric.Image.filters.Brightness\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Brightness({\n   *   brightness: 200\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Brightness = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Brightness',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Brightness.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.brightness=0] Value to brighten the image up (0..255)\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.brightness = options.brightness || 0;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          brightness = this.brightness;\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n        data[i] += brightness;\n        data[i + 1] += brightness;\n        data[i + 2] += brightness;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        brightness: this.brightness\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n   */\n  fabric.Image.filters.Brightness.fromObject = function(object) {\n    return new fabric.Image.filters.Brightness(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n   * @class fabric.Image.filters.Convolute\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example <caption>Sharpen filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 0, -1,  0,\n   *            -1,  5, -1,\n   *             0, -1,  0 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Blur filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Emboss filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Emboss filter with opaqueness</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   opaque: true,\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Convolute = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Convolute',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Convolute.prototype\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n     * @param {Array} [options.matrix] Filter matrix\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.opaque = options.opaque;\n      this.matrix = options.matrix || [\n        0, 0, 0,\n        0, 1, 0,\n        0, 0, 0\n      ];\n\n      var canvasEl = fabric.util.createCanvasElement();\n      this.tmpCtx = canvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _createImageData: function(w, h) {\n      return this.tmpCtx.createImageData(w, h);\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n\n      var weights = this.matrix,\n          context = canvasEl.getContext('2d'),\n          pixels = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\n          side = Math.round(Math.sqrt(weights.length)),\n          halfSide = Math.floor(side/2),\n          src = pixels.data,\n          sw = pixels.width,\n          sh = pixels.height,\n\n          // pad output by the convolution matrix\n          w = sw,\n          h = sh,\n          output = this._createImageData(w, h),\n\n          dst = output.data,\n\n          // go through the destination image pixels\n          alphaFac = this.opaque ? 1 : 0;\n\n      for (var y = 0; y < h; y++) {\n        for (var x = 0; x < w; x++) {\n          var sy = y,\n              sx = x,\n              dstOff = (y * w + x) * 4,\n              // calculate the weighed sum of the source image pixels that\n              // fall under the convolution matrix\n              r = 0, g = 0, b = 0, a = 0;\n\n          for (var cy = 0; cy < side; cy++) {\n            for (var cx = 0; cx < side; cx++) {\n\n              var scy = sy + cy - halfSide,\n                  scx = sx + cx - halfSide;\n\n              /* jshint maxdepth:5 */\n              if (scy < 0 || scy > sh || scx < 0 || scx > sw) {\n                continue;\n              }\n\n              var srcOff = (scy * sw + scx) * 4,\n                  wt = weights[cy * side + cx];\n\n              r += src[srcOff] * wt;\n              g += src[srcOff + 1] * wt;\n              b += src[srcOff + 2] * wt;\n              a += src[srcOff + 3] * wt;\n            }\n          }\n          dst[dstOff] = r;\n          dst[dstOff + 1] = g;\n          dst[dstOff + 2] = b;\n          dst[dstOff + 3] = a + alphaFac * (255 - a);\n        }\n      }\n\n      context.putImageData(output, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        opaque: this.opaque,\n        matrix: this.matrix\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n   */\n  fabric.Image.filters.Convolute.fromObject = function(object) {\n    return new fabric.Image.filters.Convolute(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * GradientTransparency filter class\n   * @class fabric.Image.filters.GradientTransparency\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.GradientTransparency#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.GradientTransparency({\n   *   threshold: 200\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.GradientTransparency = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.GradientTransparency.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'GradientTransparency',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.GradientTransparency.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.threshold=100] Threshold value\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.threshold = options.threshold || 100;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          threshold = this.threshold,\n          total = data.length;\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n        data[i + 3] = threshold + 255 * (total - i) / total;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        threshold: this.threshold\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.GradientTransparency} Instance of fabric.Image.filters.GradientTransparency\n   */\n  fabric.Image.filters.GradientTransparency.fromObject = function(object) {\n    return new fabric.Image.filters.GradientTransparency(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { });\n\n  /**\n   * Grayscale image filter class\n   * @class fabric.Image.filters.Grayscale\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Grayscale();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Grayscale = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Grayscale',\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Grayscale.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          len = imageData.width * imageData.height * 4,\n          index = 0,\n          average;\n\n      while (index < len) {\n        average = (data[index] + data[index + 1] + data[index + 2]) / 3;\n        data[index]     = average;\n        data[index + 1] = average;\n        data[index + 2] = average;\n        index += 4;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n   */\n  fabric.Image.filters.Grayscale.fromObject = function() {\n    return new fabric.Image.filters.Grayscale();\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { });\n\n  /**\n   * Invert filter class\n   * @class fabric.Image.filters.Invert\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Invert();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Invert = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Invert',\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Invert.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i;\n\n      for (i = 0; i < iLen; i+=4) {\n        data[i] = 255 - data[i];\n        data[i + 1] = 255 - data[i + 1];\n        data[i + 2] = 255 - data[i + 2];\n      }\n\n      context.putImageData(imageData, 0, 0);\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n   */\n  fabric.Image.filters.Invert.fromObject = function() {\n    return new fabric.Image.filters.Invert();\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Mask filter class\n   * See http://resources.aleph-1.com/mask/\n   * @class fabric.Image.filters.Mask\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Mask#initialize} for constructor definition\n   */\n  fabric.Image.filters.Mask = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Mask.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Mask',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Mask.prototype\n     * @param {Object} [options] Options object\n     * @param {fabric.Image} [options.mask] Mask image object\n     * @param {Number} [options.channel=0] Rgb channel (0, 1, 2 or 3)\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.mask = options.mask;\n      this.channel = [ 0, 1, 2, 3 ].indexOf(options.channel) > -1 ? options.channel : 0;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      if (!this.mask) {\n        return;\n      }\n\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          maskEl = this.mask.getElement(),\n          maskCanvasEl = fabric.util.createCanvasElement(),\n          channel = this.channel,\n          i,\n          iLen = imageData.width * imageData.height * 4;\n\n      maskCanvasEl.width = maskEl.width;\n      maskCanvasEl.height = maskEl.height;\n\n      maskCanvasEl.getContext('2d').drawImage(maskEl, 0, 0, maskEl.width, maskEl.height);\n\n      var maskImageData = maskCanvasEl.getContext('2d').getImageData(0, 0, maskEl.width, maskEl.height),\n          maskData = maskImageData.data;\n\n      for (i = 0; i < iLen; i += 4) {\n        data[i + 3] = maskData[i + channel];\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        mask: this.mask.toObject(),\n        channel: this.channel\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when a mask filter instance is created\n   */\n  fabric.Image.filters.Mask.fromObject = function(object, callback) {\n    fabric.util.loadImage(object.mask.src, function(img) {\n      object.mask = new fabric.Image(img, object.mask);\n      callback && callback(new fabric.Image.filters.Mask(object));\n    });\n  };\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @type Boolean\n   * @default\n   */\n  fabric.Image.filters.Mask.async = true;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Noise filter class\n   * @class fabric.Image.filters.Noise\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Noise({\n   *   noise: 700\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Noise = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Noise',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Noise.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.noise=0] Noise value\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.noise = options.noise || 0;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          noise = this.noise, rand;\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n\n        rand = (0.5 - Math.random()) * noise;\n\n        data[i] += rand;\n        data[i + 1] += rand;\n        data[i + 2] += rand;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        noise: this.noise\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n   */\n  fabric.Image.filters.Noise.fromObject = function(object) {\n    return new fabric.Image.filters.Noise(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Pixelate filter class\n   * @class fabric.Image.filters.Pixelate\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Pixelate({\n   *   blocksize: 8\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Pixelate = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Pixelate',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Pixelate.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.blocksize=4] Blocksize for pixelate\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.blocksize = options.blocksize || 4;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = imageData.height,\n          jLen = imageData.width,\n          index, i, j, r, g, b, a;\n\n      for (i = 0; i < iLen; i += this.blocksize) {\n        for (j = 0; j < jLen; j += this.blocksize) {\n\n          index = (i * 4) * jLen + (j * 4);\n\n          r = data[index];\n          g = data[index + 1];\n          b = data[index + 2];\n          a = data[index + 3];\n\n          /*\n           blocksize: 4\n\n           [1,x,x,x,1]\n           [x,x,x,x,1]\n           [x,x,x,x,1]\n           [x,x,x,x,1]\n           [1,1,1,1,1]\n           */\n\n          for (var _i = i, _ilen = i + this.blocksize; _i < _ilen; _i++) {\n            for (var _j = j, _jlen = j + this.blocksize; _j < _jlen; _j++) {\n              index = (_i * 4) * jLen + (_j * 4);\n              data[index] = r;\n              data[index + 1] = g;\n              data[index + 2] = b;\n              data[index + 3] = a;\n            }\n          }\n        }\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        blocksize: this.blocksize\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n   */\n  fabric.Image.filters.Pixelate.fromObject = function(object) {\n    return new fabric.Image.filters.Pixelate(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Remove white filter class\n   * @class fabric.Image.filters.RemoveWhite\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.RemoveWhite#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.RemoveWhite({\n   *   threshold: 40,\n   *   distance: 140\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.RemoveWhite = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.RemoveWhite.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'RemoveWhite',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.RemoveWhite.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.threshold=30] Threshold value\n     * @param {Number} [options.distance=20] Distance value\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.threshold = options.threshold || 30;\n      this.distance = options.distance || 20;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          threshold = this.threshold,\n          distance = this.distance,\n          limit = 255 - threshold,\n          abs = Math.abs,\n          r, g, b;\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        if (r > limit &&\n            g > limit &&\n            b > limit &&\n            abs(r - g) < distance &&\n            abs(r - b) < distance &&\n            abs(g - b) < distance\n        ) {\n          data[i + 3] = 1;\n        }\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        threshold: this.threshold,\n        distance: this.distance\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.RemoveWhite} Instance of fabric.Image.filters.RemoveWhite\n   */\n  fabric.Image.filters.RemoveWhite.fromObject = function(object) {\n    return new fabric.Image.filters.RemoveWhite(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { });\n\n  /**\n   * Sepia filter class\n   * @class fabric.Image.filters.Sepia\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Sepia();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Sepia = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Sepia',\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Sepia.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i, avg;\n\n      for (i = 0; i < iLen; i+=4) {\n        avg = 0.3  * data[i] + 0.59 * data[i + 1] + 0.11 * data[i + 2];\n        data[i] = avg + 100;\n        data[i + 1] = avg + 50;\n        data[i + 2] = avg + 255;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Sepia} Instance of fabric.Image.filters.Sepia\n   */\n  fabric.Image.filters.Sepia.fromObject = function() {\n    return new fabric.Image.filters.Sepia();\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { });\n\n  /**\n   * Sepia2 filter class\n   * @class fabric.Image.filters.Sepia2\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Sepia2();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Sepia2 = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia2.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Sepia2',\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Sepia.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i, r, g, b;\n\n      for (i = 0; i < iLen; i+=4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        data[i] = (r * 0.393 + g * 0.769 + b * 0.189 ) / 1.351;\n        data[i + 1] = (r * 0.349 + g * 0.686 + b * 0.168 ) / 1.203;\n        data[i + 2] = (r * 0.272 + g * 0.534 + b * 0.131 ) / 2.140;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Sepia2} Instance of fabric.Image.filters.Sepia2\n   */\n  fabric.Image.filters.Sepia2.fromObject = function() {\n    return new fabric.Image.filters.Sepia2();\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Tint filter class\n   * Adapted from <a href=\"https://github.com/mezzoblue/PaintbrushJS\">https://github.com/mezzoblue/PaintbrushJS</a>\n   * @class fabric.Image.filters.Tint\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Tint#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example <caption>Tint filter with hex color and opacity</caption>\n   * var filter = new fabric.Image.filters.Tint({\n   *   color: '#3513B0',\n   *   opacity: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Tint filter with rgba color</caption>\n   * var filter = new fabric.Image.filters.Tint({\n   *   color: 'rgba(53, 21, 176, 0.5)'\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Tint = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Tint.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Tint',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Tint.prototype\n     * @param {Object} [options] Options object\n     * @param {String} [options.color=#000000] Color to tint the image with\n     * @param {Number} [options.opacity] Opacity value that controls the tint effect's transparency (0..1)\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.color = options.color || '#000000';\n      this.opacity = typeof options.opacity !== 'undefined'\n                      ? options.opacity\n                      : new fabric.Color(this.color).getAlpha();\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i,\n          tintR, tintG, tintB,\n          r, g, b, alpha1,\n          source;\n\n      source = new fabric.Color(this.color).getSource();\n\n      tintR = source[0] * this.opacity;\n      tintG = source[1] * this.opacity;\n      tintB = source[2] * this.opacity;\n\n      alpha1 = 1 - this.opacity;\n\n      for (i = 0; i < iLen; i+=4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        // alpha compositing\n        data[i] = tintR + r * alpha1;\n        data[i + 1] = tintG + g * alpha1;\n        data[i + 2] = tintB + b * alpha1;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        color: this.color,\n        opacity: this.opacity\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Tint} Instance of fabric.Image.filters.Tint\n   */\n  fabric.Image.filters.Tint.fromObject = function(object) {\n    return new fabric.Image.filters.Tint(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Multiply filter class\n   * Adapted from <a href=\"http://www.laurenscorijn.com/articles/colormath-basics\">http://www.laurenscorijn.com/articles/colormath-basics</a>\n   * @class fabric.Image.filters.Multiply\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example <caption>Multiply filter with hex color</caption>\n   * var filter = new fabric.Image.filters.Multiply({\n   *   color: '#F0F'\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Multiply filter with rgb color</caption>\n   * var filter = new fabric.Image.filters.Multiply({\n   *   color: 'rgb(53, 21, 176)'\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Multiply = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Multiply.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Multiply',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Multiply.prototype\n     * @param {Object} [options] Options object\n     * @param {String} [options.color=#000000] Color to multiply the image pixels with\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.color = options.color || '#000000';\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i,\n          source;\n\n      source = new fabric.Color(this.color).getSource();\n\n      for (i = 0; i < iLen; i+=4) {\n        data[i] *= source[0] / 255;\n        data[i + 1] *= source[1] / 255;\n        data[i + 2] *= source[2] / 255;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        color: this.color\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Multiply} Instance of fabric.Image.filters.Multiply\n   */\n  fabric.Image.filters.Multiply.fromObject = function(object) {\n    return new fabric.Image.filters.Multiply(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n  'use strict';\n\n  var fabric = global.fabric;\n\n  /**\n   * Color Blend filter class\n   * @class fabric.Image.filter.Blend\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.Blend({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.Blend({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Blend = fabric.util.createClass({\n    type: 'Blend',\n\n    initialize: function(options) {\n      options = options || {};\n      this.color = options.color || '#000';\n      this.image = options.image || false;\n      this.mode = options.mode || 'multiply';\n      this.alpha = options.alpha || 1;\n    },\n\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          tr, tg, tb,\n          r, g, b,\n          _r, _g, _b,\n          source,\n          isImage = false;\n\n      if (this.image) {\n        // Blend images\n        isImage = true;\n\n        var _el = fabric.util.createCanvasElement();\n        _el.width = this.image.width;\n        _el.height = this.image.height;\n\n        var tmpCanvas = new fabric.StaticCanvas(_el);\n        tmpCanvas.add(this.image);\n        var context2 =  tmpCanvas.getContext('2d');\n        source = context2.getImageData(0, 0, tmpCanvas.width, tmpCanvas.height).data;\n      }\n      else {\n        // Blend color\n        source = new fabric.Color(this.color).getSource();\n\n        tr = source[0] * this.alpha;\n        tg = source[1] * this.alpha;\n        tb = source[2] * this.alpha;\n      }\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        if (isImage) {\n          tr = source[i] * this.alpha;\n          tg = source[i + 1] * this.alpha;\n          tb = source[i + 2] * this.alpha;\n        }\n\n        switch (this.mode) {\n          case 'multiply':\n            data[i] = r * tr / 255;\n            data[i + 1] = g * tg / 255;\n            data[i + 2] = b * tb / 255;\n            break;\n          case 'screen':\n            data[i] = 1 - (1 - r) * (1 - tr);\n            data[i + 1] = 1 - (1 - g) * (1 - tg);\n            data[i + 2] = 1 - (1 - b) * (1 - tb);\n            break;\n          case 'add':\n            data[i] = Math.min(255, r + tr);\n            data[i + 1] = Math.min(255, g + tg);\n            data[i + 2] = Math.min(255, b + tb);\n            break;\n          case 'diff':\n          case 'difference':\n            data[i] = Math.abs(r - tr);\n            data[i + 1] = Math.abs(g - tg);\n            data[i + 2] = Math.abs(b - tb);\n            break;\n          case 'subtract':\n            _r = r - tr;\n            _g = g - tg;\n            _b = b - tb;\n\n            data[i] = (_r < 0) ? 0 : _r;\n            data[i + 1] = (_g < 0) ? 0 : _g;\n            data[i + 2] = (_b < 0) ? 0 : _b;\n            break;\n          case 'darken':\n            data[i] = Math.min(r, tr);\n            data[i + 1] = Math.min(g, tg);\n            data[i + 2] = Math.min(b, tb);\n            break;\n          case 'lighten':\n            data[i] = Math.max(r, tr);\n            data[i + 1] = Math.max(g, tg);\n            data[i + 2] = Math.max(b, tb);\n            break;\n        }\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        color: this.color,\n        image: this.image,\n        mode: this.mode,\n        alpha: this.alpha\n      };\n    }\n  });\n\n  fabric.Image.filters.Blend.fromObject = function(object) {\n    return new fabric.Image.filters.Blend(object);\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\n      sqrt = Math.sqrt, abs = Math.abs, max = Math.max, round = Math.round, sin = Math.sin,\n      ceil = Math.ceil;\n\n  /**\n   * Resize image filter class\n   * @class fabric.Image.filters.Resize\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Resize();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Resize = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Resize',\n\n    /**\n     * Resize type\n     * @param {String} resizeType\n     * @default\n     */\n    resizeType: 'hermite',\n\n    /**\n     * Scale factor for resizing, x axis\n     * @param {Number} scaleX\n     * @default\n     */\n    scaleX: 0,\n\n    /**\n     * Scale factor for resizing, y axis\n     * @param {Number} scaleY\n     * @default\n     */\n    scaleY: 0,\n\n    /**\n     * LanczosLobes parameter for lanczos filter\n     * @param {Number} lanczosLobes\n     * @default\n     */\n    lanczosLobes: 3,\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Resize.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl, scaleX, scaleY) {\n\n      this.rcpScaleX = 1 / scaleX;\n      this.rcpScaleY = 1 / scaleY;\n\n      var oW = canvasEl.width, oH = canvasEl.height,\n          dW = round(oW * scaleX), dH = round(oH * scaleY),\n          imageData;\n\n      if (this.resizeType === 'sliceHack') {\n        imageData = this.sliceByTwo(canvasEl, oW, oH, dW, dH);\n      }\n      if (this.resizeType === 'hermite') {\n        imageData = this.hermiteFastResize(canvasEl, oW, oH, dW, dH);\n      }\n      if (this.resizeType === 'bilinear') {\n        imageData = this.bilinearFiltering(canvasEl, oW, oH, dW, dH);\n      }\n      if (this.resizeType === 'lanczos') {\n        imageData = this.lanczosResize(canvasEl, oW, oH, dW, dH);\n      }\n      canvasEl.width = dW;\n      canvasEl.height = dH;\n      canvasEl.getContext('2d').putImageData(imageData, 0, 0);\n    },\n\n    sliceByTwo: function(canvasEl, width, height, newWidth, newHeight) {\n      var context = canvasEl.getContext('2d'), imageData,\n          multW = 0.5, multH = 0.5, signW = 1, signH = 1,\n          doneW = false, doneH = false, stepW = width, stepH = height,\n          tmpCanvas = fabric.util.createCanvasElement(),\n          tmpCtx = tmpCanvas.getContext('2d');\n      newWidth = floor(newWidth);\n      newHeight = floor(newHeight);\n      tmpCanvas.width = max(newWidth, width);\n      tmpCanvas.height = max(newHeight, height);\n\n      if (newWidth > width) {\n        multW = 2;\n        signW = -1;\n      }\n      if (newHeight > height) {\n        multH = 2;\n        signH = -1;\n      }\n      imageData = context.getImageData(0, 0, width, height);\n      canvasEl.width = max(newWidth, width);\n      canvasEl.height = max(newHeight, height);\n      context.putImageData(imageData, 0, 0);\n\n      while (!doneW || !doneH) {\n        width = stepW;\n        height = stepH;\n        if (newWidth * signW < floor(stepW * multW * signW)) {\n          stepW = floor(stepW * multW);\n        }\n        else {\n          stepW = newWidth;\n          doneW = true;\n        }\n        if (newHeight * signH < floor(stepH * multH * signH)) {\n          stepH = floor(stepH * multH);\n        }\n        else {\n          stepH = newHeight;\n          doneH = true;\n        }\n        imageData = context.getImageData(0, 0, width, height);\n        tmpCtx.putImageData(imageData, 0, 0);\n        context.clearRect(0, 0, stepW, stepH);\n        context.drawImage(tmpCanvas, 0, 0, width, height, 0, 0, stepW, stepH);\n      }\n      return context.getImageData(0, 0, newWidth, newHeight);\n    },\n\n    lanczosResize: function(canvasEl, oW, oH, dW, dH) {\n\n      function lanczosCreate(lobes) {\n        return function(x) {\n          if (x > lobes) {\n            return 0;\n          }\n          x *= Math.PI;\n          if (abs(x) < 1e-16) {\n            return 1;\n          }\n          var xx = x / lobes;\n          return sin(x) * sin(xx) / x / xx;\n        };\n      }\n\n      function process(u) {\n        var v, i, weight, idx, a, red, green,\n            blue, alpha, fX, fY;\n        center.x = (u + 0.5) * ratioX;\n        icenter.x = floor(center.x);\n        for (v = 0; v < dH; v++) {\n          center.y = (v + 0.5) * ratioY;\n          icenter.y = floor(center.y);\n          a = 0, red = 0, green = 0, blue = 0, alpha = 0;\n          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n            if (i < 0 || i >= oW) {\n              continue;\n            }\n            fX = floor(1000 * abs(i - center.x));\n            if (!cacheLanc[fX]) {\n              cacheLanc[fX] = { };\n            }\n            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n              if (j < 0 || j >= oH) {\n                continue;\n              }\n              fY = floor(1000 * abs(j - center.y));\n              if (!cacheLanc[fX][fY]) {\n                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n              }\n              weight = cacheLanc[fX][fY];\n              if (weight > 0) {\n                idx = (j * oW + i) * 4;\n                a += weight;\n                red += weight * srcData[idx];\n                green += weight * srcData[idx + 1];\n                blue += weight * srcData[idx + 2];\n                alpha += weight * srcData[idx + 3];\n              }\n            }\n          }\n          idx = (v * dW + u) * 4;\n          destData[idx] = red / a;\n          destData[idx + 1] = green / a;\n          destData[idx + 2] = blue / a;\n          destData[idx + 3] = alpha / a;\n        }\n\n        if (++u < dW) {\n          return process(u);\n        }\n        else {\n          return destImg;\n        }\n      }\n\n      var context = canvasEl.getContext('2d'),\n          srcImg = context.getImageData(0, 0, oW, oH),\n          destImg = context.getImageData(0, 0, dW, dH),\n          srcData = srcImg.data, destData = destImg.data,\n          lanczos = lanczosCreate(this.lanczosLobes),\n          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\n          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\n          range2X = ceil(ratioX * this.lanczosLobes / 2),\n          range2Y = ceil(ratioY * this.lanczosLobes / 2),\n          cacheLanc = { }, center = { }, icenter = { };\n\n      return process(0);\n    },\n\n    bilinearFiltering: function(canvasEl, w, h, w2, h2) {\n      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\n          color, offset = 0, origPix, ratioX = this.rcpScaleX,\n          ratioY = this.rcpScaleY, context = canvasEl.getContext('2d'),\n          w4 = 4 * (w - 1), img = context.getImageData(0, 0, w, h),\n          pixels = img.data, destImage = context.getImageData(0, 0, w2, h2),\n          destPixels = destImage.data;\n      for (i = 0; i < h2; i++) {\n        for (j = 0; j < w2; j++) {\n          x = floor(ratioX * j);\n          y = floor(ratioY * i);\n          xDiff = ratioX * j - x;\n          yDiff = ratioY * i - y;\n          origPix = 4 * (y * w + x);\n\n          for (chnl = 0; chnl < 4; chnl++) {\n            a = pixels[origPix + chnl];\n            b = pixels[origPix + 4 + chnl];\n            c = pixels[origPix + w4 + chnl];\n            d = pixels[origPix + w4 + 4 + chnl];\n            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\n                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n            destPixels[offset++] = color;\n          }\n        }\n      }\n      return destImage;\n    },\n\n    hermiteFastResize: function(canvasEl, oW, oH, dW, dH) {\n      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\n          ratioWHalf = ceil(ratioW / 2),\n          ratioHHalf = ceil(ratioH / 2),\n          context = canvasEl.getContext('2d'),\n          img = context.getImageData(0, 0, oW, oH), data = img.data,\n          img2 = context.getImageData(0, 0, dW, dH), data2 = img2.data;\n      for (var j = 0; j < dH; j++) {\n        for (var i = 0; i < dW; i++) {\n          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\n              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\n                centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\n                  w = sqrt(w0 + dx * dx);\n              /*jshint maxdepth:5 */\n              if (w > 1 && w < -1) {\n                continue;\n              }\n              //hermite filter\n              weight = 2 * w * w * w - 3 * w * w + 1;\n              if (weight > 0) {\n                dx = 4 * (xx + yy * oW);\n                //alpha\n                gxA += weight * data[dx + 3];\n                weightsAlpha += weight;\n                //colors\n                /*jshint maxdepth:6 */\n                if (data[dx + 3] < 255) {\n                  weight = weight * data[dx + 3] / 250;\n                }\n                /*jshint maxdepth:5 */\n                gxR += weight * data[dx];\n                gxG += weight * data[dx + 1];\n                gxB += weight * data[dx + 2];\n                weights += weight;\n              }\n              /*jshint maxdepth:4 */\n            }\n          }\n          data2[x2] = gxR / weights;\n          data2[x2 + 1] = gxG / weights;\n          data2[x2 + 2] = gxB / weights;\n          data2[x2 + 3] = gxA / weightsAlpha;\n        }\n      }\n      return img2;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        resizeType: this.resizeType,\n        lanczosLobes: this.lanczosLobes\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n   */\n  fabric.Image.filters.Resize.fromObject = function(object) {\n    return new fabric.Image.filters.Resize(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\n      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n  if (fabric.Text) {\n    fabric.warn('fabric.Text is already defined');\n    return;\n  }\n\n  var stateProperties = fabric.Object.prototype.stateProperties.concat();\n  stateProperties.push(\n    'fontFamily',\n    'fontWeight',\n    'fontSize',\n    'text',\n    'textDecoration',\n    'textAlign',\n    'fontStyle',\n    'lineHeight',\n    'textBackgroundColor'\n  );\n\n  /**\n   * Text class\n   * @class fabric.Text\n   * @extends fabric.Object\n   * @return {fabric.Text} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#text}\n   * @see {@link fabric.Text#initialize} for constructor definition\n   */\n  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n\n    /**\n     * Properties which when set cause object to change dimensions\n     * @type Object\n     * @private\n     */\n    _dimensionAffectingProps: {\n      fontSize: true,\n      fontWeight: true,\n      fontFamily: true,\n      fontStyle: true,\n      lineHeight: true,\n      stroke: true,\n      strokeWidth: true,\n      text: true,\n      textAlign: true\n    },\n\n    /**\n     * @private\n     */\n    _reNewline: /\\r?\\n/,\n\n    /**\n     * Use this regular expression to filter for whitespace that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reSpacesAndTabs: /[ \\t\\r]+/g,\n\n    /**\n     * Retrieves object's fontSize\n     * @method getFontSize\n     * @memberOf fabric.Text.prototype\n     * @return {String} Font size (in pixels)\n     */\n\n    /**\n     * Sets object's fontSize\n     * @method setFontSize\n     * @memberOf fabric.Text.prototype\n     * @param {Number} fontSize Font size (in pixels)\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's fontWeight\n     * @method getFontWeight\n     * @memberOf fabric.Text.prototype\n     * @return {(String|Number)} Font weight\n     */\n\n    /**\n     * Sets object's fontWeight\n     * @method setFontWeight\n     * @memberOf fabric.Text.prototype\n     * @param {(Number|String)} fontWeight Font weight\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's fontFamily\n     * @method getFontFamily\n     * @memberOf fabric.Text.prototype\n     * @return {String} Font family\n     */\n\n    /**\n     * Sets object's fontFamily\n     * @method setFontFamily\n     * @memberOf fabric.Text.prototype\n     * @param {String} fontFamily Font family\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's text\n     * @method getText\n     * @memberOf fabric.Text.prototype\n     * @return {String} text\n     */\n\n    /**\n     * Sets object's text\n     * @method setText\n     * @memberOf fabric.Text.prototype\n     * @param {String} text Text\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's textDecoration\n     * @method getTextDecoration\n     * @memberOf fabric.Text.prototype\n     * @return {String} Text decoration\n     */\n\n    /**\n     * Sets object's textDecoration\n     * @method setTextDecoration\n     * @memberOf fabric.Text.prototype\n     * @param {String} textDecoration Text decoration\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's fontStyle\n     * @method getFontStyle\n     * @memberOf fabric.Text.prototype\n     * @return {String} Font style\n     */\n\n    /**\n     * Sets object's fontStyle\n     * @method setFontStyle\n     * @memberOf fabric.Text.prototype\n     * @param {String} fontStyle Font style\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's lineHeight\n     * @method getLineHeight\n     * @memberOf fabric.Text.prototype\n     * @return {Number} Line height\n     */\n\n    /**\n     * Sets object's lineHeight\n     * @method setLineHeight\n     * @memberOf fabric.Text.prototype\n     * @param {Number} lineHeight Line height\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's textAlign\n     * @method getTextAlign\n     * @memberOf fabric.Text.prototype\n     * @return {String} Text alignment\n     */\n\n    /**\n     * Sets object's textAlign\n     * @method setTextAlign\n     * @memberOf fabric.Text.prototype\n     * @param {String} textAlign Text alignment\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's textBackgroundColor\n     * @method getTextBackgroundColor\n     * @memberOf fabric.Text.prototype\n     * @return {String} Text background color\n     */\n\n    /**\n     * Sets object's textBackgroundColor\n     * @method setTextBackgroundColor\n     * @memberOf fabric.Text.prototype\n     * @param {String} textBackgroundColor Text background color\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type:                 'text',\n\n    /**\n     * Font size (in pixels)\n     * @type Number\n     * @default\n     */\n    fontSize:             40,\n\n    /**\n     * Font weight (e.g. bold, normal, 400, 600, 800)\n     * @type {(Number|String)}\n     * @default\n     */\n    fontWeight:           'normal',\n\n    /**\n     * Font family\n     * @type String\n     * @default\n     */\n    fontFamily:           'Times New Roman',\n\n    /**\n     * Text decoration Possible values: \"\", \"underline\", \"overline\" or \"line-through\".\n     * @type String\n     * @default\n     */\n    textDecoration:       '',\n\n    /**\n     * Text alignment. Possible values: \"left\", \"center\", or \"right\".\n     * @type String\n     * @default\n     */\n    textAlign:            'left',\n\n    /**\n     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n     * @type String\n     * @default\n     */\n    fontStyle:            '',\n\n    /**\n     * Line height\n     * @type Number\n     * @default\n     */\n    lineHeight:           1.16,\n\n    /**\n     * Background color of text lines\n     * @type String\n     * @default\n     */\n    textBackgroundColor:  '',\n\n    /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties:      stateProperties,\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color.\n     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n     * @type String\n     * @default\n     */\n    stroke:               null,\n\n    /**\n     * Shadow object representing shadow of this shape.\n     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:               null,\n\n    /**\n     * @private\n     */\n    _fontSizeFraction: 0.25,\n\n    /**\n     * Text Line proportion to font Size (in pixels)\n     * @type Number\n     * @default\n     */\n    _fontSizeMult:             1.13,\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */\n    initialize: function(text, options) {\n      options = options || { };\n      this.text = text;\n      this.__skipDimension = true;\n      this.setOptions(options);\n      this.__skipDimension = false;\n      this._initDimensions();\n    },\n\n    /**\n     * Renders text object on offscreen canvas, so that it would get dimensions\n     * @private\n     */\n    _initDimensions: function(ctx) {\n      if (this.__skipDimension) {\n        return;\n      }\n      if (!ctx) {\n        ctx = fabric.util.createCanvasElement().getContext('2d');\n        this._setTextStyles(ctx);\n      }\n      this._textLines = this._splitTextIntoLines();\n      this._clearCache();\n      //if textAlign is 'justify' i have to disable caching\n      //when calculating width of text and widths of line.\n      this._cacheLinesWidth = (this.textAlign !== 'justify');\n      this.width = this._getTextWidth(ctx);\n      this._cacheLinesWidth = true;\n      this.height = this._getTextHeight(ctx);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of text object\n     */\n    toString: function() {\n      return '#<fabric.Text (' + this.complexity() +\n        '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      this._setOpacity(ctx);\n      this._setShadow(ctx);\n      this._setupCompositeOperation(ctx);\n      this._renderTextBackground(ctx);\n      this._setStrokeStyles(ctx);\n      this._setFillStyles(ctx);\n      this._renderText(ctx);\n      this._renderTextDecoration(ctx);\n      this.clipTo && ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderText: function(ctx) {\n\n      this._translateForTextAlign(ctx);\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n      this._translateForTextAlign(ctx, true);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Boolean} back Indicates if translate back or forward\n     */\n    _translateForTextAlign: function(ctx, back) {\n      if (this.textAlign !== 'left' && this.textAlign !== 'justify') {\n        var sign = back ? -1 : 1;\n        ctx.translate(this.textAlign === 'center' ? (sign * this.width / 2) : sign * this.width, 0);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setTextStyles: function(ctx) {\n      ctx.textBaseline = 'alphabetic';\n      if (!this.skipTextAlign) {\n        ctx.textAlign = this.textAlign;\n      }\n      ctx.font = this._getFontDeclaration();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {Number} Height of fabric.Text object\n     */\n    _getTextHeight: function() {\n      return this._textLines.length * this._getHeightOfLine();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {Number} Maximum width of fabric.Text object\n     */\n    _getTextWidth: function(ctx) {\n      var maxWidth = this._getLineWidth(ctx, 0);\n\n      for (var i = 1, len = this._textLines.length; i < len; i++) {\n        var currentLineWidth = this._getLineWidth(ctx, i);\n        if (currentLineWidth > maxWidth) {\n          maxWidth = currentLineWidth;\n        }\n      }\n      return maxWidth;\n    },\n\n    /**\n     * @private\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} chars Chars to render\n     * @param {Number} left Left position of text\n     * @param {Number} top Top position of text\n     */\n    _renderChars: function(method, ctx, chars, left, top) {\n      // remove Text word from method var\n      var shortM = method.slice(0, -4);\n      if (this[shortM].toLive) {\n        var offsetX = -this.width / 2 + this[shortM].offsetX || 0,\n            offsetY = -this.height / 2 + this[shortM].offsetY || 0;\n        ctx.save();\n        ctx.translate(offsetX, offsetY);\n        left -= offsetX;\n        top -= offsetY;\n      }\n      ctx[method](chars, left, top);\n      this[shortM].toLive && ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Text to render\n     * @param {Number} left Left position of text\n     * @param {Number} top Top position of text\n     * @param {Number} lineIndex Index of a line in a text\n     */\n    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n      // lift the line by quarter of fontSize\n      top -= this.fontSize * this._fontSizeFraction;\n\n      // short-circuit\n      if (this.textAlign !== 'justify') {\n        this._renderChars(method, ctx, line, left, top, lineIndex);\n        return;\n      }\n\n      var lineWidth = this._getLineWidth(ctx, lineIndex),\n          totalWidth = this.width;\n      if (totalWidth >= lineWidth) {\n        // stretch the line\n        var words = line.split(/\\s+/),\n            wordsWidth = this._getWidthOfWords(ctx, line, lineIndex),\n            widthDiff = totalWidth - wordsWidth,\n            numSpaces = words.length - 1,\n            spaceWidth = widthDiff / numSpaces,\n            leftOffset = 0;\n\n        for (var i = 0, len = words.length; i < len; i++) {\n          this._renderChars(method, ctx, words[i], left + leftOffset, top, lineIndex);\n          leftOffset += ctx.measureText(words[i]).width + spaceWidth;\n        }\n      }\n      else {\n        this._renderChars(method, ctx, line, left, top, lineIndex);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} line\n     */\n    _getWidthOfWords: function (ctx, line) {\n      return ctx.measureText(line.replace(/\\s+/g, '')).width;\n    },\n\n    /**\n     * @private\n     * @return {Number} Left offset\n     */\n    _getLeftOffset: function() {\n      return -this.width / 2;\n    },\n\n    /**\n     * @private\n     * @return {Number} Top offset\n     */\n    _getTopOffset: function() {\n      return -this.height / 2;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextFill: function(ctx) {\n      if (!this.fill && !this._skipFillStrokeCheck) {\n        return;\n      }\n\n      var lineHeights = 0;\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        var heightOfLine = this._getHeightOfLine(ctx, i),\n            maxHeight = heightOfLine / this.lineHeight;\n\n        this._renderTextLine(\n          'fillText',\n          ctx,\n          this._textLines[i],\n          this._getLeftOffset(),\n          this._getTopOffset() + lineHeights + maxHeight,\n          i\n        );\n        lineHeights += heightOfLine;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextStroke: function(ctx) {\n      if ((!this.stroke || this.strokeWidth === 0) && !this._skipFillStrokeCheck) {\n        return;\n      }\n\n      var lineHeights = 0;\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n\n      if (this.strokeDashArray) {\n        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n        if (1 & this.strokeDashArray.length) {\n          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);\n        }\n        supportsLineDash && ctx.setLineDash(this.strokeDashArray);\n      }\n\n      ctx.beginPath();\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        var heightOfLine = this._getHeightOfLine(ctx, i),\n            maxHeight = heightOfLine / this.lineHeight;\n\n        this._renderTextLine(\n          'strokeText',\n          ctx,\n          this._textLines[i],\n          this._getLeftOffset(),\n          this._getTopOffset() + lineHeights + maxHeight,\n          i\n        );\n        lineHeights += heightOfLine;\n      }\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    _getHeightOfLine: function() {\n      return this.fontSize * this._fontSizeMult * this.lineHeight;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Array} textLines Array of all text lines\n     */\n    _renderTextBackground: function(ctx) {\n      this._renderTextBoxBackground(ctx);\n      this._renderTextLinesBackground(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextBoxBackground: function(ctx) {\n      if (!this.backgroundColor) {\n        return;\n      }\n\n      ctx.fillStyle = this.backgroundColor;\n\n      ctx.fillRect(\n        this._getLeftOffset(),\n        this._getTopOffset(),\n        this.width,\n        this.height\n      );\n\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextLinesBackground: function(ctx) {\n      if (!this.textBackgroundColor) {\n        return;\n      }\n      var lineTopOffset = 0, heightOfLine = this._getHeightOfLine(),\n          lineWidth, lineLeftOffset;\n\n      ctx.fillStyle = this.textBackgroundColor;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        if (this._textLines[i] !== '') {\n          lineWidth = this._getLineWidth(ctx, i);\n          lineLeftOffset = this._getLineLeftOffset(lineWidth);\n          ctx.fillRect(\n            this._getLeftOffset() + lineLeftOffset,\n            this._getTopOffset() + lineTopOffset,\n            lineWidth,\n            this.fontSize * this._fontSizeMult\n          );\n        }\n        lineTopOffset += heightOfLine;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Number} lineWidth Width of text line\n     * @return {Number} Line left offset\n     */\n    _getLineLeftOffset: function(lineWidth) {\n      if (this.textAlign === 'center') {\n        return (this.width - lineWidth) / 2;\n      }\n      if (this.textAlign === 'right') {\n        return this.width - lineWidth;\n      }\n      return 0;\n    },\n\n    /**\n     * @private\n     */\n    _clearCache: function() {\n      this.__lineWidths = [ ];\n      this.__lineHeights = [ ];\n      this.__lineOffsets = [ ];\n    },\n\n    /**\n     * @private\n     */\n    _shouldClearCache: function() {\n      var shouldClear = false;\n      if (this._forceClearCache) {\n        this._forceClearCache = false;\n        return true;\n      }\n      for (var prop in this._dimensionAffectingProps) {\n        if (this['__' + prop] !== this[prop]) {\n          this['__' + prop] = this[prop];\n          shouldClear = true;\n        }\n      }\n      return shouldClear;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */\n    _getLineWidth: function(ctx, lineIndex) {\n      if (this.__lineWidths[lineIndex]) {\n        return this.__lineWidths[lineIndex];\n      }\n      var width, wordCount, line = this._textLines[lineIndex];\n      if (line === '') {\n        width = 0;\n      }\n      else if (this.textAlign === 'justify' && this._cacheLinesWidth) {\n        wordCount = line.split(' ');\n        //consider not justify last line, not for now.\n        if (wordCount.length > 1) {\n          width = this.width;\n        }\n        else {\n          width = ctx.measureText(line).width;\n        }\n      }\n      else {\n        width = ctx.measureText(line).width;\n      }\n      this._cacheLinesWidth && (this.__lineWidths[lineIndex] = width);\n      return width;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextDecoration: function(ctx) {\n      if (!this.textDecoration) {\n        return;\n      }\n\n      var halfOfVerticalBox = this.height / 2,\n          _this = this, offsets = [];\n\n      /** @ignore */\n      function renderLinesAtOffset(offsets) {\n        var i, lineHeight = 0, len, j, oLen, lineWidth,\n            lineLeftOffset, heightOfLine;\n\n        for (i = 0, len = _this._textLines.length; i < len; i++) {\n\n          lineWidth = _this._getLineWidth(ctx, i),\n          lineLeftOffset = _this._getLineLeftOffset(lineWidth),\n          heightOfLine = _this._getHeightOfLine(ctx, i);\n\n          for (j = 0, oLen = offsets.length; j < oLen; j++) {\n            ctx.fillRect(\n              _this._getLeftOffset() + lineLeftOffset,\n              lineHeight + (_this._fontSizeMult - 1 + offsets[j] ) * _this.fontSize - halfOfVerticalBox,\n              lineWidth,\n              _this.fontSize / 15);\n          }\n          lineHeight += heightOfLine;\n        }\n      }\n\n      if (this.textDecoration.indexOf('underline') > -1) {\n        offsets.push(0.85); // 1 - 3/16\n      }\n      if (this.textDecoration.indexOf('line-through') > -1) {\n        offsets.push(0.43);\n      }\n      if (this.textDecoration.indexOf('overline') > -1) {\n        offsets.push(-0.12);\n      }\n      if (offsets.length > 0) {\n        renderLinesAtOffset(offsets);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getFontDeclaration: function() {\n      return [\n        // node-canvas needs \"weight style\", while browsers need \"style weight\"\n        (fabric.isLikelyNode ? this.fontWeight : this.fontStyle),\n        (fabric.isLikelyNode ? this.fontStyle : this.fontWeight),\n        this.fontSize + 'px',\n        (fabric.isLikelyNode ? ('\"' + this.fontFamily + '\"') : this.fontFamily)\n      ].join(' ');\n    },\n\n    /**\n     * Renders text instance on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx, noTransform) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n\n      ctx.save();\n      this._setTextStyles(ctx);\n\n      if (this._shouldClearCache()) {\n        this._initDimensions(ctx);\n      }\n      if (!noTransform) {\n        this.transform(ctx);\n      }\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      if (this.group && this.group.type === 'path-group') {\n        ctx.translate(this.left, this.top);\n      }\n      this._render(ctx);\n      ctx.restore();\n    },\n\n    /**\n     * Returns the text as an array of lines.\n     * @returns {Array} Lines in the text\n     */\n    _splitTextIntoLines: function() {\n      return this.text.split(this._reNewline);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n        text:                 this.text,\n        fontSize:             this.fontSize,\n        fontWeight:           this.fontWeight,\n        fontFamily:           this.fontFamily,\n        fontStyle:            this.fontStyle,\n        lineHeight:           this.lineHeight,\n        textDecoration:       this.textDecoration,\n        textAlign:            this.textAlign,\n        textBackgroundColor:  this.textBackgroundColor\n      });\n      if (!this.includeDefaultValues) {\n        this._removeDefaultValues(object);\n      }\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(),\n          offsets = this._getSVGLeftTopOffsets(this.ctx),\n          textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n      this._wrapSVGTextAndBg(markup, textAndBg);\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLeftTopOffsets: function(ctx) {\n      var lineTop = this._getHeightOfLine(ctx, 0),\n          textLeft = -this.width / 2,\n          textTop = 0;\n\n      return {\n        textLeft: textLeft + (this.group && this.group.type === 'path-group' ? this.left : 0),\n        textTop: textTop + (this.group && this.group.type === 'path-group' ? -this.top : 0),\n        lineTop: lineTop\n      };\n    },\n\n    /**\n     * @private\n     */\n    _wrapSVGTextAndBg: function(markup, textAndBg) {\n      markup.push(\n        '\\t<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n',\n          textAndBg.textBgRects.join(''),\n          '\\t\\t<text ',\n            (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ': ''),\n            (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ': ''),\n            (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ': ''),\n            (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ': ''),\n            (this.textDecoration ? 'text-decoration=\"' + this.textDecoration + '\" ': ''),\n            'style=\"', this.getSvgStyles(), '\" >',\n            textAndBg.textSpans.join(''),\n          '</text>\\n',\n        '\\t</g>\\n'\n      );\n    },\n\n    /**\n     * @private\n     * @param {Number} textTopOffset Text top offset\n     * @param {Number} textLeftOffset Text left offset\n     * @return {Object}\n     */\n    _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\n      var textSpans = [ ],\n          textBgRects = [ ],\n          height = 0;\n      // bounding-box background\n      this._setSVGBg(textBgRects);\n\n      // text and text-background\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        if (this.textBackgroundColor) {\n          this._setSVGTextLineBg(textBgRects, i, textLeftOffset, textTopOffset, height);\n        }\n        this._setSVGTextLineText(i, textSpans, height, textLeftOffset, textTopOffset, textBgRects);\n        height += this._getHeightOfLine(this.ctx, i);\n      }\n\n      return {\n        textSpans: textSpans,\n        textBgRects: textBgRects\n      };\n    },\n\n    _setSVGTextLineText: function(i, textSpans, height, textLeftOffset, textTopOffset) {\n      var yPos = this.fontSize * (this._fontSizeMult - this._fontSizeFraction)\n        - textTopOffset + height - this.height / 2;\n      textSpans.push(\n        '<tspan x=\"',\n          toFixed(textLeftOffset + this._getLineLeftOffset(this.__lineWidths[i]), NUM_FRACTION_DIGITS), '\" ',\n          'y=\"',\n          toFixed(yPos, NUM_FRACTION_DIGITS),\n          '\" ',\n          // doing this on <tspan> elements since setting opacity\n          // on containing <text> one doesn't work in Illustrator\n          this._getFillAttributes(this.fill), '>',\n          fabric.util.string.escapeXml(this._textLines[i]),\n        '</tspan>'\n      );\n    },\n\n    _setSVGTextLineBg: function(textBgRects, i, textLeftOffset, textTopOffset, height) {\n      textBgRects.push(\n        '\\t\\t<rect ',\n          this._getFillAttributes(this.textBackgroundColor),\n          ' x=\"',\n          toFixed(textLeftOffset + this._getLineLeftOffset(this.__lineWidths[i]), NUM_FRACTION_DIGITS),\n          '\" y=\"',\n          toFixed(height - this.height / 2, NUM_FRACTION_DIGITS),\n          '\" width=\"',\n          toFixed(this.__lineWidths[i], NUM_FRACTION_DIGITS),\n          '\" height=\"',\n          toFixed(this._getHeightOfLine(this.ctx, i) / this.lineHeight, NUM_FRACTION_DIGITS),\n        '\"></rect>\\n');\n    },\n\n    _setSVGBg: function(textBgRects) {\n      if (this.backgroundColor) {\n        textBgRects.push(\n          '\\t\\t<rect ',\n            this._getFillAttributes(this.backgroundColor),\n            ' x=\"',\n            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\n            '\" y=\"',\n            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\n            '\" width=\"',\n            toFixed(this.width, NUM_FRACTION_DIGITS),\n            '\" height=\"',\n            toFixed(this.height, NUM_FRACTION_DIGITS),\n          '\"></rect>\\n');\n      }\n    },\n\n    /**\n     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n     * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n     *\n     * @private\n     * @param {Any} value\n     * @return {String}\n     */\n    _getFillAttributes: function(value) {\n      var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\n      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\n        return 'fill=\"' + value + '\"';\n      }\n      return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Sets specified property to a specified value\n     * @param {String} key\n     * @param {Any} value\n     * @return {fabric.Text} thisArg\n     * @chainable\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n\n      if (key in this._dimensionAffectingProps) {\n        this._initDimensions();\n        this.setCoords();\n      }\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\n   * @static\n   * @memberOf fabric.Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\n    'x y dx dy font-family font-style font-weight font-size text-decoration text-anchor'.split(' '));\n\n  /**\n   * Default SVG font size\n   * @static\n   * @memberOf fabric.Text\n   */\n  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\n\n  /**\n   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf fabric.Text\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Text} Instance of fabric.Text\n   */\n  fabric.Text.fromElement = function(element, options) {\n    if (!element) {\n      return null;\n    }\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES);\n    options = fabric.util.object.extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes);\n\n    options.top = options.top || 0;\n    options.left = options.left || 0;\n    if ('dx' in parsedAttributes) {\n      options.left += parsedAttributes.dx;\n    }\n    if ('dy' in parsedAttributes) {\n      options.top += parsedAttributes.dy;\n    }\n    if (!('fontSize' in options)) {\n      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n    }\n\n    if (!options.originX) {\n      options.originX = 'left';\n    }\n    var textContent = element.textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' '),\n        text = new fabric.Text(textContent, options),\n        /*\n          Adjust positioning:\n            x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n            top/left properties in Fabric correspond to center point of text bounding box\n        */\n        offX = 0;\n\n    if (text.originX === 'left') {\n      offX = text.getWidth() / 2;\n    }\n    if (text.originX === 'right') {\n      offX = -text.getWidth() / 2;\n    }\n    text.set({\n      left: text.getLeft() + offX,\n      top: text.getTop() - text.getHeight() / 2 + text.fontSize * (0.18 + text._fontSizeFraction) /* 0.3 is the old lineHeight */\n    });\n\n    return text;\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Text instance from an object representation\n   * @static\n   * @memberOf fabric.Text\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Text} Instance of fabric.Text\n   */\n  fabric.Text.fromObject = function(object) {\n    return new fabric.Text(object.text, clone(object));\n  };\n\n  fabric.util.createAccessors(fabric.Text);\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var clone = fabric.util.object.clone;\n\n  /**\n   * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\n   * prefix when observing canvas.\n   * @class fabric.IText\n   * @extends fabric.Text\n   * @mixes fabric.Observable\n   *\n   * @fires changed\n   * @fires selection:changed\n   * @fires editing:entered\n   * @fires editing:exited\n   *\n   * @return {fabric.IText} thisArg\n   * @see {@link fabric.IText#initialize} for constructor definition\n   *\n   * <p>Supported key combinations:</p>\n   * <pre>\n   *   Move cursor:                    left, right, up, down\n   *   Select character:               shift + left, shift + right\n   *   Select text vertically:         shift + up, shift + down\n   *   Move cursor by word:            alt + left, alt + right\n   *   Select words:                   shift + alt + left, shift + alt + right\n   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n   *   Jump to start/end of text:      cmd + up, cmd + down\n   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n   *   Delete character:               backspace\n   *   Delete word:                    alt + backspace\n   *   Delete line:                    cmd + backspace\n   *   Forward delete:                 delete\n   *   Copy text:                      ctrl/cmd + c\n   *   Paste text:                     ctrl/cmd + v\n   *   Cut text:                       ctrl/cmd + x\n   *   Select entire text:             ctrl/cmd + a\n   *   Quit editing                    tab or esc\n   * </pre>\n   *\n   * <p>Supported mouse/touch combination</p>\n   * <pre>\n   *   Position cursor:                click/touch\n   *   Create selection:               click/touch & drag\n   *   Create selection:               click & shift + click\n   *   Select word:                    double click\n   *   Select line:                    triple click\n   * </pre>\n   */\n  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'i-text',\n\n    /**\n     * Index where text selection starts (or where cursor is when there is no selection)\n     * @type Number\n     * @default\n     */\n    selectionStart: 0,\n\n    /**\n     * Index where text selection ends\n     * @type Number\n     * @default\n     */\n    selectionEnd: 0,\n\n    /**\n     * Color of text selection\n     * @type String\n     * @default\n     */\n    selectionColor: 'rgba(17,119,255,0.3)',\n\n    /**\n     * Indicates whether text is in editing mode\n     * @type Boolean\n     * @default\n     */\n    isEditing: false,\n\n    /**\n     * Indicates whether a text can be edited\n     * @type Boolean\n     * @default\n     */\n    editable: true,\n\n    /**\n     * Border color of text object while it's in editing mode\n     * @type String\n     * @default\n     */\n    editingBorderColor: 'rgba(102,153,255,0.25)',\n\n    /**\n     * Width of cursor (in px)\n     * @type Number\n     * @default\n     */\n    cursorWidth: 2,\n\n    /**\n     * Color of default cursor (when not overwritten by character style)\n     * @type String\n     * @default\n     */\n    cursorColor: '#333',\n\n    /**\n     * Delay between cursor blink (in ms)\n     * @type Number\n     * @default\n     */\n    cursorDelay: 1000,\n\n    /**\n     * Duration of cursor fadein (in ms)\n     * @type Number\n     * @default\n     */\n    cursorDuration: 600,\n\n    /**\n     * Object containing character styles\n     * (where top-level properties corresponds to line number and 2nd-level properties -- to char number in a line)\n     * @type Object\n     * @default\n     */\n    styles: null,\n\n    /**\n     * Indicates whether internal text char widths can be cached\n     * @type Boolean\n     * @default\n     */\n    caching: true,\n\n    /**\n     * @private\n     * @type Boolean\n     * @default\n     */\n    _skipFillStrokeCheck: false,\n\n    /**\n     * @private\n     */\n    _reSpace: /\\s|\\n/,\n\n    /**\n     * @private\n     */\n    _currentCursorOpacity: 0,\n\n    /**\n     * @private\n     */\n    _selectionDirection: null,\n\n    /**\n     * @private\n     */\n    _abortCursorAnimation: false,\n\n    /**\n     * @private\n     */\n    _charWidthsCache: { },\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.IText} thisArg\n     */\n    initialize: function(text, options) {\n      this.styles = options ? (options.styles || { }) : { };\n      this.callSuper('initialize', text, options);\n      this.initBehavior();\n    },\n\n    /**\n     * @private\n     */\n    _clearCache: function() {\n      this.callSuper('_clearCache');\n      this.__maxFontHeights = [ ];\n      this.__widthOfSpace = [ ];\n    },\n\n    /**\n     * Returns true if object has no styling\n     */\n    isEmptyStyles: function() {\n      if (!this.styles) {\n        return true;\n      }\n      var obj = this.styles;\n\n      for (var p1 in obj) {\n        for (var p2 in obj[p1]) {\n          /*jshint unused:false */\n          for (var p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Sets selection start (left boundary of a selection)\n     * @param {Number} index Index to set selection start to\n     */\n    setSelectionStart: function(index) {\n      index = Math.max(index, 0);\n      if (this.selectionStart !== index) {\n        this.fire('selection:changed');\n        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n        this.selectionStart = index;\n      }\n      this._updateTextarea();\n    },\n\n    /**\n     * Sets selection end (right boundary of a selection)\n     * @param {Number} index Index to set selection end to\n     */\n    setSelectionEnd: function(index) {\n      index = Math.min(index, this.text.length);\n      if (this.selectionEnd !== index) {\n        this.fire('selection:changed');\n        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n        this.selectionEnd = index;\n      }\n      this._updateTextarea();\n    },\n\n    /**\n     * Gets style of a current selection/cursor (at the start position)\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at\n     * @return {Object} styles Style object at a specified (or current) index\n     */\n    getSelectionStyles: function(startIndex, endIndex) {\n\n      if (arguments.length === 2) {\n        var styles = [ ];\n        for (var i = startIndex; i < endIndex; i++) {\n          styles.push(this.getSelectionStyles(i));\n        }\n        return styles;\n      }\n\n      var loc = this.get2DCursorLocation(startIndex),\n          style = this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n\n      return style || {};\n    },\n\n    /**\n     * Sets style of a current selection\n     * @param {Object} [styles] Styles object\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    setSelectionStyles: function(styles) {\n      if (this.selectionStart === this.selectionEnd) {\n        this._extendStyles(this.selectionStart, styles);\n      }\n      else {\n        for (var i = this.selectionStart; i < this.selectionEnd; i++) {\n          this._extendStyles(i, styles);\n        }\n      }\n      /* not included in _extendStyles to avoid clearing cache more than once */\n      this._forceClearCache = true;\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _extendStyles: function(index, styles) {\n      var loc = this.get2DCursorLocation(index);\n\n      if (!this._getLineStyle(loc.lineIndex)) {\n        this._setLineStyle(loc.lineIndex, {});\n      }\n\n      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n      }\n\n      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      this.callSuper('_render', ctx);\n      this.ctx = ctx;\n      this.isEditing && this.renderCursorOrSelection();\n    },\n\n    /**\n     * Renders cursor or selection (depending on what exists)\n     */\n    renderCursorOrSelection: function() {\n      if (!this.active) {\n        return;\n      }\n\n      var chars = this.text.split(''),\n          boundaries, ctx;\n\n      if (this.canvas.contextTop) {\n        ctx = this.canvas.contextTop;\n        ctx.save();\n        ctx.transform.apply(ctx, this.canvas.viewportTransform);\n        this.transform(ctx);\n        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      else {\n        ctx = this.ctx;\n        ctx.save();\n      }\n\n      if (this.selectionStart === this.selectionEnd) {\n        boundaries = this._getCursorBoundaries(chars, 'cursor');\n        this.renderCursor(boundaries, ctx);\n      }\n      else {\n        boundaries = this._getCursorBoundaries(chars, 'selection');\n        this.renderSelection(chars, boundaries, ctx);\n      }\n\n      ctx.restore();\n    },\n\n    /**\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n     */\n    get2DCursorLocation: function(selectionStart) {\n      if (typeof selectionStart === 'undefined') {\n        selectionStart = this.selectionStart;\n      }\n      var len = this._textLines.length;\n      for (var i = 0; i < len; i++) {\n        if (selectionStart <= this._textLines[i].length) {\n          return {\n            lineIndex: i,\n            charIndex: selectionStart\n          };\n        }\n        selectionStart -= this._textLines[i].length + 1;\n      }\n      return {\n        lineIndex: i - 1,\n        charIndex: this._textLines[i - 1].length < selectionStart ? this._textLines[i - 1].length : selectionStart\n      };\n    },\n\n    /**\n     * Returns complete style of char at the current cursor\n     * @param {Number} lineIndex Line index\n     * @param {Number} charIndex Char index\n     * @return {Object} Character style\n     */\n    getCurrentCharStyle: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n\n      return {\n        fontSize: style && style.fontSize || this.fontSize,\n        fill: style && style.fill || this.fill,\n        textBackgroundColor: style && style.textBackgroundColor || this.textBackgroundColor,\n        textDecoration: style && style.textDecoration || this.textDecoration,\n        fontFamily: style && style.fontFamily || this.fontFamily,\n        fontWeight: style && style.fontWeight || this.fontWeight,\n        fontStyle: style && style.fontStyle || this.fontStyle,\n        stroke: style && style.stroke || this.stroke,\n        strokeWidth: style && style.strokeWidth || this.strokeWidth\n      };\n    },\n\n    /**\n     * Returns fontSize of char at the current cursor\n     * @param {Number} lineIndex Line index\n     * @param {Number} charIndex Char index\n     * @return {Number} Character font size\n     */\n    getCurrentCharFontSize: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n      return style && style.fontSize ? style.fontSize : this.fontSize;\n    },\n\n    /**\n     * Returns color (fill) of char at the current cursor\n     * @param {Number} lineIndex Line index\n     * @param {Number} charIndex Char index\n     * @return {String} Character color (fill)\n     */\n    getCurrentCharColor: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n      return style && style.fill ? style.fill : this.cursorColor;\n    },\n\n    /**\n     * Returns cursor boundaries (left, top, leftOffset, topOffset)\n     * @private\n     * @param {Array} chars Array of characters\n     * @param {String} typeOfBoundaries\n     */\n    _getCursorBoundaries: function(chars, typeOfBoundaries) {\n\n      // left/top are left/top of entire text box\n      // leftOffset/topOffset are offset from that left/top point of a text box\n\n      var left = Math.round(this._getLeftOffset()),\n          top = this._getTopOffset(),\n\n          offsets = this._getCursorBoundariesOffsets(\n                      chars, typeOfBoundaries);\n\n      return {\n        left: left,\n        top: top,\n        leftOffset: offsets.left + offsets.lineLeft,\n        topOffset: offsets.top\n      };\n    },\n\n    /**\n     * @private\n     */\n    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {\n\n      var lineLeftOffset = 0,\n\n          lineIndex = 0,\n          charIndex = 0,\n          topOffset = 0,\n          leftOffset = 0;\n\n      for (var i = 0; i < this.selectionStart; i++) {\n        if (chars[i] === '\\n') {\n          leftOffset = 0;\n          topOffset += this._getHeightOfLine(this.ctx, lineIndex);\n\n          lineIndex++;\n          charIndex = 0;\n        }\n        else {\n          leftOffset += this._getWidthOfChar(this.ctx, chars[i], lineIndex, charIndex);\n          charIndex++;\n        }\n\n        lineLeftOffset = this._getCachedLineOffset(lineIndex);\n      }\n      if (typeOfBoundaries === 'cursor') {\n        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, lineIndex) / this.lineHeight\n          - this.getCurrentCharFontSize(lineIndex, charIndex) * (1 - this._fontSizeFraction);\n      }\n\n      return {\n        top: topOffset,\n        left: leftOffset,\n        lineLeft: lineLeftOffset\n      };\n    },\n\n    /**\n     * @private\n     */\n    _getCachedLineOffset: function(lineIndex) {\n      var widthOfLine = this._getLineWidth(this.ctx, lineIndex);\n\n      return this.__lineOffsets[lineIndex] ||\n        (this.__lineOffsets[lineIndex] = this._getLineLeftOffset(widthOfLine));\n    },\n\n    /**\n     * Renders cursor\n     * @param {Object} boundaries\n     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n     */\n    renderCursor: function(boundaries, ctx) {\n\n      var cursorLocation = this.get2DCursorLocation(),\n          lineIndex = cursorLocation.lineIndex,\n          charIndex = cursorLocation.charIndex,\n          charHeight = this.getCurrentCharFontSize(lineIndex, charIndex),\n          leftOffset = (lineIndex === 0 && charIndex === 0)\n                    ? this._getCachedLineOffset(lineIndex)\n                    : boundaries.leftOffset;\n\n      ctx.fillStyle = this.getCurrentCharColor(lineIndex, charIndex);\n      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\n\n      ctx.fillRect(\n        boundaries.left + leftOffset,\n        boundaries.top + boundaries.topOffset,\n        this.cursorWidth / this.scaleX,\n        charHeight);\n\n    },\n\n    /**\n     * Renders text selection\n     * @param {Array} chars Array of characters\n     * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n     */\n    renderSelection: function(chars, boundaries, ctx) {\n\n      ctx.fillStyle = this.selectionColor;\n\n      var start = this.get2DCursorLocation(this.selectionStart),\n          end = this.get2DCursorLocation(this.selectionEnd),\n          startLine = start.lineIndex,\n          endLine = end.lineIndex;\n\n      for (var i = startLine; i <= endLine; i++) {\n        var lineOffset = this._getCachedLineOffset(i) || 0,\n            lineHeight = this._getHeightOfLine(this.ctx, i),\n            boxWidth = 0, line = this._textLines[i];\n\n        if (i === startLine) {\n          for (var j = 0, len = line.length; j < len; j++) {\n            if (j >= start.charIndex && (i !== endLine || j < end.charIndex)) {\n              boxWidth += this._getWidthOfChar(ctx, line[j], i, j);\n            }\n            if (j < start.charIndex) {\n              lineOffset += this._getWidthOfChar(ctx, line[j], i, j);\n            }\n          }\n        }\n        else if (i > startLine && i < endLine) {\n          boxWidth += this._getLineWidth(ctx, i) || 5;\n        }\n        else if (i === endLine) {\n          for (var j2 = 0, j2len = end.charIndex; j2 < j2len; j2++) {\n            boxWidth += this._getWidthOfChar(ctx, line[j2], i, j2);\n          }\n        }\n\n        ctx.fillRect(\n          boundaries.left + lineOffset,\n          boundaries.top + boundaries.topOffset,\n          boxWidth,\n          lineHeight);\n\n        boundaries.topOffset += lineHeight;\n      }\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderChars: function(method, ctx, line, left, top, lineIndex) {\n\n      if (this.isEmptyStyles()) {\n        return this._renderCharsFast(method, ctx, line, left, top);\n      }\n\n      this.skipTextAlign = true;\n\n      // set proper box offset\n      left -= this.textAlign === 'center'\n        ? (this.width / 2)\n        : (this.textAlign === 'right')\n          ? this.width\n          : 0;\n\n      // set proper line offset\n      var lineHeight = this._getHeightOfLine(ctx, lineIndex),\n          lineLeftOffset = this._getCachedLineOffset(lineIndex),\n          prevStyle,\n          charsToRender = '';\n\n      left += lineLeftOffset || 0;\n\n      ctx.save();\n      top -= lineHeight / this.lineHeight * this._fontSizeFraction;\n      for (var i = 0, len = line.length; i <= len; i++) {\n        prevStyle = prevStyle || this.getCurrentCharStyle(lineIndex, i);\n        var thisStyle = this.getCurrentCharStyle(lineIndex, i + 1);\n\n        if (this._hasStyleChanged(prevStyle, thisStyle) || i === len) {\n          this._renderChar(method, ctx, lineIndex, i - 1, charsToRender, left, top, lineHeight);\n          charsToRender = '';\n          prevStyle = thisStyle;\n        }\n        charsToRender += line[i];\n      }\n\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Content of the line\n     * @param {Number} left Left coordinate\n     * @param {Number} top Top coordinate\n     */\n    _renderCharsFast: function(method, ctx, line, left, top) {\n      this.skipTextAlign = false;\n\n      if (method === 'fillText' && this.fill) {\n        this.callSuper('_renderChars', method, ctx, line, left, top);\n      }\n      if (method === 'strokeText' && ((this.stroke && this.strokeWidth > 0) || this.skipFillStrokeCheck)) {\n        this.callSuper('_renderChars', method, ctx, line, left, top);\n      }\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex\n     * @param {Number} i\n     * @param {String} _char\n     * @param {Number} left Left coordinate\n     * @param {Number} top Top coordinate\n     * @param {Number} lineHeight Height of the line\n     */\n    _renderChar: function(method, ctx, lineIndex, i, _char, left, top, lineHeight) {\n      var charWidth, charHeight,\n          decl = this._getStyleDeclaration(lineIndex, i),\n          offset = this._fontSizeFraction * lineHeight / this.lineHeight;\n\n      if (decl) {\n        var shouldStroke = decl.stroke || this.stroke,\n            shouldFill = decl.fill || this.fill;\n\n        ctx.save();\n        charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i, decl);\n        charHeight = this._getHeightOfChar(ctx, _char, lineIndex, i);\n\n        if (shouldFill) {\n          ctx.fillText(_char, left, top);\n        }\n        if (shouldStroke) {\n          ctx.strokeText(_char, left, top);\n        }\n\n        this._renderCharDecoration(ctx, decl, left, top, offset, charWidth, charHeight);\n        ctx.restore();\n\n        ctx.translate(charWidth, 0);\n      }\n      else {\n        if (method === 'strokeText' && this.stroke) {\n          ctx[method](_char, left, top);\n        }\n        if (method === 'fillText' && this.fill) {\n          ctx[method](_char, left, top);\n        }\n        charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i);\n        this._renderCharDecoration(ctx, null, left, top, offset, charWidth, this.fontSize);\n\n        ctx.translate(ctx.measureText(_char).width, 0);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} prevStyle\n     * @param {Object} thisStyle\n     */\n    _hasStyleChanged: function(prevStyle, thisStyle) {\n      return (prevStyle.fill !== thisStyle.fill ||\n              prevStyle.fontSize !== thisStyle.fontSize ||\n              prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n              prevStyle.textDecoration !== thisStyle.textDecoration ||\n              prevStyle.fontFamily !== thisStyle.fontFamily ||\n              prevStyle.fontWeight !== thisStyle.fontWeight ||\n              prevStyle.fontStyle !== thisStyle.fontStyle ||\n              prevStyle.stroke !== thisStyle.stroke ||\n              prevStyle.strokeWidth !== thisStyle.strokeWidth\n      );\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderCharDecoration: function(ctx, styleDeclaration, left, top, offset, charWidth, charHeight) {\n\n      var textDecoration = styleDeclaration\n            ? (styleDeclaration.textDecoration || this.textDecoration)\n            : this.textDecoration;\n\n      if (!textDecoration) {\n        return;\n      }\n\n      if (textDecoration.indexOf('underline') > -1) {\n        ctx.fillRect(\n          left,\n          top + charHeight / 10,\n          charWidth ,\n          charHeight / 15\n        );\n      }\n      if (textDecoration.indexOf('line-through') > -1) {\n        ctx.fillRect(\n          left,\n          top - charHeight * (this._fontSizeFraction + this._fontSizeMult - 1) + charHeight / 15,\n          charWidth,\n          charHeight / 15\n        );\n      }\n      if (textDecoration.indexOf('overline') > -1) {\n        ctx.fillRect(\n          left,\n          top - (this._fontSizeMult - this._fontSizeFraction) * charHeight,\n          charWidth,\n          charHeight / 15\n        );\n      }\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line\n     */\n    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n      // to \"cancel\" this.fontSize subtraction in fabric.Text#_renderTextLine\n      // the adding 0.03 is just to align text with itext by overlap test\n      if (!this.isEmptyStyles()) {\n        top += this.fontSize * (this._fontSizeFraction + 0.03);\n      }\n      this.callSuper('_renderTextLine', method, ctx, line, left, top, lineIndex);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextDecoration: function(ctx) {\n      if (this.isEmptyStyles()) {\n        return this.callSuper('_renderTextDecoration', ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextLinesBackground: function(ctx) {\n      if (!this.textBackgroundColor && !this.styles) {\n        return;\n      }\n\n      ctx.save();\n\n      if (this.textBackgroundColor) {\n        ctx.fillStyle = this.textBackgroundColor;\n      }\n\n      var lineHeights = 0;\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\n        var heightOfLine = this._getHeightOfLine(ctx, i);\n        if (this._textLines[i] === '') {\n          lineHeights += heightOfLine;\n          continue;\n        }\n\n        var lineWidth = this._getLineWidth(ctx, i),\n            lineLeftOffset = this._getCachedLineOffset(i);\n\n        if (this.textBackgroundColor) {\n          ctx.fillStyle = this.textBackgroundColor;\n\n          ctx.fillRect(\n            this._getLeftOffset() + lineLeftOffset,\n            this._getTopOffset() + lineHeights,\n            lineWidth,\n            heightOfLine / this.lineHeight\n          );\n        }\n        if (this._getLineStyle(i)) {\n          for (var j = 0, jlen = this._textLines[i].length; j < jlen; j++) {\n            var style = this._getStyleDeclaration(i, j);\n            if (style && style.textBackgroundColor) {\n\n              var _char = this._textLines[i][j];\n\n              ctx.fillStyle = style.textBackgroundColor;\n\n              ctx.fillRect(\n                this._getLeftOffset() + lineLeftOffset + this._getWidthOfCharsAt(ctx, i, j),\n                this._getTopOffset() + lineHeights,\n                this._getWidthOfChar(ctx, _char, i, j) + 1,\n                heightOfLine / this.lineHeight\n              );\n            }\n          }\n        }\n        lineHeights += heightOfLine;\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     */\n    _getCacheProp: function(_char, styleDeclaration) {\n      return _char +\n             styleDeclaration.fontFamily +\n             styleDeclaration.fontSize +\n             styleDeclaration.fontWeight +\n             styleDeclaration.fontStyle +\n             styleDeclaration.shadow;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} _char\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} [decl]\n     */\n    _applyCharStylesGetWidth: function(ctx, _char, lineIndex, charIndex, decl) {\n      var styleDeclaration = decl || this._getStyleDeclaration(lineIndex, charIndex);\n\n      if (styleDeclaration) {\n        // cloning so that original style object is not polluted with following font declarations\n        styleDeclaration = clone(styleDeclaration);\n      }\n      else {\n        styleDeclaration = { };\n      }\n\n      this._applyFontStyles(styleDeclaration);\n\n      var cacheProp = this._getCacheProp(_char, styleDeclaration);\n\n      // short-circuit if no styles\n      if (this.isEmptyStyles() && this._charWidthsCache[cacheProp] && this.caching) {\n        return this._charWidthsCache[cacheProp];\n      }\n\n      if (typeof styleDeclaration.shadow === 'string') {\n        styleDeclaration.shadow = new fabric.Shadow(styleDeclaration.shadow);\n      }\n\n      var fill = styleDeclaration.fill || this.fill;\n      ctx.fillStyle = fill.toLive\n        ? fill.toLive(ctx, this)\n        : fill;\n\n      if (styleDeclaration.stroke) {\n        ctx.strokeStyle = (styleDeclaration.stroke && styleDeclaration.stroke.toLive)\n          ? styleDeclaration.stroke.toLive(ctx, this)\n          : styleDeclaration.stroke;\n      }\n\n      ctx.lineWidth = styleDeclaration.strokeWidth || this.strokeWidth;\n      ctx.font = this._getFontDeclaration.call(styleDeclaration);\n      this._setShadow.call(styleDeclaration, ctx);\n\n      if (!this.caching) {\n        return ctx.measureText(_char).width;\n      }\n\n      if (!this._charWidthsCache[cacheProp]) {\n        this._charWidthsCache[cacheProp] = ctx.measureText(_char).width;\n      }\n\n      return this._charWidthsCache[cacheProp];\n    },\n\n    /**\n     * @private\n     * @param {Object} styleDeclaration\n     */\n    _applyFontStyles: function(styleDeclaration) {\n      if (!styleDeclaration.fontFamily) {\n        styleDeclaration.fontFamily = this.fontFamily;\n      }\n      if (!styleDeclaration.fontSize) {\n        styleDeclaration.fontSize = this.fontSize;\n      }\n      if (!styleDeclaration.fontWeight) {\n        styleDeclaration.fontWeight = this.fontWeight;\n      }\n      if (!styleDeclaration.fontStyle) {\n        styleDeclaration.fontStyle = this.fontStyle;\n      }\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Boolean} [returnCloneOrEmpty=false]\n     * @private\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {\n      if (returnCloneOrEmpty) {\n        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])\n          ? clone(this.styles[lineIndex][charIndex])\n          : { };\n      }\n\n      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     *\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      return this.styles[lineIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Object} style\n     * @private\n     */\n    _setLineStyle: function(lineIndex, style) {\n      this.styles[lineIndex] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      delete this.styles[lineIndex];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getWidthOfChar: function(ctx, _char, lineIndex, charIndex) {\n      if (this.textAlign === 'justify' && this._reSpacesAndTabs.test(_char)) {\n        return this._getWidthOfSpace(ctx, lineIndex);\n      }\n\n      var styleDeclaration = this._getStyleDeclaration(lineIndex, charIndex, true);\n      this._applyFontStyles(styleDeclaration);\n      var cacheProp = this._getCacheProp(_char, styleDeclaration);\n\n      if (this._charWidthsCache[cacheProp] && this.caching) {\n        return this._charWidthsCache[cacheProp];\n      }\n      else if (ctx) {\n        ctx.save();\n        var width = this._applyCharStylesGetWidth(ctx, _char, lineIndex, charIndex);\n        ctx.restore();\n        return width;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getHeightOfChar: function(ctx, _char, lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex);\n      return style && style.fontSize ? style.fontSize : this.fontSize;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getHeightOfCharAt: function(ctx, lineIndex, charIndex) {\n      var _char = this._textLines[lineIndex][charIndex];\n      return this._getHeightOfChar(ctx, _char, lineIndex, charIndex);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getWidthOfCharsAt: function(ctx, lineIndex, charIndex) {\n      var width = 0, i, _char;\n      for (i = 0; i < charIndex; i++) {\n        _char = this._textLines[lineIndex][i];\n        width += this._getWidthOfChar(ctx, _char, lineIndex, i);\n      }\n      return width;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getLineWidth: function(ctx, lineIndex) {\n      if (this.__lineWidths[lineIndex]) {\n        return this.__lineWidths[lineIndex];\n      }\n      this.__lineWidths[lineIndex] = this._getWidthOfCharsAt(ctx, lineIndex, this._textLines[lineIndex].length);\n      return this.__lineWidths[lineIndex];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex\n     */\n    _getWidthOfSpace: function (ctx, lineIndex) {\n      if (this.__widthOfSpace[lineIndex]) {\n        return this.__widthOfSpace[lineIndex];\n      }\n      var line = this._textLines[lineIndex],\n          wordsWidth = this._getWidthOfWords(ctx, line, lineIndex),\n          widthDiff = this.width - wordsWidth,\n          numSpaces = line.length - line.replace(this._reSpacesAndTabs, '').length,\n          width = widthDiff / numSpaces;\n      this.__widthOfSpace[lineIndex] = width;\n      return width;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} line\n     * @param {Number} lineIndex\n     */\n    _getWidthOfWords: function (ctx, line, lineIndex) {\n      var width = 0;\n\n      for (var charIndex = 0; charIndex < line.length; charIndex++) {\n        var _char = line[charIndex];\n\n        if (!_char.match(/\\s/)) {\n          width += this._getWidthOfChar(ctx, _char, lineIndex, charIndex);\n        }\n      }\n\n      return width;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getHeightOfLine: function(ctx, lineIndex) {\n      if (this.__lineHeights[lineIndex]) {\n        return this.__lineHeights[lineIndex];\n      }\n\n      var line = this._textLines[lineIndex],\n          maxHeight = this._getHeightOfChar(ctx, line[0], lineIndex, 0);\n\n      for (var i = 1, len = line.length; i < len; i++) {\n        var currentCharHeight = this._getHeightOfChar(ctx, line[i], lineIndex, i);\n        if (currentCharHeight > maxHeight) {\n          maxHeight = currentCharHeight;\n        }\n      }\n      this.__maxFontHeights[lineIndex] = maxHeight;\n      this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n      return this.__lineHeights[lineIndex];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getTextHeight: function(ctx) {\n      var height = 0;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        height += this._getHeightOfLine(ctx, i);\n      }\n      return height;\n    },\n\n    /**\n     * This method is overwritten to account for different top offset\n     * @private\n     */\n    _renderTextBoxBackground: function(ctx) {\n      if (!this.backgroundColor) {\n        return;\n      }\n\n      ctx.save();\n      ctx.fillStyle = this.backgroundColor;\n\n      ctx.fillRect(\n        this._getLeftOffset(),\n        this._getTopOffset(),\n        this.width,\n        this.height\n      );\n\n      ctx.restore();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @method toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {\n        styles: clone(this.styles)\n      });\n    }\n  });\n\n  /**\n   * Returns fabric.IText instance from an object representation\n   * @static\n   * @memberOf fabric.IText\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.IText} instance of fabric.IText\n   */\n  fabric.IText.fromObject = function(object) {\n    return new fabric.IText(object.text, clone(object));\n  };\n})();\n\n\n(function() {\n\n  var clone = fabric.util.object.clone;\n\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Initializes all the interactive behavior of IText\n     */\n    initBehavior: function() {\n      this.initAddedHandler();\n      this.initRemovedHandler();\n      this.initCursorSelectionHandlers();\n      this.initDoubleClickSimulation();\n    },\n\n    /**\n     * Initializes \"selected\" event handler\n     */\n    initSelectedHandler: function() {\n      this.on('selected', function() {\n\n        var _this = this;\n        setTimeout(function() {\n          _this.selected = true;\n        }, 100);\n      });\n    },\n\n    /**\n     * Initializes \"added\" event handler\n     */\n    initAddedHandler: function() {\n      var _this = this;\n      this.on('added', function() {\n        if (this.canvas && !this.canvas._hasITextHandlers) {\n          this.canvas._hasITextHandlers = true;\n          this._initCanvasHandlers();\n        }\n\n        // Track IText instances per-canvas. Only register in this array once added\n        // to a canvas; we don't want to leak a reference to the instance forever\n        // simply because it existed at some point.\n        // (Might be added to a collection, but not on a canvas.)\n        if (_this.canvas) {\n          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];\n          _this.canvas._iTextInstances.push(_this);\n        }\n      });\n    },\n\n    initRemovedHandler: function() {\n      var _this = this;\n      this.on('removed', function() {\n        // (Might be removed from a collection, but not on a canvas.)\n        if (_this.canvas) {\n          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];\n          fabric.util.removeFromArray(_this.canvas._iTextInstances, _this);\n        }\n      });\n    },\n\n    /**\n     * @private\n     */\n    _initCanvasHandlers: function() {\n      var _this = this;\n\n      this.canvas.on('selection:cleared', function() {\n        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);\n      });\n\n      this.canvas.on('mouse:up', function() {\n        if (_this.canvas._iTextInstances) {\n          _this.canvas._iTextInstances.forEach(function(obj) {\n            obj.__isMousedown = false;\n          });\n        }\n      });\n\n      this.canvas.on('object:selected', function() {\n        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);\n      });\n    },\n\n    /**\n     * @private\n     */\n    _tick: function() {\n      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\n    },\n\n    /**\n     * @private\n     */\n    _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\n\n      var tickState;\n\n      tickState = {\n        isAborted: false,\n        abort: function() {\n          this.isAborted = true;\n        },\n      };\n\n      obj.animate('_currentCursorOpacity', targetOpacity, {\n        duration: duration,\n        onComplete: function() {\n          if (!tickState.isAborted) {\n            obj[completeMethod]();\n          }\n        },\n        onChange: function() {\n          if (obj.canvas) {\n            obj.canvas.clearContext(obj.canvas.contextTop || obj.ctx);\n            obj.renderCursorOrSelection();\n          }\n        },\n        abort: function() {\n          return tickState.isAborted;\n        }\n      });\n      return tickState;\n    },\n\n    /**\n     * @private\n     */\n    _onTickComplete: function() {\n\n      var _this = this;\n\n      if (this._cursorTimeout1) {\n        clearTimeout(this._cursorTimeout1);\n      }\n      this._cursorTimeout1 = setTimeout(function() {\n        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\n      }, 100);\n    },\n\n    /**\n     * Initializes delayed cursor\n     */\n    initDelayedCursor: function(restart) {\n      var _this = this,\n          delay = restart ? 0 : this.cursorDelay;\n\n      this._currentTickState && this._currentTickState.abort();\n      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n      clearTimeout(this._cursorTimeout1);\n      this._currentCursorOpacity = 1;\n      if (this.canvas) {\n        this.canvas.clearContext(this.canvas.contextTop || this.ctx);\n        this.renderCursorOrSelection();\n      }\n      if (this._cursorTimeout2) {\n        clearTimeout(this._cursorTimeout2);\n      }\n      this._cursorTimeout2 = setTimeout(function() {\n        _this._tick();\n      }, delay);\n    },\n\n    /**\n     * Aborts cursor animation and clears all timeouts\n     */\n    abortCursorAnimation: function() {\n      this._currentTickState && this._currentTickState.abort();\n      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\n      clearTimeout(this._cursorTimeout1);\n      clearTimeout(this._cursorTimeout2);\n\n      this._currentCursorOpacity = 0;\n      this.canvas && this.canvas.clearContext(this.canvas.contextTop || this.ctx);\n    },\n\n    /**\n     * Selects entire text\n     */\n    selectAll: function() {\n      this.setSelectionStart(0);\n      this.setSelectionEnd(this.text.length);\n    },\n\n    /**\n     * Returns selected text\n     * @return {String}\n     */\n    getSelectedText: function() {\n      return this.text.slice(this.selectionStart, this.selectionEnd);\n    },\n\n    /**\n     * Find new selection index representing start of current word according to current selection index\n     * @param {Number} startFrom Surrent selection index\n     * @return {Number} New selection index\n     */\n    findWordBoundaryLeft: function(startFrom) {\n      var offset = 0, index = startFrom - 1;\n\n      // remove space before cursor first\n      if (this._reSpace.test(this.text.charAt(index))) {\n        while (this._reSpace.test(this.text.charAt(index))) {\n          offset++;\n          index--;\n        }\n      }\n      while (/\\S/.test(this.text.charAt(index)) && index > -1) {\n        offset++;\n        index--;\n      }\n\n      return startFrom - offset;\n    },\n\n    /**\n     * Find new selection index representing end of current word according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findWordBoundaryRight: function(startFrom) {\n      var offset = 0, index = startFrom;\n\n      // remove space after cursor first\n      if (this._reSpace.test(this.text.charAt(index))) {\n        while (this._reSpace.test(this.text.charAt(index))) {\n          offset++;\n          index++;\n        }\n      }\n      while (/\\S/.test(this.text.charAt(index)) && index < this.text.length) {\n        offset++;\n        index++;\n      }\n\n      return startFrom + offset;\n    },\n\n    /**\n     * Find new selection index representing start of current line according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findLineBoundaryLeft: function(startFrom) {\n      var offset = 0, index = startFrom - 1;\n\n      while (!/\\n/.test(this.text.charAt(index)) && index > -1) {\n        offset++;\n        index--;\n      }\n\n      return startFrom - offset;\n    },\n\n    /**\n     * Find new selection index representing end of current line according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findLineBoundaryRight: function(startFrom) {\n      var offset = 0, index = startFrom;\n\n      while (!/\\n/.test(this.text.charAt(index)) && index < this.text.length) {\n        offset++;\n        index++;\n      }\n\n      return startFrom + offset;\n    },\n\n    /**\n     * Returns number of newlines in selected text\n     * @return {Number} Number of newlines in selected text\n     */\n    getNumNewLinesInSelectedText: function() {\n      var selectedText = this.getSelectedText(),\n          numNewLines  = 0;\n\n      for (var i = 0, len = selectedText.length; i < len; i++) {\n        if (selectedText[i] === '\\n') {\n          numNewLines++;\n        }\n      }\n      return numNewLines;\n    },\n\n    /**\n     * Finds index corresponding to beginning or end of a word\n     * @param {Number} selectionStart Index of a character\n     * @param {Number} direction: 1 or -1\n     * @return {Number} Index of the beginning or end of a word\n     */\n    searchWordBoundary: function(selectionStart, direction) {\n      var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,\n          _char     = this.text.charAt(index),\n          reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\n      while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {\n        index += direction;\n        _char = this.text.charAt(index);\n      }\n      if (reNonWord.test(_char) && _char !== '\\n') {\n        index += direction === 1 ? 0 : 1;\n      }\n      return index;\n    },\n\n    /**\n     * Selects a word based on the index\n     * @param {Number} selectionStart Index of a character\n     */\n    selectWord: function(selectionStart) {\n      var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\n          newSelectionEnd   = this.searchWordBoundary(selectionStart, 1);\n      /* search forward */\n\n      this.setSelectionStart(newSelectionStart);\n      this.setSelectionEnd(newSelectionEnd);\n    },\n\n    /**\n     * Selects a line based on the index\n     * @param {Number} selectionStart Index of a character\n     */\n    selectLine: function(selectionStart) {\n      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n          newSelectionEnd   = this.findLineBoundaryRight(selectionStart);\n\n      this.setSelectionStart(newSelectionStart);\n      this.setSelectionEnd(newSelectionEnd);\n    },\n\n    /**\n     * Enters editing state\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    enterEditing: function() {\n      if (this.isEditing || !this.editable) {\n        return;\n      }\n\n      if (this.canvas) {\n        this.exitEditingOnOthers(this.canvas);\n      }\n\n      this.isEditing = true;\n\n      this.initHiddenTextarea();\n      this.hiddenTextarea.focus();\n      this._updateTextarea();\n      this._saveEditingProps();\n      this._setEditingProps();\n\n      this._tick();\n      this.fire('editing:entered');\n\n      if (!this.canvas) {\n        return this;\n      }\n\n      this.canvas.renderAll();\n      this.canvas.fire('text:editing:entered', { target: this });\n      this.initMouseMoveHandler();\n      return this;\n    },\n\n    exitEditingOnOthers: function(canvas) {\n      if (canvas._iTextInstances) {\n        canvas._iTextInstances.forEach(function(obj) {\n          obj.selected = false;\n          if (obj.isEditing) {\n            obj.exitEditing();\n          }\n        });\n      }\n    },\n\n    /**\n     * Initializes \"mousemove\" event handler\n     */\n    initMouseMoveHandler: function() {\n      var _this = this;\n      this.canvas.on('mouse:move', function(options) {\n        if (!_this.__isMousedown || !_this.isEditing) {\n          return;\n        }\n\n        var newSelectionStart = _this.getSelectionStartFromPointer(options.e);\n        if (newSelectionStart >= _this.__selectionStartOnMouseDown) {\n          _this.setSelectionStart(_this.__selectionStartOnMouseDown);\n          _this.setSelectionEnd(newSelectionStart);\n        }\n        else {\n          _this.setSelectionStart(newSelectionStart);\n          _this.setSelectionEnd(_this.__selectionStartOnMouseDown);\n        }\n      });\n    },\n\n    /**\n     * @private\n     */\n    _setEditingProps: function() {\n      this.hoverCursor = 'text';\n\n      if (this.canvas) {\n        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n      }\n\n      this.borderColor = this.editingBorderColor;\n\n      this.hasControls = this.selectable = false;\n      this.lockMovementX = this.lockMovementY = true;\n    },\n\n    /**\n     * @private\n     */\n    _updateTextarea: function() {\n      if (!this.hiddenTextarea) {\n        return;\n      }\n\n      this.hiddenTextarea.value = this.text;\n      this.hiddenTextarea.selectionStart = this.selectionStart;\n      this.hiddenTextarea.selectionEnd = this.selectionEnd;\n    },\n\n    /**\n     * @private\n     */\n    _saveEditingProps: function() {\n      this._savedProps = {\n        hasControls: this.hasControls,\n        borderColor: this.borderColor,\n        lockMovementX: this.lockMovementX,\n        lockMovementY: this.lockMovementY,\n        hoverCursor: this.hoverCursor,\n        defaultCursor: this.canvas && this.canvas.defaultCursor,\n        moveCursor: this.canvas && this.canvas.moveCursor\n      };\n    },\n\n    /**\n     * @private\n     */\n    _restoreEditingProps: function() {\n      if (!this._savedProps) {\n        return;\n      }\n\n      this.hoverCursor = this._savedProps.overCursor;\n      this.hasControls = this._savedProps.hasControls;\n      this.borderColor = this._savedProps.borderColor;\n      this.lockMovementX = this._savedProps.lockMovementX;\n      this.lockMovementY = this._savedProps.lockMovementY;\n\n      if (this.canvas) {\n        this.canvas.defaultCursor = this._savedProps.defaultCursor;\n        this.canvas.moveCursor = this._savedProps.moveCursor;\n      }\n    },\n\n    /**\n     * Exits from editing state\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    exitEditing: function() {\n\n      this.selected = false;\n      this.isEditing = false;\n      this.selectable = true;\n\n      this.selectionEnd = this.selectionStart;\n      this.hiddenTextarea && this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\n      this.hiddenTextarea = null;\n\n      this.abortCursorAnimation();\n      this._restoreEditingProps();\n      this._currentCursorOpacity = 0;\n\n      this.fire('editing:exited');\n      this.canvas && this.canvas.fire('text:editing:exited', { target: this });\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _removeExtraneousStyles: function() {\n      for (var prop in this.styles) {\n        if (!this._textLines[prop]) {\n          delete this.styles[prop];\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _removeCharsFromTo: function(start, end) {\n      while (end !== start) {\n        this._removeSingleCharAndStyle(start + 1);\n        end--;\n      }\n      this.setSelectionStart(start);\n    },\n\n    _removeSingleCharAndStyle: function(index) {\n      var isBeginningOfLine = this.text[index - 1] === '\\n',\n          indexStyle        = isBeginningOfLine ? index : index - 1;\n      this.removeStyleObject(isBeginningOfLine, indexStyle);\n      this.text = this.text.slice(0, index - 1) +\n        this.text.slice(index);\n\n      this._textLines = this._splitTextIntoLines();\n    },\n\n    /**\n     * Inserts characters where cursor is (replacing selection if one exists)\n     * @param {String} _chars Characters to insert\n     * @param {Boolean} useCopiedStyle use fabric.copiedTextStyle\n     */\n    insertChars: function(_chars, useCopiedStyle) {\n      var style;\n\n      if (this.selectionEnd - this.selectionStart > 1) {\n        this._removeCharsFromTo(this.selectionStart, this.selectionEnd);\n        this.setSelectionEnd(this.selectionStart);\n      }\n\n      for (var i = 0, len = _chars.length; i < len; i++) {\n        if (useCopiedStyle) {\n          style = fabric.copiedTextStyle[i];\n        }\n        this.insertChar(_chars[i], i < len - 1, style);\n      }\n    },\n\n    /**\n     * Inserts a character where cursor is\n     * @param {String} _char Characters to insert\n     * @param {Boolean} skipUpdate trigger rendering and updates at the end of text insert\n     * @param {Object} styleObject Style to be inserted for the new char\n     */\n    insertChar: function(_char, skipUpdate, styleObject) {\n      var isEndOfLine = this.text[this.selectionStart] === '\\n';\n      this.text = this.text.slice(0, this.selectionStart) +\n        _char + this.text.slice(this.selectionEnd);\n      this._textLines = this._splitTextIntoLines();\n      this.insertStyleObjects(_char, isEndOfLine, styleObject);\n      this.setSelectionStart(this.selectionStart + 1);\n      this.setSelectionEnd(this.selectionStart);\n      if (skipUpdate) {\n        return;\n      }\n      this.canvas && this.canvas.renderAll();\n      this.setCoords();\n      this.fire('changed');\n      this.canvas && this.canvas.fire('text:changed', { target: this });\n    },\n\n    /**\n     * Inserts new style object\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Boolean} isEndOfLine True if it's end of line\n     */\n    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {\n\n      this.shiftLineStyles(lineIndex, +1);\n\n      if (!this.styles[lineIndex + 1]) {\n        this.styles[lineIndex + 1] = {};\n      }\n\n      var currentCharStyle = {},\n          newLineStyles    = {};\n\n      if (this.styles[lineIndex] && this.styles[lineIndex][charIndex - 1]) {\n        currentCharStyle = this.styles[lineIndex][charIndex - 1];\n      }\n\n      // if there's nothing after cursor,\n      // we clone current char style onto the next (otherwise empty) line\n      if (isEndOfLine) {\n        newLineStyles[0] = clone(currentCharStyle);\n        this.styles[lineIndex + 1] = newLineStyles;\n      }\n      // otherwise we clone styles of all chars\n      // after cursor onto the next line, from the beginning\n      else {\n        for (var index in this.styles[lineIndex]) {\n          if (parseInt(index, 10) >= charIndex) {\n            newLineStyles[parseInt(index, 10) - charIndex] = this.styles[lineIndex][index];\n            // remove lines from the previous line since they're on a new line now\n            delete this.styles[lineIndex][index];\n          }\n        }\n        this.styles[lineIndex + 1] = newLineStyles;\n      }\n      this._forceClearCache = true;\n    },\n\n    /**\n     * Inserts style object for a given line/char index\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Object} [style] Style object to insert, if given\n     */\n    insertCharStyleObject: function(lineIndex, charIndex, style) {\n\n      var currentLineStyles       = this.styles[lineIndex],\n          currentLineStylesCloned = clone(currentLineStyles);\n\n      if (charIndex === 0 && !style) {\n        charIndex = 1;\n      }\n\n      // shift all char styles by 1 forward\n      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n      for (var index in currentLineStylesCloned) {\n        var numericIndex = parseInt(index, 10);\n\n        if (numericIndex >= charIndex) {\n          currentLineStyles[numericIndex + 1] = currentLineStylesCloned[numericIndex];\n\n          // only delete the style if there was nothing moved there\n          if (!currentLineStylesCloned[numericIndex - 1]) {\n            delete currentLineStyles[numericIndex];\n          }\n        }\n      }\n\n      this.styles[lineIndex][charIndex] =\n        style || clone(currentLineStyles[charIndex - 1]);\n      this._forceClearCache = true;\n    },\n\n    /**\n     * Inserts style object(s)\n     * @param {String} _chars Characters at the location where style is inserted\n     * @param {Boolean} isEndOfLine True if it's end of line\n     * @param {Object} [styleObject] Style to insert\n     */\n    insertStyleObjects: function(_chars, isEndOfLine, styleObject) {\n      // removed shortcircuit over isEmptyStyles\n\n      var cursorLocation = this.get2DCursorLocation(),\n          lineIndex      = cursorLocation.lineIndex,\n          charIndex      = cursorLocation.charIndex;\n\n      if (!this._getLineStyle(lineIndex)) {\n        this._setLineStyle(lineIndex, {});\n      }\n\n      if (_chars === '\\n') {\n        this.insertNewlineStyleObject(lineIndex, charIndex, isEndOfLine);\n      }\n      else {\n        this.insertCharStyleObject(lineIndex, charIndex, styleObject);\n      }\n    },\n\n    /**\n     * Shifts line styles up or down\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} offset Can be -1 or +1\n     */\n    shiftLineStyles: function(lineIndex, offset) {\n      // shift all line styles by 1 upward\n      var clonedStyles = clone(this.styles);\n      for (var line in this.styles) {\n        var numericLine = parseInt(line, 10);\n        if (numericLine > lineIndex) {\n          this.styles[numericLine + offset] = clonedStyles[numericLine];\n          if (!clonedStyles[numericLine - offset]) {\n            delete this.styles[numericLine];\n          }\n        }\n      }\n      //TODO: evaluate if delete old style lines with offset -1\n    },\n\n    /**\n     * Removes style object\n     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line\n     * @param {Number} [index] Optional index. When not given, current selectionStart is used.\n     */\n    removeStyleObject: function(isBeginningOfLine, index) {\n\n      var cursorLocation = this.get2DCursorLocation(index),\n          lineIndex      = cursorLocation.lineIndex,\n          charIndex      = cursorLocation.charIndex;\n\n      if (isBeginningOfLine) {\n\n        var textOnPreviousLine     = this._textLines[lineIndex - 1],\n            newCharIndexOnPrevLine = textOnPreviousLine\n              ? textOnPreviousLine.length\n              : 0;\n\n        if (!this.styles[lineIndex - 1]) {\n          this.styles[lineIndex - 1] = {};\n        }\n\n        for (charIndex in this.styles[lineIndex]) {\n          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]\n            = this.styles[lineIndex][charIndex];\n        }\n\n        this.shiftLineStyles(lineIndex, -1);\n\n      }\n      else {\n        var currentLineStyles = this.styles[lineIndex];\n\n        if (currentLineStyles) {\n          delete currentLineStyles[charIndex];\n          //console.log('deleting', lineIndex, charIndex + offset);\n        }\n\n        var currentLineStylesCloned = clone(currentLineStyles);\n\n        // shift all styles by 1 backwards\n        for (var i in currentLineStylesCloned) {\n          var numericIndex = parseInt(i, 10);\n          if (numericIndex >= charIndex && numericIndex !== 0) {\n            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];\n            delete currentLineStyles[numericIndex];\n          }\n        }\n      }\n    },\n\n    /**\n     * Inserts new line\n     */\n    insertNewline: function() {\n      this.insertChars('\\n');\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n  /**\n   * Initializes \"dbclick\" event handler\n   */\n  initDoubleClickSimulation: function() {\n\n    // for double click\n    this.__lastClickTime = +new Date();\n\n    // for triple click\n    this.__lastLastClickTime = +new Date();\n\n    this.__lastPointer = { };\n\n    this.on('mousedown', this.onMouseDown.bind(this));\n  },\n\n  onMouseDown: function(options) {\n\n    this.__newClickTime = +new Date();\n    var newPointer = this.canvas.getPointer(options.e);\n\n    if (this.isTripleClick(newPointer)) {\n      this.fire('tripleclick', options);\n      this._stopEvent(options.e);\n    }\n    else if (this.isDoubleClick(newPointer)) {\n      this.fire('dblclick', options);\n      this._stopEvent(options.e);\n    }\n\n    this.__lastLastClickTime = this.__lastClickTime;\n    this.__lastClickTime = this.__newClickTime;\n    this.__lastPointer = newPointer;\n    this.__lastIsEditing = this.isEditing;\n    this.__lastSelected = this.selected;\n  },\n\n  isDoubleClick: function(newPointer) {\n    return this.__newClickTime - this.__lastClickTime < 500 &&\n        this.__lastPointer.x === newPointer.x &&\n        this.__lastPointer.y === newPointer.y && this.__lastIsEditing;\n  },\n\n  isTripleClick: function(newPointer) {\n    return this.__newClickTime - this.__lastClickTime < 500 &&\n        this.__lastClickTime - this.__lastLastClickTime < 500 &&\n        this.__lastPointer.x === newPointer.x &&\n        this.__lastPointer.y === newPointer.y;\n  },\n\n  /**\n   * @private\n   */\n  _stopEvent: function(e) {\n    e.preventDefault && e.preventDefault();\n    e.stopPropagation && e.stopPropagation();\n  },\n\n  /**\n   * Initializes event handlers related to cursor or selection\n   */\n  initCursorSelectionHandlers: function() {\n    this.initSelectedHandler();\n    this.initMousedownHandler();\n    this.initMouseupHandler();\n    this.initClicks();\n  },\n\n  /**\n   * Initializes double and triple click event handlers\n   */\n  initClicks: function() {\n    this.on('dblclick', function(options) {\n      this.selectWord(this.getSelectionStartFromPointer(options.e));\n    });\n    this.on('tripleclick', function(options) {\n      this.selectLine(this.getSelectionStartFromPointer(options.e));\n    });\n  },\n\n  /**\n   * Initializes \"mousedown\" event handler\n   */\n  initMousedownHandler: function() {\n    this.on('mousedown', function(options) {\n\n      var pointer = this.canvas.getPointer(options.e);\n\n      this.__mousedownX = pointer.x;\n      this.__mousedownY = pointer.y;\n      this.__isMousedown = true;\n\n      if (this.hiddenTextarea && this.canvas) {\n        this.canvas.wrapperEl.appendChild(this.hiddenTextarea);\n      }\n\n      if (this.selected) {\n        this.setCursorByClick(options.e);\n      }\n\n      if (this.isEditing) {\n        this.__selectionStartOnMouseDown = this.selectionStart;\n        this.initDelayedCursor(true);\n      }\n    });\n  },\n\n  /**\n   * @private\n   */\n  _isObjectMoved: function(e) {\n    var pointer = this.canvas.getPointer(e);\n\n    return this.__mousedownX !== pointer.x ||\n           this.__mousedownY !== pointer.y;\n  },\n\n  /**\n   * Initializes \"mouseup\" event handler\n   */\n  initMouseupHandler: function() {\n    this.on('mouseup', function(options) {\n      this.__isMousedown = false;\n      if (this._isObjectMoved(options.e)) {\n        return;\n      }\n\n      if (this.__lastSelected) {\n        this.enterEditing();\n        this.initDelayedCursor(true);\n      }\n      this.selected = true;\n    });\n  },\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {Event} e Event object\n   */\n  setCursorByClick: function(e) {\n    var newSelectionStart = this.getSelectionStartFromPointer(e);\n\n    if (e.shiftKey) {\n      if (newSelectionStart < this.selectionStart) {\n        this.setSelectionEnd(this.selectionStart);\n        this.setSelectionStart(newSelectionStart);\n      }\n      else {\n        this.setSelectionEnd(newSelectionStart);\n      }\n    }\n    else {\n      this.setSelectionStart(newSelectionStart);\n      this.setSelectionEnd(newSelectionStart);\n    }\n  },\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {Event} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer: function(e) {\n    var mouseOffset = this.getLocalPointer(e),\n        prevWidth = 0,\n        width = 0,\n        height = 0,\n        charIndex = 0,\n        newSelectionStart,\n        line;\n\n    for (var i = 0, len = this._textLines.length; i < len; i++) {\n      line = this._textLines[i];\n      height += this._getHeightOfLine(this.ctx, i) * this.scaleY;\n\n      var widthOfLine = this._getLineWidth(this.ctx, i),\n          lineLeftOffset = this._getLineLeftOffset(widthOfLine);\n\n      width = lineLeftOffset * this.scaleX;\n\n      if (this.flipX) {\n        // when oject is horizontally flipped we reverse chars\n        // we should reverse also style or do not revers at all.\n        this._textLines[i] = line.reverse().join('');\n      }\n\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\n\n        prevWidth = width;\n\n        width += this._getWidthOfChar(this.ctx, line[j], i, this.flipX ? jlen - j : j) *\n                 this.scaleX;\n\n        if (height <= mouseOffset.y || width <= mouseOffset.x) {\n          charIndex++;\n          continue;\n        }\n\n        return this._getNewSelectionStartFromOffset(\n          mouseOffset, prevWidth, width, charIndex + i, jlen);\n      }\n\n      if (mouseOffset.y < height) {\n        //this happens just on end of lines.\n        return this._getNewSelectionStartFromOffset(\n          mouseOffset, prevWidth, width, charIndex + i - 1, jlen);\n      }\n    }\n\n    // clicked somewhere after all chars, so set at the end\n    if (typeof newSelectionStart === 'undefined') {\n      return this.text.length;\n    }\n  },\n\n  /**\n   * @private\n   */\n  _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\n\n    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\n        distanceBtwNextCharAndCursor = width - mouseOffset.x,\n        offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ? 0 : 1,\n        newSelectionStart = index + offset;\n\n    // if object is horizontally flipped, mirror cursor location from the end\n    if (this.flipX) {\n      newSelectionStart = jlen - newSelectionStart;\n    }\n\n    if (newSelectionStart > this.text.length) {\n      newSelectionStart = this.text.length;\n    }\n\n    return newSelectionStart;\n  }\n});\n\n\nfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea: function() {\n    this.hiddenTextarea = fabric.document.createElement('textarea');\n\n    this.hiddenTextarea.setAttribute('autocapitalize', 'off');\n    this.hiddenTextarea.style.cssText = 'position: fixed; bottom: 20px; left: 0px; opacity: 0;'\n                                        + ' width: 0px; height: 0px; z-index: -999;';\n    fabric.document.body.appendChild(this.hiddenTextarea);\n\n    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\n\n    if (!this._clickHandlerInitialized && this.canvas) {\n      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\n      this._clickHandlerInitialized = true;\n    }\n  },\n\n  /**\n   * @private\n   */\n  _keysMap: {\n    8:  'removeChars',\n    9:  'exitEditing',\n    27: 'exitEditing',\n    13: 'insertNewline',\n    33: 'moveCursorUp',\n    34: 'moveCursorDown',\n    35: 'moveCursorRight',\n    36: 'moveCursorLeft',\n    37: 'moveCursorLeft',\n    38: 'moveCursorUp',\n    39: 'moveCursorRight',\n    40: 'moveCursorDown',\n    46: 'forwardDelete'\n  },\n\n  /**\n   * @private\n   */\n  _ctrlKeysMap: {\n    65: 'selectAll',\n    88: 'cut'\n  },\n\n  onClick: function() {\n    // No need to trigger click event here, focus is enough to have the keyboard appear on Android\n    this.hiddenTextarea && this.hiddenTextarea.focus();\n  },\n\n  /**\n   * Handles keyup event\n   * @param {Event} e Event object\n   */\n  onKeyDown: function(e) {\n    if (!this.isEditing) {\n      return;\n    }\n    if (e.keyCode in this._keysMap) {\n      this[this._keysMap[e.keyCode]](e);\n    }\n    else if ((e.keyCode in this._ctrlKeysMap) && (e.ctrlKey || e.metaKey)) {\n      this[this._ctrlKeysMap[e.keyCode]](e);\n    }\n    else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.renderAll();\n  },\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput: function(e) {\n    if (!this.isEditing || this._cancelOnInput) {\n      this._cancelOnInput = false;\n      return;\n    }\n    var offset = this.selectionStart || 0,\n        textLength = this.text.length,\n        newTextLength = this.hiddenTextarea.value.length,\n        diff = newTextLength - textLength,\n        charsToInsert = this.hiddenTextarea.value.slice(offset, offset + diff);\n    this.insertChars(charsToInsert);\n    e.stopPropagation();\n  },\n\n  /**\n   * Forward delete\n   */\n  forwardDelete: function(e) {\n    if (this.selectionStart === this.selectionEnd) {\n      if (this.selectionStart === this.text.length) {\n        return;\n      }\n      this.moveCursorRight(e);\n    }\n    this.removeChars(e);\n  },\n\n  /**\n   * Copies selected text\n   * @param {Event} e Event object\n   */\n  copy: function(e) {\n    var selectedText = this.getSelectedText(),\n        clipboardData = this._getClipboardData(e);\n\n    // Check for backward compatibility with old browsers\n    if (clipboardData) {\n      clipboardData.setData('text', selectedText);\n    }\n\n    fabric.copiedText = selectedText;\n    fabric.copiedTextStyle = this.getSelectionStyles(\n                          this.selectionStart,\n                          this.selectionEnd);\n  },\n\n  /**\n   * Pastes text\n   * @param {Event} e Event object\n   */\n  paste: function(e) {\n    var copiedText = null,\n        clipboardData = this._getClipboardData(e),\n        useCopiedStyle = true;\n\n    // Check for backward compatibility with old browsers\n    if (clipboardData) {\n      copiedText = clipboardData.getData('text').replace(/\\r/g, '');\n      if (!fabric.copiedTextStyle || fabric.copiedText !== copiedText) {\n        useCopiedStyle = false;\n      }\n    }\n    else {\n      copiedText = fabric.copiedText;\n    }\n\n    if (copiedText) {\n      this.insertChars(copiedText, useCopiedStyle);\n    }\n    this._cancelOnInput = true;\n  },\n\n  /**\n   * Cuts text\n   * @param {Event} e Event object\n   */\n  cut: function(e) {\n    if (this.selectionStart === this.selectionEnd) {\n      return;\n    }\n\n    this.copy();\n    this.removeChars(e);\n  },\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @return {Object} Clipboard data object\n   */\n  _getClipboardData: function(e) {\n    return e && (e.clipboardData || fabric.window.clipboardData);\n  },\n\n  /**\n   * Gets start offset of a selection\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset: function(e, isRight) {\n    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,\n        cursorLocation = this.get2DCursorLocation(selectionProp),\n        _char, lineLeftOffset, lineIndex = cursorLocation.lineIndex,\n        textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),\n        textOnSameLineAfterCursor = this._textLines[lineIndex].slice(cursorLocation.charIndex),\n        textOnNextLine = this._textLines[lineIndex + 1] || '';\n\n    // if on last line, down cursor goes to end of line\n    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\n\n      // move to the end of a text\n      return this.text.length - selectionProp;\n    }\n\n    var widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, lineIndex);\n    lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor);\n\n    var widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;\n\n    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {\n      _char = textOnSameLineBeforeCursor[i];\n      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);\n    }\n\n    var indexOnNextLine = this._getIndexOnNextLine(\n      cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor);\n\n    return textOnSameLineAfterCursor.length + 1 + indexOnNextLine;\n  },\n\n  /**\n   * @private\n   */\n  _getIndexOnNextLine: function(cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor) {\n    var lineIndex = cursorLocation.lineIndex + 1,\n        widthOfNextLine = this._getLineWidth(this.ctx, lineIndex),\n        lineLeftOffset = this._getLineLeftOffset(widthOfNextLine),\n        widthOfCharsOnNextLine = lineLeftOffset,\n        indexOnNextLine = 0,\n        foundMatch;\n\n    for (var j = 0, jlen = textOnNextLine.length; j < jlen; j++) {\n\n      var _char = textOnNextLine[j],\n          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);\n\n      widthOfCharsOnNextLine += widthOfChar;\n\n      if (widthOfCharsOnNextLine > widthOfCharsOnSameLineBeforeCursor) {\n\n        foundMatch = true;\n\n        var leftEdge = widthOfCharsOnNextLine - widthOfChar,\n            rightEdge = widthOfCharsOnNextLine,\n            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),\n            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);\n\n        indexOnNextLine = offsetFromRightEdge < offsetFromLeftEdge ? j + 1 : j;\n\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnNextLine = textOnNextLine.length;\n    }\n\n    return indexOnNextLine;\n  },\n\n  /**\n   * Moves cursor down\n   * @param {Event} e Event object\n   */\n  moveCursorDown: function(e) {\n    this.abortCursorAnimation();\n    this._currentCursorOpacity = 1;\n\n    var offset = this.getDownCursorOffset(e, this._selectionDirection === 'right');\n\n    if (e.shiftKey) {\n      this.moveCursorDownWithShift(offset);\n    }\n    else {\n      this.moveCursorDownWithoutShift(offset);\n    }\n\n    this.initDelayedCursor();\n  },\n\n  /**\n   * Moves cursor down without keeping selection\n   * @param {Number} offset\n   */\n  moveCursorDownWithoutShift: function(offset) {\n    this._selectionDirection = 'right';\n    this.setSelectionStart(this.selectionStart + offset);\n    this.setSelectionEnd(this.selectionStart);\n  },\n\n  /**\n   * private\n   */\n  swapSelectionPoints: function() {\n    var swapSel = this.selectionEnd;\n    this.setSelectionEnd(this.selectionStart);\n    this.setSelectionStart(swapSel);\n  },\n\n  /**\n   * Moves cursor down while keeping selection\n   * @param {Number} offset\n   */\n  moveCursorDownWithShift: function(offset) {\n    if (this.selectionEnd === this.selectionStart) {\n      this._selectionDirection = 'right';\n    }\n    if (this._selectionDirection === 'right') {\n      this.setSelectionEnd(this.selectionEnd + offset);\n    }\n    else {\n      this.setSelectionStart(this.selectionStart + offset);\n    }\n    if (this.selectionEnd < this.selectionStart  && this._selectionDirection === 'left') {\n      this.swapSelectionPoints();\n      this._selectionDirection = 'right';\n    }\n    if (this.selectionEnd > this.text.length) {\n      this.setSelectionEnd(this.text.length);\n    }\n  },\n\n  /**\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset: function(e, isRight) {\n    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,\n        cursorLocation = this.get2DCursorLocation(selectionProp),\n        lineIndex = cursorLocation.lineIndex;\n    // if on first line, up cursor goes to start of line\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      return selectionProp;\n    }\n\n    var textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),\n        textOnPreviousLine = this._textLines[lineIndex - 1] || '',\n        _char,\n        widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, cursorLocation.lineIndex),\n        lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor),\n        widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;\n\n    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {\n      _char = textOnSameLineBeforeCursor[i];\n      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);\n    }\n\n    var indexOnPrevLine = this._getIndexOnPrevLine(\n      cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor);\n\n    return textOnPreviousLine.length - indexOnPrevLine + textOnSameLineBeforeCursor.length;\n  },\n\n  /**\n   * @private\n   */\n  _getIndexOnPrevLine: function(cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor) {\n\n    var lineIndex = cursorLocation.lineIndex - 1,\n        widthOfPreviousLine = this._getLineWidth(this.ctx, lineIndex),\n        lineLeftOffset = this._getLineLeftOffset(widthOfPreviousLine),\n        widthOfCharsOnPreviousLine = lineLeftOffset,\n        indexOnPrevLine = 0,\n        foundMatch;\n\n    for (var j = 0, jlen = textOnPreviousLine.length; j < jlen; j++) {\n\n      var _char = textOnPreviousLine[j],\n          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);\n\n      widthOfCharsOnPreviousLine += widthOfChar;\n\n      if (widthOfCharsOnPreviousLine > widthOfCharsOnSameLineBeforeCursor) {\n\n        foundMatch = true;\n\n        var leftEdge = widthOfCharsOnPreviousLine - widthOfChar,\n            rightEdge = widthOfCharsOnPreviousLine,\n            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),\n            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);\n\n        indexOnPrevLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\n\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnPrevLine = textOnPreviousLine.length - 1;\n    }\n\n    return indexOnPrevLine;\n  },\n\n  /**\n   * Moves cursor up\n   * @param {Event} e Event object\n   */\n  moveCursorUp: function(e) {\n\n    this.abortCursorAnimation();\n    this._currentCursorOpacity = 1;\n\n    var offset = this.getUpCursorOffset(e, this._selectionDirection === 'right');\n    if (e.shiftKey) {\n      this.moveCursorUpWithShift(offset);\n    }\n    else {\n      this.moveCursorUpWithoutShift(offset);\n    }\n\n    this.initDelayedCursor();\n  },\n\n  /**\n   * Moves cursor up with shift\n   * @param {Number} offset\n   */\n  moveCursorUpWithShift: function(offset) {\n    if (this.selectionEnd === this.selectionStart) {\n      this._selectionDirection = 'left';\n    }\n    if (this._selectionDirection === 'right') {\n      this.setSelectionEnd(this.selectionEnd - offset);\n    }\n    else {\n      this.setSelectionStart(this.selectionStart - offset);\n    }\n    if (this.selectionEnd < this.selectionStart && this._selectionDirection === 'right') {\n      this.swapSelectionPoints();\n      this._selectionDirection = 'left';\n    }\n  },\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorUpWithoutShift: function(offset) {\n    if (this.selectionStart === this.selectionEnd) {\n      this.setSelectionStart(this.selectionStart - offset);\n    }\n    this.setSelectionEnd(this.selectionStart);\n\n    this._selectionDirection = 'left';\n  },\n\n  /**\n   * Moves cursor left\n   * @param {Event} e Event object\n   */\n  moveCursorLeft: function(e) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n\n    this.abortCursorAnimation();\n    this._currentCursorOpacity = 1;\n\n    if (e.shiftKey) {\n      this.moveCursorLeftWithShift(e);\n    }\n    else {\n      this.moveCursorLeftWithoutShift(e);\n    }\n\n    this.initDelayedCursor();\n  },\n\n  /**\n   * @private\n   */\n  _move: function(e, prop, direction) {\n    var propMethod = (prop === 'selectionStart' ? 'setSelectionStart' : 'setSelectionEnd');\n    if (e.altKey) {\n      this[propMethod](this['findWordBoundary' + direction](this[prop]));\n    }\n    else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\n      this[propMethod](this['findLineBoundary' + direction](this[prop]));\n    }\n    else {\n      this[propMethod](this[prop] + (direction === 'Left' ? -1 : 1));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _moveLeft: function(e, prop) {\n    this._move(e, prop, 'Left');\n  },\n\n  /**\n   * @private\n   */\n  _moveRight: function(e, prop) {\n    this._move(e, prop, 'Right');\n  },\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {Event} e\n   */\n  moveCursorLeftWithoutShift: function(e) {\n    this._selectionDirection = 'left';\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (this.selectionEnd === this.selectionStart) {\n      this._moveLeft(e, 'selectionStart');\n    }\n    this.setSelectionEnd(this.selectionStart);\n  },\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {Event} e\n   */\n  moveCursorLeftWithShift: function(e) {\n    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\n      this._moveLeft(e, 'selectionEnd');\n    }\n    else {\n      this._selectionDirection = 'left';\n      this._moveLeft(e, 'selectionStart');\n    }\n  },\n\n  /**\n   * Moves cursor right\n   * @param {Event} e Event object\n   */\n  moveCursorRight: function(e) {\n    if (this.selectionStart >= this.text.length && this.selectionEnd >= this.text.length) {\n      return;\n    }\n\n    this.abortCursorAnimation();\n    this._currentCursorOpacity = 1;\n\n    if (e.shiftKey) {\n      this.moveCursorRightWithShift(e);\n    }\n    else {\n      this.moveCursorRightWithoutShift(e);\n    }\n\n    this.initDelayedCursor();\n  },\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {Event} e\n   */\n  moveCursorRightWithShift: function(e) {\n    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\n      this._moveRight(e, 'selectionStart');\n    }\n    else {\n      this._selectionDirection = 'right';\n      this._moveRight(e, 'selectionEnd');\n    }\n  },\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {Event} e Event object\n   */\n  moveCursorRightWithoutShift: function(e) {\n    this._selectionDirection = 'right';\n\n    if (this.selectionStart === this.selectionEnd) {\n      this._moveRight(e, 'selectionStart');\n      this.setSelectionEnd(this.selectionStart);\n    }\n    else {\n      this.setSelectionEnd(this.selectionEnd + this.getNumNewLinesInSelectedText());\n      this.setSelectionStart(this.selectionEnd);\n    }\n  },\n\n  /**\n   * Removes characters selected by selection\n   * @param {Event} e Event object\n   */\n  removeChars: function(e) {\n    if (this.selectionStart === this.selectionEnd) {\n      this._removeCharsNearCursor(e);\n    }\n    else {\n      this._removeCharsFromTo(this.selectionStart, this.selectionEnd);\n    }\n\n    this.setSelectionEnd(this.selectionStart);\n\n    this._removeExtraneousStyles();\n\n    this.canvas && this.canvas.renderAll();\n\n    this.setCoords();\n    this.fire('changed');\n    this.canvas && this.canvas.fire('text:changed', { target: this });\n  },\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   */\n  _removeCharsNearCursor: function(e) {\n    if (this.selectionStart === 0) {\n      return;\n    }\n    if (e.metaKey) {\n      // remove all till the start of current line\n      var leftLineBoundary = this.findLineBoundaryLeft(this.selectionStart);\n\n      this._removeCharsFromTo(leftLineBoundary, this.selectionStart);\n      this.setSelectionStart(leftLineBoundary);\n    }\n    else if (e.altKey) {\n      // remove all till the start of current word\n      var leftWordBoundary = this.findWordBoundaryLeft(this.selectionStart);\n\n      this._removeCharsFromTo(leftWordBoundary, this.selectionStart);\n      this.setSelectionStart(leftWordBoundary);\n    }\n    else {\n      this._removeSingleCharAndStyle(this.selectionStart);\n      this.setSelectionStart(this.selectionStart - 1);\n    }\n  }\n});\n\n\n/* _TO_SVG_START_ */\n(function() {\n  var toFixed = fabric.util.toFixed,\n      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * @private\n     */\n    _setSVGTextLineText: function(lineIndex, textSpans, height, textLeftOffset, textTopOffset, textBgRects) {\n      if (!this.styles[lineIndex]) {\n        fabric.Text.prototype._setSVGTextLineText.call(this,\n          lineIndex, textSpans, height, textLeftOffset, textTopOffset);\n      }\n      else {\n        this._setSVGTextLineChars(\n          lineIndex, textSpans, height, textLeftOffset, textBgRects);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGTextLineChars: function(lineIndex, textSpans, height, textLeftOffset, textBgRects) {\n\n      var chars = this._textLines[lineIndex],\n          charOffset = 0,\n          lineLeftOffset = this._getSVGLineLeftOffset(lineIndex) - this.width / 2,\n          lineOffset = this._getSVGLineTopOffset(lineIndex),\n          heightOfLine = this._getHeightOfLine(this.ctx, lineIndex);\n\n      for (var i = 0, len = chars.length; i < len; i++) {\n        var styleDecl = this.styles[lineIndex][i] || { };\n\n        textSpans.push(\n          this._createTextCharSpan(\n            chars[i], styleDecl, lineLeftOffset, lineOffset.lineTop + lineOffset.offset, charOffset));\n\n        var charWidth = this._getWidthOfChar(this.ctx, chars[i], lineIndex, i);\n\n        if (styleDecl.textBackgroundColor) {\n          textBgRects.push(\n            this._createTextCharBg(\n              styleDecl, lineLeftOffset, lineOffset.lineTop, heightOfLine, charWidth, charOffset));\n        }\n\n        charOffset += charWidth;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLineLeftOffset: function(lineIndex) {\n      return fabric.util.toFixed(this._getLineLeftOffset(this.__lineWidths[lineIndex]), 2);\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLineTopOffset: function(lineIndex) {\n      var lineTopOffset = 0, lastHeight = 0;\n      for (var j = 0; j < lineIndex; j++) {\n        lineTopOffset += this._getHeightOfLine(this.ctx, j);\n      }\n      lastHeight = this._getHeightOfLine(this.ctx, j);\n      return {\n        lineTop: lineTopOffset,\n        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\n      };\n    },\n\n    /**\n     * @private\n     */\n    _createTextCharBg: function(styleDecl, lineLeftOffset, lineTopOffset, heightOfLine, charWidth, charOffset) {\n      return [\n        //jscs:disable validateIndentation\n        '<rect fill=\"', styleDecl.textBackgroundColor,\n        '\" x=\"', toFixed(lineLeftOffset + charOffset, NUM_FRACTION_DIGITS),\n        '\" y=\"', toFixed(lineTopOffset - this.height/2, NUM_FRACTION_DIGITS),\n        '\" width=\"', toFixed(charWidth, NUM_FRACTION_DIGITS),\n        '\" height=\"', toFixed(heightOfLine / this.lineHeight, NUM_FRACTION_DIGITS),\n        '\"></rect>'\n        //jscs:enable validateIndentation\n      ].join('');\n    },\n\n    /**\n     * @private\n     */\n    _createTextCharSpan: function(_char, styleDecl, lineLeftOffset, lineTopOffset, charOffset) {\n\n      var fillStyles = this.getSvgStyles.call(fabric.util.object.extend({\n        visible: true,\n        fill: this.fill,\n        stroke: this.stroke,\n        type: 'text'\n      }, styleDecl));\n\n      return [\n        //jscs:disable validateIndentation\n        '<tspan x=\"', lineLeftOffset + charOffset, '\" y=\"',\n          lineTopOffset - this.height/2, '\" ',\n          (styleDecl.fontFamily ? 'font-family=\"' + styleDecl.fontFamily.replace(/\"/g, '\\'') + '\" ': ''),\n          (styleDecl.fontSize ? 'font-size=\"' + styleDecl.fontSize + '\" ': ''),\n          (styleDecl.fontStyle ? 'font-style=\"' + styleDecl.fontStyle + '\" ': ''),\n          (styleDecl.fontWeight ? 'font-weight=\"' + styleDecl.fontWeight + '\" ': ''),\n          (styleDecl.textDecoration ? 'text-decoration=\"' + styleDecl.textDecoration + '\" ': ''),\n          'style=\"', fillStyles, '\">',\n          fabric.util.string.escapeXml(_char),\n        '</tspan>'\n        //jscs:enable validateIndentation\n      ].join('');\n    }\n  });\n})();\n/* _TO_SVG_END_ */\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = {}),\n      clone  = fabric.util.object.clone;\n\n  /**\n   * Textbox class, based on IText, allows the user to resize the text rectangle\n   * and wraps lines automatically. Textboxes have their Y scaling locked, the\n   * user can only change width. Height is adjusted automatically based on the\n   * wrapping of lines.\n   * @class fabric.Textbox\n   * @extends fabric.IText\n   * @mixes fabric.Observable\n   * @return {fabric.Textbox} thisArg\n   * @see {@link fabric.Textbox#initialize} for constructor definition\n   */\n  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'textbox',\n    /**\n     * Minimum width of textbox, in pixels.\n     * @type Number\n     * @default\n     */\n    minWidth: 20,\n    /**\n     * Minimum calculated width of a textbox, in pixels.\n     * @type Number\n     * @default\n     */\n    dynamicMinWidth: 0,\n    /**\n     * Cached array of text wrapping.\n     * @type Array\n     */\n    __cachedLines: null,\n    /**\n     * Constructor. Some scaling related property values are forced. Visibility\n     * of controls is also fixed; only the rotation and width controls are\n     * made available.\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Textbox} thisArg\n     */\n    initialize: function(text, options) {\n      this.ctx = fabric.util.createCanvasElement().getContext('2d');\n\n      this.callSuper('initialize', text, options);\n      this.set({\n        lockUniScaling: false,\n        lockScalingY: true,\n        lockScalingFlip: true,\n        hasBorders: true\n      });\n      this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());\n\n      // add width to this list of props that effect line wrapping.\n      this._dimensionAffectingProps.width = true;\n    },\n\n    /**\n     * Unlike superclass's version of this function, Textbox does not update\n     * its width.\n     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n     * @private\n     * @override\n     */\n    _initDimensions: function(ctx) {\n      if (this.__skipDimension) {\n        return;\n      }\n\n      if (!ctx) {\n        ctx = fabric.util.createCanvasElement().getContext('2d');\n        this._setTextStyles(ctx);\n      }\n\n      // clear dynamicMinWidth as it will be different after we re-wrap line\n      this.dynamicMinWidth = 0;\n\n      // wrap lines\n      this._textLines = this._splitTextIntoLines();\n\n      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n      if (this.dynamicMinWidth > this.width) {\n        this._set('width', this.dynamicMinWidth);\n      }\n\n      // clear cache and re-calculate height\n      this._clearCache();\n      this.height = this._getTextHeight(ctx);\n      this._setLineWidths();\n    },\n\n    /**\n     * set the __lineWidths cache array to support\n     * functions that expect it to be filled\n     * @private\n     */\n    _setLineWidths: function() {\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        this.__lineWidths[i] = this.width;\n      }\n    },\n\n    /**\n     * Generate an object that translates the style object so that it is\n     * broken up by visual lines (new lines and automatic wrapping).\n     * The original text styles object is broken up by actual lines (new lines only),\n     * which is only sufficient for Text / IText\n     * @private\n     */\n    _generateStyleMap: function() {\n      var realLineCount     = 0,\n          realLineCharCount = 0,\n          charCount         = 0,\n          map               = {};\n\n      for (var i = 0; i < this._textLines.length; i++) {\n        if (this.text[charCount] === '\\n') {\n          realLineCharCount = 0;\n          charCount++;\n          realLineCount++;\n        }\n        else if (this.text[charCount] === ' ') {\n          // this case deals with space's that are removed from end of lines when wrapping\n          realLineCharCount++;\n          charCount++;\n        }\n\n        map[i] = { line: realLineCount, offset: realLineCharCount };\n\n        charCount += this._textLines[i].length;\n        realLineCharCount += this._textLines[i].length;\n      }\n\n      return map;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Boolean} [returnCloneOrEmpty=false]\n     * @private\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {\n      if (this._styleMap) {\n        var map = this._styleMap[lineIndex];\n        lineIndex = map.line;\n        charIndex = map.offset + charIndex;\n      }\n\n      if (returnCloneOrEmpty) {\n        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])\n          ? clone(this.styles[lineIndex][charIndex])\n          : {};\n      }\n\n      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      var map = this._styleMap[lineIndex];\n      return this.styles[map.line];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Object} style\n     * @private\n     */\n    _setLineStyle: function(lineIndex, style) {\n      var map = this._styleMap[lineIndex];\n      this.styles[map.line] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      var map = this._styleMap[lineIndex];\n      delete this.styles[map.line];\n    },\n\n    /**\n     * Wraps text using the 'width' property of Textbox. First this function\n     * splits text on newlines, so we preserve newlines entered by the user.\n     * Then it wraps each line using the width of the Textbox by calling\n     * _wrapLine().\n     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n     * @param {String} text The string of text that is split into lines\n     * @returns {Array} Array of lines\n     */\n    _wrapText: function(ctx, text) {\n      var lines = text.split(this._reNewline), wrapped = [], i;\n\n      for (i = 0; i < lines.length; i++) {\n        wrapped = wrapped.concat(this._wrapLine(ctx, lines[i], i));\n      }\n\n      return wrapped;\n    },\n\n    /**\n     * Helper function to measure a string of text, given its lineIndex and charIndex offset\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {String} text\n     * @param {number} lineIndex\n     * @param {number} charOffset\n     * @returns {number}\n     * @private\n     */\n    _measureText: function(ctx, text, lineIndex, charOffset) {\n      var width = 0, decl;\n      charOffset = charOffset || 0;\n\n      for (var i = 0; i < text.length; i++) {\n        if (this.styles && this.styles[lineIndex] && (decl = this.styles[lineIndex][i + charOffset])) {\n          ctx.save();\n          width += this._applyCharStylesGetWidth(ctx, text[i], lineIndex, i, decl);\n          ctx.restore();\n        }\n        else {\n          // @note: we intentionally pass in an empty style declaration, because if we pass in nothing, it will\n          // retry fetching style declaration\n          width += this._applyCharStylesGetWidth(ctx, text[i], lineIndex, i, {});\n        }\n      }\n\n      return width;\n    },\n\n    /**\n     * Wraps a line of text using the width of the Textbox and a context.\n     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n     * @param {String} text The string of text to split into lines\n     * @param {Number} lineIndex\n     * @returns {Array} Array of line(s) into which the given text is wrapped\n     * to.\n     */\n    _wrapLine: function(ctx, text, lineIndex) {\n      var maxWidth  = this.width,\n          lineWidth = this._measureText(ctx, text, lineIndex, 0);\n\n      // first case: does the whole line fit?\n      if (lineWidth < maxWidth) {\n        // if the current line is only one word, we need to keep track of it if it's a large word\n        if (text.indexOf(' ') === -1 && lineWidth > this.dynamicMinWidth) {\n          this.dynamicMinWidth = lineWidth;\n        }\n\n        return [text];\n      }\n\n      // if the whole line doesn't fit, we break it up into words\n      var lines            = [],\n          line             = '',\n          words            = text.split(' '),\n          offset           = 0,\n          infix            = '',\n          wordWidth        = 0,\n          largestWordWidth = 0;\n\n      while (words.length > 0) {\n        infix = line === '' ? '' : ' ';\n        wordWidth = this._measureText(ctx, words[0], lineIndex, line.length + infix.length + offset);\n        lineWidth = line === '' ? wordWidth : this._measureText(ctx, line + infix + words[0], lineIndex, offset);\n\n        if (lineWidth < maxWidth || (line === '' && wordWidth >= maxWidth)) {\n          line += infix + words.shift();\n        }\n        else {\n          offset += line.length + 1; // add 1 because each word is separated by a space\n          lines.push(line);\n          line = '';\n        }\n\n        if (words.length === 0) {\n          lines.push(line);\n        }\n\n        // keep track of largest word\n        if (wordWidth > largestWordWidth) {\n          largestWordWidth = wordWidth;\n        }\n      }\n\n      if (largestWordWidth > this.dynamicMinWidth) {\n        this.dynamicMinWidth = largestWordWidth;\n      }\n\n      return lines;\n    },\n\n    /**\n     * Gets lines of text to render in the Textbox. This function calculates\n     * text wrapping on the fly everytime it is called.\n     * @returns {Array} Array of lines in the Textbox.\n     * @override\n     */\n    _splitTextIntoLines: function() {\n      this.ctx.save();\n      this._setTextStyles(this.ctx);\n\n      var lines = this._wrapText(this.ctx, this.text);\n\n      this.ctx.restore();\n      this._textLines = lines;\n      this._styleMap = this._generateStyleMap();\n      return lines;\n    },\n\n    /**\n     * When part of a group, we don't want the Textbox's scale to increase if\n     * the group's increases. That's why we reduce the scale of the Textbox by\n     * the amount that the group's increases. This is to maintain the effective\n     * scale of the Textbox at 1, so that font-size values make sense. Otherwise\n     * the same font-size value would result in different actual size depending\n     * on the value of the scale.\n     * @param {String} key\n     * @param {Any} value\n     */\n    setOnGroup: function(key, value) {\n      if (key === 'scaleX') {\n        this.set('scaleX', Math.abs(1 / value));\n        this.set('width', (this.get('width') * value) /\n          (typeof this.__oldScaleX === 'undefined' ? 1 : this.__oldScaleX));\n        this.__oldScaleX = value;\n      }\n    },\n\n    /**\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start).\n     * Overrides the superclass function to take into account text wrapping.\n     *\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n     */\n    get2DCursorLocation: function(selectionStart) {\n      if (typeof selectionStart === 'undefined') {\n        selectionStart = this.selectionStart;\n      }\n\n      var numLines = this._textLines.length,\n          removed  = 0;\n\n      for (var i = 0; i < numLines; i++) {\n        var line    = this._textLines[i],\n            lineLen = line.length;\n\n        if (selectionStart <= removed + lineLen) {\n          return {\n            lineIndex: i,\n            charIndex: selectionStart - removed\n          };\n        }\n\n        removed += lineLen;\n\n        if (this.text[removed] === '\\n' || this.text[removed] === ' ') {\n          removed++;\n        }\n      }\n\n      return {\n        lineIndex: numLines - 1,\n        charIndex: this._textLines[numLines - 1].length\n      };\n    },\n\n    /**\n     * Overrides superclass function and uses text wrapping data to get cursor\n     * boundary offsets instead of the array of chars.\n     * @param {Array} chars Unused\n     * @param {String} typeOfBoundaries Can be 'cursor' or 'selection'\n     * @returns {Object} Object with 'top', 'left', and 'lineLeft' properties set.\n     */\n    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {\n      var topOffset      = 0,\n          leftOffset     = 0,\n          cursorLocation = this.get2DCursorLocation(),\n          lineChars      = this._textLines[cursorLocation.lineIndex].split(''),\n          lineLeftOffset = this._getCachedLineOffset(cursorLocation.lineIndex);\n\n      for (var i = 0; i < cursorLocation.charIndex; i++) {\n        leftOffset += this._getWidthOfChar(this.ctx, lineChars[i], cursorLocation.lineIndex, i);\n      }\n\n      for (i = 0; i < cursorLocation.lineIndex; i++) {\n        topOffset += this._getHeightOfLine(this.ctx, i);\n      }\n\n      if (typeOfBoundaries === 'cursor') {\n        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, cursorLocation.lineIndex)\n          / this.lineHeight - this.getCurrentCharFontSize(cursorLocation.lineIndex, cursorLocation.charIndex)\n          * (1 - this._fontSizeFraction);\n      }\n\n      return {\n        top: topOffset,\n        left: leftOffset,\n        lineLeft: lineLeftOffset\n      };\n    },\n\n    getMinWidth: function() {\n      return Math.max(this.minWidth, this.dynamicMinWidth);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @method toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {\n        minWidth: this.minWidth\n      });\n    }\n  });\n  /**\n   * Returns fabric.Textbox instance from an object representation\n   * @static\n   * @memberOf fabric.Textbox\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Textbox} instance of fabric.Textbox\n   */\n  fabric.Textbox.fromObject = function(object) {\n    return new fabric.Textbox(object.text, clone(object));\n  };\n  /**\n   * Returns the default controls visibility required for Textboxes.\n   * @returns {Object}\n   */\n  fabric.Textbox.getTextboxControlVisibility = function() {\n    return {\n      tl: false,\n      tr: false,\n      br: false,\n      bl: false,\n      ml: true,\n      mt: false,\n      mr: true,\n      mb: false,\n      mtr: true\n    };\n  };\n  /**\n   * Contains all fabric.Textbox objects that have been created\n   * @static\n   * @memberOf fabric.Textbox\n   * @type Array\n   */\n  fabric.Textbox.instances = [];\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  /**\n   * Override _setObjectScale and add Textbox specific resizing behavior. Resizing\n   * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.\n   */\n  var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;\n\n  fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,\n                                                     lockScalingX, lockScalingY, by, lockScalingFlip) {\n\n    var t = transform.target;\n    if (t instanceof fabric.Textbox) {\n      var w = t.width * ((localMouse.x / transform.scaleX) / (t.width + t.strokeWidth));\n      if (w >= t.getMinWidth()) {\n        t.set('width', w);\n      }\n    }\n    else {\n      setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,\n        lockScalingX, lockScalingY, by, lockScalingFlip);\n    }\n  };\n\n  /**\n   * Sets controls of this group to the Textbox's special configuration if\n   * one is present in the group. Deletes _controlsVisibility otherwise, so that\n   * it gets initialized to default value at runtime.\n   */\n  fabric.Group.prototype._refreshControlsVisibility = function() {\n    if (typeof fabric.Textbox === 'undefined') {\n      return;\n    }\n    for (var i = this._objects.length; i--;) {\n      if (this._objects[i] instanceof fabric.Textbox) {\n        this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());\n        return;\n      }\n    }\n  };\n\n  var clone = fabric.util.object.clone;\n\n  fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {\n    /**\n     * @private\n     */\n    _removeExtraneousStyles: function() {\n      for (var prop in this._styleMap) {\n        if (!this._textLines[prop]) {\n          delete this.styles[this._styleMap[prop].line];\n        }\n      }\n    },\n\n    /**\n     * Inserts style object for a given line/char index\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Object} [style] Style object to insert, if given\n     */\n    insertCharStyleObject: function(lineIndex, charIndex, style) {\n      // adjust lineIndex and charIndex\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      fabric.IText.prototype.insertCharStyleObject.apply(this, [lineIndex, charIndex, style]);\n    },\n\n    /**\n     * Inserts new style object\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Boolean} isEndOfLine True if it's end of line\n     */\n    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {\n      // adjust lineIndex and charIndex\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      fabric.IText.prototype.insertNewlineStyleObject.apply(this, [lineIndex, charIndex, isEndOfLine]);\n    },\n\n    /**\n     * Shifts line styles up or down. This function is slightly different than the one in\n     * itext_behaviour as it takes into account the styleMap.\n     *\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} offset Can be -1 or +1\n     */\n    shiftLineStyles: function(lineIndex, offset) {\n      // shift all line styles by 1 upward\n      var clonedStyles = clone(this.styles),\n          map          = this._styleMap[lineIndex];\n\n      // adjust line index\n      lineIndex = map.line;\n\n      for (var line in this.styles) {\n        var numericLine = parseInt(line, 10);\n\n        if (numericLine > lineIndex) {\n          this.styles[numericLine + offset] = clonedStyles[numericLine];\n\n          if (!clonedStyles[numericLine - offset]) {\n            delete this.styles[numericLine];\n          }\n        }\n      }\n      //TODO: evaluate if delete old style lines with offset -1\n    },\n\n    /**\n     * Figure out programatically the text on previous actual line (actual = separated by \\n);\n     *\n     * @param {Number} lIndex\n     * @returns {String}\n     * @private\n     */\n    _getTextOnPreviousLine: function(lIndex) {\n      var textOnPreviousLine = this._textLines[lIndex - 1];\n\n      while (this._styleMap[lIndex - 2] && this._styleMap[lIndex - 2].line === this._styleMap[lIndex - 1].line) {\n        textOnPreviousLine = this._textLines[lIndex - 2] + textOnPreviousLine;\n\n        lIndex--;\n      }\n\n      return textOnPreviousLine;\n    },\n\n    /**\n     * Removes style object\n     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line\n     * @param {Number} [index] Optional index. When not given, current selectionStart is used.\n     */\n    removeStyleObject: function(isBeginningOfLine, index) {\n\n      var cursorLocation = this.get2DCursorLocation(index),\n          map            = this._styleMap[cursorLocation.lineIndex],\n          lineIndex      = map.line,\n          charIndex      = map.offset + cursorLocation.charIndex;\n\n      if (isBeginningOfLine) {\n        var textOnPreviousLine     = this._getTextOnPreviousLine(cursorLocation.lineIndex),\n            newCharIndexOnPrevLine = textOnPreviousLine ? textOnPreviousLine.length : 0;\n\n        if (!this.styles[lineIndex - 1]) {\n          this.styles[lineIndex - 1] = {};\n        }\n\n        for (charIndex in this.styles[lineIndex]) {\n          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]\n            = this.styles[lineIndex][charIndex];\n        }\n\n        this.shiftLineStyles(cursorLocation.lineIndex, -1);\n\n      }\n      else {\n        var currentLineStyles = this.styles[lineIndex];\n\n        if (currentLineStyles) {\n          delete currentLineStyles[charIndex];\n          //console.log('deleting', lineIndex, charIndex + offset);\n        }\n\n        var currentLineStylesCloned = clone(currentLineStyles);\n\n        // shift all styles by 1 backwards\n        for (var i in currentLineStylesCloned) {\n          var numericIndex = parseInt(i, 10);\n          if (numericIndex >= charIndex && numericIndex !== 0) {\n            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];\n            delete currentLineStyles[numericIndex];\n          }\n        }\n      }\n    }\n  });\n})();\n\n\n(function() {\n  var override = fabric.IText.prototype._getNewSelectionStartFromOffset;\n  /**\n   * Overrides the IText implementation and adjusts character index as there is not always a linebreak\n   *\n   * @param {Number} mouseOffset\n   * @param {Number} prevWidth\n   * @param {Number} width\n   * @param {Number} index\n   * @param {Number} jlen\n   * @returns {Number}\n   */\n  fabric.IText.prototype._getNewSelectionStartFromOffset = function(mouseOffset, prevWidth, width, index, jlen) {\n    index = override.call(this, mouseOffset, prevWidth, width, index, jlen);\n\n    // the index passed into the function is padded by the amount of lines from _textLines (to account for \\n)\n    // we need to remove this padding, and pad it by actual lines, and / or spaces that are meant to be there\n    var tmp     = 0,\n        removed = 0;\n\n    // account for removed characters\n    for (var i = 0; i < this._textLines.length; i++) {\n      tmp += this._textLines[i].length;\n\n      if (tmp + removed >= index) {\n        break;\n      }\n\n      if (this.text[tmp + removed] === '\\n' || this.text[tmp + removed] === ' ') {\n        removed++;\n      }\n    }\n\n    return index - i + removed;\n  };\n})();\n\n\n(function() {\n\n  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\n    return;\n  }\n\n  var DOMParser = require('xmldom').DOMParser,\n      URL = require('url'),\n      HTTP = require('http'),\n      HTTPS = require('https'),\n\n      Canvas = require('canvas'),\n      Image = require('canvas').Image;\n\n  /** @private */\n  function request(url, encoding, callback) {\n    var oURL = URL.parse(url);\n\n    // detect if http or https is used\n    if ( !oURL.port ) {\n      oURL.port = ( oURL.protocol.indexOf('https:') === 0 ) ? 443 : 80;\n    }\n\n    // assign request handler based on protocol\n    var reqHandler = (oURL.protocol.indexOf('https:') === 0 ) ? HTTPS : HTTP,\n        req = reqHandler.request({\n          hostname: oURL.hostname,\n          port: oURL.port,\n          path: oURL.path,\n          method: 'GET'\n        }, function(response) {\n          var body = '';\n          if (encoding) {\n            response.setEncoding(encoding);\n          }\n          response.on('end', function () {\n            callback(body);\n          });\n          response.on('data', function (chunk) {\n            if (response.statusCode === 200) {\n              body += chunk;\n            }\n          });\n        });\n\n    req.on('error', function(err) {\n      if (err.errno === process.ECONNREFUSED) {\n        fabric.log('ECONNREFUSED: connection refused to ' + oURL.hostname + ':' + oURL.port);\n      }\n      else {\n        fabric.log(err.message);\n      }\n      callback(null);\n    });\n\n    req.end();\n  }\n\n  /** @private */\n  function requestFs(path, callback) {\n    var fs = require('fs');\n    fs.readFile(path, function (err, data) {\n      if (err) {\n        fabric.log(err);\n        throw err;\n      }\n      else {\n        callback(data);\n      }\n    });\n  }\n\n  fabric.util.loadImage = function(url, callback, context) {\n    function createImageAndCallBack(data) {\n      if (data) {\n        img.src = new Buffer(data, 'binary');\n        // preserving original url, which seems to be lost in node-canvas\n        img._src = url;\n        callback && callback.call(context, img);\n      }\n      else {\n        img = null;\n        callback && callback.call(context, null, true);\n      }\n    }\n    var img = new Image();\n    if (url && (url instanceof Buffer || url.indexOf('data') === 0)) {\n      img.src = img._src = url;\n      callback && callback.call(context, img);\n    }\n    else if (url && url.indexOf('http') !== 0) {\n      requestFs(url, createImageAndCallBack);\n    }\n    else if (url) {\n      request(url, 'binary', createImageAndCallBack);\n    }\n    else {\n      callback && callback.call(context, url);\n    }\n  };\n\n  fabric.loadSVGFromURL = function(url, callback, reviver) {\n    url = url.replace(/^\\n\\s*/, '').replace(/\\?.*$/, '').trim();\n    if (url.indexOf('http') !== 0) {\n      requestFs(url, function(body) {\n        fabric.loadSVGFromString(body.toString(), callback, reviver);\n      });\n    }\n    else {\n      request(url, '', function(body) {\n        fabric.loadSVGFromString(body, callback, reviver);\n      });\n    }\n  };\n\n  fabric.loadSVGFromString = function(string, callback, reviver) {\n    var doc = new DOMParser().parseFromString(string);\n    fabric.parseSVGDocument(doc.documentElement, function(results, options) {\n      callback && callback(results, options);\n    }, reviver);\n  };\n\n  fabric.util.getScript = function(url, callback) {\n    request(url, '', function(body) {\n      eval(body);\n      callback && callback();\n    });\n  };\n\n  fabric.Image.fromObject = function(object, callback) {\n    fabric.util.loadImage(object.src, function(img) {\n      var oImg = new fabric.Image(img);\n\n      oImg._initConfig(object);\n      oImg._initFilters(object.filters, function(filters) {\n        oImg.filters = filters || [ ];\n        oImg._initFilters(object.resizeFilters, function(resizeFilters) {\n          oImg.resizeFilters = resizeFilters || [ ];\n          callback && callback(oImg);\n        });\n      });\n    });\n  };\n  /**\n   * Only available when running fabric on node.js\n   * @param {Number} width Canvas width\n   * @param {Number} height Canvas height\n   * @param {Object} [options] Options to pass to FabricCanvas.\n   * @param {Object} [nodeCanvasOptions] Options to pass to NodeCanvas.\n   * @return {Object} wrapped canvas instance\n   */\n  fabric.createCanvasForNode = function(width, height, options, nodeCanvasOptions) {\n    nodeCanvasOptions = nodeCanvasOptions || options;\n\n    var canvasEl = fabric.document.createElement('canvas'),\n        nodeCanvas = new Canvas(width || 600, height || 600, nodeCanvasOptions);\n\n    // jsdom doesn't create style on canvas element, so here be temp. workaround\n    canvasEl.style = { };\n\n    canvasEl.width = nodeCanvas.width;\n    canvasEl.height = nodeCanvas.height;\n\n    var FabricCanvas = fabric.Canvas || fabric.StaticCanvas,\n        fabricCanvas = new FabricCanvas(canvasEl, options);\n\n    fabricCanvas.contextContainer = nodeCanvas.getContext('2d');\n    fabricCanvas.nodeCanvas = nodeCanvas;\n    fabricCanvas.Font = Canvas.Font;\n\n    return fabricCanvas;\n  };\n\n  /** @ignore */\n  fabric.StaticCanvas.prototype.createPNGStream = function() {\n    return this.nodeCanvas.createPNGStream();\n  };\n\n  fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n    return this.nodeCanvas.createJPEGStream(opts);\n  };\n\n  var origSetWidth = fabric.StaticCanvas.prototype.setWidth;\n  fabric.StaticCanvas.prototype.setWidth = function(width, options) {\n    origSetWidth.call(this, width, options);\n    this.nodeCanvas.width = width;\n    return this;\n  };\n  if (fabric.Canvas) {\n    fabric.Canvas.prototype.setWidth = fabric.StaticCanvas.prototype.setWidth;\n  }\n\n  var origSetHeight = fabric.StaticCanvas.prototype.setHeight;\n  fabric.StaticCanvas.prototype.setHeight = function(height, options) {\n    origSetHeight.call(this, height, options);\n    this.nodeCanvas.height = height;\n    return this;\n  };\n  if (fabric.Canvas) {\n    fabric.Canvas.prototype.setHeight = fabric.StaticCanvas.prototype.setHeight;\n  }\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/fabric-webpack/dist/fabric.js\n// module id = 1828\n// module chunks = 2","var http = require('http');\n\nvar https = module.exports;\n\nfor (var key in http) {\n    if (http.hasOwnProperty(key)) https[key] = http[key];\n};\n\nhttps.request = function (params, cb) {\n    if (!params) params = {};\n    params.scheme = 'https';\n    params.protocol = 'https:';\n    return http.request.call(this, params, cb);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/https-browserify/index.js\n// module id = 1834\n// module chunks = 2","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/querystring/decode.js\n// module id = 1843\n// module chunks = 2","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/querystring/encode.js\n// module id = 1844\n// module chunks = 2","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/querystring/index.js\n// module id = 1845\n// module chunks = 2","var capability = require('./capability')\nvar inherits = require('inherits')\nvar response = require('./response')\nvar stream = require('readable-stream')\nvar toArrayBuffer = require('to-arraybuffer')\n\nvar IncomingMessage = response.IncomingMessage\nvar rStates = response.readyStates\n\nfunction decideMode (preferBinary, useFetch) {\n\tif (capability.fetch && useFetch) {\n\t\treturn 'fetch'\n\t} else if (capability.mozchunkedarraybuffer) {\n\t\treturn 'moz-chunked-arraybuffer'\n\t} else if (capability.msstream) {\n\t\treturn 'ms-stream'\n\t} else if (capability.arraybuffer && preferBinary) {\n\t\treturn 'arraybuffer'\n\t} else if (capability.vbArray && preferBinary) {\n\t\treturn 'text:vbarray'\n\t} else {\n\t\treturn 'text'\n\t}\n}\n\nvar ClientRequest = module.exports = function (opts) {\n\tvar self = this\n\tstream.Writable.call(self)\n\n\tself._opts = opts\n\tself._body = []\n\tself._headers = {}\n\tif (opts.auth)\n\t\tself.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))\n\tObject.keys(opts.headers).forEach(function (name) {\n\t\tself.setHeader(name, opts.headers[name])\n\t})\n\n\tvar preferBinary\n\tvar useFetch = true\n\tif (opts.mode === 'disable-fetch' || 'timeout' in opts) {\n\t\t// If the use of XHR should be preferred and includes preserving the 'content-type' header.\n\t\t// Force XHR to be used since the Fetch API does not yet support timeouts.\n\t\tuseFetch = false\n\t\tpreferBinary = true\n\t} else if (opts.mode === 'prefer-streaming') {\n\t\t// If streaming is a high priority but binary compatibility and\n\t\t// the accuracy of the 'content-type' header aren't\n\t\tpreferBinary = false\n\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t// If streaming is more important than preserving the 'content-type' header\n\t\tpreferBinary = !capability.overrideMimeType\n\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\tpreferBinary = true\n\t} else {\n\t\tthrow new Error('Invalid value for opts.mode')\n\t}\n\tself._mode = decideMode(preferBinary, useFetch)\n\n\tself.on('finish', function () {\n\t\tself._onFinish()\n\t})\n}\n\ninherits(ClientRequest, stream.Writable)\n\nClientRequest.prototype.setHeader = function (name, value) {\n\tvar self = this\n\tvar lowerName = name.toLowerCase()\n\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t// http-browserify did it, so I will too.\n\tif (unsafeHeaders.indexOf(lowerName) !== -1)\n\t\treturn\n\n\tself._headers[lowerName] = {\n\t\tname: name,\n\t\tvalue: value\n\t}\n}\n\nClientRequest.prototype.getHeader = function (name) {\n\tvar self = this\n\treturn self._headers[name.toLowerCase()].value\n}\n\nClientRequest.prototype.removeHeader = function (name) {\n\tvar self = this\n\tdelete self._headers[name.toLowerCase()]\n}\n\nClientRequest.prototype._onFinish = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\tvar opts = self._opts\n\n\tvar headersObj = self._headers\n\tvar body = null\n\tif (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH' || opts.method === 'MERGE') {\n\t\tif (capability.blobConstructor) {\n\t\t\tbody = new global.Blob(self._body.map(function (buffer) {\n\t\t\t\treturn toArrayBuffer(buffer)\n\t\t\t}), {\n\t\t\t\ttype: (headersObj['content-type'] || {}).value || ''\n\t\t\t})\n\t\t} else {\n\t\t\t// get utf8 string\n\t\t\tbody = Buffer.concat(self._body).toString()\n\t\t}\n\t}\n\n\tif (self._mode === 'fetch') {\n\t\tvar headers = Object.keys(headersObj).map(function (name) {\n\t\t\treturn [headersObj[name].name, headersObj[name].value]\n\t\t})\n\n\t\tglobal.fetch(self._opts.url, {\n\t\t\tmethod: self._opts.method,\n\t\t\theaders: headers,\n\t\t\tbody: body || undefined,\n\t\t\tmode: 'cors',\n\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin'\n\t\t}).then(function (response) {\n\t\t\tself._fetchResponse = response\n\t\t\tself._connect()\n\t\t}, function (reason) {\n\t\t\tself.emit('error', reason)\n\t\t})\n\t} else {\n\t\tvar xhr = self._xhr = new global.XMLHttpRequest()\n\t\ttry {\n\t\t\txhr.open(self._opts.method, self._opts.url, true)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// Can't set responseType on really old browsers\n\t\tif ('responseType' in xhr)\n\t\t\txhr.responseType = self._mode.split(':')[0]\n\n\t\tif ('withCredentials' in xhr)\n\t\t\txhr.withCredentials = !!opts.withCredentials\n\n\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr)\n\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined')\n\n\t\tif ('timeout' in opts) {\n\t\t\txhr.timeout = opts.timeout\n\t\t\txhr.ontimeout = function () {\n\t\t\t\tself.emit('timeout')\n\t\t\t}\n\t\t}\n\n\t\tObject.keys(headersObj).forEach(function (name) {\n\t\t\txhr.setRequestHeader(headersObj[name].name, headersObj[name].value)\n\t\t})\n\n\t\tself._response = null\n\t\txhr.onreadystatechange = function () {\n\t\t\tswitch (xhr.readyState) {\n\t\t\t\tcase rStates.LOADING:\n\t\t\t\tcase rStates.DONE:\n\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\txhr.onprogress = function () {\n\t\t\t\tself._onXHRProgress()\n\t\t\t}\n\t\t}\n\n\t\txhr.onerror = function () {\n\t\t\tif (self._destroyed)\n\t\t\t\treturn\n\t\t\tself.emit('error', new Error('XHR error'))\n\t\t}\n\n\t\ttry {\n\t\t\txhr.send(body)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t}\n}\n\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\nfunction statusValid (xhr) {\n\ttry {\n\t\tvar status = xhr.status\n\t\treturn (status !== null && status !== 0)\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tif (!statusValid(self._xhr) || self._destroyed)\n\t\treturn\n\n\tif (!self._response)\n\t\tself._connect()\n\n\tself._response._onXHRProgress()\n}\n\nClientRequest.prototype._connect = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\n\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)\n\tself._response.on('error', function(err) {\n\t\tself.emit('error', err)\n\t})\n\n\tself.emit('response', self._response)\n}\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n\tvar self = this\n\n\tself._body.push(chunk)\n\tcb()\n}\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n\tvar self = this\n\tself._destroyed = true\n\tif (self._response)\n\t\tself._response._destroyed = true\n\tif (self._xhr)\n\t\tself._xhr.abort()\n\t// Currently, there isn't a way to truly abort a fetch.\n\t// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27\n}\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n\tvar self = this\n\tif (typeof data === 'function') {\n\t\tcb = data\n\t\tdata = undefined\n\t}\n\n\tstream.Writable.prototype.end.call(self, data, encoding, cb)\n}\n\nClientRequest.prototype.flushHeaders = function () {}\nClientRequest.prototype.setTimeout = function () {}\nClientRequest.prototype.setNoDelay = function () {}\nClientRequest.prototype.setSocketKeepAlive = function () {}\n\n// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\nvar unsafeHeaders = [\n\t'accept-charset',\n\t'accept-encoding',\n\t'access-control-request-headers',\n\t'access-control-request-method',\n\t'connection',\n\t'content-length',\n\t'cookie',\n\t'cookie2',\n\t'date',\n\t'dnt',\n\t'expect',\n\t'host',\n\t'keep-alive',\n\t'origin',\n\t'referer',\n\t'te',\n\t'trailer',\n\t'transfer-encoding',\n\t'upgrade',\n\t'user-agent',\n\t'via'\n]\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/stream-http/lib/request.js\n// module id = 1913\n// module chunks = 2","var capability = require('./capability')\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\nvar rStates = exports.readyStates = {\n\tUNSENT: 0,\n\tOPENED: 1,\n\tHEADERS_RECEIVED: 2,\n\tLOADING: 3,\n\tDONE: 4\n}\n\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {\n\tvar self = this\n\tstream.Readable.call(self)\n\n\tself._mode = mode\n\tself.headers = {}\n\tself.rawHeaders = []\n\tself.trailers = {}\n\tself.rawTrailers = []\n\n\t// Fake the 'close' event, but only once 'end' fires\n\tself.on('end', function () {\n\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\tprocess.nextTick(function () {\n\t\t\tself.emit('close')\n\t\t})\n\t})\n\n\tif (mode === 'fetch') {\n\t\tself._fetchResponse = response\n\n\t\tself.url = response.url\n\t\tself.statusCode = response.status\n\t\tself.statusMessage = response.statusText\n\t\t\n\t\tresponse.headers.forEach(function(header, key){\n\t\t\tself.headers[key.toLowerCase()] = header\n\t\t\tself.rawHeaders.push(key, header)\n\t\t})\n\n\n\t\t// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed\n\t\tvar reader = response.body.getReader()\n\t\tfunction read () {\n\t\t\treader.read().then(function (result) {\n\t\t\t\tif (self._destroyed)\n\t\t\t\t\treturn\n\t\t\t\tif (result.done) {\n\t\t\t\t\tself.push(null)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tself.push(new Buffer(result.value))\n\t\t\t\tread()\n\t\t\t}).catch(function(err) {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t}\n\t\tread()\n\n\t} else {\n\t\tself._xhr = xhr\n\t\tself._pos = 0\n\n\t\tself.url = xhr.responseURL\n\t\tself.statusCode = xhr.status\n\t\tself.statusMessage = xhr.statusText\n\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/)\n\t\theaders.forEach(function (header) {\n\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/)\n\t\t\tif (matches) {\n\t\t\t\tvar key = matches[1].toLowerCase()\n\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\tself.headers[key] = []\n\t\t\t\t\t}\n\t\t\t\t\tself.headers[key].push(matches[2])\n\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\tself.headers[key] += ', ' + matches[2]\n\t\t\t\t} else {\n\t\t\t\t\tself.headers[key] = matches[2]\n\t\t\t\t}\n\t\t\t\tself.rawHeaders.push(matches[1], matches[2])\n\t\t\t}\n\t\t})\n\n\t\tself._charset = 'x-user-defined'\n\t\tif (!capability.overrideMimeType) {\n\t\t\tvar mimeType = self.rawHeaders['mime-type']\n\t\t\tif (mimeType) {\n\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/)\n\t\t\t\tif (charsetMatch) {\n\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase()\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!self._charset)\n\t\t\t\tself._charset = 'utf-8' // best guess\n\t\t}\n\t}\n}\n\ninherits(IncomingMessage, stream.Readable)\n\nIncomingMessage.prototype._read = function () {}\n\nIncomingMessage.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tvar xhr = self._xhr\n\n\tvar response = null\n\tswitch (self._mode) {\n\t\tcase 'text:vbarray': // For IE9\n\t\t\tif (xhr.readyState !== rStates.DONE)\n\t\t\t\tbreak\n\t\t\ttry {\n\t\t\t\t// This fails in IE8\n\t\t\t\tresponse = new global.VBArray(xhr.responseBody).toArray()\n\t\t\t} catch (e) {}\n\t\t\tif (response !== null) {\n\t\t\t\tself.push(new Buffer(response))\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// Falls through in IE8\t\n\t\tcase 'text':\n\t\t\ttry { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n\t\t\t\tresponse = xhr.responseText\n\t\t\t} catch (e) {\n\t\t\t\tself._mode = 'text:vbarray'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (response.length > self._pos) {\n\t\t\t\tvar newData = response.substr(self._pos)\n\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\tvar buffer = new Buffer(newData.length)\n\t\t\t\t\tfor (var i = 0; i < newData.length; i++)\n\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff\n\n\t\t\t\t\tself.push(buffer)\n\t\t\t\t} else {\n\t\t\t\t\tself.push(newData, self._charset)\n\t\t\t\t}\n\t\t\t\tself._pos = response.length\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'arraybuffer':\n\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response)\n\t\t\t\tbreak\n\t\t\tresponse = xhr.response\n\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'moz-chunked-arraybuffer': // take whole\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING || !response)\n\t\t\t\tbreak\n\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'ms-stream':\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING)\n\t\t\t\tbreak\n\t\t\tvar reader = new global.MSStreamReader()\n\t\t\treader.onprogress = function () {\n\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\tself.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))\n\t\t\t\t\tself._pos = reader.result.byteLength\n\t\t\t\t}\n\t\t\t}\n\t\t\treader.onload = function () {\n\t\t\t\tself.push(null)\n\t\t\t}\n\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\treader.readAsArrayBuffer(response)\n\t\t\tbreak\n\t}\n\n\t// The ms-stream case handles end separately in reader.onload()\n\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\tself.push(null)\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/stream-http/lib/response.js\n// module id = 1914\n// module chunks = 2","var Buffer = require('buffer').Buffer\n\nmodule.exports = function (buf) {\n\t// If the buffer is backed by a Uint8Array, a faster version will work\n\tif (buf instanceof Uint8Array) {\n\t\t// If the buffer isn't a subarray, return the underlying ArrayBuffer\n\t\tif (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n\t\t\treturn buf.buffer\n\t\t} else if (typeof buf.buffer.slice === 'function') {\n\t\t\t// Otherwise we need to get a proper copy\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)\n\t\t}\n\t}\n\n\tif (Buffer.isBuffer(buf)) {\n\t\t// This is the slow version that will work with any Buffer\n\t\t// implementation (even in old browsers)\n\t\tvar arrayCopy = new Uint8Array(buf.length)\n\t\tvar len = buf.length\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tarrayCopy[i] = buf[i]\n\t\t}\n\t\treturn arrayCopy.buffer\n\t} else {\n\t\tthrow new Error('Argument must be a Buffer')\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/to-arraybuffer/index.js\n// module id = 1921\n// module chunks = 2","/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/url/~/punycode/punycode.js\n// module id = 1923\n// module chunks = 2","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/url/util.js\n// module id = 1924\n// module chunks = 2","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/xtend/immutable.js\n// module id = 1928\n// module chunks = 2"],"sourceRoot":""}