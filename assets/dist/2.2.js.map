{"version":3,"sources":["webpack:///2.2.js","webpack:///(webpack)/~/node-libs-browser/~/http-browserify/index.js","webpack:///(webpack)/~/node-libs-browser/~/url/url.js","webpack:///./~/fabric-webpack/dist/fabric.js","webpack:///(webpack)/~/node-libs-browser/~/http-browserify/lib/request.js","webpack:///(webpack)/~/node-libs-browser/~/http-browserify/lib/response.js","webpack:///(webpack)/~/node-libs-browser/~/http-browserify/~/Base64/base64.js","webpack:///(webpack)/~/node-libs-browser/~/https-browserify/index.js","webpack:///(webpack)/~/node-libs-browser/~/url/~/punycode/punycode.js","webpack:///(webpack)/~/node-libs-browser/~/url/~/querystring/decode.js","webpack:///(webpack)/~/node-libs-browser/~/url/~/querystring/encode.js","webpack:///(webpack)/~/node-libs-browser/~/url/~/querystring/index.js"],"names":["webpackJsonp",920,965,"module","exports","__webpack_require__","http","Request","EventEmitter","url","request","params","cb","parse","host","port","parseInt","window","location","hostname","protocol","scheme","test","split","req","xhrHttp","on","get","method","end","Agent","defaultMaxSockets","Error","XMLHttpRequest","ActiveXObject","axs","i","length","ax","ax_","e","STATUS_CODES",100,101,102,200,201,202,203,204,205,206,207,300,301,302,303,304,305,307,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,422,423,424,425,426,428,429,431,500,501,502,503,504,505,506,507,509,510,511,968,"Url","this","slashes","auth","hash","search","query","pathname","path","href","urlParse","parseQueryString","slashesDenoteHost","isObject","u","urlFormat","obj","isString","format","prototype","call","urlResolve","source","relative","resolve","urlResolveObject","resolveObject","arg","isNull","isNullOrUndefined","punycode","protocolPattern","portPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","javascript","javascript:","hostlessProtocol","slashedProtocol","https","ftp","gopher","file","http:","https:","ftp:","gopher:","file:","querystring","TypeError","rest","trim","proto","exec","lowerProto","toLowerCase","substr","match","hostEnd","hec","indexOf","atSign","lastIndexOf","slice","decodeURIComponent","parseHost","ipv6Hostname","hostparts","l","part","newpart","j","k","charCodeAt","validParts","notHost","bit","push","unshift","join","domainArray","newOut","s","encode","p","h","ae","esc","encodeURIComponent","escape","qm","replace","Object","keys","stringify","charAt","rel","result","forEach","relPath","shift","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","authInHost","last","hasTrailingSlash","up","splice","isAbsolute",984,"Buffer","process","fabric","version","document","jsdom","createWindow","parentWindow","isTouchSupported","documentElement","isLikelyNode","SHARED_ATTRIBUTES","DPI","reNum","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","_removeEventListener","eventName","handler","__eventListeners","util","removeFromArray","observe","arguments","prop","stopObserving","fire","options","listenersForEvent","len","Observable","off","trigger","Collection","add","_objects","apply","_onObjectAdded","renderOnAddRemove","renderAll","insertAt","object","index","nonSplicing","objects","getObjects","remove","_onObjectRemoved","forEachObject","callback","context","type","filter","o","item","isEmpty","size","contains","complexity","reduce","memo","current","global","sqrt","Math","atan2","PiBy180","PI","array","value","idx","getRandomInt","min","max","floor","random","degreesToRadians","degrees","radiansToDegrees","radians","rotatePoint","point","origin","subtractEquals","sin","cos","rx","x","y","ry","Point","addEquals","transformPoint","t","ignoreOffset","invertTransform","a","r","toFixed","number","fractionDigits","parseFloat","Number","parseUnit","fontSize","unit","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","toUpperCase","resolveNamespace","parts","loadImage","crossOrigin","img","createImage","onload","onerror","log","src","enlivenObjects","reviver","onLoaded","numLoadedObjects","numTotalObjects","enlivenedObjects","klass","async","fromObject","error","groupSVGElements","elements","PathGroup","setSourcePath","populateWithProperties","destination","properties","toString","drawDashedLine","ctx","x2","y2","da","dx","dy","rot","dc","di","draw","save","translate","moveTo","rotate","restore","createCanvasElement","canvasEl","createElement","getContext","G_vmlCanvasManager","initElement","createAccessors","stateProperties","propName","capitalizedPropName","setterName","getterName","property","Function","clipContext","receiver","beginPath","clipTo","clip","multiplyTransformMatrices","b","getFunctionBody","fn","String","isTransparent","tolerance","_isTransparent","imageData","getImageData","data","temp","arcToSegments","toX","toY","large","sweep","rotateX","argsString","_join","arcToSegmentsCache","th","sinTh","cosTh","fromX","fromY","abs","px","py","rx2","ry2","py2","px2","pl","root","cx","cy","cx1","cy1","mTheta","calcVectorAngle","dtheta","segments","ceil","mDelta","mT","th3","segmentToBezier","th2","argsString2","segmentToBezierCache","costh2","sinth2","costh3","sinth3","cp1X","cp1Y","cp2X","cp2Y","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","x0","y0","x1","y1","x3","y3","boundsOfCurveCache","c","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","Array","drawArc","fx","fy","coords","tx","ty","segs","segsNorm","bezierCurveTo","getBoundsOfArc","bound","boundCopy","invoke","args","byProperty","find","value1","value2","condition","searchElement","n","POSITIVE_INFINITY","NEGATIVE_INFINITY","map","every","some","val","rv","extend","clone","character","capitalize","firstLetterOnly","escapeXml","Dummy","bind","thisArg","_this","Subclass","callSuper","methodName","constructor","superclass","createClass","initialize","parent","subclasses","addMethods","emptyFunction","IS_DONTENUM_BUGGY","returnValue","valueOf","areHostMethods","methodNames","createListener","uid","wrappedHandler","createWrappedHandler","getElement","event","createDispatcher","handlers","handlersForEvent","getPointer","element","target","srcElement","unknown","scroll","getScrollLeftTop","pointerX","left","pointerY","top","_getPointer","pageProp","clientProp","touchProp","setElement","getUniqueId","__uniqueID","addListener","removeListener","shouldUseAddListenerRemoveListener","shouldUseAttachEventDetachEvent","listeners","addEventListener","removeEventListener","listener","attachEvent","detachEvent","existingHandler","clientX","clientY","setStyle","styles","elementStyle","style","cssText","setOpacity","normalizedProperty","styleFloat","parseEl","supportsOpacity","opacity","supportsFilters","reOpacity","es","currentStyle","hasLayout","zoom","getById","id","getElementById","makeElement","tagName","attributes","el","className","htmlFor","setAttribute","addClass","wrapElement","wrapper","parentNode","replaceChild","appendChild","docElement","body","scrollLeft","scrollTop","nodeType","getElementStyle","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offset","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","attr","getBoundingClientRect","clientLeft","clientTop","sliceCanConvertNodelists","_slice","toArray","arrayLike","childNodes","err","arr","defaultView","getComputedStyle","undefined","makeElementUnselectable","onselectstart","selectProp","unselectable","makeElementSelectable","getScript","headEl","getElementsByTagName","scriptEl","loading","onreadystatechange","readyState","addParamToUrl","param","emptyFn","onComplete","xhr","makeXHR","parameters","open","setRequestHeader","send","factories","warn","console","animate","requestAnimFrame","timestamp","time","start","Date","duration","finish","onChange","abort","easing","d","startValue","endValue","byValue","onStart","tick","ticktime","currentTime","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","normalize","asin","elastic","opts","pow","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","ease","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","normalizeAttr","attributesMap","normalizeValue","parentAttributes","parsed","isArray","transformMatrix","parseTransformAttribute","visible","isNaN","_setStrokeFillOpacity","colorAttributes","color","Color","setAlpha","getAlpha","toRgba","parseStyleString","oStyle","chunk","pair","parseStyleObject","getGlobalStylesForElement","svgUid","rule","cssRules","elementMatchesRule","selectors","firstMatching","parentMatching","selectorMatches","doesSomeParentMatch","selector","matcher","nodeName","classNames","getAttribute","RegExp","elementById","node","idAttr","nodelist","parseUseDirectives","attrs","xlink","el2","cloneNode","currentTrans","oldLength","applyViewboxTransform","el3","nodeValue","firstChild","removeAttribute","viewBoxWidth","viewBoxHeight","matrix","viewBoxAttr","scaleX","scaleY","minX","minY","widthAttr","heightAttr","missingViewBox","reViewBoxTagNames","reViewBoxAttrValue","missingDimAttr","toBeParsed","parsedDim","width","height","_enlivenCachedObject","cachedObject","_createSVGPattern","markup","canvas","toSVG","reAllowedSVGTagNames","reNotAllowedAncestors","reAllowedParents","display","visibility","transform","fill-opacity","fill-rule","font-family","font-size","font-style","font-weight","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-decoration","text-anchor","stroke","fill","gradientDefs","rotateMatrix","angle","scaleMatrix","multiplierX","multiplierY","skewXMatrix","tan","skewYMatrix","translateMatrix","iMatrix","commaWsp","skewX","skewY","scale","transforms","transformList","reTransformList","reTransform","attributeValue","matrices","m","operation","combinedMatrix","parseSVGDocument","hasAncestorWithNodeName","startTime","__uid","descendants","selectNodes","getGradientDefs","getCSSRules","parseElements","instances","documentParsingTime","svgCache","has","name","set","reFontDeclaration","parseFontDeclaration","fontStyle","fontWeight","lineHeight","fontFamily","linearGradientEls","radialGradientEls","elList","idsToXlinkMap","parseAttributes","ownAttributes","parseStyleAttribute","font","ElementsParser","parsePointsAttribute","points","parsedPoints","rules","allRules","styleContents","textContent","ruleObj","declaration","propertyValuePairs","_rule","loadSVGFromURL","xml","responseXML","responseText","loadXML","results","hasUrl","enlivedRecord","loadSVGFromString","DOMParser","parser","parseFromString","createSVGFontFacesMarkup","createSVGRefElementsMarkup","numElements","createObjects","createObject","fromElement","_createObject","checkIfDone","createCallback","resolveGradient","instanceFillValue","gradientId","Gradient","that","scalarAdd","scalar","scalarAddEquals","subtract","scalarSubtract","scalarSubtractEquals","multiply","multiplyEquals","divide","divideEquals","eq","lt","lte","gt","gte","lerp","distanceFrom","midPointFrom","setXY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","q","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","round","getSource","_source","toRgb","toHsl","hsl","toHsla","toHex","alpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherAlpha","otherSource","reRGBa","reHSLa","reHex","aqua","black","blue","fuchsia","gray","green","lime","maroon","navy","olive","orange","purple","red","silver","teal","white","yellow","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","substring","oColor","getColorStop","colorAlpha","keyValuePairs","key","getLinearCoords","getRadialCoords","_convertPercentUnitsToValues","gradientUnits","propValue","addFactor","multFactor","ellipseMatrix","scaleFactor","offsetX","offsetY","colorStops","gradientTransform","addColorStop","colorStop","position","toObject","commonAttributes","sort","group","toLive","gradient","createLinearGradient","createRadialGradient","instance","colorStopEls","forObject","Pattern","repeat","toDataURL","patternSource","patternWidth","getWidth","patternHeight","getHeight","patternOffsetX","patternOffsetY","patternImgSrc","complete","naturalWidth","naturalHeight","createPattern","Shadow","blur","affectStroke","includeDefaultValues","_parseShadow","shadow","shadowStr","offsetsAndBlur","reOffsetsAndBlur","fBoxX","fBoxY","StaticCanvas","CANVAS_INIT_ERROR","_initStatic","activeInstance","backgroundColor","backgroundImage","overlayColor","overlayImage","stateful","controlsAboveOverlay","allowTouchScrolling","imageSmoothingEnabled","preserveObjectStacking","viewportTransform","onBeforeScaleRotate","enableRetinaScaling","_createLowerCanvas","_initOptions","_setImageSmoothing","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setBackgroundColor","setOverlayColor","calcOffset","lowerCanvasEl","contextContainer","_offset","image","__setBgOverlayImage","__setBgOverlayColor","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","Image","setOptions","_createCanvasElement","_initCanvasElement","_applyCanvasStyle","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","backstoreOnly","_setCssDimension","upperCanvasEl","cacheCanvasEl","wrapperEl","getZoom","setViewportTransform","vpt","activeGroup","getActiveGroup","setCoords","zoomToPoint","before","after","setZoom","absolutePan","relativePan","getActiveObject","_draw","v","_shouldRenderObject","render","_renderControls","setupState","_set","_discardActiveObject","clearContext","clearRect","clear","discardActiveGroup","discardActiveObject","contextTop","allOnTop","canvasToDrawOn","selection","_groupSelector","_renderBackground","_renderObjects","_renderActiveGroup","_renderOverlay","drawControls","sortedObjects","reverse","fillStyle","fillRect","renderTop","_drawSelection","getCenter","centerObjectH","_centerObject","getCenterPoint","centerObjectV","centerObject","center","setPositionByOrigin","toDatalessJSON","propertiesToInclude","toDatalessObject","_toObjectMethod","_toObjects","__serializeBgOverlay","_toObject","originalValue","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","layoutProps","originalValues","realizeTransform","background","overlay","svgViewportTransformation","_setSVGPreamble","_setSVGHeader","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","sendToBack","bringToFront","sendBackwards","intersecting","newIdx","_findNewLowerIndex","isIntersecting","intersectsWithObject","isContainedWithinObject","bringForward","_findNewUpperIndex","dispose","removeListeners","DataURLExporter","EMPTY_JSON","supports","setLineDash","toJSON","BaseBrush","strokeLineCap","strokeLineJoin","strokeDashArray","setShadow","_setBrushStyles","strokeStyle","lineWidth","lineCap","lineJoin","_setShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","_resetShadow","PencilBrush","_points","onMouseDown","pointer","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","p1","p2","midPoint","quadraticCurveTo","lineTo","convertPointsToSVGPath","createPath","pathData","Path","strokeWidth","originX","originY","closePath","CircleBrush","drawDot","addPoint","arc","radius","originalRenderOnAddRemove","circles","circle","Circle","Group","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","sprayChunkPoints","globalAlpha","PatternBrush","getPatternSrc","dotDistance","patternCanvas","patternCtx","getPatternSrcFunction","getPattern","STROKE_OFFSET","Canvas","_initInteractive","_createCacheCanvas","uniScaleTransform","centeredScaling","centeredRotation","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","hoverCursor","moveCursor","defaultCursor","freeDrawingCursor","rotationCursor","containerClass","perPixelTargetFind","targetFindTolerance","skipTargetFind","isDrawingMode","_currentTransform","_initWrapperElement","_createUpperCanvas","_initEventListeners","freeDrawingBrush","_resetCurrentTransform","original","_shouldCenterTransform","action","_setOriginToCenter","mouseXSign","mouseYSign","containsPoint","xy","_normalizePointer","_findTargetCorner","isObjectInGroup","isTargetTransparent","hasBorders","transparentCorners","contextCache","_shouldClearSelection","activeObject","shiftKey","evented","selectable","centerTransform","altKey","_getOriginFromCorner","corner","_getActionFromCorner","_setupCurrentTransform","ex","ey","theta","_translateObject","_scaleObject","by","lockScalingX","lockScalingY","lockScalingFlip","constraintPosition","translateToOriginPoint","localMouse","toLocalPoint","_setLocalMouse","_setObjectScale","forbidScalingX","forbidScalingY","dim","_getNonTransformedDimensions","newScaleX","newScaleY","_scaleObjectEqually","_flipObject","dist","lastDist","padding","_rotateObject","lastAngle","curAngle","setCursor","cursor","_resetObjectTransform","setAngle","groupSelector","aleft","atop","strokeRect","_isLastRenderedObject","lastRenderedObjectWithControlsAboveOverlay","findTarget","skipGroup","_searchPossibleTargets","_fireOverOutEvents","_hoveredTarget","_checkTarget","isEditing","relatedTarget","ignoreZoom","cssScale","boundsWidth","boundsHeight","bottom","right","lowerCanvasClass","_copyCanvasStyle","class","fromEl","toEl","getSelectionContext","getSelectionElement","_setActiveObject","_activeObject","setActiveObject","_setActiveGroup","_activeGroup","setActiveGroup","_discardActiveGroup","destroy","deactivateAll","allObjects","deactivateAllWithDispatch","_drawGroupControls","_drawObjectsControls","active","_setCursorFromEvent","Element","cursorOffset","tr","mr","br","mb","bl","ml","tl","cursorMap","_bindEvents","_onResize","_onMouseDown","_onMouseMove","_onMouseWheel","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","self","__onTransformGesture","__onDrag","__onMouseWheel","__onOrientationChange","__onShake","__onLongPress","__onMouseDown","__onMouseUp","preventDefault","__onMouseMove","_shouldRender","isMoving","_previousPointer","_isCurrentlyDrawing","_onMouseUpInDrawingMode","_finalizeCurrentTransform","shouldRender","_maybeGroupObjects","_handleCursorAndEvent","_scaling","hasStateChanged","_restoreOriginXY","_previousOriginX","_previousOriginY","originPoint","_onMouseDownInDrawingMode","ivt","_onMouseMoveInDrawingMode","isLeftClick","which","button","shouldGroup","_shouldGroup","_clearSelection","_handleGrouping","_beforeTransform","saveState","_setCenterToOrigin","touches","_transformObject","reset","_beforeScaleTransform","_performTransformAction","_fire","_onScale","currentAction","_setCornerCursor","_getRotatedCornerCursor","hasRotatingPoint","getAngle","isType","_updateActiveGroup","_createActiveGroup","saveCoords","removeWithUpdate","addWithUpdate","_createGroup","isActiveLower","groupObjects","_groupSelectedObjects","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","isClick","intersectsWithRect","isContainedWithinRect","setObjectsCoords","quality","multiplier","cropping","__toDataURLWithMultiplier","__toDataURL","croppedCanvasEl","__getCroppedCanvas","croppedCtx","shouldCrop","drawImage","origWidth","origHeight","scaledWidth","scaledHeight","_tempRemoveBordersControlsFromGroup","_restoreBordersControlsOnGroup","toDataURLWithMultiplier","origHasControls","hasControls","origBorderColor","borderColor","hideControls","origHideControls","loadFromDatalessJSON","json","loadFromJSON","serialized","JSON","_enlivenObjects","_setBgOverlay","loaded","cbIfLoaded","__setBgOverlay","_toDataURL","_toDataURLWithMultiplier","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","supportsLineDash","flipX","flipY","cornerSize","cornerColor","fillRule","globalCompositeOperation","strokeMiterLimit","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","rotatingPointOffset","lockMovementX","lockMovementY","lockRotation","lockUniScaling","_initGradient","_initPattern","_initClipping","functionBody","fromLeft","_getLeftTopCoords","NUM_FRACTION_DIGITS","_removeDefaultValues","_setObject","shouldConstrainValue","_constrainScale","setOnGroup","toggle","sourcePath","getViewportTransform","noTransform","_setupCompositeOperation","_setStrokeStyles","_setFillStyles","_setOpacity","miterLimit","drawBorders","multX","multY","_removeShadow","_renderFill","_renderStroke","_stroke","_renderDashedStroke","cloneAsImage","dataUrl","boundingRect","getBoundingRect","origParams","getLeft","getTop","originalCanvas","setGradient","setPatternFill","setColor","shouldCenterOrigin","_resetOrigin","centerH","centerV","getLocalPointer","pClicked","objectLeftTop","originXOffset","originYOffset","translateToGivenOrigin","fromOriginX","fromOriginY","toOriginX","toOriginY","_getTransformedDimensions","translateToCenterPoint","leftTop","getPointByOrigin","pos","adjustPosition","to","hypotFull","xFull","yFull","_originalOriginX","_originalOriginY","oCoords","pointTL","pointBR","intersection","other","getCoords","thisCoords","otherCoords","point1","point2","lines","_getImageLines","xPoints","_findCrossPoints","topline","rightline","bottomline","leftline","xi","yi","iLine","xcount","lineKey","getBoundingRectWidth","getBoundingRectHeight","xCoords","maxX","yCoords","maxY","scaleToWidth","boundingRectFactor","scaleToHeight","_calculateCurrentDimensions","currentWidth","currentHeight","_angle","atan","_hypotenuse","mtr","_setCornerCoords","_calcDimensionsTransformMatrix","getSvgStyles","getSvgTransform","translatePart","anglePart","scalePart","addTranslateX","flipXPart","addTranslateY","flipYPart","getSvgTransformMatrix","_createBaseSVGMarkup","originalState","isVML","_controlsVisibility","isControlVisible","__corner","newTheta","cornerHypotenuse","cosHalfOffset","sinHalfOffset","w","capped","vLine","hLine","sLine","strokeW","strokeH","shouldTransform","wh","rotateHeight","scaleOffset","_drawControl","control","controlName","_getControlsVisibility","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","skipCallbacks","propsToAnimate","_animate","propPair","currentValue","from","makeEdgeToOriginGetter","propertyNames","originValues","axis1","axis2","dimension","nearest","farthest","coordProps","Line","_setWidthHeight","_getLeftToOriginX","_getTopToOriginY","cp","calcLinePoints","origStrokeStyle","xMult","yMult","ATTRIBUTE_NAMES","parsedAttributes","isValidRadius","pi","startAngle","endAngle","setRadius","startX","startY","endX","endY","largeFlag","getRadiusX","getRadiusY","Triangle","widthBy2","heightBy2","piBy2","Ellipse","getRx","getRy","ellipse","_initRxRy","isRounded","Polyline","Polygon","_calcDimensions","_applyPointOffset","commonRender","_toString","commandLengths","repeatedCommands","M","fromArray","_parsePath","_setPositionDimensions","calcDim","_parseDimensions","pathOffset","tempX","tempY","previous","subpathStartX","subpathStartY","controlX","controlY","chunks","addTransform","currentPath","coordsStr","coordsParsed","re","command","commandLength","repeatedCommand","klen","aX","aY","deltaX","deltaY","pathUrl","parentToObject","paths","parseDimensionsFromPaths","xC","yC","isSameColor","firstPathFill","total","pathGroup","_lockProperties","isAlreadyGrouped","_updateObjectsCoords","_calcBounds","skipCoordsChange","_updateObjectCoords","__origHasControls","objectLeft","objectTop","originalLeft","originalTop","_restoreObjectsState","_setObjectActive","_moveFlippedObject","delegatedProperties","textDecoration","textAlign","_renderObject","originalHasRotatingPoint","_restoreObjectState","_setObjectPosition","oldOriginX","oldOriginY","_toggleFlipping","newOrigin","rotated","_getRotatedLeftTop","groupAngle","_originalLeft","_originalTop","hasMoved","onlyWidthHeight","props","iLen","jLen","_getBounds","minXY","maxXY","alignX","alignY","meetOrSlice","_lastScaleX","_lastScaleY","filters","resizeFilters","_initElement","_element","_originalElement","_initConfig","applyFilters","setCrossOrigin","getOriginalSize","filterObj","_src","preserveAspectRatio","getSvgSrc","origFill","getSrc","setSrc","imgElement","forResizing","imgEl","replacement","applyTo","toBuffer","pngCompression","_filteredEl","elementToDraw","imageMargins","_findMargins","_needsResize","marginX","marginY","scales","_resetWidthHeight","CSS_CANVAS","_initFilters","fromURL","imgOptions","aspectRatioAttrs","align","_getAngleValueForStraighten","straighten","fxStraighten","straightenObject","fxStraightenObject","BaseFilter","Brightness","brightness","putImageData","Convolute","opaque","tmpCtx","_createImageData","createImageData","weights","pixels","side","halfSide","sw","sh","output","dst","alphaFac","sy","sx","dstOff","scy","scx","srcOff","wt","GradientTransparency","Grayscale","Invert","Mask","mask","channel","maskEl","maskCanvasEl","maskImageData","maskData","Noise","noise","rand","Pixelate","blocksize","_i","_ilen","_j","_jlen","RemoveWhite","distance","limit","Sepia","avg","Sepia2","Tint","tintR","tintG","tintB","alpha1","Multiply","Blend","mode","tg","_r","_g","_b","isImage","_el","tmpCanvas","context2","Resize","resizeType","lanczosLobes","rcpScaleX","rcpScaleY","oW","oH","dW","dH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","newWidth","newHeight","multW","multH","signW","signH","doneW","doneH","stepW","stepH","lanczosCreate","lobes","xx","weight","fX","fY","ratioX","icenter","ratioY","range2X","cacheLanc","range2Y","lanczos","rcpRatioX","rcpRatioY","srcData","destData","destImg","srcImg","w2","h2","xDiff","yDiff","chnl","origPix","w4","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","centerY","yy","centerX","w0","_dimensionAffectingProps","text","_reNewline","_reSpacesAndTabs","textBackgroundColor","_fontSizeFraction","_fontSizeMult","__skipDimension","_initDimensions","_setTextStyles","_textLines","_splitTextIntoLines","_clearCache","_cacheLinesWidth","_getTextWidth","_getTextHeight","_renderTextBackground","_renderText","_renderTextDecoration","_translateForTextAlign","_renderTextFill","_renderTextStroke","back","sign","textBaseline","skipTextAlign","_getFontDeclaration","_getHeightOfLine","maxWidth","_getLineWidth","currentLineWidth","_renderChars","chars","shortM","_renderTextLine","line","lineIndex","totalWidth","words","wordsWidth","_getWidthOfWords","widthDiff","numSpaces","spaceWidth","leftOffset","measureText","_getLeftOffset","_getTopOffset","_skipFillStrokeCheck","lineHeights","heightOfLine","maxHeight","_renderTextBoxBackground","_renderTextLinesBackground","lineLeftOffset","lineTopOffset","_getLineLeftOffset","__lineWidths","__lineHeights","__lineOffsets","_shouldClearCache","shouldClear","_forceClearCache","wordCount","renderLinesAtOffset","offsets","oLen","halfOfVerticalBox","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textBgRects","textSpans","textTopOffset","textLeftOffset","_setSVGBg","_setSVGTextLineBg","_setSVGTextLineText","yPos","_getFillAttributes","fillColor","offX","IText","selectionStart","selectionEnd","editable","editingBorderColor","cursorWidth","cursorColor","cursorDelay","cursorDuration","caching","_reSpace","_currentCursorOpacity","_selectionDirection","_abortCursorAnimation","_charWidthsCache","initBehavior","__maxFontHeights","__widthOfSpace","isEmptyStyles","p3","setSelectionStart","_updateTextarea","setSelectionEnd","getSelectionStyles","startIndex","endIndex","loc","get2DCursorLocation","_getStyleDeclaration","charIndex","setSelectionStyles","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","renderCursorOrSelection","boundaries","_getCursorBoundaries","renderCursor","renderSelection","getCurrentCharStyle","getCurrentCharFontSize","getCurrentCharColor","typeOfBoundaries","_getCursorBoundariesOffsets","lineLeft","topOffset","_getWidthOfChar","_getCachedLineOffset","widthOfLine","cursorLocation","charHeight","__isMousedown","startLine","endLine","lineOffset","boxWidth","j2","j2len","_renderCharsFast","prevStyle","charsToRender","thisStyle","_hasStyleChanged","_renderChar","skipFillStrokeCheck","_char","charWidth","decl","shouldStroke","shouldFill","_applyCharStylesGetWidth","_getHeightOfChar","fillText","strokeText","_renderCharDecoration","styleDeclaration","_getWidthOfCharsAt","_getCacheProp","_applyFontStyles","cacheProp","returnCloneOrEmpty","_deleteStyleDeclaration","_deleteLineStyle","_getWidthOfSpace","_getHeightOfCharAt","currentCharHeight","initAddedHandler","initRemovedHandler","initCursorSelectionHandlers","initDoubleClickSimulation","initSelectedHandler","selected","_hasITextHandlers","_initCanvasHandlers","_iTextInstances","exitEditingOnOthers","_tick","_currentTickState","_animateCursor","targetOpacity","completeMethod","tickState","isAborted","_onTickComplete","_cursorTimeout1","clearTimeout","_currentTickCompleteState","initDelayedCursor","restart","delay","_cursorTimeout2","abortCursorAnimation","selectAll","getSelectedText","findWordBoundaryLeft","startFrom","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","getNumNewLinesInSelectedText","selectedText","numNewLines","searchWordBoundary","direction","reNonWord","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","initHiddenTextarea","hiddenTextarea","focus","_saveEditingProps","_setEditingProps","initMouseMoveHandler","exitEditing","getSelectionStartFromPointer","__selectionStartOnMouseDown","_savedProps","_restoreEditingProps","overCursor","removeChild","_removeExtraneousStyles","_removeCharsFromTo","_removeSingleCharAndStyle","isBeginningOfLine","indexStyle","removeStyleObject","insertChars","_chars","useCopiedStyle","copiedTextStyle","insertChar","skipUpdate","styleObject","isEndOfLine","insertStyleObjects","insertNewlineStyleObject","shiftLineStyles","currentCharStyle","newLineStyles","insertCharStyleObject","currentLineStyles","currentLineStylesCloned","numericIndex","clonedStyles","numericLine","textOnPreviousLine","newCharIndexOnPrevLine","insertNewline","__lastClickTime","__lastLastClickTime","__lastPointer","__newClickTime","newPointer","isTripleClick","_stopEvent","isDoubleClick","__lastIsEditing","__lastSelected","stopPropagation","initMousedownHandler","initMouseupHandler","initClicks","__mousedownX","__mousedownY","setCursorByClick","_isObjectMoved","mouseOffset","prevWidth","_getNewSelectionStartFromOffset","distanceBtwLastCharAndCursor","distanceBtwNextCharAndCursor","onKeyDown","onInput","copy","paste","_clickHandlerInitialized","onClick","_keysMap",8,9,27,13,33,34,35,36,37,38,39,40,46,"_ctrlKeysMap",65,88,"keyCode","ctrlKey","metaKey","stopImmediatePropagation","_cancelOnInput","textLength","newTextLength","diff","charsToInsert","forwardDelete","moveCursorRight","removeChars","clipboardData","_getClipboardData","setData","copiedText","getData","cut","getDownCursorOffset","isRight","selectionProp","textOnSameLineBeforeCursor","textOnSameLineAfterCursor","textOnNextLine","widthOfSameLineBeforeCursor","widthOfCharsOnSameLineBeforeCursor","indexOnNextLine","_getIndexOnNextLine","foundMatch","widthOfNextLine","widthOfCharsOnNextLine","widthOfChar","leftEdge","rightEdge","offsetFromLeftEdge","offsetFromRightEdge","moveCursorDown","moveCursorDownWithShift","moveCursorDownWithoutShift","swapSelectionPoints","swapSel","getUpCursorOffset","indexOnPrevLine","_getIndexOnPrevLine","widthOfPreviousLine","widthOfCharsOnPreviousLine","moveCursorUp","moveCursorUpWithShift","moveCursorUpWithoutShift","moveCursorLeft","moveCursorLeftWithShift","moveCursorLeftWithoutShift","_move","propMethod","_moveLeft","_moveRight","moveCursorRightWithShift","moveCursorRightWithoutShift","_removeCharsNearCursor","leftLineBoundary","leftWordBoundary","_setSVGTextLineChars","charOffset","_getSVGLineLeftOffset","_getSVGLineTopOffset","styleDecl","_createTextCharSpan","_createTextCharBg","lastHeight","fillStyles","Textbox","minWidth","dynamicMinWidth","__cachedLines","getTextboxControlVisibility","_setLineWidths","_generateStyleMap","realLineCount","realLineCharCount","charCount","_styleMap","_wrapText","wrapped","_wrapLine","_measureText","infix","wordWidth","largestWordWidth","__oldScaleX","numLines","removed","lineLen","lineChars","getMinWidth","setObjectScaleOverridden","_refreshControlsVisibility","_getTextOnPreviousLine","lIndex","override","tmp","oURL","URL","reqHandler","HTTPS","HTTP","response","setEncoding","statusCode","errno","ECONNREFUSED","message","requestFs","fs","readFile","createImageAndCallBack","eval","oImg","createCanvasForNode","nodeCanvasOptions","nodeCanvas","FabricCanvas","fabricCanvas","Font","createPNGStream","createJPEGStream","origSetWidth","origSetHeight",1092,"Stream","Response","Base64","inherits","writable","uri","withCredentials","responseType","emit","_headers","headers","objectKeys","isSafeRequestHeader","setHeader","btoa","res","__aborted","handle","getHeader","removeHeader","write","isXHR2Compatible","unsafeHeaders","headerName","xs","Blob","ArrayBuffer","FormData",1093,"parseHeaders","getAllResponseHeaders","readable","capable","streaming","status2","getResponse","respType","responseBlob","_emitData","respBody","Uint8Array","byteLength",1094,"InvalidCharacterError","input","block","charCode","atob","bs","buffer","bc","fromCharCode",1095,1096,"hasOwnProperty",1104,"__WEBPACK_AMD_DEFINE_RESULT__","RangeError","errors","mapDomain","regexSeparators","labels","encoded","ucs2decode","extra","counter","ucs2encode","stringFromCharCode","basicToDigit","codePoint","base","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","damp","baseMinusTMin","tMax","skew","decode","out","basic","oldi","baseMinusT","inputLength","initialN","bias","initialBias","delimiter","maxInt","tMin","handledCPCount","basicLength","handledCPCountPlusOne","qMinusT","toUnicode","regexPunycode","toASCII","regexNonASCII","freeGlobal","overflow","not-basic","invalid-input","ucs2",1105,"qs","sep","regexp","maxKeys","kstr","vstr",1106,"stringifyPrimitive","isFinite","ks",1107,1110,1111,1112],"mappings":"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","file":"2.2.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 920:\n1113,\n\n/***/ 965:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar http = module.exports;\n\tvar EventEmitter = __webpack_require__(916).EventEmitter;\n\tvar Request = __webpack_require__(1092);\n\tvar url = __webpack_require__(968)\n\t\n\thttp.request = function (params, cb) {\n\t    if (typeof params === 'string') {\n\t        params = url.parse(params)\n\t    }\n\t    if (!params) params = {};\n\t    if (!params.host && !params.port) {\n\t        params.port = parseInt(window.location.port, 10);\n\t    }\n\t    if (!params.host && params.hostname) {\n\t        params.host = params.hostname;\n\t    }\n\t\n\t    if (!params.protocol) {\n\t        if (params.scheme) {\n\t            params.protocol = params.scheme + ':';\n\t        } else {\n\t            params.protocol = window.location.protocol;\n\t        }\n\t    }\n\t\n\t    if (!params.host) {\n\t        params.host = window.location.hostname || window.location.host;\n\t    }\n\t    if (/:/.test(params.host)) {\n\t        if (!params.port) {\n\t            params.port = params.host.split(':')[1];\n\t        }\n\t        params.host = params.host.split(':')[0];\n\t    }\n\t    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;\n\t    \n\t    var req = new Request(new xhrHttp, params);\n\t    if (cb) req.on('response', cb);\n\t    return req;\n\t};\n\t\n\thttp.get = function (params, cb) {\n\t    params.method = 'GET';\n\t    var req = http.request(params, cb);\n\t    req.end();\n\t    return req;\n\t};\n\t\n\thttp.Agent = function () {};\n\thttp.Agent.defaultMaxSockets = 4;\n\t\n\tvar xhrHttp = (function () {\n\t    if (typeof window === 'undefined') {\n\t        throw new Error('no window object present');\n\t    }\n\t    else if (window.XMLHttpRequest) {\n\t        return window.XMLHttpRequest;\n\t    }\n\t    else if (window.ActiveXObject) {\n\t        var axs = [\n\t            'Msxml2.XMLHTTP.6.0',\n\t            'Msxml2.XMLHTTP.3.0',\n\t            'Microsoft.XMLHTTP'\n\t        ];\n\t        for (var i = 0; i < axs.length; i++) {\n\t            try {\n\t                var ax = new(window.ActiveXObject)(axs[i]);\n\t                return function () {\n\t                    if (ax) {\n\t                        var ax_ = ax;\n\t                        ax = null;\n\t                        return ax_;\n\t                    }\n\t                    else {\n\t                        return new(window.ActiveXObject)(axs[i]);\n\t                    }\n\t                };\n\t            }\n\t            catch (e) {}\n\t        }\n\t        throw new Error('ajax not supported in this browser')\n\t    }\n\t    else {\n\t        throw new Error('ajax not supported in this browser');\n\t    }\n\t})();\n\t\n\thttp.STATUS_CODES = {\n\t    100 : 'Continue',\n\t    101 : 'Switching Protocols',\n\t    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918\n\t    200 : 'OK',\n\t    201 : 'Created',\n\t    202 : 'Accepted',\n\t    203 : 'Non-Authoritative Information',\n\t    204 : 'No Content',\n\t    205 : 'Reset Content',\n\t    206 : 'Partial Content',\n\t    207 : 'Multi-Status',               // RFC 4918\n\t    300 : 'Multiple Choices',\n\t    301 : 'Moved Permanently',\n\t    302 : 'Moved Temporarily',\n\t    303 : 'See Other',\n\t    304 : 'Not Modified',\n\t    305 : 'Use Proxy',\n\t    307 : 'Temporary Redirect',\n\t    400 : 'Bad Request',\n\t    401 : 'Unauthorized',\n\t    402 : 'Payment Required',\n\t    403 : 'Forbidden',\n\t    404 : 'Not Found',\n\t    405 : 'Method Not Allowed',\n\t    406 : 'Not Acceptable',\n\t    407 : 'Proxy Authentication Required',\n\t    408 : 'Request Time-out',\n\t    409 : 'Conflict',\n\t    410 : 'Gone',\n\t    411 : 'Length Required',\n\t    412 : 'Precondition Failed',\n\t    413 : 'Request Entity Too Large',\n\t    414 : 'Request-URI Too Large',\n\t    415 : 'Unsupported Media Type',\n\t    416 : 'Requested Range Not Satisfiable',\n\t    417 : 'Expectation Failed',\n\t    418 : 'I\\'m a teapot',              // RFC 2324\n\t    422 : 'Unprocessable Entity',       // RFC 4918\n\t    423 : 'Locked',                     // RFC 4918\n\t    424 : 'Failed Dependency',          // RFC 4918\n\t    425 : 'Unordered Collection',       // RFC 4918\n\t    426 : 'Upgrade Required',           // RFC 2817\n\t    428 : 'Precondition Required',      // RFC 6585\n\t    429 : 'Too Many Requests',          // RFC 6585\n\t    431 : 'Request Header Fields Too Large',// RFC 6585\n\t    500 : 'Internal Server Error',\n\t    501 : 'Not Implemented',\n\t    502 : 'Bad Gateway',\n\t    503 : 'Service Unavailable',\n\t    504 : 'Gateway Time-out',\n\t    505 : 'HTTP Version Not Supported',\n\t    506 : 'Variant Also Negotiates',    // RFC 2295\n\t    507 : 'Insufficient Storage',       // RFC 4918\n\t    509 : 'Bandwidth Limit Exceeded',\n\t    510 : 'Not Extended',               // RFC 2774\n\t    511 : 'Network Authentication Required' // RFC 6585\n\t};\n\n/***/ },\n\n/***/ 968:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tvar punycode = __webpack_require__(1104);\n\t\n\texports.parse = urlParse;\n\texports.resolve = urlResolve;\n\texports.resolveObject = urlResolveObject;\n\texports.format = urlFormat;\n\t\n\texports.Url = Url;\n\t\n\tfunction Url() {\n\t  this.protocol = null;\n\t  this.slashes = null;\n\t  this.auth = null;\n\t  this.host = null;\n\t  this.port = null;\n\t  this.hostname = null;\n\t  this.hash = null;\n\t  this.search = null;\n\t  this.query = null;\n\t  this.pathname = null;\n\t  this.path = null;\n\t  this.href = null;\n\t}\n\t\n\t// Reference: RFC 3986, RFC 1808, RFC 2396\n\t\n\t// define these here so at least they only have to be\n\t// compiled once on the first module load.\n\tvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n\t    portPattern = /:[0-9]*$/,\n\t\n\t    // RFC 2396: characters reserved for delimiting URLs.\n\t    // We actually just auto-escape these.\n\t    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\t\n\t    // RFC 2396: characters not allowed for various reasons.\n\t    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\t\n\t    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n\t    autoEscape = ['\\''].concat(unwise),\n\t    // Characters that are never ever allowed in a hostname.\n\t    // Note that any invalid chars are also handled, but these\n\t    // are the ones that are *expected* to be seen, so we fast-path\n\t    // them.\n\t    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n\t    hostEndingChars = ['/', '?', '#'],\n\t    hostnameMaxLen = 255,\n\t    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\n\t    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\n\t    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n\t    unsafeProtocol = {\n\t      'javascript': true,\n\t      'javascript:': true\n\t    },\n\t    // protocols that never have a hostname.\n\t    hostlessProtocol = {\n\t      'javascript': true,\n\t      'javascript:': true\n\t    },\n\t    // protocols that always contain a // bit.\n\t    slashedProtocol = {\n\t      'http': true,\n\t      'https': true,\n\t      'ftp': true,\n\t      'gopher': true,\n\t      'file': true,\n\t      'http:': true,\n\t      'https:': true,\n\t      'ftp:': true,\n\t      'gopher:': true,\n\t      'file:': true\n\t    },\n\t    querystring = __webpack_require__(1107);\n\t\n\tfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n\t  if (url && isObject(url) && url instanceof Url) return url;\n\t\n\t  var u = new Url;\n\t  u.parse(url, parseQueryString, slashesDenoteHost);\n\t  return u;\n\t}\n\t\n\tUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n\t  if (!isString(url)) {\n\t    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n\t  }\n\t\n\t  var rest = url;\n\t\n\t  // trim before proceeding.\n\t  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\t  rest = rest.trim();\n\t\n\t  var proto = protocolPattern.exec(rest);\n\t  if (proto) {\n\t    proto = proto[0];\n\t    var lowerProto = proto.toLowerCase();\n\t    this.protocol = lowerProto;\n\t    rest = rest.substr(proto.length);\n\t  }\n\t\n\t  // figure out if it's got a host\n\t  // user@server is *always* interpreted as a hostname, and url\n\t  // resolution will treat //foo/bar as host=foo,path=bar because that's\n\t  // how the browser resolves relative URLs.\n\t  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n\t    var slashes = rest.substr(0, 2) === '//';\n\t    if (slashes && !(proto && hostlessProtocol[proto])) {\n\t      rest = rest.substr(2);\n\t      this.slashes = true;\n\t    }\n\t  }\n\t\n\t  if (!hostlessProtocol[proto] &&\n\t      (slashes || (proto && !slashedProtocol[proto]))) {\n\t\n\t    // there's a hostname.\n\t    // the first instance of /, ?, ;, or # ends the host.\n\t    //\n\t    // If there is an @ in the hostname, then non-host chars *are* allowed\n\t    // to the left of the last @ sign, unless some host-ending character\n\t    // comes *before* the @-sign.\n\t    // URLs are obnoxious.\n\t    //\n\t    // ex:\n\t    // http://a@b@c/ => user:a@b host:c\n\t    // http://a@b?@c => user:a host:c path:/?@c\n\t\n\t    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n\t    // Review our test case against browsers more comprehensively.\n\t\n\t    // find the first instance of any hostEndingChars\n\t    var hostEnd = -1;\n\t    for (var i = 0; i < hostEndingChars.length; i++) {\n\t      var hec = rest.indexOf(hostEndingChars[i]);\n\t      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n\t        hostEnd = hec;\n\t    }\n\t\n\t    // at this point, either we have an explicit point where the\n\t    // auth portion cannot go past, or the last @ char is the decider.\n\t    var auth, atSign;\n\t    if (hostEnd === -1) {\n\t      // atSign can be anywhere.\n\t      atSign = rest.lastIndexOf('@');\n\t    } else {\n\t      // atSign must be in auth portion.\n\t      // http://a@b/c@d => host:b auth:a path:/c@d\n\t      atSign = rest.lastIndexOf('@', hostEnd);\n\t    }\n\t\n\t    // Now we have a portion which is definitely the auth.\n\t    // Pull that off.\n\t    if (atSign !== -1) {\n\t      auth = rest.slice(0, atSign);\n\t      rest = rest.slice(atSign + 1);\n\t      this.auth = decodeURIComponent(auth);\n\t    }\n\t\n\t    // the host is the remaining to the left of the first non-host char\n\t    hostEnd = -1;\n\t    for (var i = 0; i < nonHostChars.length; i++) {\n\t      var hec = rest.indexOf(nonHostChars[i]);\n\t      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n\t        hostEnd = hec;\n\t    }\n\t    // if we still have not hit it, then the entire thing is a host.\n\t    if (hostEnd === -1)\n\t      hostEnd = rest.length;\n\t\n\t    this.host = rest.slice(0, hostEnd);\n\t    rest = rest.slice(hostEnd);\n\t\n\t    // pull out port.\n\t    this.parseHost();\n\t\n\t    // we've indicated that there is a hostname,\n\t    // so even if it's empty, it has to be present.\n\t    this.hostname = this.hostname || '';\n\t\n\t    // if hostname begins with [ and ends with ]\n\t    // assume that it's an IPv6 address.\n\t    var ipv6Hostname = this.hostname[0] === '[' &&\n\t        this.hostname[this.hostname.length - 1] === ']';\n\t\n\t    // validate a little.\n\t    if (!ipv6Hostname) {\n\t      var hostparts = this.hostname.split(/\\./);\n\t      for (var i = 0, l = hostparts.length; i < l; i++) {\n\t        var part = hostparts[i];\n\t        if (!part) continue;\n\t        if (!part.match(hostnamePartPattern)) {\n\t          var newpart = '';\n\t          for (var j = 0, k = part.length; j < k; j++) {\n\t            if (part.charCodeAt(j) > 127) {\n\t              // we replace non-ASCII char with a temporary placeholder\n\t              // we need this to make sure size of hostname is not\n\t              // broken by replacing non-ASCII by nothing\n\t              newpart += 'x';\n\t            } else {\n\t              newpart += part[j];\n\t            }\n\t          }\n\t          // we test again with ASCII char only\n\t          if (!newpart.match(hostnamePartPattern)) {\n\t            var validParts = hostparts.slice(0, i);\n\t            var notHost = hostparts.slice(i + 1);\n\t            var bit = part.match(hostnamePartStart);\n\t            if (bit) {\n\t              validParts.push(bit[1]);\n\t              notHost.unshift(bit[2]);\n\t            }\n\t            if (notHost.length) {\n\t              rest = '/' + notHost.join('.') + rest;\n\t            }\n\t            this.hostname = validParts.join('.');\n\t            break;\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    if (this.hostname.length > hostnameMaxLen) {\n\t      this.hostname = '';\n\t    } else {\n\t      // hostnames are always lower case.\n\t      this.hostname = this.hostname.toLowerCase();\n\t    }\n\t\n\t    if (!ipv6Hostname) {\n\t      // IDNA Support: Returns a puny coded representation of \"domain\".\n\t      // It only converts the part of the domain name that\n\t      // has non ASCII characters. I.e. it dosent matter if\n\t      // you call it with a domain that already is in ASCII.\n\t      var domainArray = this.hostname.split('.');\n\t      var newOut = [];\n\t      for (var i = 0; i < domainArray.length; ++i) {\n\t        var s = domainArray[i];\n\t        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?\n\t            'xn--' + punycode.encode(s) : s);\n\t      }\n\t      this.hostname = newOut.join('.');\n\t    }\n\t\n\t    var p = this.port ? ':' + this.port : '';\n\t    var h = this.hostname || '';\n\t    this.host = h + p;\n\t    this.href += this.host;\n\t\n\t    // strip [ and ] from the hostname\n\t    // the host field still retains them, though\n\t    if (ipv6Hostname) {\n\t      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\t      if (rest[0] !== '/') {\n\t        rest = '/' + rest;\n\t      }\n\t    }\n\t  }\n\t\n\t  // now rest is set to the post-host stuff.\n\t  // chop off any delim chars.\n\t  if (!unsafeProtocol[lowerProto]) {\n\t\n\t    // First, make 100% sure that any \"autoEscape\" chars get\n\t    // escaped, even if encodeURIComponent doesn't think they\n\t    // need to be.\n\t    for (var i = 0, l = autoEscape.length; i < l; i++) {\n\t      var ae = autoEscape[i];\n\t      var esc = encodeURIComponent(ae);\n\t      if (esc === ae) {\n\t        esc = escape(ae);\n\t      }\n\t      rest = rest.split(ae).join(esc);\n\t    }\n\t  }\n\t\n\t\n\t  // chop off from the tail first.\n\t  var hash = rest.indexOf('#');\n\t  if (hash !== -1) {\n\t    // got a fragment string.\n\t    this.hash = rest.substr(hash);\n\t    rest = rest.slice(0, hash);\n\t  }\n\t  var qm = rest.indexOf('?');\n\t  if (qm !== -1) {\n\t    this.search = rest.substr(qm);\n\t    this.query = rest.substr(qm + 1);\n\t    if (parseQueryString) {\n\t      this.query = querystring.parse(this.query);\n\t    }\n\t    rest = rest.slice(0, qm);\n\t  } else if (parseQueryString) {\n\t    // no query string, but parseQueryString still requested\n\t    this.search = '';\n\t    this.query = {};\n\t  }\n\t  if (rest) this.pathname = rest;\n\t  if (slashedProtocol[lowerProto] &&\n\t      this.hostname && !this.pathname) {\n\t    this.pathname = '/';\n\t  }\n\t\n\t  //to support http.request\n\t  if (this.pathname || this.search) {\n\t    var p = this.pathname || '';\n\t    var s = this.search || '';\n\t    this.path = p + s;\n\t  }\n\t\n\t  // finally, reconstruct the href based on what has been validated.\n\t  this.href = this.format();\n\t  return this;\n\t};\n\t\n\t// format a parsed object into a url string\n\tfunction urlFormat(obj) {\n\t  // ensure it's an object, and not a string url.\n\t  // If it's an obj, this is a no-op.\n\t  // this way, you can call url_format() on strings\n\t  // to clean up potentially wonky urls.\n\t  if (isString(obj)) obj = urlParse(obj);\n\t  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n\t  return obj.format();\n\t}\n\t\n\tUrl.prototype.format = function() {\n\t  var auth = this.auth || '';\n\t  if (auth) {\n\t    auth = encodeURIComponent(auth);\n\t    auth = auth.replace(/%3A/i, ':');\n\t    auth += '@';\n\t  }\n\t\n\t  var protocol = this.protocol || '',\n\t      pathname = this.pathname || '',\n\t      hash = this.hash || '',\n\t      host = false,\n\t      query = '';\n\t\n\t  if (this.host) {\n\t    host = auth + this.host;\n\t  } else if (this.hostname) {\n\t    host = auth + (this.hostname.indexOf(':') === -1 ?\n\t        this.hostname :\n\t        '[' + this.hostname + ']');\n\t    if (this.port) {\n\t      host += ':' + this.port;\n\t    }\n\t  }\n\t\n\t  if (this.query &&\n\t      isObject(this.query) &&\n\t      Object.keys(this.query).length) {\n\t    query = querystring.stringify(this.query);\n\t  }\n\t\n\t  var search = this.search || (query && ('?' + query)) || '';\n\t\n\t  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\t\n\t  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n\t  // unless they had them to begin with.\n\t  if (this.slashes ||\n\t      (!protocol || slashedProtocol[protocol]) && host !== false) {\n\t    host = '//' + (host || '');\n\t    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n\t  } else if (!host) {\n\t    host = '';\n\t  }\n\t\n\t  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n\t  if (search && search.charAt(0) !== '?') search = '?' + search;\n\t\n\t  pathname = pathname.replace(/[?#]/g, function(match) {\n\t    return encodeURIComponent(match);\n\t  });\n\t  search = search.replace('#', '%23');\n\t\n\t  return protocol + host + pathname + search + hash;\n\t};\n\t\n\tfunction urlResolve(source, relative) {\n\t  return urlParse(source, false, true).resolve(relative);\n\t}\n\t\n\tUrl.prototype.resolve = function(relative) {\n\t  return this.resolveObject(urlParse(relative, false, true)).format();\n\t};\n\t\n\tfunction urlResolveObject(source, relative) {\n\t  if (!source) return relative;\n\t  return urlParse(source, false, true).resolveObject(relative);\n\t}\n\t\n\tUrl.prototype.resolveObject = function(relative) {\n\t  if (isString(relative)) {\n\t    var rel = new Url();\n\t    rel.parse(relative, false, true);\n\t    relative = rel;\n\t  }\n\t\n\t  var result = new Url();\n\t  Object.keys(this).forEach(function(k) {\n\t    result[k] = this[k];\n\t  }, this);\n\t\n\t  // hash is always overridden, no matter what.\n\t  // even href=\"\" will remove it.\n\t  result.hash = relative.hash;\n\t\n\t  // if the relative url is empty, then there's nothing left to do here.\n\t  if (relative.href === '') {\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  // hrefs like //foo/bar always cut to the protocol.\n\t  if (relative.slashes && !relative.protocol) {\n\t    // take everything except the protocol from relative\n\t    Object.keys(relative).forEach(function(k) {\n\t      if (k !== 'protocol')\n\t        result[k] = relative[k];\n\t    });\n\t\n\t    //urlParse appends trailing / to urls like http://www.example.com\n\t    if (slashedProtocol[result.protocol] &&\n\t        result.hostname && !result.pathname) {\n\t      result.path = result.pathname = '/';\n\t    }\n\t\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  if (relative.protocol && relative.protocol !== result.protocol) {\n\t    // if it's a known url protocol, then changing\n\t    // the protocol does weird things\n\t    // first, if it's not file:, then we MUST have a host,\n\t    // and if there was a path\n\t    // to begin with, then we MUST have a path.\n\t    // if it is file:, then the host is dropped,\n\t    // because that's known to be hostless.\n\t    // anything else is assumed to be absolute.\n\t    if (!slashedProtocol[relative.protocol]) {\n\t      Object.keys(relative).forEach(function(k) {\n\t        result[k] = relative[k];\n\t      });\n\t      result.href = result.format();\n\t      return result;\n\t    }\n\t\n\t    result.protocol = relative.protocol;\n\t    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n\t      var relPath = (relative.pathname || '').split('/');\n\t      while (relPath.length && !(relative.host = relPath.shift()));\n\t      if (!relative.host) relative.host = '';\n\t      if (!relative.hostname) relative.hostname = '';\n\t      if (relPath[0] !== '') relPath.unshift('');\n\t      if (relPath.length < 2) relPath.unshift('');\n\t      result.pathname = relPath.join('/');\n\t    } else {\n\t      result.pathname = relative.pathname;\n\t    }\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    result.host = relative.host || '';\n\t    result.auth = relative.auth;\n\t    result.hostname = relative.hostname || relative.host;\n\t    result.port = relative.port;\n\t    // to support http.request\n\t    if (result.pathname || result.search) {\n\t      var p = result.pathname || '';\n\t      var s = result.search || '';\n\t      result.path = p + s;\n\t    }\n\t    result.slashes = result.slashes || relative.slashes;\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n\t      isRelAbs = (\n\t          relative.host ||\n\t          relative.pathname && relative.pathname.charAt(0) === '/'\n\t      ),\n\t      mustEndAbs = (isRelAbs || isSourceAbs ||\n\t                    (result.host && relative.pathname)),\n\t      removeAllDots = mustEndAbs,\n\t      srcPath = result.pathname && result.pathname.split('/') || [],\n\t      relPath = relative.pathname && relative.pathname.split('/') || [],\n\t      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\t\n\t  // if the url is a non-slashed url, then relative\n\t  // links like ../.. should be able\n\t  // to crawl up to the hostname, as well.  This is strange.\n\t  // result.protocol has already been set by now.\n\t  // Later on, put the first path part into the host field.\n\t  if (psychotic) {\n\t    result.hostname = '';\n\t    result.port = null;\n\t    if (result.host) {\n\t      if (srcPath[0] === '') srcPath[0] = result.host;\n\t      else srcPath.unshift(result.host);\n\t    }\n\t    result.host = '';\n\t    if (relative.protocol) {\n\t      relative.hostname = null;\n\t      relative.port = null;\n\t      if (relative.host) {\n\t        if (relPath[0] === '') relPath[0] = relative.host;\n\t        else relPath.unshift(relative.host);\n\t      }\n\t      relative.host = null;\n\t    }\n\t    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n\t  }\n\t\n\t  if (isRelAbs) {\n\t    // it's absolute.\n\t    result.host = (relative.host || relative.host === '') ?\n\t                  relative.host : result.host;\n\t    result.hostname = (relative.hostname || relative.hostname === '') ?\n\t                      relative.hostname : result.hostname;\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    srcPath = relPath;\n\t    // fall through to the dot-handling below.\n\t  } else if (relPath.length) {\n\t    // it's relative\n\t    // throw away the existing file, and take the new path instead.\n\t    if (!srcPath) srcPath = [];\n\t    srcPath.pop();\n\t    srcPath = srcPath.concat(relPath);\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t  } else if (!isNullOrUndefined(relative.search)) {\n\t    // just pull out the search.\n\t    // like href='?foo'.\n\t    // Put this after the other two cases because it simplifies the booleans\n\t    if (psychotic) {\n\t      result.hostname = result.host = srcPath.shift();\n\t      //occationaly the auth can get stuck only in host\n\t      //this especialy happens in cases like\n\t      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\t      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n\t                       result.host.split('@') : false;\n\t      if (authInHost) {\n\t        result.auth = authInHost.shift();\n\t        result.host = result.hostname = authInHost.shift();\n\t      }\n\t    }\n\t    result.search = relative.search;\n\t    result.query = relative.query;\n\t    //to support http.request\n\t    if (!isNull(result.pathname) || !isNull(result.search)) {\n\t      result.path = (result.pathname ? result.pathname : '') +\n\t                    (result.search ? result.search : '');\n\t    }\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  if (!srcPath.length) {\n\t    // no path at all.  easy.\n\t    // we've already handled the other stuff above.\n\t    result.pathname = null;\n\t    //to support http.request\n\t    if (result.search) {\n\t      result.path = '/' + result.search;\n\t    } else {\n\t      result.path = null;\n\t    }\n\t    result.href = result.format();\n\t    return result;\n\t  }\n\t\n\t  // if a url ENDs in . or .., then it must get a trailing slash.\n\t  // however, if it ends in anything else non-slashy,\n\t  // then it must NOT get a trailing slash.\n\t  var last = srcPath.slice(-1)[0];\n\t  var hasTrailingSlash = (\n\t      (result.host || relative.host) && (last === '.' || last === '..') ||\n\t      last === '');\n\t\n\t  // strip single dots, resolve double dots to parent dir\n\t  // if the path tries to go above the root, `up` ends up > 0\n\t  var up = 0;\n\t  for (var i = srcPath.length; i >= 0; i--) {\n\t    last = srcPath[i];\n\t    if (last == '.') {\n\t      srcPath.splice(i, 1);\n\t    } else if (last === '..') {\n\t      srcPath.splice(i, 1);\n\t      up++;\n\t    } else if (up) {\n\t      srcPath.splice(i, 1);\n\t      up--;\n\t    }\n\t  }\n\t\n\t  // if the path is allowed to go above the root, restore leading ..s\n\t  if (!mustEndAbs && !removeAllDots) {\n\t    for (; up--; up) {\n\t      srcPath.unshift('..');\n\t    }\n\t  }\n\t\n\t  if (mustEndAbs && srcPath[0] !== '' &&\n\t      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n\t    srcPath.unshift('');\n\t  }\n\t\n\t  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n\t    srcPath.push('');\n\t  }\n\t\n\t  var isAbsolute = srcPath[0] === '' ||\n\t      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\t\n\t  // put the host back\n\t  if (psychotic) {\n\t    result.hostname = result.host = isAbsolute ? '' :\n\t                                    srcPath.length ? srcPath.shift() : '';\n\t    //occationaly the auth can get stuck only in host\n\t    //this especialy happens in cases like\n\t    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\t    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n\t                     result.host.split('@') : false;\n\t    if (authInHost) {\n\t      result.auth = authInHost.shift();\n\t      result.host = result.hostname = authInHost.shift();\n\t    }\n\t  }\n\t\n\t  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\t\n\t  if (mustEndAbs && !isAbsolute) {\n\t    srcPath.unshift('');\n\t  }\n\t\n\t  if (!srcPath.length) {\n\t    result.pathname = null;\n\t    result.path = null;\n\t  } else {\n\t    result.pathname = srcPath.join('/');\n\t  }\n\t\n\t  //to support request.http\n\t  if (!isNull(result.pathname) || !isNull(result.search)) {\n\t    result.path = (result.pathname ? result.pathname : '') +\n\t                  (result.search ? result.search : '');\n\t  }\n\t  result.auth = relative.auth || result.auth;\n\t  result.slashes = result.slashes || relative.slashes;\n\t  result.href = result.format();\n\t  return result;\n\t};\n\t\n\tUrl.prototype.parseHost = function() {\n\t  var host = this.host;\n\t  var port = portPattern.exec(host);\n\t  if (port) {\n\t    port = port[0];\n\t    if (port !== ':') {\n\t      this.port = port.substr(1);\n\t    }\n\t    host = host.substr(0, host.length - port.length);\n\t  }\n\t  if (host) this.hostname = host;\n\t};\n\t\n\tfunction isString(arg) {\n\t  return typeof arg === \"string\";\n\t}\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\t\n\tfunction isNull(arg) {\n\t  return arg === null;\n\t}\n\tfunction isNullOrUndefined(arg) {\n\t  return  arg == null;\n\t}\n\n\n/***/ },\n\n/***/ 984:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, process) {/* build: `node build.js modules=ALL exclude=json,gestures minifier=uglifyjs` */\n\t/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\n\t\n\tvar fabric = fabric || { version: \"1.6.0-rc.1\" };\n\tif (true) {\n\t  exports.fabric = fabric;\n\t}\n\t\n\tif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n\t  fabric.document = document;\n\t  fabric.window = window;\n\t  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\n\t  window.fabric = fabric;\n\t}\n\telse {\n\t  // assume we're running under node.js when document/window are not present\n\t  fabric.document = __webpack_require__(1111)\n\t    .jsdom(\"<!DOCTYPE html><html><head></head><body></body></html>\");\n\t\n\t  if (fabric.document.createWindow) {\n\t    fabric.window = fabric.document.createWindow();\n\t  } else {\n\t    fabric.window = fabric.document.parentWindow;\n\t  }\n\t}\n\t\n\t/**\n\t * True when in environment that supports touch events\n\t * @type boolean\n\t */\n\tfabric.isTouchSupported = \"ontouchstart\" in fabric.document.documentElement;\n\t\n\t/**\n\t * True when in environment that's probably Node.js\n\t * @type boolean\n\t */\n\tfabric.isLikelyNode = typeof Buffer !== 'undefined' &&\n\t                      typeof window === 'undefined';\n\t\n\t/* _FROM_SVG_START_ */\n\t/**\n\t * Attributes parsed from all SVG elements\n\t * @type array\n\t */\n\tfabric.SHARED_ATTRIBUTES = [\n\t  \"display\",\n\t  \"transform\",\n\t  \"fill\", \"fill-opacity\", \"fill-rule\",\n\t  \"opacity\",\n\t  \"stroke\", \"stroke-dasharray\", \"stroke-linecap\",\n\t  \"stroke-linejoin\", \"stroke-miterlimit\",\n\t  \"stroke-opacity\", \"stroke-width\",\n\t  \"id\"\n\t];\n\t/* _FROM_SVG_END_ */\n\t\n\t/**\n\t * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n\t */\n\tfabric.DPI = 96;\n\tfabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)';\n\t\n\t\n\t/**\n\t * Device Pixel Ratio\n\t * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n\t */\n\tfabric.devicePixelRatio = fabric.window.devicePixelRatio ||\n\t                          fabric.window.webkitDevicePixelRatio ||\n\t                          fabric.window.mozDevicePixelRatio ||\n\t                          1;\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} eventName\n\t   * @param {Function} handler\n\t   */\n\t  function _removeEventListener(eventName, handler) {\n\t    if (!this.__eventListeners[eventName]) {\n\t      return;\n\t    }\n\t\n\t    if (handler) {\n\t      fabric.util.removeFromArray(this.__eventListeners[eventName], handler);\n\t    }\n\t    else {\n\t      this.__eventListeners[eventName].length = 0;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Observes specified event\n\t   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\n\t   * @memberOf fabric.Observable\n\t   * @alias on\n\t   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n\t   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  function observe(eventName, handler) {\n\t    if (!this.__eventListeners) {\n\t      this.__eventListeners = { };\n\t    }\n\t    // one object with key/value pairs was passed\n\t    if (arguments.length === 1) {\n\t      for (var prop in eventName) {\n\t        this.on(prop, eventName[prop]);\n\t      }\n\t    }\n\t    else {\n\t      if (!this.__eventListeners[eventName]) {\n\t        this.__eventListeners[eventName] = [ ];\n\t      }\n\t      this.__eventListeners[eventName].push(handler);\n\t    }\n\t    return this;\n\t  }\n\t\n\t  /**\n\t   * Stops event observing for a particular event handler. Calling this method\n\t   * without arguments removes all handlers for all events\n\t   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\n\t   * @memberOf fabric.Observable\n\t   * @alias off\n\t   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n\t   * @param {Function} handler Function to be deleted from EventListeners\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  function stopObserving(eventName, handler) {\n\t    if (!this.__eventListeners) {\n\t      return;\n\t    }\n\t\n\t    // remove all key/value pairs (event name -> event handler)\n\t    if (arguments.length === 0) {\n\t      this.__eventListeners = { };\n\t    }\n\t    // one object with key/value pairs was passed\n\t    else if (arguments.length === 1 && typeof arguments[0] === 'object') {\n\t      for (var prop in eventName) {\n\t        _removeEventListener.call(this, prop, eventName[prop]);\n\t      }\n\t    }\n\t    else {\n\t      _removeEventListener.call(this, eventName, handler);\n\t    }\n\t    return this;\n\t  }\n\t\n\t  /**\n\t   * Fires event with an optional options object\n\t   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\n\t   * @memberOf fabric.Observable\n\t   * @alias trigger\n\t   * @param {String} eventName Event name to fire\n\t   * @param {Object} [options] Options object\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  function fire(eventName, options) {\n\t    if (!this.__eventListeners) {\n\t      return;\n\t    }\n\t\n\t    var listenersForEvent = this.__eventListeners[eventName];\n\t    if (!listenersForEvent) {\n\t      return;\n\t    }\n\t\n\t    for (var i = 0, len = listenersForEvent.length; i < len; i++) {\n\t      // avoiding try/catch for perf. reasons\n\t      listenersForEvent[i].call(this, options || { });\n\t    }\n\t    return this;\n\t  }\n\t\n\t  /**\n\t   * @namespace fabric.Observable\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#events}\n\t   * @see {@link http://fabricjs.com/events/|Events demo}\n\t   */\n\t  fabric.Observable = {\n\t    observe: observe,\n\t    stopObserving: stopObserving,\n\t    fire: fire,\n\t\n\t    on: observe,\n\t    off: stopObserving,\n\t    trigger: fire\n\t  };\n\t})();\n\t\n\t\n\t/**\n\t * @namespace fabric.Collection\n\t */\n\tfabric.Collection = {\n\t\n\t  /**\n\t   * Adds objects to collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n\t   * Objects should be instances of (or inherit from) fabric.Object\n\t   * @param {...fabric.Object} object Zero or more fabric instances\n\t   * @return {Self} thisArg\n\t   */\n\t  add: function () {\n\t    this._objects.push.apply(this._objects, arguments);\n\t    for (var i = 0, length = arguments.length; i < length; i++) {\n\t      this._onObjectAdded(arguments[i]);\n\t    }\n\t    this.renderOnAddRemove && this.renderAll();\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n\t   * An object should be an instance of (or inherit from) fabric.Object\n\t   * @param {Object} object Object to insert\n\t   * @param {Number} index Index to insert object at\n\t   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  insertAt: function (object, index, nonSplicing) {\n\t    var objects = this.getObjects();\n\t    if (nonSplicing) {\n\t      objects[index] = object;\n\t    }\n\t    else {\n\t      objects.splice(index, 0, object);\n\t    }\n\t    this._onObjectAdded(object);\n\t    this.renderOnAddRemove && this.renderAll();\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n\t   * @param {...fabric.Object} object Zero or more fabric instances\n\t   * @return {Self} thisArg\n\t   * @chainable\n\t   */\n\t  remove: function() {\n\t    var objects = this.getObjects(),\n\t        index;\n\t\n\t    for (var i = 0, length = arguments.length; i < length; i++) {\n\t      index = objects.indexOf(arguments[i]);\n\t\n\t      // only call onObjectRemoved if an object was actually removed\n\t      if (index !== -1) {\n\t        objects.splice(index, 1);\n\t        this._onObjectRemoved(arguments[i]);\n\t      }\n\t    }\n\t\n\t    this.renderOnAddRemove && this.renderAll();\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Executes given function for each object in this group\n\t   * @param {Function} callback\n\t   *                   Callback invoked with current object as first argument,\n\t   *                   index - as second and an array of all objects - as third.\n\t   *                   Iteration happens in reverse order (for performance reasons).\n\t   *                   Callback is invoked in a context of Global Object (e.g. `window`)\n\t   *                   when no `context` argument is given\n\t   *\n\t   * @param {Object} context Context (aka thisObject)\n\t   * @return {Self} thisArg\n\t   */\n\t  forEachObject: function(callback, context) {\n\t    var objects = this.getObjects(),\n\t        i = objects.length;\n\t    while (i--) {\n\t      callback.call(context, objects[i], i, objects);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Returns an array of children objects of this instance\n\t   * Type parameter introduced in 1.3.10\n\t   * @param {String} [type] When specified, only objects of this type are returned\n\t   * @return {Array}\n\t   */\n\t  getObjects: function(type) {\n\t    if (typeof type === 'undefined') {\n\t      return this._objects;\n\t    }\n\t    return this._objects.filter(function(o) {\n\t      return o.type === type;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Returns object at specified index\n\t   * @param {Number} index\n\t   * @return {Self} thisArg\n\t   */\n\t  item: function (index) {\n\t    return this.getObjects()[index];\n\t  },\n\t\n\t  /**\n\t   * Returns true if collection contains no objects\n\t   * @return {Boolean} true if collection is empty\n\t   */\n\t  isEmpty: function () {\n\t    return this.getObjects().length === 0;\n\t  },\n\t\n\t  /**\n\t   * Returns a size of a collection (i.e: length of an array containing its objects)\n\t   * @return {Number} Collection size\n\t   */\n\t  size: function() {\n\t    return this.getObjects().length;\n\t  },\n\t\n\t  /**\n\t   * Returns true if collection contains an object\n\t   * @param {Object} object Object to check against\n\t   * @return {Boolean} `true` if collection contains an object\n\t   */\n\t  contains: function(object) {\n\t    return this.getObjects().indexOf(object) > -1;\n\t  },\n\t\n\t  /**\n\t   * Returns number representation of a collection complexity\n\t   * @return {Number} complexity\n\t   */\n\t  complexity: function () {\n\t    return this.getObjects().reduce(function (memo, current) {\n\t      memo += current.complexity ? current.complexity() : 0;\n\t      return memo;\n\t    }, 0);\n\t  }\n\t};\n\t\n\t\n\t(function(global) {\n\t\n\t  var sqrt = Math.sqrt,\n\t      atan2 = Math.atan2,\n\t      PiBy180 = Math.PI / 180;\n\t\n\t  /**\n\t   * @namespace fabric.util\n\t   */\n\t  fabric.util = {\n\t\n\t    /**\n\t     * Removes value from an array.\n\t     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Array} array\n\t     * @param {Any} value\n\t     * @return {Array} original array\n\t     */\n\t    removeFromArray: function(array, value) {\n\t      var idx = array.indexOf(value);\n\t      if (idx !== -1) {\n\t        array.splice(idx, 1);\n\t      }\n\t      return array;\n\t    },\n\t\n\t    /**\n\t     * Returns random number between 2 specified ones.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Number} min lower limit\n\t     * @param {Number} max upper limit\n\t     * @return {Number} random value (between min and max)\n\t     */\n\t    getRandomInt: function(min, max) {\n\t      return Math.floor(Math.random() * (max - min + 1)) + min;\n\t    },\n\t\n\t    /**\n\t     * Transforms degrees to radians.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Number} degrees value in degrees\n\t     * @return {Number} value in radians\n\t     */\n\t    degreesToRadians: function(degrees) {\n\t      return degrees * PiBy180;\n\t    },\n\t\n\t    /**\n\t     * Transforms radians to degrees.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Number} radians value in radians\n\t     * @return {Number} value in degrees\n\t     */\n\t    radiansToDegrees: function(radians) {\n\t      return radians / PiBy180;\n\t    },\n\t\n\t    /**\n\t     * Rotates `point` around `origin` with `radians`\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {fabric.Point} point The point to rotate\n\t     * @param {fabric.Point} origin The origin of the rotation\n\t     * @param {Number} radians The radians of the angle for the rotation\n\t     * @return {fabric.Point} The new rotated point\n\t     */\n\t    rotatePoint: function(point, origin, radians) {\n\t      point.subtractEquals(origin);\n\t      var sin = Math.sin(radians),\n\t          cos = Math.cos(radians),\n\t          rx = point.x * cos - point.y * sin,\n\t          ry = point.x * sin + point.y * cos;\n\t      return new fabric.Point(rx, ry).addEquals(origin);\n\t    },\n\t\n\t    /**\n\t     * Apply transform t to point p\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param  {fabric.Point} p The point to transform\n\t     * @param  {Array} t The transform\n\t     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n\t     * @return {fabric.Point} The transformed point\n\t     */\n\t    transformPoint: function(p, t, ignoreOffset) {\n\t      if (ignoreOffset) {\n\t        return new fabric.Point(\n\t          t[0] * p.x + t[2] * p.y,\n\t          t[1] * p.x + t[3] * p.y\n\t        );\n\t      }\n\t      return new fabric.Point(\n\t        t[0] * p.x + t[2] * p.y + t[4],\n\t        t[1] * p.x + t[3] * p.y + t[5]\n\t      );\n\t    },\n\t\n\t    /**\n\t     * Invert transformation t\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Array} t The transform\n\t     * @return {Array} The inverted transform\n\t     */\n\t    invertTransform: function(t) {\n\t      var a = 1 / (t[0] * t[3] - t[1] * t[2]),\n\t          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\n\t          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\n\t      r[4] = -o.x;\n\t      r[5] = -o.y;\n\t      return r;\n\t    },\n\t\n\t    /**\n\t     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Number|String} number number to operate on\n\t     * @param {Number} fractionDigits number of fraction digits to \"leave\"\n\t     * @return {Number}\n\t     */\n\t    toFixed: function(number, fractionDigits) {\n\t      return parseFloat(Number(number).toFixed(fractionDigits));\n\t    },\n\t\n\t    /**\n\t     * Converts from attribute value to pixel value if applicable.\n\t     * Returns converted pixels or original value not converted.\n\t     * @param {Number|String} value number to operate on\n\t     * @return {Number|String}\n\t     */\n\t    parseUnit: function(value, fontSize) {\n\t      var unit = /\\D{0,2}$/.exec(value),\n\t          number = parseFloat(value);\n\t      if (!fontSize) {\n\t        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\t      }\n\t      switch (unit[0]) {\n\t        case 'mm':\n\t          return number * fabric.DPI / 25.4;\n\t\n\t        case 'cm':\n\t          return number * fabric.DPI / 2.54;\n\t\n\t        case 'in':\n\t          return number * fabric.DPI;\n\t\n\t        case 'pt':\n\t          return number * fabric.DPI / 72; // or * 4 / 3\n\t\n\t        case 'pc':\n\t          return number * fabric.DPI / 72 * 12; // or * 16\n\t\n\t        case 'em':\n\t          return number * fontSize;\n\t\n\t        default:\n\t          return number;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Function which always returns `false`.\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @return {Boolean}\n\t     */\n\t    falseFunction: function() {\n\t      return false;\n\t    },\n\t\n\t    /**\n\t     * Returns klass \"Class\" object of given namespace\n\t     * @memberOf fabric.util\n\t     * @param {String} type Type of object (eg. 'circle')\n\t     * @param {String} namespace Namespace to get klass \"Class\" object from\n\t     * @return {Object} klass \"Class\"\n\t     */\n\t    getKlass: function(type, namespace) {\n\t      // capitalize first letter only\n\t      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n\t      return fabric.util.resolveNamespace(namespace)[type];\n\t    },\n\t\n\t    /**\n\t     * Returns object of given namespace\n\t     * @memberOf fabric.util\n\t     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n\t     * @return {Object} Object for given namespace (default fabric)\n\t     */\n\t    resolveNamespace: function(namespace) {\n\t      if (!namespace) {\n\t        return fabric;\n\t      }\n\t\n\t      var parts = namespace.split('.'),\n\t          len = parts.length,\n\t          obj = global || fabric.window;\n\t\n\t      for (var i = 0; i < len; ++i) {\n\t        obj = obj[parts[i]];\n\t      }\n\t\n\t      return obj;\n\t    },\n\t\n\t    /**\n\t     * Loads image element from given url and passes it to a callback\n\t     * @memberOf fabric.util\n\t     * @param {String} url URL representing an image\n\t     * @param {Function} callback Callback; invoked with loaded image\n\t     * @param {Any} [context] Context to invoke callback in\n\t     * @param {Object} [crossOrigin] crossOrigin value to set image element to\n\t     */\n\t    loadImage: function(url, callback, context, crossOrigin) {\n\t      if (!url) {\n\t        callback && callback.call(context, url);\n\t        return;\n\t      }\n\t\n\t      var img = fabric.util.createImage();\n\t\n\t      /** @ignore */\n\t      img.onload = function () {\n\t        callback && callback.call(context, img);\n\t        img = img.onload = img.onerror = null;\n\t      };\n\t\n\t      /** @ignore */\n\t      img.onerror = function() {\n\t        fabric.log('Error loading ' + img.src);\n\t        callback && callback.call(context, null, true);\n\t        img = img.onload = img.onerror = null;\n\t      };\n\t\n\t      // data-urls appear to be buggy with crossOrigin\n\t      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n\t      // see https://code.google.com/p/chromium/issues/detail?id=315152\n\t      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n\t      if (url.indexOf('data') !== 0 && typeof crossOrigin !== 'undefined') {\n\t        img.crossOrigin = crossOrigin;\n\t      }\n\t\n\t      img.src = url;\n\t    },\n\t\n\t    /**\n\t     * Creates corresponding fabric instances from their object representations\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Array} objects Objects to enliven\n\t     * @param {Function} callback Callback to invoke when all objects are created\n\t     * @param {String} namespace Namespace to get klass \"Class\" object from\n\t     * @param {Function} reviver Method for further parsing of object elements,\n\t     * called after each fabric object created.\n\t     */\n\t    enlivenObjects: function(objects, callback, namespace, reviver) {\n\t      objects = objects || [ ];\n\t\n\t      function onLoaded() {\n\t        if (++numLoadedObjects === numTotalObjects) {\n\t          callback && callback(enlivenedObjects);\n\t        }\n\t      }\n\t\n\t      var enlivenedObjects = [ ],\n\t          numLoadedObjects = 0,\n\t          numTotalObjects = objects.length;\n\t\n\t      if (!numTotalObjects) {\n\t        callback && callback(enlivenedObjects);\n\t        return;\n\t      }\n\t\n\t      objects.forEach(function (o, index) {\n\t        // if sparse array\n\t        if (!o || !o.type) {\n\t          onLoaded();\n\t          return;\n\t        }\n\t        var klass = fabric.util.getKlass(o.type, namespace);\n\t        if (klass.async) {\n\t          klass.fromObject(o, function (obj, error) {\n\t            if (!error) {\n\t              enlivenedObjects[index] = obj;\n\t              reviver && reviver(o, enlivenedObjects[index]);\n\t            }\n\t            onLoaded();\n\t          });\n\t        }\n\t        else {\n\t          enlivenedObjects[index] = klass.fromObject(o);\n\t          reviver && reviver(o, enlivenedObjects[index]);\n\t          onLoaded();\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Groups SVG elements (usually those retrieved from SVG document)\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Array} elements SVG elements to group\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Object|fabric.PathGroup}\n\t     */\n\t    groupSVGElements: function(elements, options, path) {\n\t      var object;\n\t\n\t      object = new fabric.PathGroup(elements, options);\n\t\n\t      if (typeof path !== 'undefined') {\n\t        object.setSourcePath(path);\n\t      }\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Populates an object with properties of another object\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Object} source Source object\n\t     * @param {Object} destination Destination object\n\t     * @return {Array} properties Propertie names to include\n\t     */\n\t    populateWithProperties: function(source, destination, properties) {\n\t      if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\n\t        for (var i = 0, len = properties.length; i < len; i++) {\n\t          if (properties[i] in source) {\n\t            destination[properties[i]] = source[properties[i]];\n\t          }\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Draws a dashed line between two points\n\t     *\n\t     * This method is used to draw dashed line around selection area.\n\t     * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\n\t     *\n\t     * @param {CanvasRenderingContext2D} ctx context\n\t     * @param {Number} x  start x coordinate\n\t     * @param {Number} y start y coordinate\n\t     * @param {Number} x2 end x coordinate\n\t     * @param {Number} y2 end y coordinate\n\t     * @param {Array} da dash array pattern\n\t     */\n\t    drawDashedLine: function(ctx, x, y, x2, y2, da) {\n\t      var dx = x2 - x,\n\t          dy = y2 - y,\n\t          len = sqrt(dx * dx + dy * dy),\n\t          rot = atan2(dy, dx),\n\t          dc = da.length,\n\t          di = 0,\n\t          draw = true;\n\t\n\t      ctx.save();\n\t      ctx.translate(x, y);\n\t      ctx.moveTo(0, 0);\n\t      ctx.rotate(rot);\n\t\n\t      x = 0;\n\t      while (len > x) {\n\t        x += da[di++ % dc];\n\t        if (x > len) {\n\t          x = len;\n\t        }\n\t        ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\n\t        draw = !draw;\n\t      }\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Creates canvas element and initializes it via excanvas if necessary\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {CanvasElement} [canvasEl] optional canvas element to initialize;\n\t     * when not given, element is created implicitly\n\t     * @return {CanvasElement} initialized canvas element\n\t     */\n\t    createCanvasElement: function(canvasEl) {\n\t      canvasEl || (canvasEl = fabric.document.createElement('canvas'));\n\t      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n\t      if (!canvasEl.getContext && typeof G_vmlCanvasManager !== 'undefined') {\n\t        G_vmlCanvasManager.initElement(canvasEl);\n\t      }\n\t      //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\t      return canvasEl;\n\t    },\n\t\n\t    /**\n\t     * Creates image element (works on client and node)\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @return {HTMLImageElement} HTML image element\n\t     */\n\t    createImage: function() {\n\t      return fabric.isLikelyNode\n\t        ? new (__webpack_require__(920).Image)()\n\t        : fabric.document.createElement('img');\n\t    },\n\t\n\t    /**\n\t     * Creates accessors (getXXX, setXXX) for a \"class\", based on \"stateProperties\" array\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {Object} klass \"Class\" to create accessors for\n\t     */\n\t    createAccessors: function(klass) {\n\t      var proto = klass.prototype;\n\t\n\t      for (var i = proto.stateProperties.length; i--; ) {\n\t\n\t        var propName = proto.stateProperties[i],\n\t            capitalizedPropName = propName.charAt(0).toUpperCase() + propName.slice(1),\n\t            setterName = 'set' + capitalizedPropName,\n\t            getterName = 'get' + capitalizedPropName;\n\t\n\t        // using `new Function` for better introspection\n\t        if (!proto[getterName]) {\n\t          proto[getterName] = (function(property) {\n\t            return new Function('return this.get(\"' + property + '\")');\n\t          })(propName);\n\t        }\n\t        if (!proto[setterName]) {\n\t          proto[setterName] = (function(property) {\n\t            return new Function('value', 'return this.set(\"' + property + '\", value)');\n\t          })(propName);\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param {fabric.Object} receiver Object implementing `clipTo` method\n\t     * @param {CanvasRenderingContext2D} ctx Context to clip\n\t     */\n\t    clipContext: function(receiver, ctx) {\n\t      ctx.save();\n\t      ctx.beginPath();\n\t      receiver.clipTo(ctx);\n\t      ctx.clip();\n\t    },\n\t\n\t    /**\n\t     * Multiply matrix A by matrix B to nest transformations\n\t     * @static\n\t     * @memberOf fabric.util\n\t     * @param  {Array} a First transformMatrix\n\t     * @param  {Array} b Second transformMatrix\n\t     * @return {Array} The product of the two transform matrices\n\t     */\n\t    multiplyTransformMatrices: function(a, b) {\n\t      // Matrix multiply a * b\n\t      return [\n\t        a[0] * b[0] + a[2] * b[1],\n\t        a[1] * b[0] + a[3] * b[1],\n\t        a[0] * b[2] + a[2] * b[3],\n\t        a[1] * b[2] + a[3] * b[3],\n\t        a[0] * b[4] + a[2] * b[5] + a[4],\n\t        a[1] * b[4] + a[3] * b[5] + a[5]\n\t      ];\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of function body\n\t     * @param {Function} fn Function to get body of\n\t     * @return {String} Function body\n\t     */\n\t    getFunctionBody: function(fn) {\n\t      return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\n\t    },\n\t\n\t    /**\n\t     * Returns true if context has transparent pixel\n\t     * at specified location (taking tolerance into account)\n\t     * @param {CanvasRenderingContext2D} ctx context\n\t     * @param {Number} x x coordinate\n\t     * @param {Number} y y coordinate\n\t     * @param {Number} tolerance Tolerance\n\t     */\n\t    isTransparent: function(ctx, x, y, tolerance) {\n\t\n\t      // If tolerance is > 0 adjust start coords to take into account.\n\t      // If moves off Canvas fix to 0\n\t      if (tolerance > 0) {\n\t        if (x > tolerance) {\n\t          x -= tolerance;\n\t        }\n\t        else {\n\t          x = 0;\n\t        }\n\t        if (y > tolerance) {\n\t          y -= tolerance;\n\t        }\n\t        else {\n\t          y = 0;\n\t        }\n\t      }\n\t\n\t      var _isTransparent = true,\n\t          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1);\n\t\n\t      // Split image data - for tolerance > 1, pixelDataSize = 4;\n\t      for (var i = 3, l = imageData.data.length; i < l; i += 4) {\n\t        var temp = imageData.data[i];\n\t        _isTransparent = temp <= 0;\n\t        if (_isTransparent === false) {\n\t          break; // Stop if colour found\n\t        }\n\t      }\n\t\n\t      imageData = null;\n\t\n\t      return _isTransparent;\n\t    }\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  var arcToSegmentsCache = { },\n\t      segmentToBezierCache = { },\n\t      boundsOfCurveCache = { },\n\t      _join = Array.prototype.join;\n\t\n\t  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n\t   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n\t   * http://mozilla.org/MPL/2.0/\n\t   */\n\t  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n\t    var argsString = _join.call(arguments);\n\t    if (arcToSegmentsCache[argsString]) {\n\t      return arcToSegmentsCache[argsString];\n\t    }\n\t\n\t    var PI = Math.PI, th = rotateX * PI / 180,\n\t        sinTh = Math.sin(th),\n\t        cosTh = Math.cos(th),\n\t        fromX = 0, fromY = 0;\n\t\n\t    rx = Math.abs(rx);\n\t    ry = Math.abs(ry);\n\t\n\t    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\n\t        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\n\t        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\n\t        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\n\t        root = 0;\n\t\n\t    if (pl < 0) {\n\t      var s = Math.sqrt(1 - pl/(rx2 * ry2));\n\t      rx *= s;\n\t      ry *= s;\n\t    }\n\t    else {\n\t      root = (large === sweep ? -1.0 : 1.0) *\n\t              Math.sqrt( pl /(rx2 * py2 + ry2 * px2));\n\t    }\n\t\n\t    var cx = root * rx * py / ry,\n\t        cy = -root * ry * px / rx,\n\t        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\n\t        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\n\t        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\n\t        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n\t\n\t    if (sweep === 0 && dtheta > 0) {\n\t      dtheta -= 2 * PI;\n\t    }\n\t    else if (sweep === 1 && dtheta < 0) {\n\t      dtheta += 2 * PI;\n\t    }\n\t\n\t    // Convert into cubic bezier segments <= 90deg\n\t    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\n\t        result = [], mDelta = dtheta / segments,\n\t        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\n\t        th3 = mTheta + mDelta;\n\t\n\t    for (var i = 0; i < segments; i++) {\n\t      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n\t      fromX = result[i][4];\n\t      fromY = result[i][5];\n\t      mTheta = th3;\n\t      th3 += mDelta;\n\t    }\n\t    arcToSegmentsCache[argsString] = result;\n\t    return result;\n\t  }\n\t\n\t  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n\t    var argsString2 = _join.call(arguments);\n\t    if (segmentToBezierCache[argsString2]) {\n\t      return segmentToBezierCache[argsString2];\n\t    }\n\t\n\t    var costh2 = Math.cos(th2),\n\t        sinth2 = Math.sin(th2),\n\t        costh3 = Math.cos(th3),\n\t        sinth3 = Math.sin(th3),\n\t        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\n\t        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\n\t        cp1X = fromX + mT * ( - cosTh * rx * sinth2 - sinTh * ry * costh2),\n\t        cp1Y = fromY + mT * ( - sinTh * rx * sinth2 + cosTh * ry * costh2),\n\t        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\n\t        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\n\t\n\t    segmentToBezierCache[argsString2] = [\n\t      cp1X, cp1Y,\n\t      cp2X, cp2Y,\n\t      toX, toY\n\t    ];\n\t    return segmentToBezierCache[argsString2];\n\t  }\n\t\n\t  /*\n\t   * Private\n\t   */\n\t  function calcVectorAngle(ux, uy, vx, vy) {\n\t    var ta = Math.atan2(uy, ux),\n\t        tb = Math.atan2(vy, vx);\n\t    if (tb >= ta) {\n\t      return tb - ta;\n\t    }\n\t    else {\n\t      return 2 * Math.PI - (ta - tb);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Draws arc\n\t   * @param {CanvasRenderingContext2D} ctx\n\t   * @param {Number} fx\n\t   * @param {Number} fy\n\t   * @param {Array} coords\n\t   */\n\t  fabric.util.drawArc = function(ctx, fx, fy, coords) {\n\t    var rx = coords[0],\n\t        ry = coords[1],\n\t        rot = coords[2],\n\t        large = coords[3],\n\t        sweep = coords[4],\n\t        tx = coords[5],\n\t        ty = coords[6],\n\t        segs = [[ ], [ ], [ ], [ ]],\n\t        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\t\n\t    for (var i = 0, len = segsNorm.length; i < len; i++) {\n\t      segs[i][0] = segsNorm[i][0] + fx;\n\t      segs[i][1] = segsNorm[i][1] + fy;\n\t      segs[i][2] = segsNorm[i][2] + fx;\n\t      segs[i][3] = segsNorm[i][3] + fy;\n\t      segs[i][4] = segsNorm[i][4] + fx;\n\t      segs[i][5] = segsNorm[i][5] + fy;\n\t      ctx.bezierCurveTo.apply(ctx, segs[i]);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Calculate bounding box of a elliptic-arc\n\t   * @param {Number} fx start point of arc\n\t   * @param {Number} fy\n\t   * @param {Number} rx horizontal radius\n\t   * @param {Number} ry vertical radius\n\t   * @param {Number} rot angle of horizontal axe\n\t   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\n\t   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\n\t   * @param {Number} tx end point of arc\n\t   * @param {Number} ty\n\t   */\n\t  fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\n\t\n\t    var fromX = 0, fromY = 0, bound = [ ], bounds = [ ],\n\t    segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot),\n\t    boundCopy = [[ ], [ ]];\n\t\n\t    for (var i = 0, len = segs.length; i < len; i++) {\n\t      bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\n\t      boundCopy[0].x = bound[0].x + fx;\n\t      boundCopy[0].y = bound[0].y + fy;\n\t      boundCopy[1].x = bound[1].x + fx;\n\t      boundCopy[1].y = bound[1].y + fy;\n\t      bounds.push(boundCopy[0]);\n\t      bounds.push(boundCopy[1]);\n\t      fromX = segs[i][4];\n\t      fromY = segs[i][5];\n\t    }\n\t    return bounds;\n\t  };\n\t\n\t  /**\n\t   * Calculate bounding box of a beziercurve\n\t   * @param {Number} x0 starting point\n\t   * @param {Number} y0\n\t   * @param {Number} x1 first control point\n\t   * @param {Number} y1\n\t   * @param {Number} x2 secondo control point\n\t   * @param {Number} y2\n\t   * @param {Number} x3 end of beizer\n\t   * @param {Number} y3\n\t   */\n\t  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n\t  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t    var argsString = _join.call(arguments);\n\t    if (boundsOfCurveCache[argsString]) {\n\t      return boundsOfCurveCache[argsString];\n\t    }\n\t\n\t    var sqrt = Math.sqrt,\n\t        min = Math.min, max = Math.max,\n\t        abs = Math.abs, tvalues = [ ],\n\t        bounds = [[ ], [ ]],\n\t        a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\t\n\t    b = 6 * x0 - 12 * x1 + 6 * x2;\n\t    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t    c = 3 * x1 - 3 * x0;\n\t\n\t    for (var i = 0; i < 2; ++i) {\n\t      if (i > 0) {\n\t        b = 6 * y0 - 12 * y1 + 6 * y2;\n\t        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t        c = 3 * y1 - 3 * y0;\n\t      }\n\t\n\t      if (abs(a) < 1e-12) {\n\t        if (abs(b) < 1e-12) {\n\t          continue;\n\t        }\n\t        t = -c / b;\n\t        if (0 < t && t < 1) {\n\t          tvalues.push(t);\n\t        }\n\t        continue;\n\t      }\n\t      b2ac = b * b - 4 * c * a;\n\t      if (b2ac < 0) {\n\t        continue;\n\t      }\n\t      sqrtb2ac = sqrt(b2ac);\n\t      t1 = (-b + sqrtb2ac) / (2 * a);\n\t      if (0 < t1 && t1 < 1) {\n\t        tvalues.push(t1);\n\t      }\n\t      t2 = (-b - sqrtb2ac) / (2 * a);\n\t      if (0 < t2 && t2 < 1) {\n\t        tvalues.push(t2);\n\t      }\n\t    }\n\t\n\t    var x, y, j = tvalues.length, jlen = j, mt;\n\t    while (j--) {\n\t      t = tvalues[j];\n\t      mt = 1 - t;\n\t      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n\t      bounds[0][j] = x;\n\t\n\t      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n\t      bounds[1][j] = y;\n\t    }\n\t\n\t    bounds[0][jlen] = x0;\n\t    bounds[1][jlen] = y0;\n\t    bounds[0][jlen + 1] = x3;\n\t    bounds[1][jlen + 1] = y3;\n\t    var result = [\n\t      {\n\t        x: min.apply(null, bounds[0]),\n\t        y: min.apply(null, bounds[1])\n\t      },\n\t      {\n\t        x: max.apply(null, bounds[0]),\n\t        y: max.apply(null, bounds[1])\n\t      }\n\t    ];\n\t    boundsOfCurveCache[argsString] = result;\n\t    return result;\n\t  }\n\t\n\t  fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var slice = Array.prototype.slice;\n\t\n\t  /* _ES5_COMPAT_START_ */\n\t\n\t  if (!Array.prototype.indexOf) {\n\t    /**\n\t     * Finds index of an element in an array\n\t     * @param {Any} searchElement\n\t     * @param {Number} [fromIndex]\n\t     * @return {Number}\n\t     */\n\t    Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n\t      if (this === void 0 || this === null) {\n\t        throw new TypeError();\n\t      }\n\t      var t = Object(this), len = t.length >>> 0;\n\t      if (len === 0) {\n\t        return -1;\n\t      }\n\t      var n = 0;\n\t      if (arguments.length > 0) {\n\t        n = Number(arguments[1]);\n\t        if (n !== n) { // shortcut for verifying if it's NaN\n\t          n = 0;\n\t        }\n\t        else if (n !== 0 && n !== Number.POSITIVE_INFINITY && n !== Number.NEGATIVE_INFINITY) {\n\t          n = (n > 0 || -1) * Math.floor(Math.abs(n));\n\t        }\n\t      }\n\t      if (n >= len) {\n\t        return -1;\n\t      }\n\t      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n\t      for (; k < len; k++) {\n\t        if (k in t && t[k] === searchElement) {\n\t          return k;\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.forEach) {\n\t    /**\n\t     * Iterates an array, invoking callback for each element\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Array}\n\t     */\n\t    Array.prototype.forEach = function(fn, context) {\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this) {\n\t          fn.call(context, this[i], i, this);\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.map) {\n\t    /**\n\t     * Returns a result of iterating over an array, invoking callback for each element\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Array}\n\t     */\n\t    Array.prototype.map = function(fn, context) {\n\t      var result = [ ];\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this) {\n\t          result[i] = fn.call(context, this[i], i, this);\n\t        }\n\t      }\n\t      return result;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.every) {\n\t    /**\n\t     * Returns true if a callback returns truthy value for all elements in an array\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Boolean}\n\t     */\n\t    Array.prototype.every = function(fn, context) {\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this && !fn.call(context, this[i], i, this)) {\n\t          return false;\n\t        }\n\t      }\n\t      return true;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.some) {\n\t    /**\n\t     * Returns true if a callback returns truthy value for at least one element in an array\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Boolean}\n\t     */\n\t    Array.prototype.some = function(fn, context) {\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this && fn.call(context, this[i], i, this)) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.filter) {\n\t    /**\n\t     * Returns the result of iterating over elements in an array\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [context] Context to invoke callback in\n\t     * @return {Array}\n\t     */\n\t    Array.prototype.filter = function(fn, context) {\n\t      var result = [ ], val;\n\t      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n\t        if (i in this) {\n\t          val = this[i]; // in case fn mutates this\n\t          if (fn.call(context, val, i, this)) {\n\t            result.push(val);\n\t          }\n\t        }\n\t      }\n\t      return result;\n\t    };\n\t  }\n\t\n\t  if (!Array.prototype.reduce) {\n\t    /**\n\t     * Returns \"folded\" (reduced) result of iterating over elements in an array\n\t     * @param {Function} fn Callback to invoke for each element\n\t     * @param {Object} [initial] Object to use as the first argument to the first call of the callback\n\t     * @return {Any}\n\t     */\n\t    Array.prototype.reduce = function(fn /*, initial*/) {\n\t      var len = this.length >>> 0,\n\t          i = 0,\n\t          rv;\n\t\n\t      if (arguments.length > 1) {\n\t        rv = arguments[1];\n\t      }\n\t      else {\n\t        do {\n\t          if (i in this) {\n\t            rv = this[i++];\n\t            break;\n\t          }\n\t          // if array contains no values, no initial value to return\n\t          if (++i >= len) {\n\t            throw new TypeError();\n\t          }\n\t        }\n\t        while (true);\n\t      }\n\t      for (; i < len; i++) {\n\t        if (i in this) {\n\t          rv = fn.call(null, rv, this[i], i, this);\n\t        }\n\t      }\n\t      return rv;\n\t    };\n\t  }\n\t\n\t  /* _ES5_COMPAT_END_ */\n\t\n\t  /**\n\t   * Invokes method on all items in a given array\n\t   * @memberOf fabric.util.array\n\t   * @param {Array} array Array to iterate over\n\t   * @param {String} method Name of a method to invoke\n\t   * @return {Array}\n\t   */\n\t  function invoke(array, method) {\n\t    var args = slice.call(arguments, 2), result = [ ];\n\t    for (var i = 0, len = array.length; i < len; i++) {\n\t      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Finds maximum value in array (not necessarily \"first\" one)\n\t   * @memberOf fabric.util.array\n\t   * @param {Array} array Array to iterate over\n\t   * @param {String} byProperty\n\t   * @return {Any}\n\t   */\n\t  function max(array, byProperty) {\n\t    return find(array, byProperty, function(value1, value2) {\n\t      return value1 >= value2;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Finds minimum value in array (not necessarily \"first\" one)\n\t   * @memberOf fabric.util.array\n\t   * @param {Array} array Array to iterate over\n\t   * @param {String} byProperty\n\t   * @return {Any}\n\t   */\n\t  function min(array, byProperty) {\n\t    return find(array, byProperty, function(value1, value2) {\n\t      return value1 < value2;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function find(array, byProperty, condition) {\n\t    if (!array || array.length === 0) {\n\t      return;\n\t    }\n\t\n\t    var i = array.length - 1,\n\t        result = byProperty ? array[i][byProperty] : array[i];\n\t    if (byProperty) {\n\t      while (i--) {\n\t        if (condition(array[i][byProperty], result)) {\n\t          result = array[i][byProperty];\n\t        }\n\t      }\n\t    }\n\t    else {\n\t      while (i--) {\n\t        if (condition(array[i], result)) {\n\t          result = array[i];\n\t        }\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * @namespace fabric.util.array\n\t   */\n\t  fabric.util.array = {\n\t    invoke: invoke,\n\t    min: min,\n\t    max: max\n\t  };\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * Copies all enumerable properties of one object to another\n\t   * @memberOf fabric.util.object\n\t   * @param {Object} destination Where to copy to\n\t   * @param {Object} source Where to copy from\n\t   * @return {Object}\n\t   */\n\t  function extend(destination, source) {\n\t    // JScript DontEnum bug is not taken care of\n\t    for (var property in source) {\n\t      destination[property] = source[property];\n\t    }\n\t    return destination;\n\t  }\n\t\n\t  /**\n\t   * Creates an empty object and copies all enumerable properties of another object to it\n\t   * @memberOf fabric.util.object\n\t   * @param {Object} object Object to clone\n\t   * @return {Object}\n\t   */\n\t  function clone(object) {\n\t    return extend({ }, object);\n\t  }\n\t\n\t  /** @namespace fabric.util.object */\n\t  fabric.util.object = {\n\t    extend: extend,\n\t    clone: clone\n\t  };\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  /* _ES5_COMPAT_START_ */\n\t  if (!String.prototype.trim) {\n\t    /**\n\t     * Trims a string (removing whitespace from the beginning and the end)\n\t     * @function external:String#trim\n\t     * @see <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/Trim\">String#trim on MDN</a>\n\t     */\n\t    String.prototype.trim = function () {\n\t      // this trim is not fully ES3 or ES5 compliant, but it should cover most cases for now\n\t      return this.replace(/^[\\s\\xA0]+/, '').replace(/[\\s\\xA0]+$/, '');\n\t    };\n\t  }\n\t  /* _ES5_COMPAT_END_ */\n\t\n\t  /**\n\t   * Camelizes a string\n\t   * @memberOf fabric.util.string\n\t   * @param {String} string String to camelize\n\t   * @return {String} Camelized version of a string\n\t   */\n\t  function camelize(string) {\n\t    return string.replace(/-+(.)?/g, function(match, character) {\n\t      return character ? character.toUpperCase() : '';\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Capitalizes a string\n\t   * @memberOf fabric.util.string\n\t   * @param {String} string String to capitalize\n\t   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n\t   * and other letters stay untouched, if false first letter is capitalized\n\t   * and other letters are converted to lowercase.\n\t   * @return {String} Capitalized version of a string\n\t   */\n\t  function capitalize(string, firstLetterOnly) {\n\t    return string.charAt(0).toUpperCase() +\n\t      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n\t  }\n\t\n\t  /**\n\t   * Escapes XML in a string\n\t   * @memberOf fabric.util.string\n\t   * @param {String} string String to escape\n\t   * @return {String} Escaped version of a string\n\t   */\n\t  function escapeXml(string) {\n\t    return string.replace(/&/g, '&amp;')\n\t       .replace(/\"/g, '&quot;')\n\t       .replace(/'/g, '&apos;')\n\t       .replace(/</g, '&lt;')\n\t       .replace(/>/g, '&gt;');\n\t  }\n\t\n\t  /**\n\t   * String utilities\n\t   * @namespace fabric.util.string\n\t   */\n\t  fabric.util.string = {\n\t    camelize: camelize,\n\t    capitalize: capitalize,\n\t    escapeXml: escapeXml\n\t  };\n\t}());\n\t\n\t\n\t/* _ES5_COMPAT_START_ */\n\t(function() {\n\t\n\t  var slice = Array.prototype.slice,\n\t      apply = Function.prototype.apply,\n\t      Dummy = function() { };\n\t\n\t  if (!Function.prototype.bind) {\n\t    /**\n\t     * Cross-browser approximation of ES5 Function.prototype.bind (not fully spec conforming)\n\t     * @see <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\">Function#bind on MDN</a>\n\t     * @param {Object} thisArg Object to bind function to\n\t     * @param {Any[]} [...] Values to pass to a bound function\n\t     * @return {Function}\n\t     */\n\t    Function.prototype.bind = function(thisArg) {\n\t      var _this = this, args = slice.call(arguments, 1), bound;\n\t      if (args.length) {\n\t        bound = function() {\n\t          return apply.call(_this, this instanceof Dummy ? this : thisArg, args.concat(slice.call(arguments)));\n\t        };\n\t      }\n\t      else {\n\t        /** @ignore */\n\t        bound = function() {\n\t          return apply.call(_this, this instanceof Dummy ? this : thisArg, arguments);\n\t        };\n\t      }\n\t      Dummy.prototype = this.prototype;\n\t      bound.prototype = new Dummy();\n\t\n\t      return bound;\n\t    };\n\t  }\n\t\n\t})();\n\t/* _ES5_COMPAT_END_ */\n\t\n\t\n\t(function() {\n\t\n\t  var slice = Array.prototype.slice, emptyFunction = function() { },\n\t\n\t      IS_DONTENUM_BUGGY = (function() {\n\t        for (var p in { toString: 1 }) {\n\t          if (p === 'toString') {\n\t            return false;\n\t          }\n\t        }\n\t        return true;\n\t      })(),\n\t\n\t      /** @ignore */\n\t      addMethods = function(klass, source, parent) {\n\t        for (var property in source) {\n\t\n\t          if (property in klass.prototype &&\n\t              typeof klass.prototype[property] === 'function' &&\n\t              (source[property] + '').indexOf('callSuper') > -1) {\n\t\n\t            klass.prototype[property] = (function(property) {\n\t              return function() {\n\t\n\t                var superclass = this.constructor.superclass;\n\t                this.constructor.superclass = parent;\n\t                var returnValue = source[property].apply(this, arguments);\n\t                this.constructor.superclass = superclass;\n\t\n\t                if (property !== 'initialize') {\n\t                  return returnValue;\n\t                }\n\t              };\n\t            })(property);\n\t          }\n\t          else {\n\t            klass.prototype[property] = source[property];\n\t          }\n\t\n\t          if (IS_DONTENUM_BUGGY) {\n\t            if (source.toString !== Object.prototype.toString) {\n\t              klass.prototype.toString = source.toString;\n\t            }\n\t            if (source.valueOf !== Object.prototype.valueOf) {\n\t              klass.prototype.valueOf = source.valueOf;\n\t            }\n\t          }\n\t        }\n\t      };\n\t\n\t  function Subclass() { }\n\t\n\t  function callSuper(methodName) {\n\t    var fn = this.constructor.superclass.prototype[methodName];\n\t    return (arguments.length > 1)\n\t      ? fn.apply(this, slice.call(arguments, 1))\n\t      : fn.call(this);\n\t  }\n\t\n\t  /**\n\t   * Helper for creation of \"classes\".\n\t   * @memberOf fabric.util\n\t   * @param {Function} [parent] optional \"Class\" to inherit from\n\t   * @param {Object} [properties] Properties shared by all instances of this class\n\t   *                  (be careful modifying objects defined here as this would affect all instances)\n\t   */\n\t  function createClass() {\n\t    var parent = null,\n\t        properties = slice.call(arguments, 0);\n\t\n\t    if (typeof properties[0] === 'function') {\n\t      parent = properties.shift();\n\t    }\n\t    function klass() {\n\t      this.initialize.apply(this, arguments);\n\t    }\n\t\n\t    klass.superclass = parent;\n\t    klass.subclasses = [ ];\n\t\n\t    if (parent) {\n\t      Subclass.prototype = parent.prototype;\n\t      klass.prototype = new Subclass();\n\t      parent.subclasses.push(klass);\n\t    }\n\t    for (var i = 0, length = properties.length; i < length; i++) {\n\t      addMethods(klass, properties[i], parent);\n\t    }\n\t    if (!klass.prototype.initialize) {\n\t      klass.prototype.initialize = emptyFunction;\n\t    }\n\t    klass.prototype.constructor = klass;\n\t    klass.prototype.callSuper = callSuper;\n\t    return klass;\n\t  }\n\t\n\t  fabric.util.createClass = createClass;\n\t})();\n\t\n\t\n\t(function () {\n\t\n\t  var unknown = 'unknown';\n\t\n\t  /* EVENT HANDLING */\n\t\n\t  function areHostMethods(object) {\n\t    var methodNames = Array.prototype.slice.call(arguments, 1),\n\t        t, i, len = methodNames.length;\n\t    for (i = 0; i < len; i++) {\n\t      t = typeof object[methodNames[i]];\n\t      if (!(/^(?:function|object|unknown)$/).test(t)) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  }\n\t\n\t  /** @ignore */\n\t  var getElement,\n\t      setElement,\n\t      getUniqueId = (function () {\n\t        var uid = 0;\n\t        return function (element) {\n\t          return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);\n\t        };\n\t      })();\n\t\n\t  (function () {\n\t    var elements = { };\n\t    /** @ignore */\n\t    getElement = function (uid) {\n\t      return elements[uid];\n\t    };\n\t    /** @ignore */\n\t    setElement = function (uid, element) {\n\t      elements[uid] = element;\n\t    };\n\t  })();\n\t\n\t  function createListener(uid, handler) {\n\t    return {\n\t      handler: handler,\n\t      wrappedHandler: createWrappedHandler(uid, handler)\n\t    };\n\t  }\n\t\n\t  function createWrappedHandler(uid, handler) {\n\t    return function (e) {\n\t      handler.call(getElement(uid), e || fabric.window.event);\n\t    };\n\t  }\n\t\n\t  function createDispatcher(uid, eventName) {\n\t    return function (e) {\n\t      if (handlers[uid] && handlers[uid][eventName]) {\n\t        var handlersForEvent = handlers[uid][eventName];\n\t        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n\t          handlersForEvent[i].call(this, e || fabric.window.event);\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  var shouldUseAddListenerRemoveListener = (\n\t        areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&\n\t        areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),\n\t\n\t      shouldUseAttachEventDetachEvent = (\n\t        areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&\n\t        areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),\n\t\n\t      // IE branch\n\t      listeners = { },\n\t\n\t      // DOM L0 branch\n\t      handlers = { },\n\t\n\t      addListener, removeListener;\n\t\n\t  if (shouldUseAddListenerRemoveListener) {\n\t    /** @ignore */\n\t    addListener = function (element, eventName, handler) {\n\t      element.addEventListener(eventName, handler, false);\n\t    };\n\t    /** @ignore */\n\t    removeListener = function (element, eventName, handler) {\n\t      element.removeEventListener(eventName, handler, false);\n\t    };\n\t  }\n\t\n\t  else if (shouldUseAttachEventDetachEvent) {\n\t    /** @ignore */\n\t    addListener = function (element, eventName, handler) {\n\t      var uid = getUniqueId(element);\n\t      setElement(uid, element);\n\t      if (!listeners[uid]) {\n\t        listeners[uid] = { };\n\t      }\n\t      if (!listeners[uid][eventName]) {\n\t        listeners[uid][eventName] = [ ];\n\t\n\t      }\n\t      var listener = createListener(uid, handler);\n\t      listeners[uid][eventName].push(listener);\n\t      element.attachEvent('on' + eventName, listener.wrappedHandler);\n\t    };\n\t    /** @ignore */\n\t    removeListener = function (element, eventName, handler) {\n\t      var uid = getUniqueId(element), listener;\n\t      if (listeners[uid] && listeners[uid][eventName]) {\n\t        for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {\n\t          listener = listeners[uid][eventName][i];\n\t          if (listener && listener.handler === handler) {\n\t            element.detachEvent('on' + eventName, listener.wrappedHandler);\n\t            listeners[uid][eventName][i] = null;\n\t          }\n\t        }\n\t      }\n\t    };\n\t  }\n\t  else {\n\t    /** @ignore */\n\t    addListener = function (element, eventName, handler) {\n\t      var uid = getUniqueId(element);\n\t      if (!handlers[uid]) {\n\t        handlers[uid] = { };\n\t      }\n\t      if (!handlers[uid][eventName]) {\n\t        handlers[uid][eventName] = [ ];\n\t        var existingHandler = element['on' + eventName];\n\t        if (existingHandler) {\n\t          handlers[uid][eventName].push(existingHandler);\n\t        }\n\t        element['on' + eventName] = createDispatcher(uid, eventName);\n\t      }\n\t      handlers[uid][eventName].push(handler);\n\t    };\n\t    /** @ignore */\n\t    removeListener = function (element, eventName, handler) {\n\t      var uid = getUniqueId(element);\n\t      if (handlers[uid] && handlers[uid][eventName]) {\n\t        var handlersForEvent = handlers[uid][eventName];\n\t        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n\t          if (handlersForEvent[i] === handler) {\n\t            handlersForEvent.splice(i, 1);\n\t          }\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Adds an event listener to an element\n\t   * @function\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element\n\t   * @param {String} eventName\n\t   * @param {Function} handler\n\t   */\n\t  fabric.util.addListener = addListener;\n\t\n\t  /**\n\t   * Removes an event listener from an element\n\t   * @function\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element\n\t   * @param {String} eventName\n\t   * @param {Function} handler\n\t   */\n\t  fabric.util.removeListener = removeListener;\n\t\n\t  /**\n\t   * Cross-browser wrapper for getting event's coordinates\n\t   * @memberOf fabric.util\n\t   * @param {Event} event Event object\n\t   */\n\t  function getPointer(event) {\n\t    event || (event = fabric.window.event);\n\t\n\t    var element = event.target ||\n\t                  (typeof event.srcElement !== unknown ? event.srcElement : null),\n\t\n\t        scroll = fabric.util.getScrollLeftTop(element);\n\t\n\t    return {\n\t      x: pointerX(event) + scroll.left,\n\t      y: pointerY(event) + scroll.top\n\t    };\n\t  }\n\t\n\t  var pointerX = function(event) {\n\t    // looks like in IE (<9) clientX at certain point (apparently when mouseup fires on VML element)\n\t    // is represented as COM object, with all the consequences, like \"unknown\" type and error on [[Get]]\n\t    // need to investigate later\n\t    return (typeof event.clientX !== unknown ? event.clientX : 0);\n\t  },\n\t\n\t  pointerY = function(event) {\n\t    return (typeof event.clientY !== unknown ? event.clientY : 0);\n\t  };\n\t\n\t  function _getPointer(event, pageProp, clientProp) {\n\t    var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';\n\t\n\t    return (event[touchProp] && event[touchProp][0]\n\t      ? (event[touchProp][0][pageProp] - (event[touchProp][0][pageProp] - event[touchProp][0][clientProp]))\n\t        || event[clientProp]\n\t      : event[clientProp]);\n\t  }\n\t\n\t  if (fabric.isTouchSupported) {\n\t    pointerX = function(event) {\n\t      return _getPointer(event, 'pageX', 'clientX');\n\t    };\n\t    pointerY = function(event) {\n\t      return _getPointer(event, 'pageY', 'clientY');\n\t    };\n\t  }\n\t\n\t  fabric.util.getPointer = getPointer;\n\t\n\t  fabric.util.object.extend(fabric.util, fabric.Observable);\n\t\n\t})();\n\t\n\t\n\t(function () {\n\t\n\t  /**\n\t   * Cross-browser wrapper for setting element's style\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element\n\t   * @param {Object} styles\n\t   * @return {HTMLElement} Element that was passed as a first argument\n\t   */\n\t  function setStyle(element, styles) {\n\t    var elementStyle = element.style;\n\t    if (!elementStyle) {\n\t      return element;\n\t    }\n\t    if (typeof styles === 'string') {\n\t      element.style.cssText += ';' + styles;\n\t      return styles.indexOf('opacity') > -1\n\t        ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\n\t        : element;\n\t    }\n\t    for (var property in styles) {\n\t      if (property === 'opacity') {\n\t        setOpacity(element, styles[property]);\n\t      }\n\t      else {\n\t        var normalizedProperty = (property === 'float' || property === 'cssFloat')\n\t          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\n\t          : property;\n\t        elementStyle[normalizedProperty] = styles[property];\n\t      }\n\t    }\n\t    return element;\n\t  }\n\t\n\t  var parseEl = fabric.document.createElement('div'),\n\t      supportsOpacity = typeof parseEl.style.opacity === 'string',\n\t      supportsFilters = typeof parseEl.style.filter === 'string',\n\t      reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\n\t\n\t      /** @ignore */\n\t      setOpacity = function (element) { return element; };\n\t\n\t  if (supportsOpacity) {\n\t    /** @ignore */\n\t    setOpacity = function(element, value) {\n\t      element.style.opacity = value;\n\t      return element;\n\t    };\n\t  }\n\t  else if (supportsFilters) {\n\t    /** @ignore */\n\t    setOpacity = function(element, value) {\n\t      var es = element.style;\n\t      if (element.currentStyle && !element.currentStyle.hasLayout) {\n\t        es.zoom = 1;\n\t      }\n\t      if (reOpacity.test(es.filter)) {\n\t        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\n\t        es.filter = es.filter.replace(reOpacity, value);\n\t      }\n\t      else {\n\t        es.filter += ' alpha(opacity=' + (value * 100) + ')';\n\t      }\n\t      return element;\n\t    };\n\t  }\n\t\n\t  fabric.util.setStyle = setStyle;\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var _slice = Array.prototype.slice;\n\t\n\t  /**\n\t   * Takes id and returns an element with that id (if one exists in a document)\n\t   * @memberOf fabric.util\n\t   * @param {String|HTMLElement} id\n\t   * @return {HTMLElement|null}\n\t   */\n\t  function getById(id) {\n\t    return typeof id === 'string' ? fabric.document.getElementById(id) : id;\n\t  }\n\t\n\t  var sliceCanConvertNodelists,\n\t      /**\n\t       * Converts an array-like object (e.g. arguments or NodeList) to an array\n\t       * @memberOf fabric.util\n\t       * @param {Object} arrayLike\n\t       * @return {Array}\n\t       */\n\t      toArray = function(arrayLike) {\n\t        return _slice.call(arrayLike, 0);\n\t      };\n\t\n\t  try {\n\t    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n\t  }\n\t  catch (err) { }\n\t\n\t  if (!sliceCanConvertNodelists) {\n\t    toArray = function(arrayLike) {\n\t      var arr = new Array(arrayLike.length), i = arrayLike.length;\n\t      while (i--) {\n\t        arr[i] = arrayLike[i];\n\t      }\n\t      return arr;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Creates specified element with specified attributes\n\t   * @memberOf fabric.util\n\t   * @param {String} tagName Type of an element to create\n\t   * @param {Object} [attributes] Attributes to set on an element\n\t   * @return {HTMLElement} Newly created element\n\t   */\n\t  function makeElement(tagName, attributes) {\n\t    var el = fabric.document.createElement(tagName);\n\t    for (var prop in attributes) {\n\t      if (prop === 'class') {\n\t        el.className = attributes[prop];\n\t      }\n\t      else if (prop === 'for') {\n\t        el.htmlFor = attributes[prop];\n\t      }\n\t      else {\n\t        el.setAttribute(prop, attributes[prop]);\n\t      }\n\t    }\n\t    return el;\n\t  }\n\t\n\t  /**\n\t   * Adds class to an element\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to add class to\n\t   * @param {String} className Class to add to an element\n\t   */\n\t  function addClass(element, className) {\n\t    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\n\t      element.className += (element.className ? ' ' : '') + className;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Wraps element with another element\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to wrap\n\t   * @param {HTMLElement|String} wrapper Element to wrap with\n\t   * @param {Object} [attributes] Attributes to set on a wrapper\n\t   * @return {HTMLElement} wrapper\n\t   */\n\t  function wrapElement(element, wrapper, attributes) {\n\t    if (typeof wrapper === 'string') {\n\t      wrapper = makeElement(wrapper, attributes);\n\t    }\n\t    if (element.parentNode) {\n\t      element.parentNode.replaceChild(wrapper, element);\n\t    }\n\t    wrapper.appendChild(element);\n\t    return wrapper;\n\t  }\n\t\n\t  /**\n\t   * Returns element scroll offsets\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to operate on\n\t   * @return {Object} Object with left/top values\n\t   */\n\t  function getScrollLeftTop(element) {\n\t\n\t    var left = 0,\n\t        top = 0,\n\t        docElement = fabric.document.documentElement,\n\t        body = fabric.document.body || {\n\t          scrollLeft: 0, scrollTop: 0\n\t        };\n\t\n\t    while (element && element.parentNode) {\n\t\n\t      element = element.parentNode;\n\t\n\t      if (element === fabric.document) {\n\t        left = body.scrollLeft || docElement.scrollLeft || 0;\n\t        top = body.scrollTop ||  docElement.scrollTop || 0;\n\t      }\n\t      else {\n\t        left += element.scrollLeft || 0;\n\t        top += element.scrollTop || 0;\n\t      }\n\t\n\t      if (element.nodeType === 1 &&\n\t          fabric.util.getElementStyle(element, 'position') === 'fixed') {\n\t        break;\n\t      }\n\t    }\n\t\n\t    return { left: left, top: top };\n\t  }\n\t\n\t  /**\n\t   * Returns offset for a given element\n\t   * @function\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to get offset for\n\t   * @return {Object} Object with \"left\" and \"top\" properties\n\t   */\n\t  function getElementOffset(element) {\n\t    var docElem,\n\t        doc = element && element.ownerDocument,\n\t        box = { left: 0, top: 0 },\n\t        offset = { left: 0, top: 0 },\n\t        scrollLeftTop,\n\t        offsetAttributes = {\n\t          borderLeftWidth: 'left',\n\t          borderTopWidth:  'top',\n\t          paddingLeft:     'left',\n\t          paddingTop:      'top'\n\t        };\n\t\n\t    if (!doc) {\n\t      return offset;\n\t    }\n\t\n\t    for (var attr in offsetAttributes) {\n\t      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n\t    }\n\t\n\t    docElem = doc.documentElement;\n\t    if ( typeof element.getBoundingClientRect !== 'undefined' ) {\n\t      box = element.getBoundingClientRect();\n\t    }\n\t\n\t    scrollLeftTop = getScrollLeftTop(element);\n\t\n\t    return {\n\t      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n\t      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Returns style attribute value of a given element\n\t   * @memberOf fabric.util\n\t   * @param {HTMLElement} element Element to get style attribute for\n\t   * @param {String} attr Style attribute to get for element\n\t   * @return {String} Style attribute value of the given element.\n\t   */\n\t  var getElementStyle;\n\t  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n\t    getElementStyle = function(element, attr) {\n\t      var style = fabric.document.defaultView.getComputedStyle(element, null);\n\t      return style ? style[attr] : undefined;\n\t    };\n\t  }\n\t  else {\n\t    getElementStyle = function(element, attr) {\n\t      var value = element.style[attr];\n\t      if (!value && element.currentStyle) {\n\t        value = element.currentStyle[attr];\n\t      }\n\t      return value;\n\t    };\n\t  }\n\t\n\t  (function () {\n\t    var style = fabric.document.documentElement.style,\n\t        selectProp = 'userSelect' in style\n\t          ? 'userSelect'\n\t          : 'MozUserSelect' in style\n\t            ? 'MozUserSelect'\n\t            : 'WebkitUserSelect' in style\n\t              ? 'WebkitUserSelect'\n\t              : 'KhtmlUserSelect' in style\n\t                ? 'KhtmlUserSelect'\n\t                : '';\n\t\n\t    /**\n\t     * Makes element unselectable\n\t     * @memberOf fabric.util\n\t     * @param {HTMLElement} element Element to make unselectable\n\t     * @return {HTMLElement} Element that was passed in\n\t     */\n\t    function makeElementUnselectable(element) {\n\t      if (typeof element.onselectstart !== 'undefined') {\n\t        element.onselectstart = fabric.util.falseFunction;\n\t      }\n\t      if (selectProp) {\n\t        element.style[selectProp] = 'none';\n\t      }\n\t      else if (typeof element.unselectable === 'string') {\n\t        element.unselectable = 'on';\n\t      }\n\t      return element;\n\t    }\n\t\n\t    /**\n\t     * Makes element selectable\n\t     * @memberOf fabric.util\n\t     * @param {HTMLElement} element Element to make selectable\n\t     * @return {HTMLElement} Element that was passed in\n\t     */\n\t    function makeElementSelectable(element) {\n\t      if (typeof element.onselectstart !== 'undefined') {\n\t        element.onselectstart = null;\n\t      }\n\t      if (selectProp) {\n\t        element.style[selectProp] = '';\n\t      }\n\t      else if (typeof element.unselectable === 'string') {\n\t        element.unselectable = '';\n\t      }\n\t      return element;\n\t    }\n\t\n\t    fabric.util.makeElementUnselectable = makeElementUnselectable;\n\t    fabric.util.makeElementSelectable = makeElementSelectable;\n\t  })();\n\t\n\t  (function() {\n\t\n\t    /**\n\t     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\n\t     * @memberOf fabric.util\n\t     * @param {String} url URL of a script to load\n\t     * @param {Function} callback Callback to execute when script is finished loading\n\t     */\n\t    function getScript(url, callback) {\n\t      var headEl = fabric.document.getElementsByTagName('head')[0],\n\t          scriptEl = fabric.document.createElement('script'),\n\t          loading = true;\n\t\n\t      /** @ignore */\n\t      scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\n\t        if (loading) {\n\t          if (typeof this.readyState === 'string' &&\n\t              this.readyState !== 'loaded' &&\n\t              this.readyState !== 'complete') {\n\t            return;\n\t          }\n\t          loading = false;\n\t          callback(e || fabric.window.event);\n\t          scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\n\t        }\n\t      };\n\t      scriptEl.src = url;\n\t      headEl.appendChild(scriptEl);\n\t      // causes issue in Opera\n\t      // headEl.removeChild(scriptEl);\n\t    }\n\t\n\t    fabric.util.getScript = getScript;\n\t  })();\n\t\n\t  fabric.util.getById = getById;\n\t  fabric.util.toArray = toArray;\n\t  fabric.util.makeElement = makeElement;\n\t  fabric.util.addClass = addClass;\n\t  fabric.util.wrapElement = wrapElement;\n\t  fabric.util.getScrollLeftTop = getScrollLeftTop;\n\t  fabric.util.getElementOffset = getElementOffset;\n\t  fabric.util.getElementStyle = getElementStyle;\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  function addParamToUrl(url, param) {\n\t    return url + (/\\?/.test(url) ? '&' : '?') + param;\n\t  }\n\t\n\t  var makeXHR = (function() {\n\t    var factories = [\n\t      function() { return new ActiveXObject('Microsoft.XMLHTTP'); },\n\t      function() { return new ActiveXObject('Msxml2.XMLHTTP'); },\n\t      function() { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); },\n\t      function() { return new XMLHttpRequest(); }\n\t    ];\n\t    for (var i = factories.length; i--; ) {\n\t      try {\n\t        var req = factories[i]();\n\t        if (req) {\n\t          return factories[i];\n\t        }\n\t      }\n\t      catch (err) { }\n\t    }\n\t  })();\n\t\n\t  function emptyFn() { }\n\t\n\t  /**\n\t   * Cross-browser abstraction for sending XMLHttpRequest\n\t   * @memberOf fabric.util\n\t   * @param {String} url URL to send XMLHttpRequest to\n\t   * @param {Object} [options] Options object\n\t   * @param {String} [options.method=\"GET\"]\n\t   * @param {Function} options.onComplete Callback to invoke when request is completed\n\t   * @return {XMLHttpRequest} request\n\t   */\n\t  function request(url, options) {\n\t\n\t    options || (options = { });\n\t\n\t    var method = options.method ? options.method.toUpperCase() : 'GET',\n\t        onComplete = options.onComplete || function() { },\n\t        xhr = makeXHR(),\n\t        body;\n\t\n\t    /** @ignore */\n\t    xhr.onreadystatechange = function() {\n\t      if (xhr.readyState === 4) {\n\t        onComplete(xhr);\n\t        xhr.onreadystatechange = emptyFn;\n\t      }\n\t    };\n\t\n\t    if (method === 'GET') {\n\t      body = null;\n\t      if (typeof options.parameters === 'string') {\n\t        url = addParamToUrl(url, options.parameters);\n\t      }\n\t    }\n\t\n\t    xhr.open(method, url, true);\n\t\n\t    if (method === 'POST' || method === 'PUT') {\n\t      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t    }\n\t\n\t    xhr.send(body);\n\t    return xhr;\n\t  }\n\t\n\t  fabric.util.request = request;\n\t})();\n\t\n\t\n\t/**\n\t * Wrapper around `console.log` (when available)\n\t * @param {Any} [values] Values to log\n\t */\n\tfabric.log = function() { };\n\t\n\t/**\n\t * Wrapper around `console.warn` (when available)\n\t * @param {Any} [values] Values to log as a warning\n\t */\n\tfabric.warn = function() { };\n\t\n\t/* jshint ignore:start */\n\tif (typeof console !== 'undefined') {\n\t\n\t  ['log', 'warn'].forEach(function(methodName) {\n\t\n\t    if (typeof console[methodName] !== 'undefined' &&\n\t        typeof console[methodName].apply === 'function') {\n\t\n\t      fabric[methodName] = function() {\n\t        return console[methodName].apply(console, arguments);\n\t      };\n\t    }\n\t  });\n\t}\n\t/* jshint ignore:end */\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n\t   * @memberOf fabric.util\n\t   * @param {Object} [options] Animation options\n\t   * @param {Function} [options.onChange] Callback; invoked on every value change\n\t   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n\t   * @param {Number} [options.startValue=0] Starting value\n\t   * @param {Number} [options.endValue=100] Ending value\n\t   * @param {Number} [options.byValue=100] Value to modify the property by\n\t   * @param {Function} [options.easing] Easing function\n\t   * @param {Number} [options.duration=500] Duration of change (in ms)\n\t   */\n\t  function animate(options) {\n\t\n\t    requestAnimFrame(function(timestamp) {\n\t      options || (options = { });\n\t\n\t      var start = timestamp || +new Date(),\n\t          duration = options.duration || 500,\n\t          finish = start + duration, time,\n\t          onChange = options.onChange || function() { },\n\t          abort = options.abort || function() { return false; },\n\t          easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},\n\t          startValue = 'startValue' in options ? options.startValue : 0,\n\t          endValue = 'endValue' in options ? options.endValue : 100,\n\t          byValue = options.byValue || endValue - startValue;\n\t\n\t      options.onStart && options.onStart();\n\t\n\t      (function tick(ticktime) {\n\t        time = ticktime || +new Date();\n\t        var currentTime = time > finish ? duration : (time - start);\n\t        if (abort()) {\n\t          options.onComplete && options.onComplete();\n\t          return;\n\t        }\n\t        onChange(easing(currentTime, startValue, byValue, duration));\n\t        if (time > finish) {\n\t          options.onComplete && options.onComplete();\n\t          return;\n\t        }\n\t        requestAnimFrame(tick);\n\t      })(start);\n\t    });\n\t\n\t  }\n\t\n\t  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\n\t                          fabric.window.webkitRequestAnimationFrame ||\n\t                          fabric.window.mozRequestAnimationFrame    ||\n\t                          fabric.window.oRequestAnimationFrame      ||\n\t                          fabric.window.msRequestAnimationFrame     ||\n\t                          function(callback) {\n\t                            fabric.window.setTimeout(callback, 1000 / 60);\n\t                          };\n\t\n\t  /**\n\t   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\t   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n\t   * @memberOf fabric.util\n\t   * @param {Function} callback Callback to invoke\n\t   * @param {DOMElement} element optional Element to associate with animation\n\t   */\n\t  function requestAnimFrame() {\n\t    return _requestAnimFrame.apply(fabric.window, arguments);\n\t  }\n\t\n\t  fabric.util.animate = animate;\n\t  fabric.util.requestAnimFrame = requestAnimFrame;\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  function normalize(a, c, p, s) {\n\t    if (a < Math.abs(c)) {\n\t      a = c;\n\t      s = p / 4;\n\t    }\n\t    else {\n\t      s = p / (2 * Math.PI) * Math.asin(c / a);\n\t    }\n\t    return { a: a, c: c, p: p, s: s };\n\t  }\n\t\n\t  function elastic(opts, t, d) {\n\t    return opts.a *\n\t      Math.pow(2, 10 * (t -= 1)) *\n\t      Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\n\t  }\n\t\n\t  /**\n\t   * Cubic easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutCubic(t, b, c, d) {\n\t    return c * ((t = t / d - 1) * t * t + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Cubic easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutCubic(t, b, c, d) {\n\t    t /= d/2;\n\t    if (t < 1) {\n\t      return c / 2 * t * t * t + b;\n\t    }\n\t    return c / 2 * ((t -= 2) * t * t + 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Quartic easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInQuart(t, b, c, d) {\n\t    return c * (t /= d) * t * t * t + b;\n\t  }\n\t\n\t  /**\n\t   * Quartic easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutQuart(t, b, c, d) {\n\t    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Quartic easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutQuart(t, b, c, d) {\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return c / 2 * t * t * t * t + b;\n\t    }\n\t    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Quintic easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInQuint(t, b, c, d) {\n\t    return c * (t /= d) * t * t * t * t + b;\n\t  }\n\t\n\t  /**\n\t   * Quintic easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutQuint(t, b, c, d) {\n\t    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Quintic easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutQuint(t, b, c, d) {\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return c / 2 * t * t * t * t * t + b;\n\t    }\n\t    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Sinusoidal easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInSine(t, b, c, d) {\n\t    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n\t  }\n\t\n\t  /**\n\t   * Sinusoidal easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutSine(t, b, c, d) {\n\t    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n\t  }\n\t\n\t  /**\n\t   * Sinusoidal easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutSine(t, b, c, d) {\n\t    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Exponential easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInExpo(t, b, c, d) {\n\t    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n\t  }\n\t\n\t  /**\n\t   * Exponential easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutExpo(t, b, c, d) {\n\t    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Exponential easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutExpo(t, b, c, d) {\n\t    if (t === 0) {\n\t      return b;\n\t    }\n\t    if (t === d) {\n\t      return b + c;\n\t    }\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n\t    }\n\t    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Circular easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInCirc(t, b, c, d) {\n\t    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Circular easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutCirc(t, b, c, d) {\n\t    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\t  }\n\t\n\t  /**\n\t   * Circular easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutCirc(t, b, c, d) {\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n\t    }\n\t    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Elastic easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInElastic(t, b, c, d) {\n\t    var s = 1.70158, p = 0, a = c;\n\t    if (t === 0) {\n\t      return b;\n\t    }\n\t    t /= d;\n\t    if (t === 1) {\n\t      return b + c;\n\t    }\n\t    if (!p) {\n\t      p = d * 0.3;\n\t    }\n\t    var opts = normalize(a, c, p, s);\n\t    return -elastic(opts, t, d) + b;\n\t  }\n\t\n\t  /**\n\t   * Elastic easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutElastic(t, b, c, d) {\n\t    var s = 1.70158, p = 0, a = c;\n\t    if (t === 0) {\n\t      return b;\n\t    }\n\t    t /= d;\n\t    if (t === 1) {\n\t      return b + c;\n\t    }\n\t    if (!p) {\n\t      p = d * 0.3;\n\t    }\n\t    var opts = normalize(a, c, p, s);\n\t    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\n\t  }\n\t\n\t  /**\n\t   * Elastic easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutElastic(t, b, c, d) {\n\t    var s = 1.70158, p = 0, a = c;\n\t    if (t === 0) {\n\t      return b;\n\t    }\n\t    t /= d / 2;\n\t    if (t === 2) {\n\t      return b + c;\n\t    }\n\t    if (!p) {\n\t      p = d * (0.3 * 1.5);\n\t    }\n\t    var opts = normalize(a, c, p, s);\n\t    if (t < 1) {\n\t      return -0.5 * elastic(opts, t, d) + b;\n\t    }\n\t    return opts.a * Math.pow(2, -10 * (t -= 1)) *\n\t      Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\n\t  }\n\t\n\t  /**\n\t   * Backwards easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInBack(t, b, c, d, s) {\n\t    if (s === undefined) {\n\t      s = 1.70158;\n\t    }\n\t    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n\t  }\n\t\n\t  /**\n\t   * Backwards easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutBack(t, b, c, d, s) {\n\t    if (s === undefined) {\n\t      s = 1.70158;\n\t    }\n\t    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\t  }\n\t\n\t  /**\n\t   * Backwards easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutBack(t, b, c, d, s) {\n\t    if (s === undefined) {\n\t      s = 1.70158;\n\t    }\n\t    t /= d / 2;\n\t    if (t < 1) {\n\t      return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n\t    }\n\t    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n\t  }\n\t\n\t  /**\n\t   * Bouncing easing in\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInBounce(t, b, c, d) {\n\t    return c - easeOutBounce (d - t, 0, c, d) + b;\n\t  }\n\t\n\t  /**\n\t   * Bouncing easing out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeOutBounce(t, b, c, d) {\n\t    if ((t /= d) < (1 / 2.75)) {\n\t      return c * (7.5625 * t * t) + b;\n\t    }\n\t    else if (t < (2/2.75)) {\n\t      return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n\t    }\n\t    else if (t < (2.5/2.75)) {\n\t      return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n\t    }\n\t    else {\n\t      return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Bouncing easing in and out\n\t   * @memberOf fabric.util.ease\n\t   */\n\t  function easeInOutBounce(t, b, c, d) {\n\t    if (t < d / 2) {\n\t      return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\n\t    }\n\t    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\t  }\n\t\n\t  /**\n\t   * Easing functions\n\t   * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\n\t   * @namespace fabric.util.ease\n\t   */\n\t  fabric.util.ease = {\n\t\n\t    /**\n\t     * Quadratic easing in\n\t     * @memberOf fabric.util.ease\n\t     */\n\t    easeInQuad: function(t, b, c, d) {\n\t      return c * (t /= d) * t + b;\n\t    },\n\t\n\t    /**\n\t     * Quadratic easing out\n\t     * @memberOf fabric.util.ease\n\t     */\n\t    easeOutQuad: function(t, b, c, d) {\n\t      return -c * (t /= d) * (t - 2) + b;\n\t    },\n\t\n\t    /**\n\t     * Quadratic easing in and out\n\t     * @memberOf fabric.util.ease\n\t     */\n\t    easeInOutQuad: function(t, b, c, d) {\n\t      t /= (d / 2);\n\t      if (t < 1) {\n\t        return c / 2 * t * t + b;\n\t      }\n\t      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n\t    },\n\t\n\t    /**\n\t     * Cubic easing in\n\t     * @memberOf fabric.util.ease\n\t     */\n\t    easeInCubic: function(t, b, c, d) {\n\t      return c * (t /= d) * t * t + b;\n\t    },\n\t\n\t    easeOutCubic: easeOutCubic,\n\t    easeInOutCubic: easeInOutCubic,\n\t    easeInQuart: easeInQuart,\n\t    easeOutQuart: easeOutQuart,\n\t    easeInOutQuart: easeInOutQuart,\n\t    easeInQuint: easeInQuint,\n\t    easeOutQuint: easeOutQuint,\n\t    easeInOutQuint: easeInOutQuint,\n\t    easeInSine: easeInSine,\n\t    easeOutSine: easeOutSine,\n\t    easeInOutSine: easeInOutSine,\n\t    easeInExpo: easeInExpo,\n\t    easeOutExpo: easeOutExpo,\n\t    easeInOutExpo: easeInOutExpo,\n\t    easeInCirc: easeInCirc,\n\t    easeOutCirc: easeOutCirc,\n\t    easeInOutCirc: easeInOutCirc,\n\t    easeInElastic: easeInElastic,\n\t    easeOutElastic: easeOutElastic,\n\t    easeInOutElastic: easeInOutElastic,\n\t    easeInBack: easeInBack,\n\t    easeOutBack: easeOutBack,\n\t    easeInOutBack: easeInOutBack,\n\t    easeInBounce: easeInBounce,\n\t    easeOutBounce: easeOutBounce,\n\t    easeInOutBounce: easeInOutBounce\n\t  };\n\t\n\t}());\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  /**\n\t   * @name fabric\n\t   * @namespace\n\t   */\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      capitalize = fabric.util.string.capitalize,\n\t      clone = fabric.util.object.clone,\n\t      toFixed = fabric.util.toFixed,\n\t      parseUnit = fabric.util.parseUnit,\n\t      multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\n\t\n\t      reAllowedSVGTagNames = /^(path|circle|polygon|polyline|ellipse|rect|line|image|text)$/i,\n\t      reViewBoxTagNames = /^(symbol|image|marker|pattern|view|svg)$/i,\n\t      reNotAllowedAncestors = /^(?:pattern|defs|symbol|metadata)$/i,\n\t      reAllowedParents = /^(symbol|g|a|svg)$/i,\n\t\n\t      attributesMap = {\n\t        cx:                   'left',\n\t        x:                    'left',\n\t        r:                    'radius',\n\t        cy:                   'top',\n\t        y:                    'top',\n\t        display:              'visible',\n\t        visibility:           'visible',\n\t        transform:            'transformMatrix',\n\t        'fill-opacity':       'fillOpacity',\n\t        'fill-rule':          'fillRule',\n\t        'font-family':        'fontFamily',\n\t        'font-size':          'fontSize',\n\t        'font-style':         'fontStyle',\n\t        'font-weight':        'fontWeight',\n\t        'stroke-dasharray':   'strokeDashArray',\n\t        'stroke-linecap':     'strokeLineCap',\n\t        'stroke-linejoin':    'strokeLineJoin',\n\t        'stroke-miterlimit':  'strokeMiterLimit',\n\t        'stroke-opacity':     'strokeOpacity',\n\t        'stroke-width':       'strokeWidth',\n\t        'text-decoration':    'textDecoration',\n\t        'text-anchor':        'originX'\n\t      },\n\t\n\t      colorAttributes = {\n\t        stroke: 'strokeOpacity',\n\t        fill:   'fillOpacity'\n\t      };\n\t\n\t  fabric.cssRules = { };\n\t  fabric.gradientDefs = { };\n\t\n\t  function normalizeAttr(attr) {\n\t    // transform attribute names\n\t    if (attr in attributesMap) {\n\t      return attributesMap[attr];\n\t    }\n\t    return attr;\n\t  }\n\t\n\t  function normalizeValue(attr, value, parentAttributes, fontSize) {\n\t    var isArray = Object.prototype.toString.call(value) === '[object Array]',\n\t        parsed;\n\t\n\t    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\n\t      value = '';\n\t    }\n\t    else if (attr === 'strokeDashArray') {\n\t      value = value.replace(/,/g, ' ').split(/\\s+/).map(function(n) {\n\t        return parseFloat(n);\n\t      });\n\t    }\n\t    else if (attr === 'transformMatrix') {\n\t      if (parentAttributes && parentAttributes.transformMatrix) {\n\t        value = multiplyTransformMatrices(\n\t          parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\n\t      }\n\t      else {\n\t        value = fabric.parseTransformAttribute(value);\n\t      }\n\t    }\n\t    else if (attr === 'visible') {\n\t      value = (value === 'none' || value === 'hidden') ? false : true;\n\t      // display=none on parent element always takes precedence over child element\n\t      if (parentAttributes && parentAttributes.visible === false) {\n\t        value = false;\n\t      }\n\t    }\n\t    else if (attr === 'originX' /* text-anchor */) {\n\t      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\n\t    }\n\t    else {\n\t      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\n\t    }\n\t\n\t    return (!isArray && isNaN(parsed) ? value : parsed);\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   * @param {Object} attributes Array of attributes to parse\n\t   */\n\t  function _setStrokeFillOpacity(attributes) {\n\t    for (var attr in colorAttributes) {\n\t\n\t      if (!attributes[attr] || typeof attributes[colorAttributes[attr]] === 'undefined') {\n\t        continue;\n\t      }\n\t\n\t      if (attributes[attr].indexOf('url(') === 0) {\n\t        continue;\n\t      }\n\t\n\t      var color = new fabric.Color(attributes[attr]);\n\t      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\n\t    }\n\t    return attributes;\n\t  }\n\t\n\t  /**\n\t   * Parses \"transform\" attribute, returning an array of values\n\t   * @static\n\t   * @function\n\t   * @memberOf fabric\n\t   * @param {String} attributeValue String containing attribute value\n\t   * @return {Array} Array of 6 elements representing transformation matrix\n\t   */\n\t  fabric.parseTransformAttribute = (function() {\n\t    function rotateMatrix(matrix, args) {\n\t      var angle = args[0];\n\t\n\t      matrix[0] = Math.cos(angle);\n\t      matrix[1] = Math.sin(angle);\n\t      matrix[2] = -Math.sin(angle);\n\t      matrix[3] = Math.cos(angle);\n\t    }\n\t\n\t    function scaleMatrix(matrix, args) {\n\t      var multiplierX = args[0],\n\t          multiplierY = (args.length === 2) ? args[1] : args[0];\n\t\n\t      matrix[0] = multiplierX;\n\t      matrix[3] = multiplierY;\n\t    }\n\t\n\t    function skewXMatrix(matrix, args) {\n\t      matrix[2] = Math.tan(fabric.util.degreesToRadians(args[0]));\n\t    }\n\t\n\t    function skewYMatrix(matrix, args) {\n\t      matrix[1] = Math.tan(fabric.util.degreesToRadians(args[0]));\n\t    }\n\t\n\t    function translateMatrix(matrix, args) {\n\t      matrix[4] = args[0];\n\t      if (args.length === 2) {\n\t        matrix[5] = args[1];\n\t      }\n\t    }\n\t\n\t    // identity matrix\n\t    var iMatrix = [\n\t          1, // a\n\t          0, // b\n\t          0, // c\n\t          1, // d\n\t          0, // e\n\t          0  // f\n\t        ],\n\t\n\t        // == begin transform regexp\n\t        number = fabric.reNum,\n\t\n\t        commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\n\t\n\t        skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\t\n\t        skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\t\n\t        rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n\t                    commaWsp + '(' + number + ')' +\n\t                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\t\n\t        scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n\t                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\t\n\t        translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n\t                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\t\n\t        matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' + commaWsp +\n\t                  '(' + number + ')' +\n\t                  '\\\\s*\\\\))',\n\t\n\t        transform = '(?:' +\n\t                    matrix + '|' +\n\t                    translate + '|' +\n\t                    scale + '|' +\n\t                    rotate + '|' +\n\t                    skewX + '|' +\n\t                    skewY +\n\t                    ')',\n\t\n\t        transforms = '(?:' + transform + '(?:' + commaWsp + transform + ')*' + ')',\n\t\n\t        transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\n\t\n\t        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n\t        reTransformList = new RegExp(transformList),\n\t        // == end transform regexp\n\t\n\t        reTransform = new RegExp(transform, 'g');\n\t\n\t    return function(attributeValue) {\n\t\n\t      // start with identity matrix\n\t      var matrix = iMatrix.concat(),\n\t          matrices = [ ];\n\t\n\t      // return if no argument was given or\n\t      // an argument does not match transform attribute regexp\n\t      if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\n\t        return matrix;\n\t      }\n\t\n\t      attributeValue.replace(reTransform, function(match) {\n\t\n\t        var m = new RegExp(transform).exec(match).filter(function (match) {\n\t              return (match !== '' && match != null);\n\t            }),\n\t            operation = m[1],\n\t            args = m.slice(2).map(parseFloat);\n\t\n\t        switch (operation) {\n\t          case 'translate':\n\t            translateMatrix(matrix, args);\n\t            break;\n\t          case 'rotate':\n\t            args[0] = fabric.util.degreesToRadians(args[0]);\n\t            rotateMatrix(matrix, args);\n\t            break;\n\t          case 'scale':\n\t            scaleMatrix(matrix, args);\n\t            break;\n\t          case 'skewX':\n\t            skewXMatrix(matrix, args);\n\t            break;\n\t          case 'skewY':\n\t            skewYMatrix(matrix, args);\n\t            break;\n\t          case 'matrix':\n\t            matrix = args;\n\t            break;\n\t        }\n\t\n\t        // snapshot current matrix into matrices array\n\t        matrices.push(matrix.concat());\n\t        // reset\n\t        matrix = iMatrix.concat();\n\t      });\n\t\n\t      var combinedMatrix = matrices[0];\n\t      while (matrices.length > 1) {\n\t        matrices.shift();\n\t        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\n\t      }\n\t      return combinedMatrix;\n\t    };\n\t  })();\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function parseStyleString(style, oStyle) {\n\t    var attr, value;\n\t    style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\n\t      var pair = chunk.split(':');\n\t\n\t      attr = normalizeAttr(pair[0].trim().toLowerCase());\n\t      value = normalizeValue(attr, pair[1].trim());\n\t\n\t      oStyle[attr] = value;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function parseStyleObject(style, oStyle) {\n\t    var attr, value;\n\t    for (var prop in style) {\n\t      if (typeof style[prop] === 'undefined') {\n\t        continue;\n\t      }\n\t\n\t      attr = normalizeAttr(prop.toLowerCase());\n\t      value = normalizeValue(attr, style[prop]);\n\t\n\t      oStyle[attr] = value;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function getGlobalStylesForElement(element, svgUid) {\n\t    var styles = { };\n\t    for (var rule in fabric.cssRules[svgUid]) {\n\t      if (elementMatchesRule(element, rule.split(' '))) {\n\t        for (var property in fabric.cssRules[svgUid][rule]) {\n\t          styles[property] = fabric.cssRules[svgUid][rule][property];\n\t        }\n\t      }\n\t    }\n\t    return styles;\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function elementMatchesRule(element, selectors) {\n\t    var firstMatching, parentMatching = true;\n\t    //start from rightmost selector.\n\t    firstMatching = selectorMatches(element, selectors.pop());\n\t    if (firstMatching && selectors.length) {\n\t      parentMatching = doesSomeParentMatch(element, selectors);\n\t    }\n\t    return firstMatching && parentMatching && (selectors.length === 0);\n\t  }\n\t\n\t  function doesSomeParentMatch(element, selectors) {\n\t    var selector, parentMatching = true;\n\t    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\n\t      if (parentMatching) {\n\t        selector = selectors.pop();\n\t      }\n\t      element = element.parentNode;\n\t      parentMatching = selectorMatches(element, selector);\n\t    }\n\t    return selectors.length === 0;\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function selectorMatches(element, selector) {\n\t    var nodeName = element.nodeName,\n\t        classNames = element.getAttribute('class'),\n\t        id = element.getAttribute('id'), matcher;\n\t    // i check if a selector matches slicing away part from it.\n\t    // if i get empty string i should match\n\t    matcher = new RegExp('^' + nodeName, 'i');\n\t    selector = selector.replace(matcher, '');\n\t    if (id && selector.length) {\n\t      matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\n\t      selector = selector.replace(matcher, '');\n\t    }\n\t    if (classNames && selector.length) {\n\t      classNames = classNames.split(' ');\n\t      for (var i = classNames.length; i--;) {\n\t        matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\n\t        selector = selector.replace(matcher, '');\n\t      }\n\t    }\n\t    return selector.length === 0;\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   * to support IE8 missing getElementById on SVGdocument\n\t   */\n\t  function elementById(doc, id) {\n\t    var el;\n\t    doc.getElementById && (el = doc.getElementById(id));\n\t    if (el) {\n\t      return el;\n\t    }\n\t    var node, i, idAttr, nodelist = doc.getElementsByTagName('*');\n\t    for (i = 0; i < nodelist.length; i++) {\n\t      node = nodelist[i];\n\t      if (idAttr === node.getAttribute('id')) {\n\t        return node;\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function parseUseDirectives(doc) {\n\t    var nodelist = doc.getElementsByTagName('use'), i = 0;\n\t    while (nodelist.length && i < nodelist.length) {\n\t      var el = nodelist[i],\n\t          xlink = el.getAttribute('xlink:href').substr(1),\n\t          x = el.getAttribute('x') || 0,\n\t          y = el.getAttribute('y') || 0,\n\t          el2 = elementById(doc, xlink).cloneNode(true),\n\t          currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\n\t          parentNode, oldLength = nodelist.length, attr, j, attrs, l;\n\t\n\t      applyViewboxTransform(el2);\n\t      if (/^svg$/i.test(el2.nodeName)) {\n\t        var el3 = el2.ownerDocument.createElement('g');\n\t        for (j = 0, attrs = el2.attributes, l = attrs.length; j < l; j++) {\n\t          attr = attrs.item(j);\n\t          el3.setAttribute(attr.nodeName, attr.nodeValue);\n\t        }\n\t        while (el2.firstChild != null) {\n\t          el3.appendChild(el2.firstChild);\n\t        }\n\t        el2 = el3;\n\t      }\n\t\n\t      for (j = 0, attrs = el.attributes, l = attrs.length; j < l; j++) {\n\t        attr = attrs.item(j);\n\t        if (attr.nodeName === 'x' || attr.nodeName === 'y' || attr.nodeName === 'xlink:href') {\n\t          continue;\n\t        }\n\t\n\t        if (attr.nodeName === 'transform') {\n\t          currentTrans = attr.nodeValue + ' ' + currentTrans;\n\t        }\n\t        else {\n\t          el2.setAttribute(attr.nodeName, attr.nodeValue);\n\t        }\n\t      }\n\t\n\t      el2.setAttribute('transform', currentTrans);\n\t      el2.setAttribute('instantiated_by_use', '1');\n\t      el2.removeAttribute('id');\n\t      parentNode = el.parentNode;\n\t      parentNode.replaceChild(el2, el);\n\t      // some browsers do not shorten nodelist after replaceChild (IE8)\n\t      if (nodelist.length === oldLength) {\n\t        i++;\n\t      }\n\t    }\n\t  }\n\t\n\t  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n\t  // matches, e.g.: +14.56e-12, etc.\n\t  var reViewBoxAttrValue = new RegExp(\n\t    '^' +\n\t    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n\t    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n\t    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n\t    '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\n\t    '$'\n\t  );\n\t\n\t  /**\n\t   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n\t   */\n\t  function applyViewboxTransform(element) {\n\t\n\t    var viewBoxAttr = element.getAttribute('viewBox'),\n\t        scaleX = 1,\n\t        scaleY = 1,\n\t        minX = 0,\n\t        minY = 0,\n\t        viewBoxWidth, viewBoxHeight, matrix, el,\n\t        widthAttr = element.getAttribute('width'),\n\t        heightAttr = element.getAttribute('height'),\n\t        missingViewBox = (!viewBoxAttr || !reViewBoxTagNames.test(element.tagName)\n\t                           || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\n\t        missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\n\t        toBeParsed = missingViewBox && missingDimAttr,\n\t        parsedDim = { };\n\t\n\t    parsedDim.width = 0;\n\t    parsedDim.height = 0;\n\t    parsedDim.toBeParsed = toBeParsed;\n\t\n\t    if (toBeParsed) {\n\t      return parsedDim;\n\t    }\n\t\n\t    if (missingViewBox) {\n\t      parsedDim.width = parseUnit(widthAttr);\n\t      parsedDim.height = parseUnit(heightAttr);\n\t      return parsedDim;\n\t    }\n\t\n\t    minX = -parseFloat(viewBoxAttr[1]),\n\t    minY = -parseFloat(viewBoxAttr[2]),\n\t    viewBoxWidth = parseFloat(viewBoxAttr[3]),\n\t    viewBoxHeight = parseFloat(viewBoxAttr[4]);\n\t\n\t    if (!missingDimAttr) {\n\t      parsedDim.width = parseUnit(widthAttr);\n\t      parsedDim.height = parseUnit(heightAttr);\n\t      scaleX = parsedDim.width / viewBoxWidth;\n\t      scaleY = parsedDim.height / viewBoxHeight;\n\t    }\n\t    else {\n\t      parsedDim.width = viewBoxWidth;\n\t      parsedDim.height = viewBoxHeight;\n\t    }\n\t\n\t    // default is to preserve aspect ratio\n\t    // preserveAspectRatio attribute to be implemented\n\t    scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\n\t\n\t    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0) {\n\t      return parsedDim;\n\t    }\n\t\n\t    matrix = ' matrix(' + scaleX +\n\t                  ' 0' +\n\t                  ' 0 ' +\n\t                  scaleY + ' ' +\n\t                  (minX * scaleX) + ' ' +\n\t                  (minY * scaleY) + ') ';\n\t\n\t    if (element.tagName === 'svg') {\n\t      el = element.ownerDocument.createElement('g');\n\t      while (element.firstChild != null) {\n\t        el.appendChild(element.firstChild);\n\t      }\n\t      element.appendChild(el);\n\t    }\n\t    else {\n\t      el = element;\n\t      matrix = el.getAttribute('transform') + matrix;\n\t    }\n\t\n\t    el.setAttribute('transform', matrix);\n\t    return parsedDim;\n\t  }\n\t\n\t  /**\n\t   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n\t   * @static\n\t   * @function\n\t   * @memberOf fabric\n\t   * @param {SVGDocument} doc SVG document to parse\n\t   * @param {Function} callback Callback to call when parsing is finished; It's being passed an array of elements (parsed from a document).\n\t   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n\t   */\n\t  fabric.parseSVGDocument = (function() {\n\t\n\t    function hasAncestorWithNodeName(element, nodeName) {\n\t      while (element && (element = element.parentNode)) {\n\t        if (nodeName.test(element.nodeName) && !element.getAttribute('instantiated_by_use')) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    }\n\t\n\t    return function(doc, callback, reviver) {\n\t      if (!doc) {\n\t        return;\n\t      }\n\t\n\t      parseUseDirectives(doc);\n\t\n\t      var startTime = new Date(),\n\t          svgUid =  fabric.Object.__uid++,\n\t          options = applyViewboxTransform(doc),\n\t          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\n\t\n\t      options.svgUid = svgUid;\n\t\n\t      if (descendants.length === 0 && fabric.isLikelyNode) {\n\t        // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\n\t        // https://github.com/ajaxorg/node-o3-xml/issues/21\n\t        descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\n\t        var arr = [ ];\n\t        for (var i = 0, len = descendants.length; i < len; i++) {\n\t          arr[i] = descendants[i];\n\t        }\n\t        descendants = arr;\n\t      }\n\t\n\t      var elements = descendants.filter(function(el) {\n\t        applyViewboxTransform(el);\n\t        return reAllowedSVGTagNames.test(el.tagName) &&\n\t              !hasAncestorWithNodeName(el, reNotAllowedAncestors); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n\t      });\n\t\n\t      if (!elements || (elements && !elements.length)) {\n\t        callback && callback([], {});\n\t        return;\n\t      }\n\t\n\t      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\n\t      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\n\t      // Precedence of rules:   style > class > attribute\n\t      fabric.parseElements(elements, function(instances) {\n\t        fabric.documentParsingTime = new Date() - startTime;\n\t        if (callback) {\n\t          callback(instances, options);\n\t        }\n\t      }, clone(options), reviver);\n\t    };\n\t  })();\n\t\n\t  /**\n\t   * Used for caching SVG documents (loaded via `fabric.Canvas#loadSVGFromURL`)\n\t   * @namespace\n\t   */\n\t  var svgCache = {\n\t\n\t    /**\n\t     * @param {String} name\n\t     * @param {Function} callback\n\t     */\n\t    has: function (name, callback) {\n\t      callback(false);\n\t    },\n\t\n\t    get: function () {\n\t      /* NOOP */\n\t    },\n\t\n\t    set: function () {\n\t      /* NOOP */\n\t    }\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function _enlivenCachedObject(cachedObject) {\n\t\n\t    var objects = cachedObject.objects,\n\t        options = cachedObject.options;\n\t\n\t    objects = objects.map(function (o) {\n\t      return fabric[capitalize(o.type)].fromObject(o);\n\t    });\n\t\n\t    return ({ objects: objects, options: options });\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function _createSVGPattern(markup, canvas, property) {\n\t    if (canvas[property] && canvas[property].toSVG) {\n\t      markup.push(\n\t        '<pattern x=\"0\" y=\"0\" id=\"', property, 'Pattern\" ',\n\t          'width=\"', canvas[property].source.width,\n\t          '\" height=\"', canvas[property].source.height,\n\t          '\" patternUnits=\"userSpaceOnUse\">',\n\t        '<image x=\"0\" y=\"0\" ',\n\t        'width=\"', canvas[property].source.width,\n\t        '\" height=\"', canvas[property].source.height,\n\t        '\" xlink:href=\"', canvas[property].source.src,\n\t        '\"></image></pattern>'\n\t      );\n\t    }\n\t  }\n\t\n\t  var reFontDeclaration = new RegExp(\n\t    '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n\t    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n\t      fabric.reNum +\n\t    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\n\t\n\t  extend(fabric, {\n\t    /**\n\t     * Parses a short font declaration, building adding its properties to a style object\n\t     * @static\n\t     * @function\n\t     * @memberOf fabric\n\t     * @param {String} value font declaration\n\t     * @param {Object} oStyle definition\n\t     */\n\t    parseFontDeclaration: function(value, oStyle) {\n\t      var match = value.match(reFontDeclaration);\n\t\n\t      if (!match) {\n\t        return;\n\t      }\n\t      var fontStyle = match[1],\n\t          // font variant is not used\n\t          // fontVariant = match[2],\n\t          fontWeight = match[3],\n\t          fontSize = match[4],\n\t          lineHeight = match[5],\n\t          fontFamily = match[6];\n\t\n\t      if (fontStyle) {\n\t        oStyle.fontStyle = fontStyle;\n\t      }\n\t      if (fontWeight) {\n\t        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\n\t      }\n\t      if (fontSize) {\n\t        oStyle.fontSize = parseUnit(fontSize);\n\t      }\n\t      if (fontFamily) {\n\t        oStyle.fontFamily = fontFamily;\n\t      }\n\t      if (lineHeight) {\n\t        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Parses an SVG document, returning all of the gradient declarations found in it\n\t     * @static\n\t     * @function\n\t     * @memberOf fabric\n\t     * @param {SVGDocument} doc SVG document to parse\n\t     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n\t     */\n\t    getGradientDefs: function(doc) {\n\t      var linearGradientEls = doc.getElementsByTagName('linearGradient'),\n\t          radialGradientEls = doc.getElementsByTagName('radialGradient'),\n\t          el, i, j = 0, id, xlink, elList = [ ],\n\t          gradientDefs = { }, idsToXlinkMap = { };\n\t\n\t      elList.length = linearGradientEls.length + radialGradientEls.length;\n\t      i = linearGradientEls.length;\n\t      while (i--) {\n\t        elList[j++] = linearGradientEls[i];\n\t      }\n\t      i = radialGradientEls.length;\n\t      while (i--) {\n\t        elList[j++] = radialGradientEls[i];\n\t      }\n\t\n\t      while (j--) {\n\t        el = elList[j];\n\t        xlink = el.getAttribute('xlink:href');\n\t        id = el.getAttribute('id');\n\t        if (xlink) {\n\t          idsToXlinkMap[id] = xlink.substr(1);\n\t        }\n\t        gradientDefs[id] = el;\n\t      }\n\t\n\t      for (id in idsToXlinkMap) {\n\t        var el2 = gradientDefs[idsToXlinkMap[id]].cloneNode(true);\n\t        el = gradientDefs[id];\n\t        while (el2.firstChild) {\n\t          el.appendChild(el2.firstChild);\n\t        }\n\t      }\n\t      return gradientDefs;\n\t    },\n\t\n\t    /**\n\t     * Returns an object of attributes' name/value, given element and an array of attribute names;\n\t     * Parses parent \"g\" nodes recursively upwards.\n\t     * @static\n\t     * @memberOf fabric\n\t     * @param {DOMElement} element Element to parse\n\t     * @param {Array} attributes Array of attributes to parse\n\t     * @return {Object} object containing parsed attributes' names/values\n\t     */\n\t    parseAttributes: function(element, attributes, svgUid) {\n\t\n\t      if (!element) {\n\t        return;\n\t      }\n\t\n\t      var value,\n\t          parentAttributes = { },\n\t          fontSize;\n\t\n\t      if (typeof svgUid === 'undefined') {\n\t        svgUid = element.getAttribute('svgUid');\n\t      }\n\t      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n\t      if (element.parentNode && reAllowedParents.test(element.parentNode.nodeName)) {\n\t        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\n\t      }\n\t      fontSize = (parentAttributes && parentAttributes.fontSize ) ||\n\t                 element.getAttribute('font-size') || fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\t\n\t      var ownAttributes = attributes.reduce(function(memo, attr) {\n\t        value = element.getAttribute(attr);\n\t        if (value) {\n\t          attr = normalizeAttr(attr);\n\t          value = normalizeValue(attr, value, parentAttributes, fontSize);\n\t\n\t          memo[attr] = value;\n\t        }\n\t        return memo;\n\t      }, { });\n\t\n\t      // add values parsed from style, which take precedence over attributes\n\t      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n\t      ownAttributes = extend(ownAttributes,\n\t        extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));\n\t      if (ownAttributes.font) {\n\t        fabric.parseFontDeclaration(ownAttributes.font, ownAttributes);\n\t      }\n\t      return _setStrokeFillOpacity(extend(parentAttributes, ownAttributes));\n\t    },\n\t\n\t    /**\n\t     * Transforms an array of svg elements to corresponding fabric.* instances\n\t     * @static\n\t     * @memberOf fabric\n\t     * @param {Array} elements Array of elements to parse\n\t     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\n\t     * @param {Object} [options] Options object\n\t     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n\t     */\n\t    parseElements: function(elements, callback, options, reviver) {\n\t      new fabric.ElementsParser(elements, callback, options, reviver).parse();\n\t    },\n\t\n\t    /**\n\t     * Parses \"style\" attribute, retuning an object with values\n\t     * @static\n\t     * @memberOf fabric\n\t     * @param {SVGElement} element Element to parse\n\t     * @return {Object} Objects with values parsed from style attribute of an element\n\t     */\n\t    parseStyleAttribute: function(element) {\n\t      var oStyle = { },\n\t          style = element.getAttribute('style');\n\t\n\t      if (!style) {\n\t        return oStyle;\n\t      }\n\t\n\t      if (typeof style === 'string') {\n\t        parseStyleString(style, oStyle);\n\t      }\n\t      else {\n\t        parseStyleObject(style, oStyle);\n\t      }\n\t\n\t      return oStyle;\n\t    },\n\t\n\t    /**\n\t     * Parses \"points\" attribute, returning an array of values\n\t     * @static\n\t     * @memberOf fabric\n\t     * @param {String} points points attribute string\n\t     * @return {Array} array of points\n\t     */\n\t    parsePointsAttribute: function(points) {\n\t\n\t      // points attribute is required and must not be empty\n\t      if (!points) {\n\t        return null;\n\t      }\n\t\n\t      // replace commas with whitespace and remove bookending whitespace\n\t      points = points.replace(/,/g, ' ').trim();\n\t\n\t      points = points.split(/\\s+/);\n\t      var parsedPoints = [ ], i, len;\n\t\n\t      i = 0;\n\t      len = points.length;\n\t      for (; i < len; i+=2) {\n\t        parsedPoints.push({\n\t          x: parseFloat(points[i]),\n\t          y: parseFloat(points[i + 1])\n\t        });\n\t      }\n\t\n\t      // odd number of points is an error\n\t      // if (parsedPoints.length % 2 !== 0) {\n\t      //   return null;\n\t      // }\n\t\n\t      return parsedPoints;\n\t    },\n\t\n\t    /**\n\t     * Returns CSS rules for a given SVG document\n\t     * @static\n\t     * @function\n\t     * @memberOf fabric\n\t     * @param {SVGDocument} doc SVG document to parse\n\t     * @return {Object} CSS rules of this document\n\t     */\n\t    getCSSRules: function(doc) {\n\t      var styles = doc.getElementsByTagName('style'),\n\t          allRules = { }, rules;\n\t\n\t      // very crude parsing of style contents\n\t      for (var i = 0, len = styles.length; i < len; i++) {\n\t        var styleContents = styles[i].textContent;\n\t\n\t        // remove comments\n\t        styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n\t        if (styleContents.trim() === '') {\n\t          continue;\n\t        }\n\t        rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n\t        rules = rules.map(function(rule) { return rule.trim(); });\n\t\n\t        rules.forEach(function(rule) {\n\t\n\t          var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\n\t          ruleObj = { }, declaration = match[2].trim(),\n\t          propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\n\t\n\t          for (var i = 0, len = propertyValuePairs.length; i < len; i++) {\n\t            var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\n\t                property = normalizeAttr(pair[0]),\n\t                value = normalizeValue(property, pair[1], pair[0]);\n\t            ruleObj[property] = value;\n\t          }\n\t          rule = match[1];\n\t          rule.split(',').forEach(function(_rule) {\n\t            _rule = _rule.replace(/^svg/i, '').trim();\n\t            if (_rule === '') {\n\t              return;\n\t            }\n\t            allRules[_rule] = fabric.util.object.clone(ruleObj);\n\t          });\n\t        });\n\t      }\n\t      return allRules;\n\t    },\n\t\n\t    /**\n\t     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects. Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n\t     * @memberOf fabric\n\t     * @param {String} url\n\t     * @param {Function} callback\n\t     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n\t     */\n\t    loadSVGFromURL: function(url, callback, reviver) {\n\t\n\t      url = url.replace(/^\\n\\s*/, '').trim();\n\t      svgCache.has(url, function (hasUrl) {\n\t        if (hasUrl) {\n\t          svgCache.get(url, function (value) {\n\t            var enlivedRecord = _enlivenCachedObject(value);\n\t            callback(enlivedRecord.objects, enlivedRecord.options);\n\t          });\n\t        }\n\t        else {\n\t          new fabric.util.request(url, {\n\t            method: 'get',\n\t            onComplete: onComplete\n\t          });\n\t        }\n\t      });\n\t\n\t      function onComplete(r) {\n\t\n\t        var xml = r.responseXML;\n\t        if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\n\t          xml = new ActiveXObject('Microsoft.XMLDOM');\n\t          xml.async = 'false';\n\t          //IE chokes on DOCTYPE\n\t          xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n\t        }\n\t        if (!xml || !xml.documentElement) {\n\t          return;\n\t        }\n\t\n\t        fabric.parseSVGDocument(xml.documentElement, function (results, options) {\n\t          svgCache.set(url, {\n\t            objects: fabric.util.array.invoke(results, 'toObject'),\n\t            options: options\n\t          });\n\t          callback(results, options);\n\t        }, reviver);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n\t     * @memberOf fabric\n\t     * @param {String} string\n\t     * @param {Function} callback\n\t     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n\t     */\n\t    loadSVGFromString: function(string, callback, reviver) {\n\t      string = string.trim();\n\t      var doc;\n\t      if (typeof DOMParser !== 'undefined') {\n\t        var parser = new DOMParser();\n\t        if (parser && parser.parseFromString) {\n\t          doc = parser.parseFromString(string, 'text/xml');\n\t        }\n\t      }\n\t      else if (fabric.window.ActiveXObject) {\n\t        doc = new ActiveXObject('Microsoft.XMLDOM');\n\t        doc.async = 'false';\n\t        // IE chokes on DOCTYPE\n\t        doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n\t      }\n\t\n\t      fabric.parseSVGDocument(doc.documentElement, function (results, options) {\n\t        callback(results, options);\n\t      }, reviver);\n\t    },\n\t\n\t    /**\n\t     * Creates markup containing SVG font faces\n\t     * @param {Array} objects Array of fabric objects\n\t     * @return {String}\n\t     */\n\t    createSVGFontFacesMarkup: function(objects) {\n\t      var markup = '';\n\t\n\t      for (var i = 0, len = objects.length; i < len; i++) {\n\t        if (objects[i].type !== 'text' || !objects[i].path) {\n\t          continue;\n\t        }\n\t\n\t        markup += [\n\t          //jscs:disable validateIndentation\n\t          '@font-face {',\n\t            'font-family: ', objects[i].fontFamily, '; ',\n\t            'src: url(\\'', objects[i].path, '\\')',\n\t          '}'\n\t          //jscs:enable validateIndentation\n\t        ].join('');\n\t      }\n\t\n\t      if (markup) {\n\t        markup = [\n\t          //jscs:disable validateIndentation\n\t          '<style type=\"text/css\">',\n\t            '<![CDATA[',\n\t              markup,\n\t            ']]>',\n\t          '</style>'\n\t          //jscs:enable validateIndentation\n\t        ].join('');\n\t      }\n\t\n\t      return markup;\n\t    },\n\t\n\t    /**\n\t     * Creates markup containing SVG referenced elements like patterns, gradients etc.\n\t     * @param {fabric.Canvas} canvas instance of fabric.Canvas\n\t     * @return {String}\n\t     */\n\t    createSVGRefElementsMarkup: function(canvas) {\n\t      var markup = [ ];\n\t\n\t      _createSVGPattern(markup, canvas, 'backgroundColor');\n\t      _createSVGPattern(markup, canvas, 'overlayColor');\n\t\n\t      return markup.join('');\n\t    }\n\t  });\n\t\n\t})( true ? exports : this);\n\t\n\t\n\tfabric.ElementsParser = function(elements, callback, options, reviver) {\n\t  this.elements = elements;\n\t  this.callback = callback;\n\t  this.options = options;\n\t  this.reviver = reviver;\n\t  this.svgUid = (options && options.svgUid) || 0;\n\t};\n\t\n\tfabric.ElementsParser.prototype.parse = function() {\n\t  this.instances = new Array(this.elements.length);\n\t  this.numElements = this.elements.length;\n\t\n\t  this.createObjects();\n\t};\n\t\n\tfabric.ElementsParser.prototype.createObjects = function() {\n\t  for (var i = 0, len = this.elements.length; i < len; i++) {\n\t    this.elements[i].setAttribute('svgUid', this.svgUid);\n\t    (function(_this, i) {\n\t      setTimeout(function() {\n\t        _this.createObject(_this.elements[i], i);\n\t      }, 0);\n\t    })(this, i);\n\t  }\n\t};\n\t\n\tfabric.ElementsParser.prototype.createObject = function(el, index) {\n\t  var klass = fabric[fabric.util.string.capitalize(el.tagName)];\n\t  if (klass && klass.fromElement) {\n\t    try {\n\t      this._createObject(klass, el, index);\n\t    }\n\t    catch (err) {\n\t      fabric.log(err);\n\t    }\n\t  }\n\t  else {\n\t    this.checkIfDone();\n\t  }\n\t};\n\t\n\tfabric.ElementsParser.prototype._createObject = function(klass, el, index) {\n\t  if (klass.async) {\n\t    klass.fromElement(el, this.createCallback(index, el), this.options);\n\t  }\n\t  else {\n\t    var obj = klass.fromElement(el, this.options);\n\t    this.resolveGradient(obj, 'fill');\n\t    this.resolveGradient(obj, 'stroke');\n\t    this.reviver && this.reviver(el, obj);\n\t    this.instances[index] = obj;\n\t    this.checkIfDone();\n\t  }\n\t};\n\t\n\tfabric.ElementsParser.prototype.createCallback = function(index, el) {\n\t  var _this = this;\n\t  return function(obj) {\n\t    _this.resolveGradient(obj, 'fill');\n\t    _this.resolveGradient(obj, 'stroke');\n\t    _this.reviver && _this.reviver(el, obj);\n\t    _this.instances[index] = obj;\n\t    _this.checkIfDone();\n\t  };\n\t};\n\t\n\tfabric.ElementsParser.prototype.resolveGradient = function(obj, property) {\n\t\n\t  var instanceFillValue = obj.get(property);\n\t  if (!(/^url\\(/).test(instanceFillValue)) {\n\t    return;\n\t  }\n\t  var gradientId = instanceFillValue.slice(5, instanceFillValue.length - 1);\n\t  if (fabric.gradientDefs[this.svgUid][gradientId]) {\n\t    obj.set(property,\n\t      fabric.Gradient.fromElement(fabric.gradientDefs[this.svgUid][gradientId], obj));\n\t  }\n\t};\n\t\n\tfabric.ElementsParser.prototype.checkIfDone = function() {\n\t  if (--this.numElements === 0) {\n\t    this.instances = this.instances.filter(function(el) {\n\t      return el != null;\n\t    });\n\t    this.callback(this.instances);\n\t  }\n\t};\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\t\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Point) {\n\t    fabric.warn('fabric.Point is already defined');\n\t    return;\n\t  }\n\t\n\t  fabric.Point = Point;\n\t\n\t  /**\n\t   * Point class\n\t   * @class fabric.Point\n\t   * @memberOf fabric\n\t   * @constructor\n\t   * @param {Number} x\n\t   * @param {Number} y\n\t   * @return {fabric.Point} thisArg\n\t   */\n\t  function Point(x, y) {\n\t    this.x = x;\n\t    this.y = y;\n\t  }\n\t\n\t  Point.prototype = /** @lends fabric.Point.prototype */ {\n\t\n\t    constructor: Point,\n\t\n\t    /**\n\t     * Adds another point to this one and returns another one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point} new Point instance with added values\n\t     */\n\t    add: function (that) {\n\t      return new Point(this.x + that.x, this.y + that.y);\n\t    },\n\t\n\t    /**\n\t     * Adds another point to this one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    addEquals: function (that) {\n\t      this.x += that.x;\n\t      this.y += that.y;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Adds value to this point and returns a new one\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} new Point with added value\n\t     */\n\t    scalarAdd: function (scalar) {\n\t      return new Point(this.x + scalar, this.y + scalar);\n\t    },\n\t\n\t    /**\n\t     * Adds value to this point\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    scalarAddEquals: function (scalar) {\n\t      this.x += scalar;\n\t      this.y += scalar;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Subtracts another point from this point and returns a new one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point} new Point object with subtracted values\n\t     */\n\t    subtract: function (that) {\n\t      return new Point(this.x - that.x, this.y - that.y);\n\t    },\n\t\n\t    /**\n\t     * Subtracts another point from this point\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    subtractEquals: function (that) {\n\t      this.x -= that.x;\n\t      this.y -= that.y;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Subtracts value from this point and returns a new one\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point}\n\t     */\n\t    scalarSubtract: function (scalar) {\n\t      return new Point(this.x - scalar, this.y - scalar);\n\t    },\n\t\n\t    /**\n\t     * Subtracts value from this point\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    scalarSubtractEquals: function (scalar) {\n\t      this.x -= scalar;\n\t      this.y -= scalar;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Miltiplies this point by a value and returns a new one\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point}\n\t     */\n\t    multiply: function (scalar) {\n\t      return new Point(this.x * scalar, this.y * scalar);\n\t    },\n\t\n\t    /**\n\t     * Miltiplies this point by a value\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    multiplyEquals: function (scalar) {\n\t      this.x *= scalar;\n\t      this.y *= scalar;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Divides this point by a value and returns a new one\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point}\n\t     */\n\t    divide: function (scalar) {\n\t      return new Point(this.x / scalar, this.y / scalar);\n\t    },\n\t\n\t    /**\n\t     * Divides this point by a value\n\t     * @param {Number} scalar\n\t     * @return {fabric.Point} thisArg\n\t     */\n\t    divideEquals: function (scalar) {\n\t      this.x /= scalar;\n\t      this.y /= scalar;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns true if this point is equal to another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    eq: function (that) {\n\t      return (this.x === that.x && this.y === that.y);\n\t    },\n\t\n\t    /**\n\t     * Returns true if this point is less than another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    lt: function (that) {\n\t      return (this.x < that.x && this.y < that.y);\n\t    },\n\t\n\t    /**\n\t     * Returns true if this point is less than or equal to another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    lte: function (that) {\n\t      return (this.x <= that.x && this.y <= that.y);\n\t    },\n\t\n\t    /**\n\t\n\t     * Returns true if this point is greater another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    gt: function (that) {\n\t      return (this.x > that.x && this.y > that.y);\n\t    },\n\t\n\t    /**\n\t     * Returns true if this point is greater than or equal to another one\n\t     * @param {fabric.Point} that\n\t     * @return {Boolean}\n\t     */\n\t    gte: function (that) {\n\t      return (this.x >= that.x && this.y >= that.y);\n\t    },\n\t\n\t    /**\n\t     * Returns new point which is the result of linear interpolation with this one and another one\n\t     * @param {fabric.Point} that\n\t     * @param {Number} t\n\t     * @return {fabric.Point}\n\t     */\n\t    lerp: function (that, t) {\n\t      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n\t    },\n\t\n\t    /**\n\t     * Returns distance from this point and another one\n\t     * @param {fabric.Point} that\n\t     * @return {Number}\n\t     */\n\t    distanceFrom: function (that) {\n\t      var dx = this.x - that.x,\n\t          dy = this.y - that.y;\n\t      return Math.sqrt(dx * dx + dy * dy);\n\t    },\n\t\n\t    /**\n\t     * Returns the point between this point and another one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point}\n\t     */\n\t    midPointFrom: function (that) {\n\t      return new Point(this.x + (that.x - this.x)/2, this.y + (that.y - this.y)/2);\n\t    },\n\t\n\t    /**\n\t     * Returns a new point which is the min of this and another one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point}\n\t     */\n\t    min: function (that) {\n\t      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n\t    },\n\t\n\t    /**\n\t     * Returns a new point which is the max of this and another one\n\t     * @param {fabric.Point} that\n\t     * @return {fabric.Point}\n\t     */\n\t    max: function (that) {\n\t      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of this point\n\t     * @return {String}\n\t     */\n\t    toString: function () {\n\t      return this.x + ',' + this.y;\n\t    },\n\t\n\t    /**\n\t     * Sets x/y of this point\n\t     * @param {Number} x\n\t     * @param {Number} y\n\t     */\n\t    setXY: function (x, y) {\n\t      this.x = x;\n\t      this.y = y;\n\t    },\n\t\n\t    /**\n\t     * Sets x/y of this point from another point\n\t     * @param {fabric.Point} that\n\t     */\n\t    setFromPoint: function (that) {\n\t      this.x = that.x;\n\t      this.y = that.y;\n\t    },\n\t\n\t    /**\n\t     * Swaps x/y of this point and another point\n\t     * @param {fabric.Point} that\n\t     */\n\t    swap: function (that) {\n\t      var x = this.x,\n\t          y = this.y;\n\t      this.x = that.x;\n\t      this.y = that.y;\n\t      that.x = x;\n\t      that.y = y;\n\t    }\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Intersection) {\n\t    fabric.warn('fabric.Intersection is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Intersection class\n\t   * @class fabric.Intersection\n\t   * @memberOf fabric\n\t   * @constructor\n\t   */\n\t  function Intersection(status) {\n\t    this.status = status;\n\t    this.points = [];\n\t  }\n\t\n\t  fabric.Intersection = Intersection;\n\t\n\t  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n\t\n\t    /**\n\t     * Appends a point to intersection\n\t     * @param {fabric.Point} point\n\t     */\n\t    appendPoint: function (point) {\n\t      this.points.push(point);\n\t    },\n\t\n\t    /**\n\t     * Appends points to intersection\n\t     * @param {Array} points\n\t     */\n\t    appendPoints: function (points) {\n\t      this.points = this.points.concat(points);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Checks if one line intersects another\n\t   * @static\n\t   * @param {fabric.Point} a1\n\t   * @param {fabric.Point} a2\n\t   * @param {fabric.Point} b1\n\t   * @param {fabric.Point} b2\n\t   * @return {fabric.Intersection}\n\t   */\n\t  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\n\t    var result,\n\t        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n\t        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n\t        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\t    if (uB !== 0) {\n\t      var ua = uaT / uB,\n\t          ub = ubT / uB;\n\t      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n\t        result = new Intersection('Intersection');\n\t        result.points.push(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n\t      }\n\t      else {\n\t        result = new Intersection();\n\t      }\n\t    }\n\t    else {\n\t      if (uaT === 0 || ubT === 0) {\n\t        result = new Intersection('Coincident');\n\t      }\n\t      else {\n\t        result = new Intersection('Parallel');\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * Checks if line intersects polygon\n\t   * @static\n\t   * @param {fabric.Point} a1\n\t   * @param {fabric.Point} a2\n\t   * @param {Array} points\n\t   * @return {fabric.Intersection}\n\t   */\n\t  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n\t    var result = new Intersection(),\n\t        length = points.length;\n\t\n\t    for (var i = 0; i < length; i++) {\n\t      var b1 = points[i],\n\t          b2 = points[(i + 1) % length],\n\t          inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\t\n\t      result.appendPoints(inter.points);\n\t    }\n\t    if (result.points.length > 0) {\n\t      result.status = 'Intersection';\n\t    }\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * Checks if polygon intersects another polygon\n\t   * @static\n\t   * @param {Array} points1\n\t   * @param {Array} points2\n\t   * @return {fabric.Intersection}\n\t   */\n\t  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\n\t    var result = new Intersection(),\n\t        length = points1.length;\n\t\n\t    for (var i = 0; i < length; i++) {\n\t      var a1 = points1[i],\n\t          a2 = points1[(i + 1) % length],\n\t          inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\t\n\t      result.appendPoints(inter.points);\n\t    }\n\t    if (result.points.length > 0) {\n\t      result.status = 'Intersection';\n\t    }\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * Checks if polygon intersects rectangle\n\t   * @static\n\t   * @param {Array} points\n\t   * @param {Number} r1\n\t   * @param {Number} r2\n\t   * @return {fabric.Intersection}\n\t   */\n\t  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\n\t    var min = r1.min(r2),\n\t        max = r1.max(r2),\n\t        topRight = new fabric.Point(max.x, min.y),\n\t        bottomLeft = new fabric.Point(min.x, max.y),\n\t        inter1 = Intersection.intersectLinePolygon(min, topRight, points),\n\t        inter2 = Intersection.intersectLinePolygon(topRight, max, points),\n\t        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\n\t        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\n\t        result = new Intersection();\n\t\n\t    result.appendPoints(inter1.points);\n\t    result.appendPoints(inter2.points);\n\t    result.appendPoints(inter3.points);\n\t    result.appendPoints(inter4.points);\n\t\n\t    if (result.points.length > 0) {\n\t      result.status = 'Intersection';\n\t    }\n\t    return result;\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Color) {\n\t    fabric.warn('fabric.Color is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Color class\n\t   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n\t   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n\t   *\n\t   * @class fabric.Color\n\t   * @param {String} color optional in hex or rgb(a) format\n\t   * @return {fabric.Color} thisArg\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n\t   */\n\t  function Color(color) {\n\t    if (!color) {\n\t      this.setSource([0, 0, 0, 1]);\n\t    }\n\t    else {\n\t      this._tryParsingColor(color);\n\t    }\n\t  }\n\t\n\t  fabric.Color = Color;\n\t\n\t  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n\t\n\t    /**\n\t     * @private\n\t     * @param {String|Array} color Color value to parse\n\t     */\n\t    _tryParsingColor: function(color) {\n\t      var source;\n\t\n\t      if (color in Color.colorNameMap) {\n\t        color = Color.colorNameMap[color];\n\t      }\n\t\n\t      if (color === 'transparent') {\n\t        this.setSource([255, 255, 255, 0]);\n\t        return;\n\t      }\n\t\n\t      source = Color.sourceFromHex(color);\n\t\n\t      if (!source) {\n\t        source = Color.sourceFromRgb(color);\n\t      }\n\t      if (!source) {\n\t        source = Color.sourceFromHsl(color);\n\t      }\n\t      if (source) {\n\t        this.setSource(source);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n\t     * @private\n\t     * @param {Number} r Red color value\n\t     * @param {Number} g Green color value\n\t     * @param {Number} b Blue color value\n\t     * @return {Array} Hsl color\n\t     */\n\t    _rgbToHsl: function(r, g, b) {\n\t      r /= 255, g /= 255, b /= 255;\n\t\n\t      var h, s, l,\n\t          max = fabric.util.array.max([r, g, b]),\n\t          min = fabric.util.array.min([r, g, b]);\n\t\n\t      l = (max + min) / 2;\n\t\n\t      if (max === min) {\n\t        h = s = 0; // achromatic\n\t      }\n\t      else {\n\t        var d = max - min;\n\t        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t        switch (max) {\n\t          case r:\n\t            h = (g - b) / d + (g < b ? 6 : 0);\n\t            break;\n\t          case g:\n\t            h = (b - r) / d + 2;\n\t            break;\n\t          case b:\n\t            h = (r - g) / d + 4;\n\t            break;\n\t        }\n\t        h /= 6;\n\t      }\n\t\n\t      return [\n\t        Math.round(h * 360),\n\t        Math.round(s * 100),\n\t        Math.round(l * 100)\n\t      ];\n\t    },\n\t\n\t    /**\n\t     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n\t     * @return {Array}\n\t     */\n\t    getSource: function() {\n\t      return this._source;\n\t    },\n\t\n\t    /**\n\t     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n\t     * @param {Array} source\n\t     */\n\t    setSource: function(source) {\n\t      this._source = source;\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in RGB format\n\t     * @return {String} ex: rgb(0-255,0-255,0-255)\n\t     */\n\t    toRgb: function() {\n\t      var source = this.getSource();\n\t      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in RGBA format\n\t     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n\t     */\n\t    toRgba: function() {\n\t      var source = this.getSource();\n\t      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in HSL format\n\t     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n\t     */\n\t    toHsl: function() {\n\t      var source = this.getSource(),\n\t          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\t\n\t      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in HSLA format\n\t     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n\t     */\n\t    toHsla: function() {\n\t      var source = this.getSource(),\n\t          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\t\n\t      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\n\t    },\n\t\n\t    /**\n\t     * Returns color represenation in HEX format\n\t     * @return {String} ex: FF5555\n\t     */\n\t    toHex: function() {\n\t      var source = this.getSource(), r, g, b;\n\t\n\t      r = source[0].toString(16);\n\t      r = (r.length === 1) ? ('0' + r) : r;\n\t\n\t      g = source[1].toString(16);\n\t      g = (g.length === 1) ? ('0' + g) : g;\n\t\n\t      b = source[2].toString(16);\n\t      b = (b.length === 1) ? ('0' + b) : b;\n\t\n\t      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n\t    },\n\t\n\t    /**\n\t     * Gets value of alpha channel for this color\n\t     * @return {Number} 0-1\n\t     */\n\t    getAlpha: function() {\n\t      return this.getSource()[3];\n\t    },\n\t\n\t    /**\n\t     * Sets value of alpha channel for this color\n\t     * @param {Number} alpha Alpha value 0-1\n\t     * @return {fabric.Color} thisArg\n\t     */\n\t    setAlpha: function(alpha) {\n\t      var source = this.getSource();\n\t      source[3] = alpha;\n\t      this.setSource(source);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Transforms color to its grayscale representation\n\t     * @return {fabric.Color} thisArg\n\t     */\n\t    toGrayscale: function() {\n\t      var source = this.getSource(),\n\t          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\n\t          currentAlpha = source[3];\n\t      this.setSource([average, average, average, currentAlpha]);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Transforms color to its black and white representation\n\t     * @param {Number} threshold\n\t     * @return {fabric.Color} thisArg\n\t     */\n\t    toBlackWhite: function(threshold) {\n\t      var source = this.getSource(),\n\t          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\n\t          currentAlpha = source[3];\n\t\n\t      threshold = threshold || 127;\n\t\n\t      average = (Number(average) < Number(threshold)) ? 0 : 255;\n\t      this.setSource([average, average, average, currentAlpha]);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Overlays color with another color\n\t     * @param {String|fabric.Color} otherColor\n\t     * @return {fabric.Color} thisArg\n\t     */\n\t    overlayWith: function(otherColor) {\n\t      if (!(otherColor instanceof Color)) {\n\t        otherColor = new Color(otherColor);\n\t      }\n\t\n\t      var result = [],\n\t          alpha = this.getAlpha(),\n\t          otherAlpha = 0.5,\n\t          source = this.getSource(),\n\t          otherSource = otherColor.getSource();\n\t\n\t      for (var i = 0; i < 3; i++) {\n\t        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\n\t      }\n\t\n\t      result[3] = alpha;\n\t      this.setSource(result);\n\t      return this;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Color\n\t   */\n\t  fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/;\n\t\n\t  /**\n\t   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Color\n\t   */\n\t  fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/;\n\t\n\t  /**\n\t   * Regex matching color in HEX format (ex: #FF5555, 010155, aff)\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Color\n\t   */\n\t  fabric.Color.reHex = /^#?([0-9a-f]{6}|[0-9a-f]{3})$/i;\n\t\n\t  /**\n\t   * Map of the 17 basic color names with HEX code\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Color\n\t   * @see: http://www.w3.org/TR/CSS2/syndata.html#color-units\n\t   */\n\t  fabric.Color.colorNameMap = {\n\t    aqua:    '#00FFFF',\n\t    black:   '#000000',\n\t    blue:    '#0000FF',\n\t    fuchsia: '#FF00FF',\n\t    gray:    '#808080',\n\t    green:   '#008000',\n\t    lime:    '#00FF00',\n\t    maroon:  '#800000',\n\t    navy:    '#000080',\n\t    olive:   '#808000',\n\t    orange:  '#FFA500',\n\t    purple:  '#800080',\n\t    red:     '#FF0000',\n\t    silver:  '#C0C0C0',\n\t    teal:    '#008080',\n\t    white:   '#FFFFFF',\n\t    yellow:  '#FFFF00'\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   * @param {Number} p\n\t   * @param {Number} q\n\t   * @param {Number} t\n\t   * @return {Number}\n\t   */\n\t  function hue2rgb(p, q, t) {\n\t    if (t < 0) {\n\t      t += 1;\n\t    }\n\t    if (t > 1) {\n\t      t -= 1;\n\t    }\n\t    if (t < 1/6) {\n\t      return p + (q - p) * 6 * t;\n\t    }\n\t    if (t < 1/2) {\n\t      return q;\n\t    }\n\t    if (t < 2/3) {\n\t      return p + (q - p) * (2/3 - t) * 6;\n\t    }\n\t    return p;\n\t  }\n\t\n\t  /**\n\t   * Returns new color object, when given a color in RGB format\n\t   * @memberOf fabric.Color\n\t   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromRgb = function(color) {\n\t    return Color.fromSource(Color.sourceFromRgb(color));\n\t  };\n\t\n\t  /**\n\t   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n\t   * @memberOf fabric.Color\n\t   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n\t   * @return {Array} source\n\t   */\n\t  fabric.Color.sourceFromRgb = function(color) {\n\t    var match = color.match(Color.reRGBa);\n\t    if (match) {\n\t      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\n\t          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\n\t          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n\t\n\t      return [\n\t        parseInt(r, 10),\n\t        parseInt(g, 10),\n\t        parseInt(b, 10),\n\t        match[4] ? parseFloat(match[4]) : 1\n\t      ];\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Returns new color object, when given a color in RGBA format\n\t   * @static\n\t   * @function\n\t   * @memberOf fabric.Color\n\t   * @param {String} color\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromRgba = Color.fromRgb;\n\t\n\t  /**\n\t   * Returns new color object, when given a color in HSL format\n\t   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n\t   * @memberOf fabric.Color\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromHsl = function(color) {\n\t    return Color.fromSource(Color.sourceFromHsl(color));\n\t  };\n\t\n\t  /**\n\t   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n\t   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n\t   * @memberOf fabric.Color\n\t   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n\t   * @return {Array} source\n\t   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n\t   */\n\t  fabric.Color.sourceFromHsl = function(color) {\n\t    var match = color.match(Color.reHSLa);\n\t    if (!match) {\n\t      return;\n\t    }\n\t\n\t    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n\t        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\n\t        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\n\t        r, g, b;\n\t\n\t    if (s === 0) {\n\t      r = g = b = l;\n\t    }\n\t    else {\n\t      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n\t          p = l * 2 - q;\n\t\n\t      r = hue2rgb(p, q, h + 1/3);\n\t      g = hue2rgb(p, q, h);\n\t      b = hue2rgb(p, q, h - 1/3);\n\t    }\n\t\n\t    return [\n\t      Math.round(r * 255),\n\t      Math.round(g * 255),\n\t      Math.round(b * 255),\n\t      match[4] ? parseFloat(match[4]) : 1\n\t    ];\n\t  };\n\t\n\t  /**\n\t   * Returns new color object, when given a color in HSLA format\n\t   * @static\n\t   * @function\n\t   * @memberOf fabric.Color\n\t   * @param {String} color\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromHsla = Color.fromHsl;\n\t\n\t  /**\n\t   * Returns new color object, when given a color in HEX format\n\t   * @static\n\t   * @memberOf fabric.Color\n\t   * @param {String} color Color value ex: FF5555\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromHex = function(color) {\n\t    return Color.fromSource(Color.sourceFromHex(color));\n\t  };\n\t\n\t  /**\n\t   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n\t   * @static\n\t   * @memberOf fabric.Color\n\t   * @param {String} color ex: FF5555\n\t   * @return {Array} source\n\t   */\n\t  fabric.Color.sourceFromHex = function(color) {\n\t    if (color.match(Color.reHex)) {\n\t      var value = color.slice(color.indexOf('#') + 1),\n\t          isShortNotation = (value.length === 3),\n\t          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\n\t          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\n\t          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6);\n\t\n\t      return [\n\t        parseInt(r, 16),\n\t        parseInt(g, 16),\n\t        parseInt(b, 16),\n\t        1\n\t      ];\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n\t   * @static\n\t   * @memberOf fabric.Color\n\t   * @param {Array} source\n\t   * @return {fabric.Color}\n\t   */\n\t  fabric.Color.fromSource = function(source) {\n\t    var oColor = new Color();\n\t    oColor.setSource(source);\n\t    return oColor;\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  /* _FROM_SVG_START_ */\n\t  function getColorStop(el) {\n\t    var style = el.getAttribute('style'),\n\t        offset = el.getAttribute('offset'),\n\t        color, colorAlpha, opacity;\n\t\n\t    // convert percents to absolute values\n\t    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\n\t    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\n\t    if (style) {\n\t      var keyValuePairs = style.split(/\\s*;\\s*/);\n\t\n\t      if (keyValuePairs[keyValuePairs.length - 1] === '') {\n\t        keyValuePairs.pop();\n\t      }\n\t\n\t      for (var i = keyValuePairs.length; i--; ) {\n\t\n\t        var split = keyValuePairs[i].split(/\\s*:\\s*/),\n\t            key = split[0].trim(),\n\t            value = split[1].trim();\n\t\n\t        if (key === 'stop-color') {\n\t          color = value;\n\t        }\n\t        else if (key === 'stop-opacity') {\n\t          opacity = value;\n\t        }\n\t      }\n\t    }\n\t\n\t    if (!color) {\n\t      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\n\t    }\n\t    if (!opacity) {\n\t      opacity = el.getAttribute('stop-opacity');\n\t    }\n\t\n\t    color = new fabric.Color(color);\n\t    colorAlpha = color.getAlpha();\n\t    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\n\t    opacity *= colorAlpha;\n\t\n\t    return {\n\t      offset: offset,\n\t      color: color.toRgb(),\n\t      opacity: opacity\n\t    };\n\t  }\n\t\n\t  function getLinearCoords(el) {\n\t    return {\n\t      x1: el.getAttribute('x1') || 0,\n\t      y1: el.getAttribute('y1') || 0,\n\t      x2: el.getAttribute('x2') || '100%',\n\t      y2: el.getAttribute('y2') || 0\n\t    };\n\t  }\n\t\n\t  function getRadialCoords(el) {\n\t    return {\n\t      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\n\t      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\n\t      r1: 0,\n\t      x2: el.getAttribute('cx') || '50%',\n\t      y2: el.getAttribute('cy') || '50%',\n\t      r2: el.getAttribute('r') || '50%'\n\t    };\n\t  }\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Gradient class\n\t   * @class fabric.Gradient\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#gradients}\n\t   * @see {@link fabric.Gradient#initialize} for constructor definition\n\t   */\n\t  fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\n\t\n\t    /**\n\t     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n\t     * @type Number\n\t     * @default 0\n\t     */\n\t    offsetX: 0,\n\t\n\t    /**\n\t     * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n\t     * @type Number\n\t     * @default 0\n\t     */\n\t    offsetY: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops\n\t     * @return {fabric.Gradient} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options || (options = { });\n\t\n\t      var coords = { };\n\t\n\t      this.id = fabric.Object.__uid++;\n\t      this.type = options.type || 'linear';\n\t\n\t      coords = {\n\t        x1: options.coords.x1 || 0,\n\t        y1: options.coords.y1 || 0,\n\t        x2: options.coords.x2 || 0,\n\t        y2: options.coords.y2 || 0\n\t      };\n\t\n\t      if (this.type === 'radial') {\n\t        coords.r1 = options.coords.r1 || 0;\n\t        coords.r2 = options.coords.r2 || 0;\n\t      }\n\t      this.coords = coords;\n\t      this.colorStops = options.colorStops.slice();\n\t      if (options.gradientTransform) {\n\t        this.gradientTransform = options.gradientTransform;\n\t      }\n\t      this.offsetX = options.offsetX || this.offsetX;\n\t      this.offsetY = options.offsetY || this.offsetY;\n\t    },\n\t\n\t    /**\n\t     * Adds another colorStop\n\t     * @param {Object} colorStop Object with offset and color\n\t     * @return {fabric.Gradient} thisArg\n\t     */\n\t    addColorStop: function(colorStop) {\n\t      for (var position in colorStop) {\n\t        var color = new fabric.Color(colorStop[position]);\n\t        this.colorStops.push({\n\t          offset: position,\n\t          color: color.toRgb(),\n\t          opacity: color.getAlpha()\n\t        });\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of a gradient\n\t     * @return {Object}\n\t     */\n\t    toObject: function() {\n\t      return {\n\t        type: this.type,\n\t        coords: this.coords,\n\t        colorStops: this.colorStops,\n\t        offsetX: this.offsetX,\n\t        offsetY: this.offsetY\n\t      };\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an gradient\n\t     * @param {Object} object Object to create a gradient for\n\t     * @param {Boolean} normalize Whether coords should be normalized\n\t     * @return {String} SVG representation of an gradient (linear/radial)\n\t     */\n\t    toSVG: function(object) {\n\t      var coords = fabric.util.object.clone(this.coords),\n\t          markup, commonAttributes;\n\t\n\t      // colorStops must be sorted ascending\n\t      this.colorStops.sort(function(a, b) {\n\t        return a.offset - b.offset;\n\t      });\n\t\n\t      if (!(object.group && object.group.type === 'path-group')) {\n\t        for (var prop in coords) {\n\t          if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n\t            coords[prop] += this.offsetX - object.width / 2;\n\t          }\n\t          else if (prop === 'y1' || prop === 'y2') {\n\t            coords[prop] += this.offsetY - object.height / 2;\n\t          }\n\t        }\n\t      }\n\t\n\t      commonAttributes = 'id=\"SVGID_' + this.id +\n\t                     '\" gradientUnits=\"userSpaceOnUse\"';\n\t      if (this.gradientTransform) {\n\t        commonAttributes += ' gradientTransform=\"matrix(' + this.gradientTransform.join(' ') + ')\" ';\n\t      }\n\t      if (this.type === 'linear') {\n\t        markup = [\n\t          //jscs:disable validateIndentation\n\t          '<linearGradient ',\n\t            commonAttributes,\n\t            ' x1=\"', coords.x1,\n\t            '\" y1=\"', coords.y1,\n\t            '\" x2=\"', coords.x2,\n\t            '\" y2=\"', coords.y2,\n\t          '\">\\n'\n\t          //jscs:enable validateIndentation\n\t        ];\n\t      }\n\t      else if (this.type === 'radial') {\n\t        markup = [\n\t          //jscs:disable validateIndentation\n\t          '<radialGradient ',\n\t            commonAttributes,\n\t            ' cx=\"', coords.x2,\n\t            '\" cy=\"', coords.y2,\n\t            '\" r=\"', coords.r2,\n\t            '\" fx=\"', coords.x1,\n\t            '\" fy=\"', coords.y1,\n\t          '\">\\n'\n\t          //jscs:enable validateIndentation\n\t        ];\n\t      }\n\t\n\t      for (var i = 0; i < this.colorStops.length; i++) {\n\t        markup.push(\n\t          //jscs:disable validateIndentation\n\t          '<stop ',\n\t            'offset=\"', (this.colorStops[i].offset * 100) + '%',\n\t            '\" style=\"stop-color:', this.colorStops[i].color,\n\t            (this.colorStops[i].opacity != null ? ';stop-opacity: ' + this.colorStops[i].opacity : ';'),\n\t          '\"/>\\n'\n\t          //jscs:enable validateIndentation\n\t        );\n\t      }\n\t\n\t      markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\n\t\n\t      return markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns an instance of CanvasGradient\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @return {CanvasGradient}\n\t     */\n\t    toLive: function(ctx, object) {\n\t      var gradient, prop, coords = fabric.util.object.clone(this.coords);\n\t\n\t      if (!this.type) {\n\t        return;\n\t      }\n\t\n\t      if (object.group && object.group.type === 'path-group') {\n\t        for (prop in coords) {\n\t          if (prop === 'x1' || prop === 'x2') {\n\t            coords[prop] += -this.offsetX + object.width / 2;\n\t          }\n\t          else if (prop === 'y1' || prop === 'y2') {\n\t            coords[prop] += -this.offsetY + object.height / 2;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.type === 'linear') {\n\t        gradient = ctx.createLinearGradient(\n\t          coords.x1, coords.y1, coords.x2, coords.y2);\n\t      }\n\t      else if (this.type === 'radial') {\n\t        gradient = ctx.createRadialGradient(\n\t          coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);\n\t      }\n\t\n\t      for (var i = 0, len = this.colorStops.length; i < len; i++) {\n\t        var color = this.colorStops[i].color,\n\t            opacity = this.colorStops[i].opacity,\n\t            offset = this.colorStops[i].offset;\n\t\n\t        if (typeof opacity !== 'undefined') {\n\t          color = new fabric.Color(color).setAlpha(opacity).toRgba();\n\t        }\n\t        gradient.addColorStop(parseFloat(offset), color);\n\t      }\n\t\n\t      return gradient;\n\t    }\n\t  });\n\t\n\t  fabric.util.object.extend(fabric.Gradient, {\n\t\n\t    /* _FROM_SVG_START_ */\n\t    /**\n\t     * Returns {@link fabric.Gradient} instance from an SVG element\n\t     * @static\n\t     * @memberOf fabric.Gradient\n\t     * @param {SVGGradientElement} el SVG gradient element\n\t     * @param {fabric.Object} instance\n\t     * @return {fabric.Gradient} Gradient instance\n\t     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n\t     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n\t     */\n\t    fromElement: function(el, instance) {\n\t\n\t      /**\n\t       *  @example:\n\t       *\n\t       *  <linearGradient id=\"linearGrad1\">\n\t       *    <stop offset=\"0%\" stop-color=\"white\"/>\n\t       *    <stop offset=\"100%\" stop-color=\"black\"/>\n\t       *  </linearGradient>\n\t       *\n\t       *  OR\n\t       *\n\t       *  <linearGradient id=\"linearGrad2\">\n\t       *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n\t       *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n\t       *  </linearGradient>\n\t       *\n\t       *  OR\n\t       *\n\t       *  <radialGradient id=\"radialGrad1\">\n\t       *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n\t       *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n\t       *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n\t       *  </radialGradient>\n\t       *\n\t       *  OR\n\t       *\n\t       *  <radialGradient id=\"radialGrad2\">\n\t       *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n\t       *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n\t       *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n\t       *  </radialGradient>\n\t       *\n\t       */\n\t\n\t      var colorStopEls = el.getElementsByTagName('stop'),\n\t          type = (el.nodeName === 'linearGradient' ? 'linear' : 'radial'),\n\t          gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',\n\t          gradientTransform = el.getAttribute('gradientTransform'),\n\t          colorStops = [],\n\t          coords = { }, ellipseMatrix;\n\t\n\t      if (type === 'linear') {\n\t        coords = getLinearCoords(el);\n\t      }\n\t      else if (type === 'radial') {\n\t        coords = getRadialCoords(el);\n\t      }\n\t\n\t      for (var i = colorStopEls.length; i--; ) {\n\t        colorStops.push(getColorStop(colorStopEls[i]));\n\t      }\n\t\n\t      ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);\n\t\n\t      var gradient = new fabric.Gradient({\n\t        type: type,\n\t        coords: coords,\n\t        colorStops: colorStops,\n\t        offsetX: -instance.left,\n\t        offsetY: -instance.top\n\t      });\n\t\n\t      if (gradientTransform || ellipseMatrix !== '') {\n\t        gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);\n\t      }\n\t      return gradient;\n\t    },\n\t    /* _FROM_SVG_END_ */\n\t\n\t    /**\n\t     * Returns {@link fabric.Gradient} instance from its object representation\n\t     * @static\n\t     * @memberOf fabric.Gradient\n\t     * @param {Object} obj\n\t     * @param {Object} [options] Options object\n\t     */\n\t    forObject: function(obj, options) {\n\t      options || (options = { });\n\t      _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');\n\t      return new fabric.Gradient(options);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function _convertPercentUnitsToValues(object, options, gradientUnits) {\n\t    var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';\n\t    for (var prop in options) {\n\t      propValue = parseFloat(options[prop], 10);\n\t      if (typeof options[prop] === 'string' && /^\\d+%$/.test(options[prop])) {\n\t        multFactor = 0.01;\n\t      }\n\t      else {\n\t        multFactor = 1;\n\t      }\n\t      if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n\t        multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;\n\t        addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;\n\t      }\n\t      else if (prop === 'y1' || prop === 'y2') {\n\t        multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;\n\t        addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;\n\t      }\n\t      options[prop] = propValue * multFactor + addFactor;\n\t    }\n\t    if (object.type === 'ellipse' &&\n\t        options.r2 !== null &&\n\t        gradientUnits === 'objectBoundingBox' &&\n\t        object.rx !== object.ry) {\n\t\n\t      var scaleFactor = object.ry/object.rx;\n\t      ellipseMatrix = ' scale(1, ' + scaleFactor + ')';\n\t      if (options.y1) {\n\t        options.y1 /= scaleFactor;\n\t      }\n\t      if (options.y2) {\n\t        options.y2 /= scaleFactor;\n\t      }\n\t    }\n\t    return ellipseMatrix;\n\t  }\n\t})();\n\t\n\t\n\t/**\n\t * Pattern class\n\t * @class fabric.Pattern\n\t * @see {@link http://fabricjs.com/patterns/|Pattern demo}\n\t * @see {@link http://fabricjs.com/dynamic-patterns/|DynamicPattern demo}\n\t * @see {@link fabric.Pattern#initialize} for constructor definition\n\t */\n\tfabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\n\t\n\t  /**\n\t   * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n\t   * @type String\n\t   * @default\n\t   */\n\t  repeat: 'repeat',\n\t\n\t  /**\n\t   * Pattern horizontal offset from object's left/top corner\n\t   * @type Number\n\t   * @default\n\t   */\n\t  offsetX: 0,\n\t\n\t  /**\n\t   * Pattern vertical offset from object's left/top corner\n\t   * @type Number\n\t   * @default\n\t   */\n\t  offsetY: 0,\n\t\n\t  /**\n\t   * Constructor\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Pattern} thisArg\n\t   */\n\t  initialize: function(options) {\n\t    options || (options = { });\n\t\n\t    this.id = fabric.Object.__uid++;\n\t\n\t    if (options.source) {\n\t      if (typeof options.source === 'string') {\n\t        // function string\n\t        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\n\t          this.source = new Function(fabric.util.getFunctionBody(options.source));\n\t        }\n\t        else {\n\t          // img src string\n\t          var _this = this;\n\t          this.source = fabric.util.createImage();\n\t          fabric.util.loadImage(options.source, function(img) {\n\t            _this.source = img;\n\t          });\n\t        }\n\t      }\n\t      else {\n\t        // img element\n\t        this.source = options.source;\n\t      }\n\t    }\n\t    if (options.repeat) {\n\t      this.repeat = options.repeat;\n\t    }\n\t    if (options.offsetX) {\n\t      this.offsetX = options.offsetX;\n\t    }\n\t    if (options.offsetY) {\n\t      this.offsetY = options.offsetY;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns object representation of a pattern\n\t   * @return {Object} Object representation of a pattern instance\n\t   */\n\t  toObject: function() {\n\t\n\t    var source;\n\t\n\t    // callback\n\t    if (typeof this.source === 'function') {\n\t      source = String(this.source);\n\t    }\n\t    // <img> element\n\t    else if (typeof this.source.src === 'string') {\n\t      source = this.source.src;\n\t    }\n\t    // <canvas> element\n\t    else if (typeof this.source === 'object' && this.source.toDataURL) {\n\t      source = this.source.toDataURL();\n\t    }\n\t\n\t    return {\n\t      source: source,\n\t      repeat: this.repeat,\n\t      offsetX: this.offsetX,\n\t      offsetY: this.offsetY\n\t    };\n\t  },\n\t\n\t  /* _TO_SVG_START_ */\n\t  /**\n\t   * Returns SVG representation of a pattern\n\t   * @param {fabric.Object} object\n\t   * @return {String} SVG representation of a pattern\n\t   */\n\t  toSVG: function(object) {\n\t    var patternSource = typeof this.source === 'function' ? this.source() : this.source,\n\t        patternWidth = patternSource.width / object.getWidth(),\n\t        patternHeight = patternSource.height / object.getHeight(),\n\t        patternOffsetX = this.offsetX / object.getWidth(),\n\t        patternOffsetY = this.offsetY / object.getHeight(),\n\t        patternImgSrc = '';\n\t    if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\n\t      patternHeight = 1;\n\t    }\n\t    if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\n\t      patternWidth = 1;\n\t    }\n\t    if (patternSource.src) {\n\t      patternImgSrc = patternSource.src;\n\t    }\n\t    else if (patternSource.toDataURL) {\n\t      patternImgSrc = patternSource.toDataURL();\n\t    }\n\t\n\t    return '<pattern id=\"SVGID_' + this.id +\n\t                  '\" x=\"' + patternOffsetX +\n\t                  '\" y=\"' + patternOffsetY +\n\t                  '\" width=\"' + patternWidth +\n\t                  '\" height=\"' + patternHeight + '\">\\n' +\n\t             '<image x=\"0\" y=\"0\"' +\n\t                    ' width=\"' + patternSource.width +\n\t                    '\" height=\"' + patternSource.height +\n\t                    '\" xlink:href=\"' + patternImgSrc +\n\t             '\"></image>\\n' +\n\t           '</pattern>\\n';\n\t  },\n\t  /* _TO_SVG_END_ */\n\t\n\t  /**\n\t   * Returns an instance of CanvasPattern\n\t   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n\t   * @return {CanvasPattern}\n\t   */\n\t  toLive: function(ctx) {\n\t    var source = typeof this.source === 'function'\n\t      ? this.source()\n\t      : this.source;\n\t\n\t    // if the image failed to load, return, and allow rest to continue loading\n\t    if (!source) {\n\t      return '';\n\t    }\n\t\n\t    // if an image\n\t    if (typeof source.src !== 'undefined') {\n\t      if (!source.complete) {\n\t        return '';\n\t      }\n\t      if (source.naturalWidth === 0 || source.naturalHeight === 0) {\n\t        return '';\n\t      }\n\t    }\n\t    return ctx.createPattern(source, this.repeat);\n\t  }\n\t});\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      toFixed = fabric.util.toFixed;\n\t\n\t  if (fabric.Shadow) {\n\t    fabric.warn('fabric.Shadow is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Shadow class\n\t   * @class fabric.Shadow\n\t   * @see {@link http://fabricjs.com/shadows/|Shadow demo}\n\t   * @see {@link fabric.Shadow#initialize} for constructor definition\n\t   */\n\t  fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\n\t\n\t    /**\n\t     * Shadow color\n\t     * @type String\n\t     * @default\n\t     */\n\t    color: 'rgb(0,0,0)',\n\t\n\t    /**\n\t     * Shadow blur\n\t     * @type Number\n\t     */\n\t    blur: 0,\n\t\n\t    /**\n\t     * Shadow horizontal offset\n\t     * @type Number\n\t     * @default\n\t     */\n\t    offsetX: 0,\n\t\n\t    /**\n\t     * Shadow vertical offset\n\t     * @type Number\n\t     * @default\n\t     */\n\t    offsetY: 0,\n\t\n\t    /**\n\t     * Whether the shadow should affect stroke operations\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    affectStroke: false,\n\t\n\t    /**\n\t     * Indicates whether toObject should include default values\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    includeDefaultValues: true,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetX properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px, \"2px 2px 10px rgba(0,0,0,0.2)\")\n\t     * @return {fabric.Shadow} thisArg\n\t     */\n\t    initialize: function(options) {\n\t\n\t      if (typeof options === 'string') {\n\t        options = this._parseShadow(options);\n\t      }\n\t\n\t      for (var prop in options) {\n\t        this[prop] = options[prop];\n\t      }\n\t\n\t      this.id = fabric.Object.__uid++;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} shadow Shadow value to parse\n\t     * @return {Object} Shadow object with color, offsetX, offsetY and blur\n\t     */\n\t    _parseShadow: function(shadow) {\n\t      var shadowStr = shadow.trim(),\n\t          offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [ ],\n\t          color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\n\t\n\t      return {\n\t        color: color.trim(),\n\t        offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n\t        offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\n\t        blur: parseInt(offsetsAndBlur[3], 10) || 0\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Returns a string representation of an instance\n\t     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n\t     * @return {String} Returns CSS3 text-shadow declaration\n\t     */\n\t    toString: function() {\n\t      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of a shadow\n\t     * @param {fabric.Object} object\n\t     * @return {String} SVG representation of a shadow\n\t     */\n\t    toSVG: function(object) {\n\t      var fBoxX = 40, fBoxY = 40;\n\t\n\t      if (object.width && object.height) {\n\t        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n\t        // we add some extra space to filter box to contain the blur ( 20 )\n\t        fBoxX = toFixed((Math.abs(this.offsetX) + this.blur) / object.width, 2) * 100 + 20;\n\t        fBoxY = toFixed((Math.abs(this.offsetY) + this.blur) / object.height, 2) * 100 + 20;\n\t      }\n\t\n\t      return (\n\t        '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\n\t          'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\n\t          '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\n\t            toFixed(this.blur ? this.blur / 2 : 0, 3) + '\"></feGaussianBlur>\\n' +\n\t          '\\t<feOffset dx=\"' + this.offsetX + '\" dy=\"' + this.offsetY + '\" result=\"oBlur\" ></feOffset>\\n' +\n\t          '\\t<feFlood flood-color=\"' + this.color + '\"/>\\n' +\n\t          '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\n\t          '\\t<feMerge>\\n' +\n\t            '\\t\\t<feMergeNode></feMergeNode>\\n' +\n\t            '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\n\t          '\\t</feMerge>\\n' +\n\t        '</filter>\\n');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns object representation of a shadow\n\t     * @return {Object} Object representation of a shadow instance\n\t     */\n\t    toObject: function() {\n\t      if (this.includeDefaultValues) {\n\t        return {\n\t          color: this.color,\n\t          blur: this.blur,\n\t          offsetX: this.offsetX,\n\t          offsetY: this.offsetY\n\t        };\n\t      }\n\t      var obj = { }, proto = fabric.Shadow.prototype;\n\t      if (this.color !== proto.color) {\n\t        obj.color = this.color;\n\t      }\n\t      if (this.blur !== proto.blur) {\n\t        obj.blur = this.blur;\n\t      }\n\t      if (this.offsetX !== proto.offsetX) {\n\t        obj.offsetX = this.offsetX;\n\t      }\n\t      if (this.offsetY !== proto.offsetY) {\n\t        obj.offsetY = this.offsetY;\n\t      }\n\t      return obj;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n\t   * @static\n\t   * @field\n\t   * @memberOf fabric.Shadow\n\t   */\n\t  fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function () {\n\t\n\t  'use strict';\n\t\n\t  if (fabric.StaticCanvas) {\n\t    fabric.warn('fabric.StaticCanvas is already defined.');\n\t    return;\n\t  }\n\t\n\t  // aliases for faster resolution\n\t  var extend = fabric.util.object.extend,\n\t      getElementOffset = fabric.util.getElementOffset,\n\t      removeFromArray = fabric.util.removeFromArray,\n\t\n\t      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\n\t\n\t  /**\n\t   * Static canvas class\n\t   * @class fabric.StaticCanvas\n\t   * @mixes fabric.Collection\n\t   * @mixes fabric.Observable\n\t   * @see {@link http://fabricjs.com/static_canvas/|StaticCanvas demo}\n\t   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n\t   * @fires before:render\n\t   * @fires after:render\n\t   * @fires canvas:cleared\n\t   * @fires object:added\n\t   * @fires object:removed\n\t   */\n\t  fabric.StaticCanvas = fabric.util.createClass(/** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n\t     * @param {Object} [options] Options object\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(el, options) {\n\t      options || (options = { });\n\t\n\t      this._initStatic(el, options);\n\t      fabric.StaticCanvas.activeInstance = this;\n\t    },\n\t\n\t    /**\n\t     * Background color of canvas instance.\n\t     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n\t     * @type {(String|fabric.Pattern)}\n\t     * @default\n\t     */\n\t    backgroundColor: '',\n\t\n\t    /**\n\t     * Background image of canvas instance.\n\t     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\n\t     * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\n\t     * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\n\t     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\n\t     * @type fabric.Image\n\t     * @default\n\t     */\n\t    backgroundImage: null,\n\t\n\t    /**\n\t     * Overlay color of canvas instance.\n\t     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n\t     * @since 1.3.9\n\t     * @type {(String|fabric.Pattern)}\n\t     * @default\n\t     */\n\t    overlayColor: '',\n\t\n\t    /**\n\t     * Overlay image of canvas instance.\n\t     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\n\t     * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\n\t     * and \"overlayImageTop\" properties are deprecated since 1.3.9.\n\t     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\n\t     * @type fabric.Image\n\t     * @default\n\t     */\n\t    overlayImage: null,\n\t\n\t    /**\n\t     * Indicates whether toObject/toDatalessObject should include default values\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    includeDefaultValues: true,\n\t\n\t    /**\n\t     * Indicates whether objects' state should be saved\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    stateful: true,\n\t\n\t    /**\n\t     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove} should also re-render canvas.\n\t     * Disabling this option could give a great performance boost when adding/removing a lot of objects to/from canvas at once\n\t     * (followed by a manual rendering after addition/deletion)\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    renderOnAddRemove: true,\n\t\n\t    /**\n\t     * Function that determines clipping of entire canvas area\n\t     * Being passed context as first argument. See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\n\t     * @type Function\n\t     * @default\n\t     */\n\t    clipTo: null,\n\t\n\t    /**\n\t     * Indicates whether object controls (borders/controls) are rendered above overlay image\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    controlsAboveOverlay: false,\n\t\n\t    /**\n\t     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    allowTouchScrolling: false,\n\t\n\t    /**\n\t     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    imageSmoothingEnabled: true,\n\t\n\t    /**\n\t     * Indicates whether objects should remain in current stack position when selected. When false objects are brought to top and rendered as part of the selection group\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    preserveObjectStacking: false,\n\t\n\t    /**\n\t     * The transformation (in the format of Canvas transform) which focuses the viewport\n\t     * @type Array\n\t     * @default\n\t     */\n\t    viewportTransform: [1, 0, 0, 1, 0, 0],\n\t\n\t    /**\n\t     * Callback; invoked right before object is about to be scaled/rotated\n\t     */\n\t    onBeforeScaleRotate: function () {\n\t      /* NOOP */\n\t    },\n\t\n\t    /**\n\t     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n\t     */\n\t    enableRetinaScaling: true,\n\t\n\t    /**\n\t     * @private\n\t     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initStatic: function(el, options) {\n\t      this._objects = [];\n\t\n\t      this._createLowerCanvas(el);\n\t      this._initOptions(options);\n\t      this._setImageSmoothing();\n\t\n\t      // only initialize retina scaling once\n\t      if (!this.interactive) {\n\t        this._initRetinaScaling();\n\t      }\n\t\n\t      if (options.overlayImage) {\n\t        this.setOverlayImage(options.overlayImage, this.renderAll.bind(this));\n\t      }\n\t      if (options.backgroundImage) {\n\t        this.setBackgroundImage(options.backgroundImage, this.renderAll.bind(this));\n\t      }\n\t      if (options.backgroundColor) {\n\t        this.setBackgroundColor(options.backgroundColor, this.renderAll.bind(this));\n\t      }\n\t      if (options.overlayColor) {\n\t        this.setOverlayColor(options.overlayColor, this.renderAll.bind(this));\n\t      }\n\t      this.calcOffset();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _initRetinaScaling: function() {\n\t      if (fabric.devicePixelRatio === 1 || !this.enableRetinaScaling) {\n\t        return;\n\t      }\n\t\n\t      this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);\n\t      this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);\n\t\n\t      this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);\n\t    },\n\t\n\t    /**\n\t     * Calculates canvas element offset relative to the document\n\t     * This method is also attached as \"resize\" event handler of window\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable\n\t     */\n\t    calcOffset: function () {\n\t      this._offset = getElementOffset(this.lowerCanvasEl);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n\t     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n\t     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n\t     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n\t     * @example <caption>Normal overlayImage with left/top = 0</caption>\n\t     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n\t     *   // Needed to position overlayImage at 0/0\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>overlayImage with different properties</caption>\n\t     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n\t     *   opacity: 0.5,\n\t     *   angle: 45,\n\t     *   left: 400,\n\t     *   top: 400,\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n\t     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\n\t     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n\t     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n\t     * });\n\t     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n\t     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n\t     *   width: canvas.width,\n\t     *   height: canvas.height,\n\t     *   // Needed to position overlayImage at 0/0\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>overlayImage loaded from cross-origin</caption>\n\t     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n\t     *   opacity: 0.5,\n\t     *   angle: 45,\n\t     *   left: 400,\n\t     *   top: 400,\n\t     *   originX: 'left',\n\t     *   originY: 'top',\n\t     *   crossOrigin: 'anonymous'\n\t     * });\n\t     */\n\t    setOverlayImage: function (image, callback, options) {\n\t      return this.__setBgOverlayImage('overlayImage', image, callback, options);\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n\t     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n\t     * @param {Function} callback Callback to invoke when image is loaded and set as background\n\t     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/YH9yD/|jsFiddle demo}\n\t     * @example <caption>Normal backgroundImage with left/top = 0</caption>\n\t     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n\t     *   // Needed to position backgroundImage at 0/0\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>backgroundImage with different properties</caption>\n\t     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n\t     *   opacity: 0.5,\n\t     *   angle: 45,\n\t     *   left: 400,\n\t     *   top: 400,\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n\t     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\n\t     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n\t     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n\t     * });\n\t     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n\t     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n\t     *   width: canvas.width,\n\t     *   height: canvas.height,\n\t     *   // Needed to position backgroundImage at 0/0\n\t     *   originX: 'left',\n\t     *   originY: 'top'\n\t     * });\n\t     * @example <caption>backgroundImage loaded from cross-origin</caption>\n\t     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n\t     *   opacity: 0.5,\n\t     *   angle: 45,\n\t     *   left: 400,\n\t     *   top: 400,\n\t     *   originX: 'left',\n\t     *   originY: 'top',\n\t     *   crossOrigin: 'anonymous'\n\t     * });\n\t     */\n\t    setBackgroundImage: function (image, callback, options) {\n\t      return this.__setBgOverlayImage('backgroundImage', image, callback, options);\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.StaticCanvas#overlayColor|background color} for this canvas\n\t     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set background color to\n\t     * @param {Function} callback Callback to invoke when background color is set\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n\t     * @example <caption>Normal overlayColor - color value</caption>\n\t     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n\t     * @example <caption>fabric.Pattern used as overlayColor</caption>\n\t     * canvas.setOverlayColor({\n\t     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n\t     * }, canvas.renderAll.bind(canvas));\n\t     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n\t     * canvas.setOverlayColor({\n\t     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n\t     *   repeat: 'repeat',\n\t     *   offsetX: 200,\n\t     *   offsetY: 100\n\t     * }, canvas.renderAll.bind(canvas));\n\t     */\n\t    setOverlayColor: function(overlayColor, callback) {\n\t      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n\t     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n\t     * @param {Function} callback Callback to invoke when background color is set\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n\t     * @example <caption>Normal backgroundColor - color value</caption>\n\t     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n\t     * @example <caption>fabric.Pattern used as backgroundColor</caption>\n\t     * canvas.setBackgroundColor({\n\t     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n\t     * }, canvas.renderAll.bind(canvas));\n\t     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n\t     * canvas.setBackgroundColor({\n\t     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n\t     *   repeat: 'repeat',\n\t     *   offsetX: 200,\n\t     *   offsetY: 100\n\t     * }, canvas.renderAll.bind(canvas));\n\t     */\n\t    setBackgroundColor: function(backgroundColor, callback) {\n\t      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\n\t     */\n\t    _setImageSmoothing: function() {\n\t      var ctx = this.getContext();\n\t\n\t      if (typeof ctx.imageSmoothingEnabled !== 'undefined') {\n\t        ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n\t        return;\n\t      }\n\t      ctx.webkitImageSmoothingEnabled = this.imageSmoothingEnabled;\n\t      ctx.mozImageSmoothingEnabled    = this.imageSmoothingEnabled;\n\t      ctx.msImageSmoothingEnabled     = this.imageSmoothingEnabled;\n\t      ctx.oImageSmoothingEnabled      = this.imageSmoothingEnabled;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n\t     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n\t     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n\t     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\n\t     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n\t     */\n\t    __setBgOverlayImage: function(property, image, callback, options) {\n\t      if (typeof image === 'string') {\n\t        fabric.util.loadImage(image, function(img) {\n\t          this[property] = new fabric.Image(img, options);\n\t          callback && callback();\n\t        }, this, options && options.crossOrigin);\n\t      }\n\t      else {\n\t        options && image.setOptions(options);\n\t        this[property] = image;\n\t        callback && callback();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n\t     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n\t     * @param {(Object|String|null)} color Object with pattern information, color value or null\n\t     * @param {Function} [callback] Callback is invoked when color is set\n\t     */\n\t    __setBgOverlayColor: function(property, color, callback) {\n\t      if (color && color.source) {\n\t        var _this = this;\n\t        fabric.util.loadImage(color.source, function(img) {\n\t          _this[property] = new fabric.Pattern({\n\t            source: img,\n\t            repeat: color.repeat,\n\t            offsetX: color.offsetX,\n\t            offsetY: color.offsetY\n\t          });\n\t          callback && callback();\n\t        });\n\t      }\n\t      else {\n\t        this[property] = color;\n\t        callback && callback();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createCanvasElement: function() {\n\t      var element = fabric.document.createElement('canvas');\n\t      if (!element.style) {\n\t        element.style = { };\n\t      }\n\t      if (!element) {\n\t        throw CANVAS_INIT_ERROR;\n\t      }\n\t      this._initCanvasElement(element);\n\t      return element;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {HTMLElement} element\n\t     */\n\t    _initCanvasElement: function(element) {\n\t      fabric.util.createCanvasElement(element);\n\t\n\t      if (typeof element.getContext === 'undefined') {\n\t        throw CANVAS_INIT_ERROR;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initOptions: function (options) {\n\t      for (var prop in options) {\n\t        this[prop] = options[prop];\n\t      }\n\t\n\t      this.width = this.width || parseInt(this.lowerCanvasEl.width, 10) || 0;\n\t      this.height = this.height || parseInt(this.lowerCanvasEl.height, 10) || 0;\n\t\n\t      if (!this.lowerCanvasEl.style) {\n\t        return;\n\t      }\n\t\n\t      this.lowerCanvasEl.width = this.width;\n\t      this.lowerCanvasEl.height = this.height;\n\t\n\t      this.lowerCanvasEl.style.width = this.width + 'px';\n\t      this.lowerCanvasEl.style.height = this.height + 'px';\n\t\n\t      this.viewportTransform = this.viewportTransform.slice();\n\t    },\n\t\n\t    /**\n\t     * Creates a bottom canvas\n\t     * @private\n\t     * @param {HTMLElement} [canvasEl]\n\t     */\n\t    _createLowerCanvas: function (canvasEl) {\n\t      this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n\t      this._initCanvasElement(this.lowerCanvasEl);\n\t\n\t      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\n\t\n\t      if (this.interactive) {\n\t        this._applyCanvasStyle(this.lowerCanvasEl);\n\t      }\n\t\n\t      this.contextContainer = this.lowerCanvasEl.getContext('2d');\n\t    },\n\t\n\t    /**\n\t     * Returns canvas width (in px)\n\t     * @return {Number}\n\t     */\n\t    getWidth: function () {\n\t      return this.width;\n\t    },\n\t\n\t    /**\n\t     * Returns canvas height (in px)\n\t     * @return {Number}\n\t     */\n\t    getHeight: function () {\n\t      return this.height;\n\t    },\n\t\n\t    /**\n\t     * Sets width of this canvas instance\n\t     * @param {Number|String} value                         Value to set width to\n\t     * @param {Object}        [options]                     Options object\n\t     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n\t     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    setWidth: function (value, options) {\n\t      return this.setDimensions({ width: value }, options);\n\t    },\n\t\n\t    /**\n\t     * Sets height of this canvas instance\n\t     * @param {Number|String} value                         Value to set height to\n\t     * @param {Object}        [options]                     Options object\n\t     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n\t     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    setHeight: function (value, options) {\n\t      return this.setDimensions({ height: value }, options);\n\t    },\n\t\n\t    /**\n\t     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n\t     * @param {Object}        dimensions                    Object with width/height properties\n\t     * @param {Number|String} [dimensions.width]            Width of canvas element\n\t     * @param {Number|String} [dimensions.height]           Height of canvas element\n\t     * @param {Object}        [options]                     Options object\n\t     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n\t     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    setDimensions: function (dimensions, options) {\n\t      var cssValue;\n\t\n\t      options = options || {};\n\t\n\t      for (var prop in dimensions) {\n\t        cssValue = dimensions[prop];\n\t\n\t        if (!options.cssOnly) {\n\t          this._setBackstoreDimension(prop, dimensions[prop]);\n\t          cssValue += 'px';\n\t        }\n\t\n\t        if (!options.backstoreOnly) {\n\t          this._setCssDimension(prop, cssValue);\n\t        }\n\t      }\n\t\n\t      this._setImageSmoothing();\n\t      this.calcOffset();\n\t\n\t      if (!options.cssOnly) {\n\t        this.renderAll();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Helper for setting width/height\n\t     * @private\n\t     * @param {String} prop property (width|height)\n\t     * @param {Number} value value to set property to\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    _setBackstoreDimension: function (prop, value) {\n\t      this.lowerCanvasEl[prop] = value;\n\t\n\t      if (this.upperCanvasEl) {\n\t        this.upperCanvasEl[prop] = value;\n\t      }\n\t\n\t      if (this.cacheCanvasEl) {\n\t        this.cacheCanvasEl[prop] = value;\n\t      }\n\t\n\t      this[prop] = value;\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Helper for setting css width/height\n\t     * @private\n\t     * @param {String} prop property (width|height)\n\t     * @param {String} value value to set property to\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    _setCssDimension: function (prop, value) {\n\t      this.lowerCanvasEl.style[prop] = value;\n\t\n\t      if (this.upperCanvasEl) {\n\t        this.upperCanvasEl.style[prop] = value;\n\t      }\n\t\n\t      if (this.wrapperEl) {\n\t        this.wrapperEl.style[prop] = value;\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns canvas zoom level\n\t     * @return {Number}\n\t     */\n\t    getZoom: function () {\n\t      return Math.sqrt(this.viewportTransform[0] * this.viewportTransform[3]);\n\t    },\n\t\n\t    /**\n\t     * Sets viewport transform of this canvas instance\n\t     * @param {Array} vpt the transform in the form of context.transform\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    setViewportTransform: function (vpt) {\n\t      var activeGroup = this.getActiveGroup();\n\t      this.viewportTransform = vpt;\n\t      this.renderAll();\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._objects[i].setCoords();\n\t      }\n\t      if (activeGroup) {\n\t        activeGroup.setCoords();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets zoom level of this canvas instance, zoom centered around point\n\t     * @param {fabric.Point} point to zoom with respect to\n\t     * @param {Number} value to set zoom to, less than 1 zooms out\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    zoomToPoint: function (point, value) {\n\t      // TODO: just change the scale, preserve other transformations\n\t      var before = point;\n\t      point = fabric.util.transformPoint(point, fabric.util.invertTransform(this.viewportTransform));\n\t      this.viewportTransform[0] = value;\n\t      this.viewportTransform[3] = value;\n\t      var after = fabric.util.transformPoint(point, this.viewportTransform);\n\t      this.viewportTransform[4] += before.x - after.x;\n\t      this.viewportTransform[5] += before.y - after.y;\n\t      this.renderAll();\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._objects[i].setCoords();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets zoom level of this canvas instance\n\t     * @param {Number} value to set zoom to, less than 1 zooms out\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    setZoom: function (value) {\n\t      this.zoomToPoint(new fabric.Point(0, 0), value);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Pan viewport so as to place point at top left corner of canvas\n\t     * @param {fabric.Point} point to move to\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    absolutePan: function (point) {\n\t      this.viewportTransform[4] = -point.x;\n\t      this.viewportTransform[5] = -point.y;\n\t      this.renderAll();\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._objects[i].setCoords();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Pans viewpoint relatively\n\t     * @param {fabric.Point} point (position vector) to move by\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable true\n\t     */\n\t    relativePan: function (point) {\n\t      return this.absolutePan(new fabric.Point(\n\t        -point.x - this.viewportTransform[4],\n\t        -point.y - this.viewportTransform[5]\n\t      ));\n\t    },\n\t\n\t    /**\n\t     * Returns &lt;canvas> element corresponding to this instance\n\t     * @return {HTMLCanvasElement}\n\t     */\n\t    getElement: function () {\n\t      return this.lowerCanvasEl;\n\t    },\n\t\n\t    /**\n\t     * Returns currently selected object, if any\n\t     * @return {fabric.Object}\n\t     */\n\t    getActiveObject: function() {\n\t      return null;\n\t    },\n\t\n\t    /**\n\t     * Returns currently selected group of object, if any\n\t     * @return {fabric.Group}\n\t     */\n\t    getActiveGroup: function() {\n\t      return null;\n\t    },\n\t\n\t    /**\n\t     * Given a context, renders an object on that context\n\t     * @param {CanvasRenderingContext2D} ctx Context to render object on\n\t     * @param {fabric.Object} object Object to render\n\t     * @private\n\t     */\n\t    _draw: function (ctx, object) {\n\t      if (!object) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      var v = this.viewportTransform;\n\t      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\t      if (this._shouldRenderObject(object)) {\n\t        object.render(ctx);\n\t      }\n\t      ctx.restore();\n\t      if (!this.controlsAboveOverlay) {\n\t        object._renderControls(ctx);\n\t      }\n\t    },\n\t\n\t    _shouldRenderObject: function(object) {\n\t      if (!object) {\n\t        return false;\n\t      }\n\t      return (object !== this.getActiveGroup() || !this.preserveObjectStacking);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Object} obj Object that was added\n\t     */\n\t    _onObjectAdded: function(obj) {\n\t      this.stateful && obj.setupState();\n\t      obj._set('canvas', this);\n\t      obj.setCoords();\n\t      this.fire('object:added', { target: obj });\n\t      obj.fire('added');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Object} obj Object that was removed\n\t     */\n\t    _onObjectRemoved: function(obj) {\n\t      // removing active object should fire \"selection:cleared\" events\n\t      if (this.getActiveObject() === obj) {\n\t        this.fire('before:selection:cleared', { target: obj });\n\t        this._discardActiveObject();\n\t        this.fire('selection:cleared');\n\t      }\n\t\n\t      this.fire('object:removed', { target: obj });\n\t      obj.fire('removed');\n\t    },\n\t\n\t    /**\n\t     * Clears specified context of canvas element\n\t     * @param {CanvasRenderingContext2D} ctx Context to clear\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    clearContext: function(ctx) {\n\t      ctx.clearRect(0, 0, this.width, this.height);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns context of canvas where objects are drawn\n\t     * @return {CanvasRenderingContext2D}\n\t     */\n\t    getContext: function () {\n\t      return this.contextContainer;\n\t    },\n\t\n\t    /**\n\t     * Clears all contexts (background, main, top) of an instance\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    clear: function () {\n\t      this._objects.length = 0;\n\t      if (this.discardActiveGroup) {\n\t        this.discardActiveGroup();\n\t      }\n\t      if (this.discardActiveObject) {\n\t        this.discardActiveObject();\n\t      }\n\t      this.clearContext(this.contextContainer);\n\t      if (this.contextTop) {\n\t        this.clearContext(this.contextTop);\n\t      }\n\t      this.fire('canvas:cleared');\n\t      this.renderAll();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Renders both the top canvas and the secondary container canvas.\n\t     * @param {Boolean} [allOnTop] Whether we want to force all images to be rendered on the top canvas\n\t     * @return {fabric.Canvas} instance\n\t     * @chainable\n\t     */\n\t    renderAll: function (allOnTop) {\n\t      var canvasToDrawOn = this[(allOnTop === true && this.interactive) ? 'contextTop' : 'contextContainer'],\n\t          activeGroup = this.getActiveGroup();\n\t\n\t      if (this.contextTop && this.selection && !this._groupSelector) {\n\t        this.clearContext(this.contextTop);\n\t      }\n\t\n\t      if (!allOnTop) {\n\t        this.clearContext(canvasToDrawOn);\n\t      }\n\t\n\t      this.fire('before:render');\n\t\n\t      if (this.clipTo) {\n\t        fabric.util.clipContext(this, canvasToDrawOn);\n\t      }\n\t\n\t      this._renderBackground(canvasToDrawOn);\n\t      this._renderObjects(canvasToDrawOn, activeGroup);\n\t      this._renderActiveGroup(canvasToDrawOn, activeGroup);\n\t\n\t      if (this.clipTo) {\n\t        canvasToDrawOn.restore();\n\t      }\n\t\n\t      this._renderOverlay(canvasToDrawOn);\n\t\n\t      if (this.controlsAboveOverlay && this.interactive) {\n\t        this.drawControls(canvasToDrawOn);\n\t      }\n\t\n\t      this.fire('after:render');\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {fabric.Group} activeGroup\n\t     */\n\t    _renderObjects: function(ctx, activeGroup) {\n\t      var i, length;\n\t\n\t      // fast path\n\t      if (!activeGroup || this.preserveObjectStacking) {\n\t        for (i = 0, length = this._objects.length; i < length; ++i) {\n\t          this._draw(ctx, this._objects[i]);\n\t        }\n\t      }\n\t      else {\n\t        for (i = 0, length = this._objects.length; i < length; ++i) {\n\t          if (this._objects[i] && !activeGroup.contains(this._objects[i])) {\n\t            this._draw(ctx, this._objects[i]);\n\t          }\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {fabric.Group} activeGroup\n\t     */\n\t    _renderActiveGroup: function(ctx, activeGroup) {\n\t\n\t      // delegate rendering to group selection (if one exists)\n\t      if (activeGroup) {\n\t\n\t        //Store objects in group preserving order, then replace\n\t        var sortedObjects = [];\n\t        this.forEachObject(function (object) {\n\t          if (activeGroup.contains(object)) {\n\t            sortedObjects.push(object);\n\t          }\n\t        });\n\t        // forEachObject reverses the object, so we reverse again\n\t        activeGroup._set('_objects', sortedObjects.reverse());\n\t        this._draw(ctx, activeGroup);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderBackground: function(ctx) {\n\t      if (this.backgroundColor) {\n\t        ctx.fillStyle = this.backgroundColor.toLive\n\t          ? this.backgroundColor.toLive(ctx)\n\t          : this.backgroundColor;\n\t\n\t        ctx.fillRect(\n\t          this.backgroundColor.offsetX || 0,\n\t          this.backgroundColor.offsetY || 0,\n\t          this.width,\n\t          this.height);\n\t      }\n\t      if (this.backgroundImage) {\n\t        this._draw(ctx, this.backgroundImage);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderOverlay: function(ctx) {\n\t      if (this.overlayColor) {\n\t        ctx.fillStyle = this.overlayColor.toLive\n\t          ? this.overlayColor.toLive(ctx)\n\t          : this.overlayColor;\n\t\n\t        ctx.fillRect(\n\t          this.overlayColor.offsetX || 0,\n\t          this.overlayColor.offsetY || 0,\n\t          this.width,\n\t          this.height);\n\t      }\n\t      if (this.overlayImage) {\n\t        this._draw(ctx, this.overlayImage);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Method to render only the top canvas.\n\t     * Also used to render the group selection box.\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    renderTop: function () {\n\t      var ctx = this.contextTop || this.contextContainer;\n\t      this.clearContext(ctx);\n\t\n\t      // we render the top context - last object\n\t      if (this.selection && this._groupSelector) {\n\t        this._drawSelection();\n\t      }\n\t\n\t      // delegate rendering to group selection if one exists\n\t      // used for drawing selection borders/controls\n\t      var activeGroup = this.getActiveGroup();\n\t      if (activeGroup) {\n\t        activeGroup.render(ctx);\n\t      }\n\t\n\t      this._renderOverlay(ctx);\n\t\n\t      this.fire('after:render');\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns coordinates of a center of canvas.\n\t     * Returned value is an object with top and left properties\n\t     * @return {Object} object with \"top\" and \"left\" number values\n\t     */\n\t    getCenter: function () {\n\t      return {\n\t        top: this.getHeight() / 2,\n\t        left: this.getWidth() / 2\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Centers object horizontally.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @param {fabric.Object} object Object to center horizontally\n\t     * @return {fabric.Canvas} thisArg\n\t     */\n\t    centerObjectH: function (object) {\n\t      this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\n\t      this.renderAll();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object vertically.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @param {fabric.Object} object Object to center vertically\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    centerObjectV: function (object) {\n\t      this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\n\t      this.renderAll();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object vertically and horizontally.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @param {fabric.Object} object Object to center vertically and horizontally\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    centerObject: function(object) {\n\t      var center = this.getCenter();\n\t\n\t      this._centerObject(object, new fabric.Point(center.left, center.top));\n\t      this.renderAll();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Object} object Object to center\n\t     * @param {fabric.Point} center Center point\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    _centerObject: function(object, center) {\n\t      object.setPositionByOrigin(center, 'center', 'center');\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returs dataless JSON representation of canvas\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {String} json string\n\t     */\n\t    toDatalessJSON: function (propertiesToInclude) {\n\t      return this.toDatalessObject(propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of canvas\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function (propertiesToInclude) {\n\t      return this._toObjectMethod('toObject', propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * Returns dataless object representation of canvas\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toDatalessObject: function (propertiesToInclude) {\n\t      return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _toObjectMethod: function (methodName, propertiesToInclude) {\n\t\n\t      var data = {\n\t        objects: this._toObjects(methodName, propertiesToInclude)\n\t      };\n\t\n\t      extend(data, this.__serializeBgOverlay());\n\t\n\t      fabric.util.populateWithProperties(this, data, propertiesToInclude);\n\t\n\t      return data;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _toObjects: function(methodName, propertiesToInclude) {\n\t      return this.getObjects().map(function(instance) {\n\t        return this._toObject(instance, methodName, propertiesToInclude);\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _toObject: function(instance, methodName, propertiesToInclude) {\n\t      var originalValue;\n\t\n\t      if (!this.includeDefaultValues) {\n\t        originalValue = instance.includeDefaultValues;\n\t        instance.includeDefaultValues = false;\n\t      }\n\t\n\t      //If the object is part of the current selection group, it should\n\t      //be transformed appropriately\n\t      //i.e. it should be serialised as it would appear if the selection group\n\t      //were to be destroyed.\n\t      var originalProperties = this._realizeGroupTransformOnObject(instance),\n\t          object = instance[methodName](propertiesToInclude);\n\t      if (!this.includeDefaultValues) {\n\t        instance.includeDefaultValues = originalValue;\n\t      }\n\t\n\t      //Undo the damage we did by changing all of its properties\n\t      this._unwindGroupTransformOnObject(instance, originalProperties);\n\t\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Realises an object's group transformation on it\n\t     * @private\n\t     * @param {fabric.Object} [instance] the object to transform (gets mutated)\n\t     * @returns the original values of instance which were changed\n\t     */\n\t    _realizeGroupTransformOnObject: function(instance) {\n\t      var layoutProps = ['angle', 'flipX', 'flipY', 'height', 'left', 'scaleX', 'scaleY', 'top', 'width'];\n\t      if (instance.group && instance.group === this.getActiveGroup()) {\n\t        //Copy all the positionally relevant properties across now\n\t        var originalValues = {};\n\t        layoutProps.forEach(function(prop) {\n\t          originalValues[prop] = instance[prop];\n\t        });\n\t        this.getActiveGroup().realizeTransform(instance);\n\t        return originalValues;\n\t      }\n\t      else {\n\t        return null;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Restores the changed properties of instance\n\t     * @private\n\t     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n\t     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n\t     */\n\t    _unwindGroupTransformOnObject: function(instance, originalValues) {\n\t      if (originalValues) {\n\t        instance.set(originalValues);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    __serializeBgOverlay: function() {\n\t      var data = {\n\t        background: (this.backgroundColor && this.backgroundColor.toObject)\n\t          ? this.backgroundColor.toObject()\n\t          : this.backgroundColor\n\t      };\n\t\n\t      if (this.overlayColor) {\n\t        data.overlay = this.overlayColor.toObject\n\t          ? this.overlayColor.toObject()\n\t          : this.overlayColor;\n\t      }\n\t      if (this.backgroundImage) {\n\t        data.backgroundImage = this.backgroundImage.toObject();\n\t      }\n\t      if (this.overlayImage) {\n\t        data.overlayImage = this.overlayImage.toObject();\n\t      }\n\t\n\t      return data;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n\t     * a zoomed canvas will then produce zoomed SVG output.\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    svgViewportTransformation: true,\n\t\n\t    /**\n\t     * Returns SVG representation of canvas\n\t     * @function\n\t     * @param {Object} [options] Options object for SVG output\n\t     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n\t     * @param {Object} [options.viewBox] SVG viewbox object\n\t     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\n\t     * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n\t     * @param {Number} [options.viewBox.width] Width of viewbox\n\t     * @param {Number} [options.viewBox.height] Height of viewbox\n\t     * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n\t     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n\t     * @return {String} SVG string\n\t     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#serialization}\n\t     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n\t     * @example <caption>Normal SVG output</caption>\n\t     * var svg = canvas.toSVG();\n\t     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n\t     * var svg = canvas.toSVG({suppressPreamble: true});\n\t     * @example <caption>SVG output with viewBox attribute</caption>\n\t     * var svg = canvas.toSVG({\n\t     *   viewBox: {\n\t     *     x: 100,\n\t     *     y: 100,\n\t     *     width: 200,\n\t     *     height: 300\n\t     *   }\n\t     * });\n\t     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n\t     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n\t     * @example <caption>Modify SVG output with reviver function</caption>\n\t     * var svg = canvas.toSVG(null, function(svg) {\n\t     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n\t     * });\n\t     */\n\t    toSVG: function(options, reviver) {\n\t      options || (options = { });\n\t\n\t      var markup = [];\n\t\n\t      this._setSVGPreamble(markup, options);\n\t      this._setSVGHeader(markup, options);\n\t\n\t      this._setSVGBgOverlayColor(markup, 'backgroundColor');\n\t      this._setSVGBgOverlayImage(markup, 'backgroundImage');\n\t\n\t      this._setSVGObjects(markup, reviver);\n\t\n\t      this._setSVGBgOverlayColor(markup, 'overlayColor');\n\t      this._setSVGBgOverlayImage(markup, 'overlayImage');\n\t\n\t      markup.push('</svg>');\n\t\n\t      return markup.join('');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGPreamble: function(markup, options) {\n\t      if (!options.suppressPreamble) {\n\t        markup.push(\n\t          '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>',\n\t            '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n\t              '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\n\t        );\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGHeader: function(markup, options) {\n\t      var width, height, vpt;\n\t\n\t      if (options.viewBox) {\n\t        width = options.viewBox.width;\n\t        height = options.viewBox.height;\n\t      }\n\t      else {\n\t        width = this.width;\n\t        height = this.height;\n\t        if (!this.svgViewportTransformation) {\n\t          vpt = this.viewportTransform;\n\t          width /= vpt[0];\n\t          height /= vpt[3];\n\t        }\n\t      }\n\t\n\t      markup.push(\n\t        '<svg ',\n\t          'xmlns=\"http://www.w3.org/2000/svg\" ',\n\t          'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n\t          'version=\"1.1\" ',\n\t          'width=\"', width, '\" ',\n\t          'height=\"', height, '\" ',\n\t          (this.backgroundColor && !this.backgroundColor.toLive\n\t            ? 'style=\"background-color: ' + this.backgroundColor + '\" '\n\t            : null),\n\t          (options.viewBox\n\t              ? 'viewBox=\"' +\n\t                options.viewBox.x + ' ' +\n\t                options.viewBox.y + ' ' +\n\t                options.viewBox.width + ' ' +\n\t                options.viewBox.height + '\" '\n\t              : null),\n\t          'xml:space=\"preserve\">',\n\t        '<desc>Created with Fabric.js ', fabric.version, '</desc>',\n\t        '<defs>',\n\t          fabric.createSVGFontFacesMarkup(this.getObjects()),\n\t          fabric.createSVGRefElementsMarkup(this),\n\t        '</defs>'\n\t      );\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGObjects: function(markup, reviver) {\n\t      for (var i = 0, objects = this.getObjects(), len = objects.length; i < len; i++) {\n\t        var instance = objects[i],\n\t            //If the object is in a selection group, simulate what would happen to that\n\t            //object when the group is deselected\n\t            originalProperties = this._realizeGroupTransformOnObject(instance);\n\t        markup.push(instance.toSVG(reviver));\n\t        this._unwindGroupTransformOnObject(instance, originalProperties);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGBgOverlayImage: function(markup, property) {\n\t      if (this[property] && this[property].toSVG) {\n\t        markup.push(this[property].toSVG());\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGBgOverlayColor: function(markup, property) {\n\t      if (this[property] && this[property].source) {\n\t        markup.push(\n\t          '<rect x=\"', this[property].offsetX, '\" y=\"', this[property].offsetY, '\" ',\n\t            'width=\"',\n\t              (this[property].repeat === 'repeat-y' || this[property].repeat === 'no-repeat'\n\t                ? this[property].source.width\n\t                : this.width),\n\t            '\" height=\"',\n\t              (this[property].repeat === 'repeat-x' || this[property].repeat === 'no-repeat'\n\t                ? this[property].source.height\n\t                : this.height),\n\t            '\" fill=\"url(#' + property + 'Pattern)\"',\n\t          '></rect>'\n\t        );\n\t      }\n\t      else if (this[property] && property === 'overlayColor') {\n\t        markup.push(\n\t          '<rect x=\"0\" y=\"0\" ',\n\t            'width=\"', this.width,\n\t            '\" height=\"', this.height,\n\t            '\" fill=\"', this[property], '\"',\n\t          '></rect>'\n\t        );\n\t      }\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Moves an object to the bottom of the stack of drawn objects\n\t     * @param {fabric.Object} object Object to send to back\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    sendToBack: function (object) {\n\t      removeFromArray(this._objects, object);\n\t      this._objects.unshift(object);\n\t      return this.renderAll && this.renderAll();\n\t    },\n\t\n\t    /**\n\t     * Moves an object to the top of the stack of drawn objects\n\t     * @param {fabric.Object} object Object to send\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    bringToFront: function (object) {\n\t      removeFromArray(this._objects, object);\n\t      this._objects.push(object);\n\t      return this.renderAll && this.renderAll();\n\t    },\n\t\n\t    /**\n\t     * Moves an object down in stack of drawn objects\n\t     * @param {fabric.Object} object Object to send\n\t     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    sendBackwards: function (object, intersecting) {\n\t      var idx = this._objects.indexOf(object);\n\t\n\t      // if object is not on the bottom of stack\n\t      if (idx !== 0) {\n\t        var newIdx = this._findNewLowerIndex(object, idx, intersecting);\n\t\n\t        removeFromArray(this._objects, object);\n\t        this._objects.splice(newIdx, 0, object);\n\t        this.renderAll && this.renderAll();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _findNewLowerIndex: function(object, idx, intersecting) {\n\t      var newIdx;\n\t\n\t      if (intersecting) {\n\t        newIdx = idx;\n\t\n\t        // traverse down the stack looking for the nearest intersecting object\n\t        for (var i = idx - 1; i >= 0; --i) {\n\t\n\t          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n\t                               object.isContainedWithinObject(this._objects[i]) ||\n\t                               this._objects[i].isContainedWithinObject(object);\n\t\n\t          if (isIntersecting) {\n\t            newIdx = i;\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        newIdx = idx - 1;\n\t      }\n\t\n\t      return newIdx;\n\t    },\n\t\n\t    /**\n\t     * Moves an object up in stack of drawn objects\n\t     * @param {fabric.Object} object Object to send\n\t     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    bringForward: function (object, intersecting) {\n\t      var idx = this._objects.indexOf(object);\n\t\n\t      // if object is not on top of stack (last item in an array)\n\t      if (idx !== this._objects.length - 1) {\n\t        var newIdx = this._findNewUpperIndex(object, idx, intersecting);\n\t\n\t        removeFromArray(this._objects, object);\n\t        this._objects.splice(newIdx, 0, object);\n\t        this.renderAll && this.renderAll();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _findNewUpperIndex: function(object, idx, intersecting) {\n\t      var newIdx;\n\t\n\t      if (intersecting) {\n\t        newIdx = idx;\n\t\n\t        // traverse up the stack looking for the nearest intersecting object\n\t        for (var i = idx + 1; i < this._objects.length; ++i) {\n\t\n\t          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n\t                               object.isContainedWithinObject(this._objects[i]) ||\n\t                               this._objects[i].isContainedWithinObject(object);\n\t\n\t          if (isIntersecting) {\n\t            newIdx = i;\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        newIdx = idx + 1;\n\t      }\n\t\n\t      return newIdx;\n\t    },\n\t\n\t    /**\n\t     * Moves an object to specified level in stack of drawn objects\n\t     * @param {fabric.Object} object Object to send\n\t     * @param {Number} index Position to move to\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    moveTo: function (object, index) {\n\t      removeFromArray(this._objects, object);\n\t      this._objects.splice(index, 0, object);\n\t      return this.renderAll && this.renderAll();\n\t    },\n\t\n\t    /**\n\t     * Clears a canvas element and removes all event listeners\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    dispose: function () {\n\t      this.clear();\n\t      this.interactive && this.removeListeners();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns a string representation of an instance\n\t     * @return {String} string representation of an instance\n\t     */\n\t    toString: function () {\n\t      return '#<fabric.Canvas (' + this.complexity() + '): ' +\n\t               '{ objects: ' + this.getObjects().length + ' }>';\n\t    }\n\t  });\n\t\n\t  extend(fabric.StaticCanvas.prototype, fabric.Observable);\n\t  extend(fabric.StaticCanvas.prototype, fabric.Collection);\n\t  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n\t\n\t  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n\t\n\t    /**\n\t     * @static\n\t     * @type String\n\t     * @default\n\t     */\n\t    EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n\t\n\t    /**\n\t     * Provides a way to check support of some of the canvas methods\n\t     * (either those of HTMLCanvasElement itself, or rendering context)\n\t     *\n\t     * @param {String} methodName Method to check support for;\n\t     *                            Could be one of \"getImageData\", \"toDataURL\", \"toDataURLWithQuality\" or \"setLineDash\"\n\t     * @return {Boolean | null} `true` if method is supported (or at least exists),\n\t     *                          `null` if canvas element or context can not be initialized\n\t     */\n\t    supports: function (methodName) {\n\t      var el = fabric.util.createCanvasElement();\n\t\n\t      if (!el || !el.getContext) {\n\t        return null;\n\t      }\n\t\n\t      var ctx = el.getContext('2d');\n\t      if (!ctx) {\n\t        return null;\n\t      }\n\t\n\t      switch (methodName) {\n\t\n\t        case 'getImageData':\n\t          return typeof ctx.getImageData !== 'undefined';\n\t\n\t        case 'setLineDash':\n\t          return typeof ctx.setLineDash !== 'undefined';\n\t\n\t        case 'toDataURL':\n\t          return typeof el.toDataURL !== 'undefined';\n\t\n\t        case 'toDataURLWithQuality':\n\t          try {\n\t            el.toDataURL('image/jpeg', 0);\n\t            return true;\n\t          }\n\t          catch (e) { }\n\t          return false;\n\t\n\t        default:\n\t          return null;\n\t      }\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns JSON representation of canvas\n\t   * @function\n\t   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t   * @return {String} JSON string\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#serialization}\n\t   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n\t   * @example <caption>JSON without additional properties</caption>\n\t   * var json = canvas.toJSON();\n\t   * @example <caption>JSON with additional properties included</caption>\n\t   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\n\t   * @example <caption>JSON without default values</caption>\n\t   * canvas.includeDefaultValues = false;\n\t   * var json = canvas.toJSON();\n\t   */\n\t  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n\t\n\t})();\n\t\n\t\n\t/**\n\t * BaseBrush class\n\t * @class fabric.BaseBrush\n\t * @see {@link http://fabricjs.com/freedrawing/|Freedrawing demo}\n\t */\n\tfabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n\t\n\t  /**\n\t   * Color of a brush\n\t   * @type String\n\t   * @default\n\t   */\n\t  color:            'rgb(0, 0, 0)',\n\t\n\t  /**\n\t   * Width of a brush\n\t   * @type Number\n\t   * @default\n\t   */\n\t  width:            1,\n\t\n\t  /**\n\t   * Shadow object representing shadow of this shape.\n\t   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n\t   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n\t   * @type fabric.Shadow\n\t   * @default\n\t   */\n\t  shadow:           null,\n\t\n\t  /**\n\t   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n\t   * @type String\n\t   * @default\n\t   */\n\t  strokeLineCap:    'round',\n\t\n\t  /**\n\t   * Corner style of a brush (one of \"bevil\", \"round\", \"miter\")\n\t   * @type String\n\t   * @default\n\t   */\n\t  strokeLineJoin:   'round',\n\t\n\t  /**\n\t   * Stroke Dash Array.\n\t   * @type Array\n\t   * @default\n\t   */\n\t  strokeDashArray:  null,\n\t\n\t  /**\n\t   * Sets shadow of an object\n\t   * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  setShadow: function(options) {\n\t    this.shadow = new fabric.Shadow(options);\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Sets brush styles\n\t   * @private\n\t   */\n\t  _setBrushStyles: function() {\n\t    var ctx = this.canvas.contextTop;\n\t\n\t    ctx.strokeStyle = this.color;\n\t    ctx.lineWidth = this.width;\n\t    ctx.lineCap = this.strokeLineCap;\n\t    ctx.lineJoin = this.strokeLineJoin;\n\t    if (this.strokeDashArray && fabric.StaticCanvas.supports('setLineDash')) {\n\t      ctx.setLineDash(this.strokeDashArray);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Sets brush shadow styles\n\t   * @private\n\t   */\n\t  _setShadow: function() {\n\t    if (!this.shadow) {\n\t      return;\n\t    }\n\t\n\t    var ctx = this.canvas.contextTop;\n\t\n\t    ctx.shadowColor = this.shadow.color;\n\t    ctx.shadowBlur = this.shadow.blur;\n\t    ctx.shadowOffsetX = this.shadow.offsetX;\n\t    ctx.shadowOffsetY = this.shadow.offsetY;\n\t  },\n\t\n\t  /**\n\t   * Removes brush shadow styles\n\t   * @private\n\t   */\n\t  _resetShadow: function() {\n\t    var ctx = this.canvas.contextTop;\n\t\n\t    ctx.shadowColor = '';\n\t    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n\t  }\n\t});\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * PencilBrush class\n\t   * @class fabric.PencilBrush\n\t   * @extends fabric.BaseBrush\n\t   */\n\t  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {fabric.Canvas} canvas\n\t     * @return {fabric.PencilBrush} Instance of a pencil brush\n\t     */\n\t    initialize: function(canvas) {\n\t      this.canvas = canvas;\n\t      this._points = [ ];\n\t    },\n\t\n\t    /**\n\t     * Inovoked on mouse down\n\t     * @param {Object} pointer\n\t     */\n\t    onMouseDown: function(pointer) {\n\t      this._prepareForDrawing(pointer);\n\t      // capture coordinates immediately\n\t      // this allows to draw dots (when movement never occurs)\n\t      this._captureDrawingPath(pointer);\n\t      this._render();\n\t    },\n\t\n\t    /**\n\t     * Inovoked on mouse move\n\t     * @param {Object} pointer\n\t     */\n\t    onMouseMove: function(pointer) {\n\t      this._captureDrawingPath(pointer);\n\t      // redraw curve\n\t      // clear top canvas\n\t      this.canvas.clearContext(this.canvas.contextTop);\n\t      this._render();\n\t    },\n\t\n\t    /**\n\t     * Invoked on mouse up\n\t     */\n\t    onMouseUp: function() {\n\t      this._finalizeAndAddPath();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} pointer Actual mouse position related to the canvas.\n\t     */\n\t    _prepareForDrawing: function(pointer) {\n\t\n\t      var p = new fabric.Point(pointer.x, pointer.y);\n\t\n\t      this._reset();\n\t      this._addPoint(p);\n\t\n\t      this.canvas.contextTop.moveTo(p.x, p.y);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Point} point Point to be added to points array\n\t     */\n\t    _addPoint: function(point) {\n\t      this._points.push(point);\n\t    },\n\t\n\t    /**\n\t     * Clear points array and set contextTop canvas style.\n\t     * @private\n\t     */\n\t    _reset: function() {\n\t      this._points.length = 0;\n\t\n\t      this._setBrushStyles();\n\t      this._setShadow();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} pointer Actual mouse position related to the canvas.\n\t     */\n\t    _captureDrawingPath: function(pointer) {\n\t      var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n\t      this._addPoint(pointerPoint);\n\t    },\n\t\n\t    /**\n\t     * Draw a smooth path on the topCanvas using quadraticCurveTo\n\t     * @private\n\t     */\n\t    _render: function() {\n\t      var ctx  = this.canvas.contextTop,\n\t          v = this.canvas.viewportTransform,\n\t          p1 = this._points[0],\n\t          p2 = this._points[1];\n\t\n\t      ctx.save();\n\t      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\t      ctx.beginPath();\n\t\n\t      //if we only have 2 points in the path and they are the same\n\t      //it means that the user only clicked the canvas without moving the mouse\n\t      //then we should be drawing a dot. A path isn't drawn between two identical dots\n\t      //that's why we set them apart a bit\n\t      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n\t        p1.x -= 0.5;\n\t        p2.x += 0.5;\n\t      }\n\t      ctx.moveTo(p1.x, p1.y);\n\t\n\t      for (var i = 1, len = this._points.length; i < len; i++) {\n\t        // we pick the point between pi + 1 & pi + 2 as the\n\t        // end point and p1 as our control point.\n\t        var midPoint = p1.midPointFrom(p2);\n\t        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n\t\n\t        p1 = this._points[i];\n\t        p2 = this._points[i + 1];\n\t      }\n\t      // Draw last line as a straight line while\n\t      // we wait for the next point to be able to calculate\n\t      // the bezier control point\n\t      ctx.lineTo(p1.x, p1.y);\n\t      ctx.stroke();\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Converts points to SVG path\n\t     * @param {Array} points Array of points\n\t     * @param {Number} minX\n\t     * @param {Number} minY\n\t     * @return {String} SVG path\n\t     */\n\t    convertPointsToSVGPath: function(points) {\n\t      var path = [],\n\t          p1 = new fabric.Point(points[0].x, points[0].y),\n\t          p2 = new fabric.Point(points[1].x, points[1].y);\n\t\n\t      path.push('M ', points[0].x, ' ', points[0].y, ' ');\n\t      for (var i = 1, len = points.length; i < len; i++) {\n\t        var midPoint = p1.midPointFrom(p2);\n\t        // p1 is our bezier control point\n\t        // midpoint is our endpoint\n\t        // start point is p(i-1) value.\n\t        path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\n\t        p1 = new fabric.Point(points[i].x, points[i].y);\n\t        if ((i + 1) < points.length) {\n\t          p2 = new fabric.Point(points[i + 1].x, points[i + 1].y);\n\t        }\n\t      }\n\t      path.push('L ', p1.x, ' ', p1.y, ' ');\n\t      return path;\n\t    },\n\t\n\t    /**\n\t     * Creates fabric.Path object to add on canvas\n\t     * @param {String} pathData Path data\n\t     * @return {fabric.Path} Path to add on canvas\n\t     */\n\t    createPath: function(pathData) {\n\t      var path = new fabric.Path(pathData, {\n\t                   fill: null,\n\t                   stroke: this.color,\n\t                   strokeWidth: this.width,\n\t                   strokeLineCap: this.strokeLineCap,\n\t                   strokeLineJoin: this.strokeLineJoin,\n\t                   strokeDashArray: this.strokeDashArray,\n\t                   originX: 'center',\n\t                   originY: 'center'\n\t                 });\n\t\n\t      if (this.shadow) {\n\t        this.shadow.affectStroke = true;\n\t        path.setShadow(this.shadow);\n\t      }\n\t\n\t      return path;\n\t    },\n\t\n\t    /**\n\t     * On mouseup after drawing the path on contextTop canvas\n\t     * we use the points captured to create an new fabric path object\n\t     * and add it to the fabric canvas.\n\t     */\n\t    _finalizeAndAddPath: function() {\n\t      var ctx = this.canvas.contextTop;\n\t      ctx.closePath();\n\t\n\t      var pathData = this.convertPointsToSVGPath(this._points).join('');\n\t      if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\n\t        // do not create 0 width/height paths, as they are\n\t        // rendered inconsistently across browsers\n\t        // Firefox 4, for example, renders a dot,\n\t        // whereas Chrome 10 renders nothing\n\t        this.canvas.renderAll();\n\t        return;\n\t      }\n\t\n\t      var path = this.createPath(pathData);\n\t\n\t      this.canvas.add(path);\n\t      path.setCoords();\n\t\n\t      this.canvas.clearContext(this.canvas.contextTop);\n\t      this._resetShadow();\n\t      this.canvas.renderAll();\n\t\n\t      // fire event 'path' created\n\t      this.canvas.fire('path:created', { path: path });\n\t    }\n\t  });\n\t})();\n\t\n\t\n\t/**\n\t * CircleBrush class\n\t * @class fabric.CircleBrush\n\t */\n\tfabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n\t\n\t  /**\n\t   * Width of a brush\n\t   * @type Number\n\t   * @default\n\t   */\n\t  width: 10,\n\t\n\t  /**\n\t   * Constructor\n\t   * @param {fabric.Canvas} canvas\n\t   * @return {fabric.CircleBrush} Instance of a circle brush\n\t   */\n\t  initialize: function(canvas) {\n\t    this.canvas = canvas;\n\t    this.points = [ ];\n\t  },\n\t\n\t  /**\n\t   * Invoked inside on mouse down and mouse move\n\t   * @param {Object} pointer\n\t   */\n\t  drawDot: function(pointer) {\n\t    var point = this.addPoint(pointer),\n\t        ctx = this.canvas.contextTop,\n\t        v = this.canvas.viewportTransform;\n\t    ctx.save();\n\t    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\t\n\t    ctx.fillStyle = point.fill;\n\t    ctx.beginPath();\n\t    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n\t    ctx.closePath();\n\t    ctx.fill();\n\t\n\t    ctx.restore();\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse down\n\t   */\n\t  onMouseDown: function(pointer) {\n\t    this.points.length = 0;\n\t    this.canvas.clearContext(this.canvas.contextTop);\n\t    this._setShadow();\n\t    this.drawDot(pointer);\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse move\n\t   * @param {Object} pointer\n\t   */\n\t  onMouseMove: function(pointer) {\n\t    this.drawDot(pointer);\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse up\n\t   */\n\t  onMouseUp: function() {\n\t    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n\t    this.canvas.renderOnAddRemove = false;\n\t\n\t    var circles = [ ];\n\t\n\t    for (var i = 0, len = this.points.length; i < len; i++) {\n\t      var point = this.points[i],\n\t          circle = new fabric.Circle({\n\t            radius: point.radius,\n\t            left: point.x,\n\t            top: point.y,\n\t            originX: 'center',\n\t            originY: 'center',\n\t            fill: point.fill\n\t          });\n\t\n\t      this.shadow && circle.setShadow(this.shadow);\n\t\n\t      circles.push(circle);\n\t    }\n\t    var group = new fabric.Group(circles, { originX: 'center', originY: 'center' });\n\t    group.canvas = this.canvas;\n\t\n\t    this.canvas.add(group);\n\t    this.canvas.fire('path:created', { path: group });\n\t\n\t    this.canvas.clearContext(this.canvas.contextTop);\n\t    this._resetShadow();\n\t    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n\t    this.canvas.renderAll();\n\t  },\n\t\n\t  /**\n\t   * @param {Object} pointer\n\t   * @return {fabric.Point} Just added pointer point\n\t   */\n\t  addPoint: function(pointer) {\n\t    var pointerPoint = new fabric.Point(pointer.x, pointer.y),\n\t\n\t        circleRadius = fabric.util.getRandomInt(\n\t                        Math.max(0, this.width - 20), this.width + 20) / 2,\n\t\n\t        circleColor = new fabric.Color(this.color)\n\t                        .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\n\t                        .toRgba();\n\t\n\t    pointerPoint.radius = circleRadius;\n\t    pointerPoint.fill = circleColor;\n\t\n\t    this.points.push(pointerPoint);\n\t\n\t    return pointerPoint;\n\t  }\n\t});\n\t\n\t\n\t/**\n\t * SprayBrush class\n\t * @class fabric.SprayBrush\n\t */\n\tfabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n\t\n\t  /**\n\t   * Width of a spray\n\t   * @type Number\n\t   * @default\n\t   */\n\t  width:              10,\n\t\n\t  /**\n\t   * Density of a spray (number of dots per chunk)\n\t   * @type Number\n\t   * @default\n\t   */\n\t  density:            20,\n\t\n\t  /**\n\t   * Width of spray dots\n\t   * @type Number\n\t   * @default\n\t   */\n\t  dotWidth:           1,\n\t\n\t  /**\n\t   * Width variance of spray dots\n\t   * @type Number\n\t   * @default\n\t   */\n\t  dotWidthVariance:   1,\n\t\n\t  /**\n\t   * Whether opacity of a dot should be random\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  randomOpacity:        false,\n\t\n\t  /**\n\t   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  optimizeOverlapping:  true,\n\t\n\t  /**\n\t   * Constructor\n\t   * @param {fabric.Canvas} canvas\n\t   * @return {fabric.SprayBrush} Instance of a spray brush\n\t   */\n\t  initialize: function(canvas) {\n\t    this.canvas = canvas;\n\t    this.sprayChunks = [ ];\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse down\n\t   * @param {Object} pointer\n\t   */\n\t  onMouseDown: function(pointer) {\n\t    this.sprayChunks.length = 0;\n\t    this.canvas.clearContext(this.canvas.contextTop);\n\t    this._setShadow();\n\t\n\t    this.addSprayChunk(pointer);\n\t    this.render();\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse move\n\t   * @param {Object} pointer\n\t   */\n\t  onMouseMove: function(pointer) {\n\t    this.addSprayChunk(pointer);\n\t    this.render();\n\t  },\n\t\n\t  /**\n\t   * Invoked on mouse up\n\t   */\n\t  onMouseUp: function() {\n\t    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n\t    this.canvas.renderOnAddRemove = false;\n\t\n\t    var rects = [ ];\n\t\n\t    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n\t      var sprayChunk = this.sprayChunks[i];\n\t\n\t      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\n\t\n\t        var rect = new fabric.Rect({\n\t          width: sprayChunk[j].width,\n\t          height: sprayChunk[j].width,\n\t          left: sprayChunk[j].x + 1,\n\t          top: sprayChunk[j].y + 1,\n\t          originX: 'center',\n\t          originY: 'center',\n\t          fill: this.color\n\t        });\n\t\n\t        this.shadow && rect.setShadow(this.shadow);\n\t        rects.push(rect);\n\t      }\n\t    }\n\t\n\t    if (this.optimizeOverlapping) {\n\t      rects = this._getOptimizedRects(rects);\n\t    }\n\t\n\t    var group = new fabric.Group(rects, { originX: 'center', originY: 'center' });\n\t    group.canvas = this.canvas;\n\t\n\t    this.canvas.add(group);\n\t    this.canvas.fire('path:created', { path: group });\n\t\n\t    this.canvas.clearContext(this.canvas.contextTop);\n\t    this._resetShadow();\n\t    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n\t    this.canvas.renderAll();\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Array} rects\n\t   */\n\t  _getOptimizedRects: function(rects) {\n\t\n\t    // avoid creating duplicate rects at the same coordinates\n\t    var uniqueRects = { }, key;\n\t\n\t    for (var i = 0, len = rects.length; i < len; i++) {\n\t      key = rects[i].left + '' + rects[i].top;\n\t      if (!uniqueRects[key]) {\n\t        uniqueRects[key] = rects[i];\n\t      }\n\t    }\n\t    var uniqueRectsArray = [ ];\n\t    for (key in uniqueRects) {\n\t      uniqueRectsArray.push(uniqueRects[key]);\n\t    }\n\t\n\t    return uniqueRectsArray;\n\t  },\n\t\n\t  /**\n\t   * Renders brush\n\t   */\n\t  render: function() {\n\t    var ctx = this.canvas.contextTop;\n\t    ctx.fillStyle = this.color;\n\t\n\t    var v = this.canvas.viewportTransform;\n\t    ctx.save();\n\t    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\t\n\t    for (var i = 0, len = this.sprayChunkPoints.length; i < len; i++) {\n\t      var point = this.sprayChunkPoints[i];\n\t      if (typeof point.opacity !== 'undefined') {\n\t        ctx.globalAlpha = point.opacity;\n\t      }\n\t      ctx.fillRect(point.x, point.y, point.width, point.width);\n\t    }\n\t    ctx.restore();\n\t  },\n\t\n\t  /**\n\t   * @param {Object} pointer\n\t   */\n\t  addSprayChunk: function(pointer) {\n\t    this.sprayChunkPoints = [ ];\n\t\n\t    var x, y, width, radius = this.width / 2;\n\t\n\t    for (var i = 0; i < this.density; i++) {\n\t\n\t      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n\t      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n\t\n\t      if (this.dotWidthVariance) {\n\t        width = fabric.util.getRandomInt(\n\t          // bottom clamp width to 1\n\t          Math.max(1, this.dotWidth - this.dotWidthVariance),\n\t          this.dotWidth + this.dotWidthVariance);\n\t      }\n\t      else {\n\t        width = this.dotWidth;\n\t      }\n\t\n\t      var point = new fabric.Point(x, y);\n\t      point.width = width;\n\t\n\t      if (this.randomOpacity) {\n\t        point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n\t      }\n\t\n\t      this.sprayChunkPoints.push(point);\n\t    }\n\t\n\t    this.sprayChunks.push(this.sprayChunkPoints);\n\t  }\n\t});\n\t\n\t\n\t/**\n\t * PatternBrush class\n\t * @class fabric.PatternBrush\n\t * @extends fabric.BaseBrush\n\t */\n\tfabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n\t\n\t  getPatternSrc: function() {\n\t\n\t    var dotWidth = 20,\n\t        dotDistance = 5,\n\t        patternCanvas = fabric.document.createElement('canvas'),\n\t        patternCtx = patternCanvas.getContext('2d');\n\t\n\t    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n\t\n\t    patternCtx.fillStyle = this.color;\n\t    patternCtx.beginPath();\n\t    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n\t    patternCtx.closePath();\n\t    patternCtx.fill();\n\t\n\t    return patternCanvas;\n\t  },\n\t\n\t  getPatternSrcFunction: function() {\n\t    return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\n\t  },\n\t\n\t  /**\n\t   * Creates \"pattern\" instance property\n\t   */\n\t  getPattern: function() {\n\t    return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\n\t  },\n\t\n\t  /**\n\t   * Sets brush styles\n\t   */\n\t  _setBrushStyles: function() {\n\t    this.callSuper('_setBrushStyles');\n\t    this.canvas.contextTop.strokeStyle = this.getPattern();\n\t  },\n\t\n\t  /**\n\t   * Creates path\n\t   */\n\t  createPath: function(pathData) {\n\t    var path = this.callSuper('createPath', pathData);\n\t    path.stroke = new fabric.Pattern({\n\t      source: this.source || this.getPatternSrcFunction()\n\t    });\n\t    return path;\n\t  }\n\t});\n\t\n\t\n\t(function() {\n\t\n\t  var getPointer = fabric.util.getPointer,\n\t      degreesToRadians = fabric.util.degreesToRadians,\n\t      radiansToDegrees = fabric.util.radiansToDegrees,\n\t      atan2 = Math.atan2,\n\t      abs = Math.abs,\n\t\n\t      STROKE_OFFSET = 0.5;\n\t\n\t  /**\n\t   * Canvas class\n\t   * @class fabric.Canvas\n\t   * @extends fabric.StaticCanvas\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#canvas}\n\t   * @see {@link fabric.Canvas#initialize} for constructor definition\n\t   *\n\t   * @fires object:modified\n\t   * @fires object:rotating\n\t   * @fires object:scaling\n\t   * @fires object:moving\n\t   * @fires object:selected\n\t   *\n\t   * @fires before:selection:cleared\n\t   * @fires selection:cleared\n\t   * @fires selection:created\n\t   *\n\t   * @fires path:created\n\t   * @fires mouse:down\n\t   * @fires mouse:move\n\t   * @fires mouse:up\n\t   * @fires mouse:over\n\t   * @fires mouse:out\n\t   *\n\t   */\n\t  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n\t     * @param {Object} [options] Options object\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(el, options) {\n\t      options || (options = { });\n\t\n\t      this._initStatic(el, options);\n\t      this._initInteractive();\n\t      this._createCacheCanvas();\n\t\n\t      fabric.Canvas.activeInstance = this;\n\t    },\n\t\n\t    /**\n\t     * When true, objects can be transformed by one side (unproportionally)\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    uniScaleTransform:      false,\n\t\n\t    /**\n\t     * When true, objects use center point as the origin of scale transformation.\n\t     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n\t     * @since 1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    centeredScaling:        false,\n\t\n\t    /**\n\t     * When true, objects use center point as the origin of rotate transformation.\n\t     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n\t     * @since 1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    centeredRotation:       false,\n\t\n\t    /**\n\t     * Indicates that canvas is interactive. This property should not be changed.\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    interactive:            true,\n\t\n\t    /**\n\t     * Indicates whether group selection should be enabled\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    selection:              true,\n\t\n\t    /**\n\t     * Color of selection\n\t     * @type String\n\t     * @default\n\t     */\n\t    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\n\t\n\t    /**\n\t     * Default dash array pattern\n\t     * If not empty the selection border is dashed\n\t     * @type Array\n\t     */\n\t    selectionDashArray:     [ ],\n\t\n\t    /**\n\t     * Color of the border of selection (usually slightly darker than color of selection itself)\n\t     * @type String\n\t     * @default\n\t     */\n\t    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\n\t\n\t    /**\n\t     * Width of a line used in object/group selection\n\t     * @type Number\n\t     * @default\n\t     */\n\t    selectionLineWidth:     1,\n\t\n\t    /**\n\t     * Default cursor value used when hovering over an object on canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    hoverCursor:            'move',\n\t\n\t    /**\n\t     * Default cursor value used when moving an object on canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    moveCursor:             'move',\n\t\n\t    /**\n\t     * Default cursor value used for the entire canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    defaultCursor:          'default',\n\t\n\t    /**\n\t     * Cursor value used during free drawing\n\t     * @type String\n\t     * @default\n\t     */\n\t    freeDrawingCursor:      'crosshair',\n\t\n\t    /**\n\t     * Cursor value used for rotation point\n\t     * @type String\n\t     * @default\n\t     */\n\t    rotationCursor:         'crosshair',\n\t\n\t    /**\n\t     * Default element class that's given to wrapper (div) element of canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    containerClass:         'canvas-container',\n\t\n\t    /**\n\t     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    perPixelTargetFind:     false,\n\t\n\t    /**\n\t     * Number of pixels around target pixel to tolerate (consider active) during object detection\n\t     * @type Number\n\t     * @default\n\t     */\n\t    targetFindTolerance:    0,\n\t\n\t    /**\n\t     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    skipTargetFind:         false,\n\t\n\t    /**\n\t     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n\t     * After mousedown, mousemove creates a shape,\n\t     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n\t     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4/#free_drawing}\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    isDrawingMode:          false,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _initInteractive: function() {\n\t      this._currentTransform = null;\n\t      this._groupSelector = null;\n\t      this._initWrapperElement();\n\t      this._createUpperCanvas();\n\t      this._initEventListeners();\n\t\n\t      this._initRetinaScaling();\n\t\n\t      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n\t\n\t      this.calcOffset();\n\t    },\n\t\n\t    /**\n\t     * Resets the current transform to its original values and chooses the type of resizing based on the event\n\t     * @private\n\t     * @param {Event} e Event object fired on mousemove\n\t     */\n\t    _resetCurrentTransform: function(e) {\n\t      var t = this._currentTransform;\n\t\n\t      t.target.set({\n\t        scaleX: t.original.scaleX,\n\t        scaleY: t.original.scaleY,\n\t        left: t.original.left,\n\t        top: t.original.top\n\t      });\n\t\n\t      if (this._shouldCenterTransform(e, t.target)) {\n\t        if (t.action === 'rotate') {\n\t          this._setOriginToCenter(t.target);\n\t        }\n\t        else {\n\t          if (t.originX !== 'center') {\n\t            if (t.originX === 'right') {\n\t              t.mouseXSign = -1;\n\t            }\n\t            else {\n\t              t.mouseXSign = 1;\n\t            }\n\t          }\n\t          if (t.originY !== 'center') {\n\t            if (t.originY === 'bottom') {\n\t              t.mouseYSign = -1;\n\t            }\n\t            else {\n\t              t.mouseYSign = 1;\n\t            }\n\t          }\n\t\n\t          t.originX = 'center';\n\t          t.originY = 'center';\n\t        }\n\t      }\n\t      else {\n\t        t.originX = t.original.originX;\n\t        t.originY = t.original.originY;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Checks if point is contained within an area of given object\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target Object to test against\n\t     * @return {Boolean} true if point is contained within an area of given object\n\t     */\n\t    containsPoint: function (e, target) {\n\t      var pointer = this.getPointer(e, true),\n\t          xy = this._normalizePointer(target, pointer);\n\t\n\t      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n\t      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n\t      return (target.containsPoint(xy) || target._findTargetCorner(pointer));\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _normalizePointer: function (object, pointer) {\n\t      var activeGroup = this.getActiveGroup(),\n\t          x = pointer.x,\n\t          y = pointer.y,\n\t          isObjectInGroup = (\n\t            activeGroup &&\n\t            object.type !== 'group' &&\n\t            activeGroup.contains(object)),\n\t          lt;\n\t\n\t      if (isObjectInGroup) {\n\t        lt = fabric.util.transformPoint(activeGroup.getCenterPoint(), this.viewportTransform, true);\n\t        x -= lt.x;\n\t        y -= lt.y;\n\t        x /= activeGroup.scaleX;\n\t        y /= activeGroup.scaleY;\n\t      }\n\t      return { x: x, y: y };\n\t    },\n\t\n\t    /**\n\t     * Returns true if object is transparent at a certain location\n\t     * @param {fabric.Object} target Object to check\n\t     * @param {Number} x Left coordinate\n\t     * @param {Number} y Top coordinate\n\t     * @return {Boolean}\n\t     */\n\t    isTargetTransparent: function (target, x, y) {\n\t      var hasBorders = target.hasBorders,\n\t          transparentCorners = target.transparentCorners;\n\t\n\t      target.hasBorders = target.transparentCorners = false;\n\t\n\t      this._draw(this.contextCache, target);\n\t\n\t      target.hasBorders = hasBorders;\n\t      target.transparentCorners = transparentCorners;\n\t\n\t      var isTransparent = fabric.util.isTransparent(\n\t        this.contextCache, x, y, this.targetFindTolerance);\n\t\n\t      this.clearContext(this.contextCache);\n\t\n\t      return isTransparent;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     */\n\t    _shouldClearSelection: function (e, target) {\n\t      var activeGroup = this.getActiveGroup(),\n\t          activeObject = this.getActiveObject();\n\t\n\t      return (\n\t        !target\n\t        ||\n\t        (target &&\n\t          activeGroup &&\n\t          !activeGroup.contains(target) &&\n\t          activeGroup !== target &&\n\t          !e.shiftKey)\n\t        ||\n\t        (target && !target.evented)\n\t        ||\n\t        (target &&\n\t          !target.selectable &&\n\t          activeObject &&\n\t          activeObject !== target)\n\t      );\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     */\n\t    _shouldCenterTransform: function (e, target) {\n\t      if (!target) {\n\t        return;\n\t      }\n\t\n\t      var t = this._currentTransform,\n\t          centerTransform;\n\t\n\t      if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\n\t        centerTransform = this.centeredScaling || target.centeredScaling;\n\t      }\n\t      else if (t.action === 'rotate') {\n\t        centerTransform = this.centeredRotation || target.centeredRotation;\n\t      }\n\t\n\t      return centerTransform ? !e.altKey : e.altKey;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getOriginFromCorner: function(target, corner) {\n\t      var origin = {\n\t        x: target.originX,\n\t        y: target.originY\n\t      };\n\t\n\t      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\n\t        origin.x = 'right';\n\t      }\n\t      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\n\t        origin.x = 'left';\n\t      }\n\t\n\t      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\n\t        origin.y = 'bottom';\n\t      }\n\t      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\n\t        origin.y = 'top';\n\t      }\n\t\n\t      return origin;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getActionFromCorner: function(target, corner) {\n\t      var action = 'drag';\n\t      if (corner) {\n\t        action = (corner === 'ml' || corner === 'mr')\n\t          ? 'scaleX'\n\t          : (corner === 'mt' || corner === 'mb')\n\t            ? 'scaleY'\n\t            : corner === 'mtr'\n\t              ? 'rotate'\n\t              : 'scale';\n\t      }\n\t      return action;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     */\n\t    _setupCurrentTransform: function (e, target) {\n\t      if (!target) {\n\t        return;\n\t      }\n\t\n\t      var pointer = this.getPointer(e),\n\t          corner = target._findTargetCorner(this.getPointer(e, true)),\n\t          action = this._getActionFromCorner(target, corner),\n\t          origin = this._getOriginFromCorner(target, corner);\n\t\n\t      this._currentTransform = {\n\t        target: target,\n\t        action: action,\n\t        scaleX: target.scaleX,\n\t        scaleY: target.scaleY,\n\t        offsetX: pointer.x - target.left,\n\t        offsetY: pointer.y - target.top,\n\t        originX: origin.x,\n\t        originY: origin.y,\n\t        ex: pointer.x,\n\t        ey: pointer.y,\n\t        left: target.left,\n\t        top: target.top,\n\t        theta: degreesToRadians(target.angle),\n\t        width: target.width * target.scaleX,\n\t        mouseXSign: 1,\n\t        mouseYSign: 1\n\t      };\n\t\n\t      this._currentTransform.original = {\n\t        left: target.left,\n\t        top: target.top,\n\t        scaleX: target.scaleX,\n\t        scaleY: target.scaleY,\n\t        originX: origin.x,\n\t        originY: origin.y\n\t      };\n\t\n\t      this._resetCurrentTransform(e);\n\t    },\n\t\n\t    /**\n\t     * Translates object by \"setting\" its left/top\n\t     * @private\n\t     * @param {Number} x pointer's x coordinate\n\t     * @param {Number} y pointer's y coordinate\n\t     */\n\t    _translateObject: function (x, y) {\n\t      var target = this._currentTransform.target;\n\t\n\t      if (!target.get('lockMovementX')) {\n\t        target.set('left', x - this._currentTransform.offsetX);\n\t      }\n\t      if (!target.get('lockMovementY')) {\n\t        target.set('top', y - this._currentTransform.offsetY);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Scales object by invoking its scaleX/scaleY methods\n\t     * @private\n\t     * @param {Number} x pointer's x coordinate\n\t     * @param {Number} y pointer's y coordinate\n\t     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\n\t     *                    When not provided, an object is scaled by both dimensions equally\n\t     */\n\t    _scaleObject: function (x, y, by) {\n\t      var t = this._currentTransform,\n\t          target = t.target,\n\t          lockScalingX = target.get('lockScalingX'),\n\t          lockScalingY = target.get('lockScalingY'),\n\t          lockScalingFlip = target.get('lockScalingFlip');\n\t\n\t      if (lockScalingX && lockScalingY) {\n\t        return;\n\t      }\n\t\n\t      // Get the constraint point\n\t      var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\n\t          localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY);\n\t\n\t      this._setLocalMouse(localMouse, t);\n\t\n\t      // Actually scale the object\n\t      this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip);\n\t\n\t      // Make sure the constraints apply\n\t      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip) {\n\t      var target = transform.target, forbidScalingX = false, forbidScalingY = false,\n\t          dim = target._getNonTransformedDimensions();\n\t\n\t      transform.newScaleX = localMouse.x / dim.x;\n\t      transform.newScaleY = localMouse.y / dim.y;\n\t\n\t      if (lockScalingFlip && transform.newScaleX <= 0 && transform.newScaleX < target.scaleX) {\n\t        forbidScalingX = true;\n\t      }\n\t\n\t      if (lockScalingFlip && transform.newScaleY <= 0 && transform.newScaleY < target.scaleY) {\n\t        forbidScalingY = true;\n\t      }\n\t\n\t      if (by === 'equally' && !lockScalingX && !lockScalingY) {\n\t        forbidScalingX || forbidScalingY || this._scaleObjectEqually(localMouse, target, transform);\n\t      }\n\t      else if (!by) {\n\t        forbidScalingX || lockScalingX || target.set('scaleX', transform.newScaleX);\n\t        forbidScalingY || lockScalingY || target.set('scaleY', transform.newScaleY);\n\t      }\n\t      else if (by === 'x' && !target.get('lockUniScaling')) {\n\t        forbidScalingX || lockScalingX || target.set('scaleX', transform.newScaleX);\n\t      }\n\t      else if (by === 'y' && !target.get('lockUniScaling')) {\n\t        forbidScalingY || lockScalingY || target.set('scaleY', transform.newScaleY);\n\t      }\n\t\n\t      forbidScalingX || forbidScalingY || this._flipObject(transform, by);\n\t\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _scaleObjectEqually: function(localMouse, target, transform) {\n\t\n\t      var dist = localMouse.y + localMouse.x,\n\t          dim = target._getNonTransformedDimensions(),\n\t          lastDist = dim.y * transform.original.scaleY +\n\t                     dim.x * transform.original.scaleX;\n\t\n\t      // We use transform.scaleX/Y instead of target.scaleX/Y\n\t      // because the object may have a min scale and we'll loose the proportions\n\t      transform.newScaleX = transform.original.scaleX * dist / lastDist;\n\t      transform.newScaleY = transform.original.scaleY * dist / lastDist;\n\t\n\t      target.set('scaleX', transform.newScaleX);\n\t      target.set('scaleY', transform.newScaleY);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _flipObject: function(transform, by) {\n\t      if (transform.newScaleX < 0 && by !== 'y') {\n\t        if (transform.originX === 'left') {\n\t          transform.originX = 'right';\n\t        }\n\t        else if (transform.originX === 'right') {\n\t          transform.originX = 'left';\n\t        }\n\t      }\n\t\n\t      if (transform.newScaleY < 0 && by !== 'x') {\n\t        if (transform.originY === 'top') {\n\t          transform.originY = 'bottom';\n\t        }\n\t        else if (transform.originY === 'bottom') {\n\t          transform.originY = 'top';\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setLocalMouse: function(localMouse, t) {\n\t      var target = t.target;\n\t\n\t      if (t.originX === 'right') {\n\t        localMouse.x *= -1;\n\t      }\n\t      else if (t.originX === 'center') {\n\t        localMouse.x *= t.mouseXSign * 2;\n\t\n\t        if (localMouse.x < 0) {\n\t          t.mouseXSign = -t.mouseXSign;\n\t        }\n\t      }\n\t\n\t      if (t.originY === 'bottom') {\n\t        localMouse.y *= -1;\n\t      }\n\t      else if (t.originY === 'center') {\n\t        localMouse.y *= t.mouseYSign * 2;\n\t\n\t        if (localMouse.y < 0) {\n\t          t.mouseYSign = -t.mouseYSign;\n\t        }\n\t      }\n\t\n\t      // adjust the mouse coordinates when dealing with padding\n\t      if (abs(localMouse.x) > target.padding) {\n\t        if (localMouse.x < 0) {\n\t          localMouse.x += target.padding;\n\t        }\n\t        else {\n\t          localMouse.x -= target.padding;\n\t        }\n\t      }\n\t      else { // mouse is within the padding, set to 0\n\t        localMouse.x = 0;\n\t      }\n\t\n\t      if (abs(localMouse.y) > target.padding) {\n\t        if (localMouse.y < 0) {\n\t          localMouse.y += target.padding;\n\t        }\n\t        else {\n\t          localMouse.y -= target.padding;\n\t        }\n\t      }\n\t      else {\n\t        localMouse.y = 0;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Rotates object by invoking its rotate method\n\t     * @private\n\t     * @param {Number} x pointer's x coordinate\n\t     * @param {Number} y pointer's y coordinate\n\t     */\n\t    _rotateObject: function (x, y) {\n\t\n\t      var t = this._currentTransform;\n\t\n\t      if (t.target.get('lockRotation')) {\n\t        return;\n\t      }\n\t\n\t      var lastAngle = atan2(t.ey - t.top, t.ex - t.left),\n\t          curAngle = atan2(y - t.top, x - t.left),\n\t          angle = radiansToDegrees(curAngle - lastAngle + t.theta);\n\t\n\t      // normalize angle to positive value\n\t      if (angle < 0) {\n\t        angle = 360 + angle;\n\t      }\n\t\n\t      t.target.angle = angle % 360;\n\t    },\n\t\n\t    /**\n\t     * Set the cursor type of the canvas element\n\t     * @param {String} value Cursor type of the canvas element.\n\t     * @see http://www.w3.org/TR/css3-ui/#cursor\n\t     */\n\t    setCursor: function (value) {\n\t      this.upperCanvasEl.style.cursor = value;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _resetObjectTransform: function (target) {\n\t      target.scaleX = 1;\n\t      target.scaleY = 1;\n\t      target.setAngle(0);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _drawSelection: function () {\n\t      var ctx = this.contextTop,\n\t          groupSelector = this._groupSelector,\n\t          left = groupSelector.left,\n\t          top = groupSelector.top,\n\t          aleft = abs(left),\n\t          atop = abs(top);\n\t\n\t      ctx.fillStyle = this.selectionColor;\n\t\n\t      ctx.fillRect(\n\t        groupSelector.ex - ((left > 0) ? 0 : -left),\n\t        groupSelector.ey - ((top > 0) ? 0 : -top),\n\t        aleft,\n\t        atop\n\t      );\n\t\n\t      ctx.lineWidth = this.selectionLineWidth;\n\t      ctx.strokeStyle = this.selectionBorderColor;\n\t\n\t      // selection border\n\t      if (this.selectionDashArray.length > 1) {\n\t\n\t        var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0: aleft),\n\t            py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0: atop);\n\t\n\t        ctx.beginPath();\n\t\n\t        fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\n\t        fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\n\t        fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\n\t        fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\n\t\n\t        ctx.closePath();\n\t        ctx.stroke();\n\t      }\n\t      else {\n\t        ctx.strokeRect(\n\t          groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n\t          groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\n\t          aleft,\n\t          atop\n\t        );\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _isLastRenderedObject: function(e) {\n\t      return (\n\t        this.controlsAboveOverlay &&\n\t        this.lastRenderedObjectWithControlsAboveOverlay &&\n\t        this.lastRenderedObjectWithControlsAboveOverlay.visible &&\n\t        this.containsPoint(e, this.lastRenderedObjectWithControlsAboveOverlay) &&\n\t        this.lastRenderedObjectWithControlsAboveOverlay._findTargetCorner(this.getPointer(e, true)));\n\t    },\n\t\n\t    /**\n\t     * Method that determines what object we are clicking on\n\t     * @param {Event} e mouse event\n\t     * @param {Boolean} skipGroup when true, group is skipped and only objects are traversed through\n\t     */\n\t    findTarget: function (e, skipGroup) {\n\t      if (this.skipTargetFind) {\n\t        return;\n\t      }\n\t\n\t      if (this._isLastRenderedObject(e)) {\n\t        return this.lastRenderedObjectWithControlsAboveOverlay;\n\t      }\n\t\n\t      // first check current group (if one exists)\n\t      var activeGroup = this.getActiveGroup();\n\t      if (activeGroup && !skipGroup && this.containsPoint(e, activeGroup)) {\n\t        return activeGroup;\n\t      }\n\t\n\t      var target = this._searchPossibleTargets(e, skipGroup);\n\t      this._fireOverOutEvents(target, e);\n\t\n\t      return target;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _fireOverOutEvents: function(target, e) {\n\t      if (target) {\n\t        if (this._hoveredTarget !== target) {\n\t          if (this._hoveredTarget) {\n\t            this.fire('mouse:out', { target: this._hoveredTarget, e: e });\n\t            this._hoveredTarget.fire('mouseout');\n\t          }\n\t          this.fire('mouse:over', { target: target, e: e });\n\t          target.fire('mouseover');\n\t          this._hoveredTarget = target;\n\t        }\n\t      }\n\t      else if (this._hoveredTarget) {\n\t        this.fire('mouse:out', { target: this._hoveredTarget, e: e });\n\t        this._hoveredTarget.fire('mouseout');\n\t        this._hoveredTarget = null;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _checkTarget: function(e, obj, pointer) {\n\t      if (obj &&\n\t          obj.visible &&\n\t          obj.evented &&\n\t          this.containsPoint(e, obj)){\n\t        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n\t          var isTransparent = this.isTargetTransparent(obj, pointer.x, pointer.y);\n\t          if (!isTransparent) {\n\t            return true;\n\t          }\n\t        }\n\t        else {\n\t          return true;\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _searchPossibleTargets: function(e, skipGroup) {\n\t\n\t      // Cache all targets where their bounding box contains point.\n\t      var target,\n\t          pointer = this.getPointer(e, true),\n\t          i = this._objects.length;\n\t      // Do not check for currently grouped objects, since we check the parent group itself.\n\t      // untill we call this function specifically to search inside the activeGroup\n\t      while (i--) {\n\t        if ((!this._objects[i].group || skipGroup) && this._checkTarget(e, this._objects[i], pointer)){\n\t          this.relatedTarget = this._objects[i];\n\t          target = this._objects[i];\n\t          break;\n\t        }\n\t      }\n\t\n\t      return target;\n\t    },\n\t\n\t    /**\n\t     * Returns pointer coordinates relative to canvas.\n\t     * @param {Event} e\n\t     * @return {Object} object with \"x\" and \"y\" number values\n\t     */\n\t    getPointer: function (e, ignoreZoom, upperCanvasEl) {\n\t      if (!upperCanvasEl) {\n\t        upperCanvasEl = this.upperCanvasEl;\n\t      }\n\t      var pointer = getPointer(e),\n\t          bounds = upperCanvasEl.getBoundingClientRect(),\n\t          boundsWidth = bounds.width || 0,\n\t          boundsHeight = bounds.height || 0,\n\t          cssScale;\n\t\n\t      if (!boundsWidth || !boundsHeight ) {\n\t        if ('top' in bounds && 'bottom' in bounds) {\n\t          boundsHeight = Math.abs( bounds.top - bounds.bottom );\n\t        }\n\t        if ('right' in bounds && 'left' in bounds) {\n\t          boundsWidth = Math.abs( bounds.right - bounds.left );\n\t        }\n\t      }\n\t\n\t      this.calcOffset();\n\t\n\t      pointer.x = pointer.x - this._offset.left;\n\t      pointer.y = pointer.y - this._offset.top;\n\t      if (!ignoreZoom) {\n\t        pointer = fabric.util.transformPoint(\n\t          pointer,\n\t          fabric.util.invertTransform(this.viewportTransform)\n\t        );\n\t      }\n\t\n\t      if (boundsWidth === 0 || boundsHeight === 0) {\n\t        // If bounds are not available (i.e. not visible), do not apply scale.\n\t        cssScale = { width: 1, height: 1 };\n\t      }\n\t      else {\n\t        cssScale = {\n\t          width: upperCanvasEl.width / boundsWidth,\n\t          height: upperCanvasEl.height / boundsHeight\n\t        };\n\t      }\n\t\n\t      return {\n\t        x: pointer.x * cssScale.width,\n\t        y: pointer.y * cssScale.height\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n\t     */\n\t    _createUpperCanvas: function () {\n\t      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, '');\n\t\n\t      this.upperCanvasEl = this._createCanvasElement();\n\t      fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\n\t\n\t      this.wrapperEl.appendChild(this.upperCanvasEl);\n\t\n\t      this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);\n\t      this._applyCanvasStyle(this.upperCanvasEl);\n\t      this.contextTop = this.upperCanvasEl.getContext('2d');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createCacheCanvas: function () {\n\t      this.cacheCanvasEl = this._createCanvasElement();\n\t      this.cacheCanvasEl.setAttribute('width', this.width);\n\t      this.cacheCanvasEl.setAttribute('height', this.height);\n\t      this.contextCache = this.cacheCanvasEl.getContext('2d');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _initWrapperElement: function () {\n\t      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\n\t        'class': this.containerClass\n\t      });\n\t      fabric.util.setStyle(this.wrapperEl, {\n\t        width: this.getWidth() + 'px',\n\t        height: this.getHeight() + 'px',\n\t        position: 'relative'\n\t      });\n\t      fabric.util.makeElementUnselectable(this.wrapperEl);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {HTMLElement} element canvas element to apply styles on\n\t     */\n\t    _applyCanvasStyle: function (element) {\n\t      var width = this.getWidth() || element.width,\n\t          height = this.getHeight() || element.height;\n\t\n\t      fabric.util.setStyle(element, {\n\t        position: 'absolute',\n\t        width: width + 'px',\n\t        height: height + 'px',\n\t        left: 0,\n\t        top: 0\n\t      });\n\t      element.width = width;\n\t      element.height = height;\n\t      fabric.util.makeElementUnselectable(element);\n\t    },\n\t\n\t    /**\n\t     * Copys the the entire inline style from one element (fromEl) to another (toEl)\n\t     * @private\n\t     * @param {Element} fromEl Element style is copied from\n\t     * @param {Element} toEl Element copied style is applied to\n\t     */\n\t    _copyCanvasStyle: function (fromEl, toEl) {\n\t      toEl.style.cssText = fromEl.style.cssText;\n\t    },\n\t\n\t    /**\n\t     * Returns context of canvas where object selection is drawn\n\t     * @return {CanvasRenderingContext2D}\n\t     */\n\t    getSelectionContext: function() {\n\t      return this.contextTop;\n\t    },\n\t\n\t    /**\n\t     * Returns &lt;canvas> element on which object selection is drawn\n\t     * @return {HTMLCanvasElement}\n\t     */\n\t    getSelectionElement: function () {\n\t      return this.upperCanvasEl;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} object\n\t     */\n\t    _setActiveObject: function(object) {\n\t      if (this._activeObject) {\n\t        this._activeObject.set('active', false);\n\t      }\n\t      this._activeObject = object;\n\t      object.set('active', true);\n\t    },\n\t\n\t    /**\n\t     * Sets given object as the only active object on canvas\n\t     * @param {fabric.Object} object Object to set as an active one\n\t     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    setActiveObject: function (object, e) {\n\t      this._setActiveObject(object);\n\t      this.renderAll();\n\t      this.fire('object:selected', { target: object, e: e });\n\t      object.fire('selected', { e: e });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns currently active object\n\t     * @return {fabric.Object} active object\n\t     */\n\t    getActiveObject: function () {\n\t      return this._activeObject;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _discardActiveObject: function() {\n\t      if (this._activeObject) {\n\t        this._activeObject.set('active', false);\n\t      }\n\t      this._activeObject = null;\n\t    },\n\t\n\t    /**\n\t     * Discards currently active object\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    discardActiveObject: function (e) {\n\t      this._discardActiveObject();\n\t      this.renderAll();\n\t      this.fire('selection:cleared', { e: e });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {fabric.Group} group\n\t     */\n\t    _setActiveGroup: function(group) {\n\t      this._activeGroup = group;\n\t      if (group) {\n\t        group.set('active', true);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets active group to a speicified one\n\t     * @param {fabric.Group} group Group to set as a current one\n\t     * @return {fabric.Canvas} thisArg\n\t     * @chainable\n\t     */\n\t    setActiveGroup: function (group, e) {\n\t      this._setActiveGroup(group);\n\t      if (group) {\n\t        this.fire('object:selected', { target: group, e: e });\n\t        group.fire('selected', { e: e });\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns currently active group\n\t     * @return {fabric.Group} Current group\n\t     */\n\t    getActiveGroup: function () {\n\t      return this._activeGroup;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _discardActiveGroup: function() {\n\t      var g = this.getActiveGroup();\n\t      if (g) {\n\t        g.destroy();\n\t      }\n\t      this.setActiveGroup(null);\n\t    },\n\t\n\t    /**\n\t     * Discards currently active group\n\t     * @return {fabric.Canvas} thisArg\n\t     */\n\t    discardActiveGroup: function (e) {\n\t      this._discardActiveGroup();\n\t      this.fire('selection:cleared', { e: e });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Deactivates all objects on canvas, removing any active group or object\n\t     * @return {fabric.Canvas} thisArg\n\t     */\n\t    deactivateAll: function () {\n\t      var allObjects = this.getObjects(),\n\t          i = 0,\n\t          len = allObjects.length;\n\t      for ( ; i < len; i++) {\n\t        allObjects[i].set('active', false);\n\t      }\n\t      this._discardActiveGroup();\n\t      this._discardActiveObject();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Deactivates all objects and dispatches appropriate events\n\t     * @return {fabric.Canvas} thisArg\n\t     */\n\t    deactivateAllWithDispatch: function (e) {\n\t      var activeObject = this.getActiveGroup() || this.getActiveObject();\n\t      if (activeObject) {\n\t        this.fire('before:selection:cleared', { target: activeObject, e: e });\n\t      }\n\t      this.deactivateAll();\n\t      if (activeObject) {\n\t        this.fire('selection:cleared', { e: e });\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Draws objects' controls (borders/controls)\n\t     * @param {CanvasRenderingContext2D} ctx Context to render controls on\n\t     */\n\t    drawControls: function(ctx) {\n\t      var activeGroup = this.getActiveGroup();\n\t      if (activeGroup) {\n\t        this._drawGroupControls(ctx, activeGroup);\n\t      }\n\t      else {\n\t        this._drawObjectsControls(ctx);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _drawGroupControls: function(ctx, activeGroup) {\n\t      activeGroup._renderControls(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _drawObjectsControls: function(ctx) {\n\t      for (var i = 0, len = this._objects.length; i < len; ++i) {\n\t        if (!this._objects[i] || !this._objects[i].active) {\n\t          continue;\n\t        }\n\t        this._objects[i]._renderControls(ctx);\n\t        this.lastRenderedObjectWithControlsAboveOverlay = this._objects[i];\n\t      }\n\t    }\n\t  });\n\t\n\t  // copying static properties manually to work around Opera's bug,\n\t  // where \"prototype\" property is enumerable and overrides existing prototype\n\t  for (var prop in fabric.StaticCanvas) {\n\t    if (prop !== 'prototype') {\n\t      fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n\t    }\n\t  }\n\t\n\t  if (fabric.isTouchSupported) {\n\t    /** @ignore */\n\t    fabric.Canvas.prototype._setCursorFromEvent = function() { };\n\t  }\n\t\n\t  /**\n\t   * @class fabric.Element\n\t   * @alias fabric.Canvas\n\t   * @deprecated Use {@link fabric.Canvas} instead.\n\t   * @constructor\n\t   */\n\t  fabric.Element = fabric.Canvas;\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var cursorOffset = {\n\t    mt: 0, // n\n\t    tr: 1, // ne\n\t    mr: 2, // e\n\t    br: 3, // se\n\t    mb: 4, // s\n\t    bl: 5, // sw\n\t    ml: 6, // w\n\t    tl: 7 // nw\n\t  },\n\t  addListener = fabric.util.addListener,\n\t  removeListener = fabric.util.removeListener;\n\t\n\t  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\t\n\t    /**\n\t     * Map of cursor style values for each of the object controls\n\t     * @private\n\t     */\n\t    cursorMap: [\n\t      'n-resize',\n\t      'ne-resize',\n\t      'e-resize',\n\t      'se-resize',\n\t      's-resize',\n\t      'sw-resize',\n\t      'w-resize',\n\t      'nw-resize'\n\t    ],\n\t\n\t    /**\n\t     * Adds mouse listeners to canvas\n\t     * @private\n\t     */\n\t    _initEventListeners: function () {\n\t\n\t      this._bindEvents();\n\t\n\t      addListener(fabric.window, 'resize', this._onResize);\n\t\n\t      // mouse events\n\t      addListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n\t      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n\t      addListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);\n\t\n\t      // touch events\n\t      addListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);\n\t      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\t\n\t      if (typeof eventjs !== 'undefined' && 'add' in eventjs) {\n\t        eventjs.add(this.upperCanvasEl, 'gesture', this._onGesture);\n\t        eventjs.add(this.upperCanvasEl, 'drag', this._onDrag);\n\t        eventjs.add(this.upperCanvasEl, 'orientation', this._onOrientationChange);\n\t        eventjs.add(this.upperCanvasEl, 'shake', this._onShake);\n\t        eventjs.add(this.upperCanvasEl, 'longpress', this._onLongPress);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _bindEvents: function() {\n\t      this._onMouseDown = this._onMouseDown.bind(this);\n\t      this._onMouseMove = this._onMouseMove.bind(this);\n\t      this._onMouseUp = this._onMouseUp.bind(this);\n\t      this._onResize = this._onResize.bind(this);\n\t      this._onGesture = this._onGesture.bind(this);\n\t      this._onDrag = this._onDrag.bind(this);\n\t      this._onShake = this._onShake.bind(this);\n\t      this._onLongPress = this._onLongPress.bind(this);\n\t      this._onOrientationChange = this._onOrientationChange.bind(this);\n\t      this._onMouseWheel = this._onMouseWheel.bind(this);\n\t    },\n\t\n\t    /**\n\t     * Removes all event listeners\n\t     */\n\t    removeListeners: function() {\n\t      removeListener(fabric.window, 'resize', this._onResize);\n\t\n\t      removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n\t      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n\t      removeListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);\n\t\n\t      removeListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);\n\t      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\t\n\t      if (typeof eventjs !== 'undefined' && 'remove' in eventjs) {\n\t        eventjs.remove(this.upperCanvasEl, 'gesture', this._onGesture);\n\t        eventjs.remove(this.upperCanvasEl, 'drag', this._onDrag);\n\t        eventjs.remove(this.upperCanvasEl, 'orientation', this._onOrientationChange);\n\t        eventjs.remove(this.upperCanvasEl, 'shake', this._onShake);\n\t        eventjs.remove(this.upperCanvasEl, 'longpress', this._onLongPress);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js gesture\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onGesture: function(e, self) {\n\t      this.__onTransformGesture && this.__onTransformGesture(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js drag\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onDrag: function(e, self) {\n\t      this.__onDrag && this.__onDrag(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js wheel event\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onMouseWheel: function(e, self) {\n\t      this.__onMouseWheel && this.__onMouseWheel(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js orientation change\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onOrientationChange: function(e, self) {\n\t      this.__onOrientationChange && this.__onOrientationChange(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js shake\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onShake: function(e, self) {\n\t      this.__onShake && this.__onShake(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} [e] Event object fired on Event.js shake\n\t     * @param {Event} [self] Inner Event object\n\t     */\n\t    _onLongPress: function(e, self) {\n\t      this.__onLongPress && this.__onLongPress(e, self);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mousedown\n\t     */\n\t    _onMouseDown: function (e) {\n\t      this.__onMouseDown(e);\n\t\n\t      addListener(fabric.document, 'touchend', this._onMouseUp);\n\t      addListener(fabric.document, 'touchmove', this._onMouseMove);\n\t\n\t      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n\t      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\t\n\t      if (e.type === 'touchstart') {\n\t        // Unbind mousedown to prevent double triggers from touch devices\n\t        removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n\t      }\n\t      else {\n\t        addListener(fabric.document, 'mouseup', this._onMouseUp);\n\t        addListener(fabric.document, 'mousemove', this._onMouseMove);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mouseup\n\t     */\n\t    _onMouseUp: function (e) {\n\t      this.__onMouseUp(e);\n\t\n\t      removeListener(fabric.document, 'mouseup', this._onMouseUp);\n\t      removeListener(fabric.document, 'touchend', this._onMouseUp);\n\t\n\t      removeListener(fabric.document, 'mousemove', this._onMouseMove);\n\t      removeListener(fabric.document, 'touchmove', this._onMouseMove);\n\t\n\t      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n\t      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\t\n\t      if (e.type === 'touchend') {\n\t        // Wait 400ms before rebinding mousedown to prevent double triggers\n\t        // from touch devices\n\t        var _this = this;\n\t        setTimeout(function() {\n\t          addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);\n\t        }, 400);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mousemove\n\t     */\n\t    _onMouseMove: function (e) {\n\t      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n\t      this.__onMouseMove(e);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onResize: function () {\n\t      this.calcOffset();\n\t    },\n\t\n\t    /**\n\t     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n\t     * @private\n\t     * @param {Object} target\n\t     * @param {Object} pointer\n\t     */\n\t    _shouldRender: function(target, pointer) {\n\t      var activeObject = this.getActiveGroup() || this.getActiveObject();\n\t\n\t      return !!(\n\t        (target && (\n\t          target.isMoving ||\n\t          target !== activeObject))\n\t        ||\n\t        (!target && !!activeObject)\n\t        ||\n\t        (!target && !activeObject && !this._groupSelector)\n\t        ||\n\t        (pointer &&\n\t          this._previousPointer &&\n\t          this.selection && (\n\t          pointer.x !== this._previousPointer.x ||\n\t          pointer.y !== this._previousPointer.y))\n\t      );\n\t    },\n\t\n\t    /**\n\t     * Method that defines the actions when mouse is released on canvas.\n\t     * The method resets the currentTransform parameters, store the image corner\n\t     * position in the image object and render the canvas on top.\n\t     * @private\n\t     * @param {Event} e Event object fired on mouseup\n\t     */\n\t    __onMouseUp: function (e) {\n\t      var target;\n\t\n\t      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n\t        this._onMouseUpInDrawingMode(e);\n\t        return;\n\t      }\n\t\n\t      if (this._currentTransform) {\n\t        this._finalizeCurrentTransform();\n\t        target = this._currentTransform.target;\n\t      }\n\t      else {\n\t        target = this.findTarget(e, true);\n\t      }\n\t\n\t      var shouldRender = this._shouldRender(target, this.getPointer(e));\n\t\n\t      this._maybeGroupObjects(e);\n\t\n\t      if (target) {\n\t        target.isMoving = false;\n\t      }\n\t\n\t      shouldRender && this.renderAll();\n\t\n\t      this._handleCursorAndEvent(e, target);\n\t    },\n\t\n\t    _handleCursorAndEvent: function(e, target) {\n\t      this._setCursorFromEvent(e, target);\n\t\n\t      // TODO: why are we doing this?\n\t      var _this = this;\n\t      setTimeout(function () {\n\t        _this._setCursorFromEvent(e, target);\n\t      }, 50);\n\t\n\t      this.fire('mouse:up', { target: target, e: e });\n\t      target && target.fire('mouseup', { e: e });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _finalizeCurrentTransform: function() {\n\t\n\t      var transform = this._currentTransform,\n\t          target = transform.target;\n\t\n\t      if (target._scaling) {\n\t        target._scaling = false;\n\t      }\n\t\n\t      target.setCoords();\n\t\n\t      // only fire :modified event if target coordinates were changed during mousedown-mouseup\n\t      if (this.stateful && target.hasStateChanged()) {\n\t        this.fire('object:modified', { target: target });\n\t        target.fire('modified');\n\t      }\n\t\n\t      this._restoreOriginXY(target);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} target Object to restore\n\t     */\n\t    _restoreOriginXY: function(target) {\n\t      if (this._previousOriginX && this._previousOriginY) {\n\t\n\t        var originPoint = target.translateToOriginPoint(\n\t          target.getCenterPoint(),\n\t          this._previousOriginX,\n\t          this._previousOriginY);\n\t\n\t        target.originX = this._previousOriginX;\n\t        target.originY = this._previousOriginY;\n\t\n\t        target.left = originPoint.x;\n\t        target.top = originPoint.y;\n\t\n\t        this._previousOriginX = null;\n\t        this._previousOriginY = null;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mousedown\n\t     */\n\t    _onMouseDownInDrawingMode: function(e) {\n\t      this._isCurrentlyDrawing = true;\n\t      this.discardActiveObject(e).renderAll();\n\t      if (this.clipTo) {\n\t        fabric.util.clipContext(this, this.contextTop);\n\t      }\n\t      var ivt = fabric.util.invertTransform(this.viewportTransform),\n\t          pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);\n\t      this.freeDrawingBrush.onMouseDown(pointer);\n\t      this.fire('mouse:down', { e: e });\n\t\n\t      var target = this.findTarget(e);\n\t      if (typeof target !== 'undefined') {\n\t        target.fire('mousedown', { e: e, target: target });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mousemove\n\t     */\n\t    _onMouseMoveInDrawingMode: function(e) {\n\t      if (this._isCurrentlyDrawing) {\n\t        var ivt = fabric.util.invertTransform(this.viewportTransform),\n\t            pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);\n\t        this.freeDrawingBrush.onMouseMove(pointer);\n\t      }\n\t      this.setCursor(this.freeDrawingCursor);\n\t      this.fire('mouse:move', { e: e });\n\t\n\t      var target = this.findTarget(e);\n\t      if (typeof target !== 'undefined') {\n\t        target.fire('mousemove', { e: e, target: target });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object fired on mouseup\n\t     */\n\t    _onMouseUpInDrawingMode: function(e) {\n\t      this._isCurrentlyDrawing = false;\n\t      if (this.clipTo) {\n\t        this.contextTop.restore();\n\t      }\n\t      this.freeDrawingBrush.onMouseUp();\n\t      this.fire('mouse:up', { e: e });\n\t\n\t      var target = this.findTarget(e);\n\t      if (typeof target !== 'undefined') {\n\t        target.fire('mouseup', { e: e, target: target });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Method that defines the actions when mouse is clic ked on canvas.\n\t     * The method inits the currentTransform parameters and renders all the\n\t     * canvas so the current image can be placed on the top canvas and the rest\n\t     * in on the container one.\n\t     * @private\n\t     * @param {Event} e Event object fired on mousedown\n\t     */\n\t    __onMouseDown: function (e) {\n\t\n\t      // accept only left clicks\n\t      var isLeftClick  = 'which' in e ? e.which === 1 : e.button === 1;\n\t      if (!isLeftClick && !fabric.isTouchSupported) {\n\t        return;\n\t      }\n\t\n\t      if (this.isDrawingMode) {\n\t        this._onMouseDownInDrawingMode(e);\n\t        return;\n\t      }\n\t\n\t      // ignore if some object is being transformed at this moment\n\t      if (this._currentTransform) {\n\t        return;\n\t      }\n\t\n\t      var target = this.findTarget(e),\n\t          pointer = this.getPointer(e, true);\n\t\n\t      // save pointer for check in __onMouseUp event\n\t      this._previousPointer = pointer;\n\t\n\t      var shouldRender = this._shouldRender(target, pointer),\n\t          shouldGroup = this._shouldGroup(e, target);\n\t\n\t      if (this._shouldClearSelection(e, target)) {\n\t        this._clearSelection(e, target, pointer);\n\t      }\n\t      else if (shouldGroup) {\n\t        this._handleGrouping(e, target);\n\t        target = this.getActiveGroup();\n\t      }\n\t\n\t      if (target && target.selectable && !shouldGroup) {\n\t        this._beforeTransform(e, target);\n\t        this._setupCurrentTransform(e, target);\n\t      }\n\t      // we must renderAll so that active image is placed on the top canvas\n\t      shouldRender && this.renderAll();\n\t\n\t      this.fire('mouse:down', { target: target, e: e });\n\t      target && target.fire('mousedown', { e: e });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _beforeTransform: function(e, target) {\n\t      this.stateful && target.saveState();\n\t\n\t      // determine if it's a drag or rotate case\n\t      if (target._findTargetCorner(this.getPointer(e))) {\n\t        this.onBeforeScaleRotate(target);\n\t      }\n\t\n\t      if (target !== this.getActiveGroup() && target !== this.getActiveObject()) {\n\t        this.deactivateAll();\n\t        this.setActiveObject(target, e);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _clearSelection: function(e, target, pointer) {\n\t      this.deactivateAllWithDispatch(e);\n\t\n\t      if (target && target.selectable) {\n\t        this.setActiveObject(target, e);\n\t      }\n\t      else if (this.selection) {\n\t        this._groupSelector = {\n\t          ex: pointer.x,\n\t          ey: pointer.y,\n\t          top: 0,\n\t          left: 0\n\t        };\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} target Object for that origin is set to center\n\t     */\n\t    _setOriginToCenter: function(target) {\n\t      this._previousOriginX = this._currentTransform.target.originX;\n\t      this._previousOriginY = this._currentTransform.target.originY;\n\t\n\t      var center = target.getCenterPoint();\n\t\n\t      target.originX = 'center';\n\t      target.originY = 'center';\n\t\n\t      target.left = center.x;\n\t      target.top = center.y;\n\t\n\t      this._currentTransform.left = target.left;\n\t      this._currentTransform.top = target.top;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} target Object for that center is set to origin\n\t     */\n\t    _setCenterToOrigin: function(target) {\n\t      var originPoint = target.translateToOriginPoint(\n\t        target.getCenterPoint(),\n\t        this._previousOriginX,\n\t        this._previousOriginY);\n\t\n\t      target.originX = this._previousOriginX;\n\t      target.originY = this._previousOriginY;\n\t\n\t      target.left = originPoint.x;\n\t      target.top = originPoint.y;\n\t\n\t      this._previousOriginX = null;\n\t      this._previousOriginY = null;\n\t    },\n\t\n\t    /**\n\t     * Method that defines the actions when mouse is hovering the canvas.\n\t     * The currentTransform parameter will definde whether the user is rotating/scaling/translating\n\t     * an image or neither of them (only hovering). A group selection is also possible and would cancel\n\t     * all any other type of action.\n\t     * In case of an image transformation only the top canvas will be rendered.\n\t     * @private\n\t     * @param {Event} e Event object fired on mousemove\n\t     */\n\t    __onMouseMove: function (e) {\n\t\n\t      var target, pointer;\n\t\n\t      if (this.isDrawingMode) {\n\t        this._onMouseMoveInDrawingMode(e);\n\t        return;\n\t      }\n\t      if (typeof e.touches !== 'undefined' && e.touches.length > 1) {\n\t        return;\n\t      }\n\t\n\t      var groupSelector = this._groupSelector;\n\t\n\t      // We initially clicked in an empty area, so we draw a box for multiple selection\n\t      if (groupSelector) {\n\t        pointer = this.getPointer(e, true);\n\t\n\t        groupSelector.left = pointer.x - groupSelector.ex;\n\t        groupSelector.top = pointer.y - groupSelector.ey;\n\t\n\t        this.renderTop();\n\t      }\n\t      else if (!this._currentTransform) {\n\t\n\t        target = this.findTarget(e);\n\t\n\t        if (!target || target && !target.selectable) {\n\t          this.setCursor(this.defaultCursor);\n\t        }\n\t        else {\n\t          this._setCursorFromEvent(e, target);\n\t        }\n\t      }\n\t      else {\n\t        this._transformObject(e);\n\t      }\n\t\n\t      this.fire('mouse:move', { target: target, e: e });\n\t      target && target.fire('mousemove', { e: e });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event fired on mousemove\n\t     */\n\t    _transformObject: function(e) {\n\t      var pointer = this.getPointer(e),\n\t          transform = this._currentTransform;\n\t\n\t      transform.reset = false,\n\t      transform.target.isMoving = true;\n\t\n\t      this._beforeScaleTransform(e, transform);\n\t      this._performTransformAction(e, transform, pointer);\n\t\n\t      this.renderAll();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _performTransformAction: function(e, transform, pointer) {\n\t      var x = pointer.x,\n\t          y = pointer.y,\n\t          target = transform.target,\n\t          action = transform.action;\n\t\n\t      if (action === 'rotate') {\n\t        this._rotateObject(x, y);\n\t        this._fire('rotating', target, e);\n\t      }\n\t      else if (action === 'scale') {\n\t        this._onScale(e, transform, x, y);\n\t        this._fire('scaling', target, e);\n\t      }\n\t      else if (action === 'scaleX') {\n\t        this._scaleObject(x, y, 'x');\n\t        this._fire('scaling', target, e);\n\t      }\n\t      else if (action === 'scaleY') {\n\t        this._scaleObject(x, y, 'y');\n\t        this._fire('scaling', target, e);\n\t      }\n\t      else {\n\t        this._translateObject(x, y);\n\t        this._fire('moving', target, e);\n\t        this.setCursor(this.moveCursor);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _fire: function(eventName, target, e) {\n\t      this.fire('object:' + eventName, { target: target, e: e });\n\t      target.fire(eventName, { e: e });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _beforeScaleTransform: function(e, transform) {\n\t      if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\n\t        var centerTransform = this._shouldCenterTransform(e, transform.target);\n\t\n\t        // Switch from a normal resize to center-based\n\t        if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\n\t           // Switch from center-based resize to normal one\n\t           (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\n\t        ) {\n\t          this._resetCurrentTransform(e);\n\t          transform.reset = true;\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onScale: function(e, transform, x, y) {\n\t      // rotate object only if shift key is not pressed\n\t      // and if it is not a group we are transforming\n\t      if ((e.shiftKey || this.uniScaleTransform) && !transform.target.get('lockUniScaling')) {\n\t        transform.currentAction = 'scale';\n\t        this._scaleObject(x, y);\n\t      }\n\t      else {\n\t        // Switch from a normal resize to proportional\n\t        if (!transform.reset && transform.currentAction === 'scale') {\n\t          this._resetCurrentTransform(e, transform.target);\n\t        }\n\t\n\t        transform.currentAction = 'scaleEqually';\n\t        this._scaleObject(x, y, 'equally');\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets the cursor depending on where the canvas is being hovered.\n\t     * Note: very buggy in Opera\n\t     * @param {Event} e Event object\n\t     * @param {Object} target Object that the mouse is hovering, if so.\n\t     */\n\t    _setCursorFromEvent: function (e, target) {\n\t      if (!target || !target.selectable) {\n\t        this.setCursor(this.defaultCursor);\n\t        return false;\n\t      }\n\t      else {\n\t        var activeGroup = this.getActiveGroup(),\n\t            // only show proper corner when group selection is not active\n\t            corner = target._findTargetCorner\n\t                      && (!activeGroup || !activeGroup.contains(target))\n\t                      && target._findTargetCorner(this.getPointer(e, true));\n\t\n\t        if (!corner) {\n\t          this.setCursor(target.hoverCursor || this.hoverCursor);\n\t        }\n\t        else {\n\t          this._setCornerCursor(corner, target);\n\t        }\n\t      }\n\t      return true;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setCornerCursor: function(corner, target) {\n\t      if (corner in cursorOffset) {\n\t        this.setCursor(this._getRotatedCornerCursor(corner, target));\n\t      }\n\t      else if (corner === 'mtr' && target.hasRotatingPoint) {\n\t        this.setCursor(this.rotationCursor);\n\t      }\n\t      else {\n\t        this.setCursor(this.defaultCursor);\n\t        return false;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getRotatedCornerCursor: function(corner, target) {\n\t      var n = Math.round((target.getAngle() % 360) / 45);\n\t\n\t      if (n < 0) {\n\t        n += 8; // full circle ahead\n\t      }\n\t      n += cursorOffset[corner];\n\t      // normalize n to be from 0 to 7\n\t      n %= 8;\n\t\n\t      return this.cursorMap[n];\n\t    }\n\t  });\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var min = Math.min,\n\t      max = Math.max;\n\t\n\t  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     * @return {Boolean}\n\t     */\n\t    _shouldGroup: function(e, target) {\n\t      var activeObject = this.getActiveObject();\n\t      return e.shiftKey &&\n\t            (this.getActiveGroup() || (activeObject && activeObject !== target))\n\t            && this.selection;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e Event object\n\t     * @param {fabric.Object} target\n\t     */\n\t    _handleGrouping: function (e, target) {\n\t\n\t      if (target === this.getActiveGroup()) {\n\t\n\t        // if it's a group, find target again, this time skipping group\n\t        target = this.findTarget(e, true);\n\t\n\t        // if even object is not found, bail out\n\t        if (!target || target.isType('group')) {\n\t          return;\n\t        }\n\t      }\n\t      if (this.getActiveGroup()) {\n\t        this._updateActiveGroup(target, e);\n\t      }\n\t      else {\n\t        this._createActiveGroup(target, e);\n\t      }\n\t\n\t      if (this._activeGroup) {\n\t        this._activeGroup.saveCoords();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _updateActiveGroup: function(target, e) {\n\t      var activeGroup = this.getActiveGroup();\n\t\n\t      if (activeGroup.contains(target)) {\n\t\n\t        activeGroup.removeWithUpdate(target);\n\t        this._resetObjectTransform(activeGroup);\n\t        target.set('active', false);\n\t\n\t        if (activeGroup.size() === 1) {\n\t          // remove group alltogether if after removal it only contains 1 object\n\t          this.discardActiveGroup(e);\n\t          // activate last remaining object\n\t          this.setActiveObject(activeGroup.item(0));\n\t          return;\n\t        }\n\t      }\n\t      else {\n\t        activeGroup.addWithUpdate(target);\n\t        this._resetObjectTransform(activeGroup);\n\t      }\n\t      this.fire('selection:created', { target: activeGroup, e: e });\n\t      activeGroup.set('active', true);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createActiveGroup: function(target, e) {\n\t\n\t      if (this._activeObject && target !== this._activeObject) {\n\t\n\t        var group = this._createGroup(target);\n\t        group.addWithUpdate();\n\t\n\t        this.setActiveGroup(group);\n\t        this._activeObject = null;\n\t\n\t        this.fire('selection:created', { target: group, e: e });\n\t      }\n\t\n\t      target.set('active', true);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} target\n\t     */\n\t    _createGroup: function(target) {\n\t\n\t      var objects = this.getObjects(),\n\t          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\n\t          groupObjects = isActiveLower\n\t            ? [ this._activeObject, target ]\n\t            : [ target, this._activeObject ];\n\t\n\t      return new fabric.Group(groupObjects, {\n\t        canvas: this\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Event} e mouse event\n\t     */\n\t    _groupSelectedObjects: function (e) {\n\t\n\t      var group = this._collectObjects();\n\t\n\t      // do not create group for 1 element only\n\t      if (group.length === 1) {\n\t        this.setActiveObject(group[0], e);\n\t      }\n\t      else if (group.length > 1) {\n\t        group = new fabric.Group(group.reverse(), {\n\t          canvas: this\n\t        });\n\t        group.addWithUpdate();\n\t        this.setActiveGroup(group, e);\n\t        group.saveCoords();\n\t        this.fire('selection:created', { target: group });\n\t        this.renderAll();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _collectObjects: function() {\n\t      var group = [ ],\n\t          currentObject,\n\t          x1 = this._groupSelector.ex,\n\t          y1 = this._groupSelector.ey,\n\t          x2 = x1 + this._groupSelector.left,\n\t          y2 = y1 + this._groupSelector.top,\n\t          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\n\t          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\n\t          isClick = x1 === x2 && y1 === y2;\n\t\n\t      for (var i = this._objects.length; i--; ) {\n\t        currentObject = this._objects[i];\n\t\n\t        if (!currentObject || !currentObject.selectable || !currentObject.visible) {\n\t          continue;\n\t        }\n\t\n\t        if (currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2) ||\n\t            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\n\t            currentObject.containsPoint(selectionX1Y1) ||\n\t            currentObject.containsPoint(selectionX2Y2)\n\t        ) {\n\t          currentObject.set('active', true);\n\t          group.push(currentObject);\n\t\n\t          // only add one object if it's a click\n\t          if (isClick) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t\n\t      return group;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _maybeGroupObjects: function(e) {\n\t      if (this.selection && this._groupSelector) {\n\t        this._groupSelectedObjects(e);\n\t      }\n\t\n\t      var activeGroup = this.getActiveGroup();\n\t      if (activeGroup) {\n\t        activeGroup.setObjectsCoords().setCoords();\n\t        activeGroup.isMoving = false;\n\t        this.setCursor(this.defaultCursor);\n\t      }\n\t\n\t      // clear selection and current transformation\n\t      this._groupSelector = null;\n\t      this._currentTransform = null;\n\t    }\n\t  });\n\t\n\t})();\n\t\n\t\n\tfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t  /**\n\t   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n\t   * @param {Object} [options] Options object\n\t   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n\t   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n\t   * @param {Number} [options.multiplier=1] Multiplier to scale by\n\t   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n\t   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n\t   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n\t   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n\t   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n\t   * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n\t   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n\t   * var dataURL = canvas.toDataURL({\n\t   *   format: 'jpeg',\n\t   *   quality: 0.8\n\t   * });\n\t   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n\t   * var dataURL = canvas.toDataURL({\n\t   *   format: 'png',\n\t   *   left: 100,\n\t   *   top: 100,\n\t   *   width: 200,\n\t   *   height: 200\n\t   * });\n\t   * @example <caption>Generate double scaled png dataURL</caption>\n\t   * var dataURL = canvas.toDataURL({\n\t   *   format: 'png',\n\t   *   multiplier: 2\n\t   * });\n\t   */\n\t  toDataURL: function (options) {\n\t    options || (options = { });\n\t\n\t    var format = options.format || 'png',\n\t        quality = options.quality || 1,\n\t        multiplier = options.multiplier || 1,\n\t        cropping = {\n\t          left: options.left,\n\t          top: options.top,\n\t          width: options.width,\n\t          height: options.height\n\t        };\n\t\n\t    if (multiplier !== 1) {\n\t      return this.__toDataURLWithMultiplier(format, quality, cropping, multiplier);\n\t    }\n\t    else {\n\t      return this.__toDataURL(format, quality, cropping);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  __toDataURL: function(format, quality, cropping) {\n\t\n\t    this.renderAll(true);\n\t\n\t    var canvasEl = this.upperCanvasEl || this.lowerCanvasEl,\n\t        croppedCanvasEl = this.__getCroppedCanvas(canvasEl, cropping);\n\t\n\t    // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n\t    if (format === 'jpg') {\n\t      format = 'jpeg';\n\t    }\n\t\n\t    var data = (fabric.StaticCanvas.supports('toDataURLWithQuality'))\n\t              ? (croppedCanvasEl || canvasEl).toDataURL('image/' + format, quality)\n\t              : (croppedCanvasEl || canvasEl).toDataURL('image/' + format);\n\t\n\t    this.contextTop && this.clearContext(this.contextTop);\n\t    this.renderAll();\n\t\n\t    if (croppedCanvasEl) {\n\t      croppedCanvasEl = null;\n\t    }\n\t\n\t    return data;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  __getCroppedCanvas: function(canvasEl, cropping) {\n\t\n\t    var croppedCanvasEl,\n\t        croppedCtx,\n\t        shouldCrop = 'left' in cropping ||\n\t                     'top' in cropping ||\n\t                     'width' in cropping ||\n\t                     'height' in cropping;\n\t\n\t    if (shouldCrop) {\n\t\n\t      croppedCanvasEl = fabric.util.createCanvasElement();\n\t      croppedCtx = croppedCanvasEl.getContext('2d');\n\t\n\t      croppedCanvasEl.width = cropping.width || this.width;\n\t      croppedCanvasEl.height = cropping.height || this.height;\n\t\n\t      croppedCtx.drawImage(canvasEl, -cropping.left || 0, -cropping.top || 0);\n\t    }\n\t\n\t    return croppedCanvasEl;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  __toDataURLWithMultiplier: function(format, quality, cropping, multiplier) {\n\t\n\t    var origWidth = this.getWidth(),\n\t        origHeight = this.getHeight(),\n\t        scaledWidth = origWidth * multiplier,\n\t        scaledHeight = origHeight * multiplier,\n\t        activeObject = this.getActiveObject(),\n\t        activeGroup = this.getActiveGroup(),\n\t\n\t        ctx = this.contextTop || this.contextContainer;\n\t\n\t    if (multiplier > 1) {\n\t      this.setWidth(scaledWidth).setHeight(scaledHeight);\n\t    }\n\t    ctx.scale(multiplier, multiplier);\n\t\n\t    if (cropping.left) {\n\t      cropping.left *= multiplier;\n\t    }\n\t    if (cropping.top) {\n\t      cropping.top *= multiplier;\n\t    }\n\t    if (cropping.width) {\n\t      cropping.width *= multiplier;\n\t    }\n\t    else if (multiplier < 1) {\n\t      cropping.width = scaledWidth;\n\t    }\n\t    if (cropping.height) {\n\t      cropping.height *= multiplier;\n\t    }\n\t    else if (multiplier < 1) {\n\t      cropping.height = scaledHeight;\n\t    }\n\t\n\t    if (activeGroup) {\n\t      // not removing group due to complications with restoring it with correct state afterwords\n\t      this._tempRemoveBordersControlsFromGroup(activeGroup);\n\t    }\n\t    else if (activeObject && this.deactivateAll) {\n\t      this.deactivateAll();\n\t    }\n\t\n\t    this.renderAll(true);\n\t\n\t    var data = this.__toDataURL(format, quality, cropping);\n\t\n\t    // restoring width, height for `renderAll` to draw\n\t    // background properly (while context is scaled)\n\t    this.width = origWidth;\n\t    this.height = origHeight;\n\t\n\t    ctx.scale(1 / multiplier,  1 / multiplier);\n\t    this.setWidth(origWidth).setHeight(origHeight);\n\t\n\t    if (activeGroup) {\n\t      this._restoreBordersControlsOnGroup(activeGroup);\n\t    }\n\t    else if (activeObject && this.setActiveObject) {\n\t      this.setActiveObject(activeObject);\n\t    }\n\t\n\t    this.contextTop && this.clearContext(this.contextTop);\n\t    this.renderAll();\n\t\n\t    return data;\n\t  },\n\t\n\t  /**\n\t   * Exports canvas element to a dataurl image (allowing to change image size via multiplier).\n\t   * @deprecated since 1.0.13\n\t   * @param {String} format (png|jpeg)\n\t   * @param {Number} multiplier\n\t   * @param {Number} quality (0..1)\n\t   * @return {String}\n\t   */\n\t  toDataURLWithMultiplier: function (format, multiplier, quality) {\n\t    return this.toDataURL({\n\t      format: format,\n\t      multiplier: multiplier,\n\t      quality: quality\n\t    });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _tempRemoveBordersControlsFromGroup: function(group) {\n\t    group.origHasControls = group.hasControls;\n\t    group.origBorderColor = group.borderColor;\n\t\n\t    group.hasControls = true;\n\t    group.borderColor = 'rgba(0,0,0,0)';\n\t\n\t    group.forEachObject(function(o) {\n\t      o.origBorderColor = o.borderColor;\n\t      o.borderColor = 'rgba(0,0,0,0)';\n\t    });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _restoreBordersControlsOnGroup: function(group) {\n\t    group.hideControls = group.origHideControls;\n\t    group.borderColor = group.origBorderColor;\n\t\n\t    group.forEachObject(function(o) {\n\t      o.borderColor = o.origBorderColor;\n\t      delete o.origBorderColor;\n\t    });\n\t  }\n\t});\n\t\n\t\n\tfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t  /**\n\t   * Populates canvas with data from the specified dataless JSON.\n\t   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\n\t   * @deprecated since 1.2.2\n\t   * @param {String|Object} json JSON string or object\n\t   * @param {Function} callback Callback, invoked when json is parsed\n\t   *                            and corresponding objects (e.g: {@link fabric.Image})\n\t   *                            are initialized\n\t   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n\t   * @return {fabric.Canvas} instance\n\t   * @chainable\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#deserialization}\n\t   */\n\t  loadFromDatalessJSON: function (json, callback, reviver) {\n\t    return this.loadFromJSON(json, callback, reviver);\n\t  },\n\t\n\t  /**\n\t   * Populates canvas with data from the specified JSON.\n\t   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n\t   * @param {String|Object} json JSON string or object\n\t   * @param {Function} callback Callback, invoked when json is parsed\n\t   *                            and corresponding objects (e.g: {@link fabric.Image})\n\t   *                            are initialized\n\t   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n\t   * @return {fabric.Canvas} instance\n\t   * @chainable\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#deserialization}\n\t   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n\t   * @example <caption>loadFromJSON</caption>\n\t   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n\t   * @example <caption>loadFromJSON with reviver</caption>\n\t   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n\t   *   // `o` = json object\n\t   *   // `object` = fabric.Object instance\n\t   *   // ... do some stuff ...\n\t   * });\n\t   */\n\t  loadFromJSON: function (json, callback, reviver) {\n\t    if (!json) {\n\t      return;\n\t    }\n\t\n\t    // serialize if it wasn't already\n\t    var serialized = (typeof json === 'string')\n\t      ? JSON.parse(json)\n\t      : json;\n\t\n\t    this.clear();\n\t\n\t    var _this = this;\n\t    this._enlivenObjects(serialized.objects, function () {\n\t      _this._setBgOverlay(serialized, callback);\n\t    }, reviver);\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Object} serialized Object with background and overlay information\n\t   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n\t   */\n\t  _setBgOverlay: function(serialized, callback) {\n\t    var _this = this,\n\t        loaded = {\n\t          backgroundColor: false,\n\t          overlayColor: false,\n\t          backgroundImage: false,\n\t          overlayImage: false\n\t        };\n\t\n\t    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n\t      callback && callback();\n\t      return;\n\t    }\n\t\n\t    var cbIfLoaded = function () {\n\t      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n\t        _this.renderAll();\n\t        callback && callback();\n\t      }\n\t    };\n\t\n\t    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\n\t    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\n\t    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\n\t    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\n\t\n\t    cbIfLoaded();\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n\t   * @param {(Object|String)} value Value to set\n\t   * @param {Object} loaded Set loaded property to true if property is set\n\t   * @param {Object} callback Callback function to invoke after property is set\n\t   */\n\t  __setBgOverlay: function(property, value, loaded, callback) {\n\t    var _this = this;\n\t\n\t    if (!value) {\n\t      loaded[property] = true;\n\t      return;\n\t    }\n\t\n\t    if (property === 'backgroundImage' || property === 'overlayImage') {\n\t      fabric.Image.fromObject(value, function(img) {\n\t        _this[property] = img;\n\t        loaded[property] = true;\n\t        callback && callback();\n\t      });\n\t    }\n\t    else {\n\t      this['set' + fabric.util.string.capitalize(property, true)](value, function() {\n\t        loaded[property] = true;\n\t        callback && callback();\n\t      });\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Array} objects\n\t   * @param {Function} callback\n\t   * @param {Function} [reviver]\n\t   */\n\t  _enlivenObjects: function (objects, callback, reviver) {\n\t    var _this = this;\n\t\n\t    if (!objects || objects.length === 0) {\n\t      callback && callback();\n\t      return;\n\t    }\n\t\n\t    var renderOnAddRemove = this.renderOnAddRemove;\n\t    this.renderOnAddRemove = false;\n\t\n\t    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n\t      enlivenedObjects.forEach(function(obj, index) {\n\t        _this.insertAt(obj, index, true);\n\t      });\n\t\n\t      _this.renderOnAddRemove = renderOnAddRemove;\n\t      callback && callback();\n\t    }, null, reviver);\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} format\n\t   * @param {Function} callback\n\t   */\n\t  _toDataURL: function (format, callback) {\n\t    this.clone(function (clone) {\n\t      callback(clone.toDataURL(format));\n\t    });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} format\n\t   * @param {Number} multiplier\n\t   * @param {Function} callback\n\t   */\n\t  _toDataURLWithMultiplier: function (format, multiplier, callback) {\n\t    this.clone(function (clone) {\n\t      callback(clone.toDataURLWithMultiplier(format, multiplier));\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Clones canvas instance\n\t   * @param {Object} [callback] Receives cloned instance as a first argument\n\t   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n\t   */\n\t  clone: function (callback, properties) {\n\t    var data = JSON.stringify(this.toJSON(properties));\n\t    this.cloneWithoutData(function(clone) {\n\t      clone.loadFromJSON(data, function() {\n\t        callback && callback(clone);\n\t      });\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Clones canvas instance without cloning existing data.\n\t   * This essentially copies canvas dimensions, clipping properties, etc.\n\t   * but leaves data empty (so that you can populate it with your own)\n\t   * @param {Object} [callback] Receives cloned instance as a first argument\n\t   */\n\t  cloneWithoutData: function(callback) {\n\t    var el = fabric.document.createElement('canvas');\n\t\n\t    el.width = this.getWidth();\n\t    el.height = this.getHeight();\n\t\n\t    var clone = new fabric.Canvas(el);\n\t    clone.clipTo = this.clipTo;\n\t    if (this.backgroundImage) {\n\t      clone.setBackgroundImage(this.backgroundImage.src, function() {\n\t        clone.renderAll();\n\t        callback && callback(clone);\n\t      });\n\t      clone.backgroundImageOpacity = this.backgroundImageOpacity;\n\t      clone.backgroundImageStretch = this.backgroundImageStretch;\n\t    }\n\t    else {\n\t      callback && callback(clone);\n\t    }\n\t  }\n\t});\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      toFixed = fabric.util.toFixed,\n\t      capitalize = fabric.util.string.capitalize,\n\t      degreesToRadians = fabric.util.degreesToRadians,\n\t      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\t\n\t  if (fabric.Object) {\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Root object class from which all 2d shape classes inherit from\n\t   * @class fabric.Object\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#objects}\n\t   * @see {@link fabric.Object#initialize} for constructor definition\n\t   *\n\t   * @fires added\n\t   * @fires removed\n\t   *\n\t   * @fires selected\n\t   * @fires modified\n\t   * @fires rotating\n\t   * @fires scaling\n\t   * @fires moving\n\t   *\n\t   * @fires mousedown\n\t   * @fires mouseup\n\t   */\n\t  fabric.Object = fabric.util.createClass(/** @lends fabric.Object.prototype */ {\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#clipTo|clipping function}\n\t     * @method getClipTo\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Function}\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#clipTo|clipping function}\n\t     * @method setClipTo\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Function} clipTo Clipping function\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#transformMatrix|transformMatrix}\n\t     * @method getTransformMatrix\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Array} transformMatrix\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#transformMatrix|transformMatrix}\n\t     * @method setTransformMatrix\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Array} transformMatrix\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#visible|visible} state\n\t     * @method getVisible\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Boolean} True if visible\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#visible|visible} state\n\t     * @method setVisible\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Boolean} value visible value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#shadow|shadow}\n\t     * @method getShadow\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Object} Shadow instance\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#stroke|stroke}\n\t     * @method getStroke\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {String} stroke value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#stroke|stroke}\n\t     * @method setStroke\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {String} value stroke value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#strokeWidth|strokeWidth}\n\t     * @method getStrokeWidth\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} strokeWidth value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#strokeWidth|strokeWidth}\n\t     * @method setStrokeWidth\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value strokeWidth value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#originX|originX}\n\t     * @method getOriginX\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {String} originX value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#originX|originX}\n\t     * @method setOriginX\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {String} value originX value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#originY|originY}\n\t     * @method getOriginY\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {String} originY value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#originY|originY}\n\t     * @method setOriginY\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {String} value originY value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#fill|fill}\n\t     * @method getFill\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {String} Fill value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#fill|fill}\n\t     * @method setFill\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {String} value Fill value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#opacity|opacity}\n\t     * @method getOpacity\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} Opacity value (0-1)\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#opacity|opacity}\n\t     * @method setOpacity\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value Opacity value (0-1)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#angle|angle} (in degrees)\n\t     * @method getAngle\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number}\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#top|top position}\n\t     * @method getTop\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} Top value (in pixels)\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#top|top position}\n\t     * @method setTop\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value Top value (in pixels)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#left|left position}\n\t     * @method getLeft\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} Left value (in pixels)\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#left|left position}\n\t     * @method setLeft\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value Left value (in pixels)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#scaleX|scaleX} value\n\t     * @method getScaleX\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} scaleX value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#scaleX|scaleX} value\n\t     * @method setScaleX\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value scaleX value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#scaleY|scaleY} value\n\t     * @method getScaleY\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Number} scaleY value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#scaleY|scaleY} value\n\t     * @method setScaleY\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Number} value scaleY value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#flipX|flipX} value\n\t     * @method getFlipX\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Boolean} flipX value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#flipX|flipX} value\n\t     * @method setFlipX\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Boolean} value flipX value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's {@link fabric.Object#flipY|flipY} value\n\t     * @method getFlipY\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Boolean} flipY value\n\t     */\n\t\n\t    /**\n\t     * Sets object's {@link fabric.Object#flipY|flipY} value\n\t     * @method setFlipY\n\t     * @memberOf fabric.Object.prototype\n\t     * @param {Boolean} value flipY value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Type of an object (rect, circle, path, etc.).\n\t     * Note that this property is meant to be read-only and not meant to be modified.\n\t     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n\t     * @type String\n\t     * @default\n\t     */\n\t    type:                     'object',\n\t\n\t    /**\n\t     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n\t     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups\n\t     * @type String\n\t     * @default\n\t     */\n\t    originX:                  'left',\n\t\n\t    /**\n\t     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n\t     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups\n\t     * @type String\n\t     * @default\n\t     */\n\t    originY:                  'top',\n\t\n\t    /**\n\t     * Top position of an object. Note that by default it's relative to object center. You can change this by setting originY={top/center/bottom}\n\t     * @type Number\n\t     * @default\n\t     */\n\t    top:                      0,\n\t\n\t    /**\n\t     * Left position of an object. Note that by default it's relative to object center. You can change this by setting originX={left/center/right}\n\t     * @type Number\n\t     * @default\n\t     */\n\t    left:                     0,\n\t\n\t    /**\n\t     * Object width\n\t     * @type Number\n\t     * @default\n\t     */\n\t    width:                    0,\n\t\n\t    /**\n\t     * Object height\n\t     * @type Number\n\t     * @default\n\t     */\n\t    height:                   0,\n\t\n\t    /**\n\t     * Object scale factor (horizontal)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    scaleX:                   1,\n\t\n\t    /**\n\t     * Object scale factor (vertical)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    scaleY:                   1,\n\t\n\t    /**\n\t     * When true, an object is rendered as flipped horizontally\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    flipX:                    false,\n\t\n\t    /**\n\t     * When true, an object is rendered as flipped vertically\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    flipY:                    false,\n\t\n\t    /**\n\t     * Opacity of an object\n\t     * @type Number\n\t     * @default\n\t     */\n\t    opacity:                  1,\n\t\n\t    /**\n\t     * Angle of rotation of an object (in degrees)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    angle:                    0,\n\t\n\t    /**\n\t     * Size of object's controlling corners (in pixels)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    cornerSize:               12,\n\t\n\t    /**\n\t     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    transparentCorners:       true,\n\t\n\t    /**\n\t     * Default cursor value used when hovering over this object on canvas\n\t     * @type String\n\t     * @default\n\t     */\n\t    hoverCursor:              null,\n\t\n\t    /**\n\t     * Padding between object and its controlling borders (in pixels)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    padding:                  0,\n\t\n\t    /**\n\t     * Color of controlling borders of an object (when it's active)\n\t     * @type String\n\t     * @default\n\t     */\n\t    borderColor:              'rgba(102,153,255,0.75)',\n\t\n\t    /**\n\t     * Color of controlling corners of an object (when it's active)\n\t     * @type String\n\t     * @default\n\t     */\n\t    cornerColor:              'rgba(102,153,255,0.5)',\n\t\n\t    /**\n\t     * When true, this object will use center point as the origin of transformation\n\t     * when being scaled via the controls.\n\t     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n\t     * @since 1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    centeredScaling:          false,\n\t\n\t    /**\n\t     * When true, this object will use center point as the origin of transformation\n\t     * when being rotated via the controls.\n\t     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n\t     * @since 1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    centeredRotation:         true,\n\t\n\t    /**\n\t     * Color of object's fill\n\t     * @type String\n\t     * @default\n\t     */\n\t    fill:                     'rgb(0,0,0)',\n\t\n\t    /**\n\t     * Fill rule used to fill an object\n\t     * accepted values are nonzero, evenodd\n\t     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n\t     * @type String\n\t     * @default\n\t     */\n\t    fillRule:                 'nonzero',\n\t\n\t    /**\n\t     * Composite rule used for canvas globalCompositeOperation\n\t     * @type String\n\t     * @default\n\t     */\n\t    globalCompositeOperation: 'source-over',\n\t\n\t    /**\n\t     * Background color of an object. Only works with text objects at the moment.\n\t     * @type String\n\t     * @default\n\t     */\n\t    backgroundColor:          '',\n\t\n\t    /**\n\t     * When defined, an object is rendered via stroke and this property specifies its color\n\t     * @type String\n\t     * @default\n\t     */\n\t    stroke:                   null,\n\t\n\t    /**\n\t     * Width of a stroke used to render this object\n\t     * @type Number\n\t     * @default\n\t     */\n\t    strokeWidth:              1,\n\t\n\t    /**\n\t     * Array specifying dash pattern of an object's stroke (stroke must be defined)\n\t     * @type Array\n\t     */\n\t    strokeDashArray:          null,\n\t\n\t    /**\n\t     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n\t     * @type String\n\t     * @default\n\t     */\n\t    strokeLineCap:            'butt',\n\t\n\t    /**\n\t     * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\n\t     * @type String\n\t     * @default\n\t     */\n\t    strokeLineJoin:           'miter',\n\t\n\t    /**\n\t     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n\t     * @type Number\n\t     * @default\n\t     */\n\t    strokeMiterLimit:         10,\n\t\n\t    /**\n\t     * Shadow object representing shadow of this shape\n\t     * @type fabric.Shadow\n\t     * @default\n\t     */\n\t    shadow:                   null,\n\t\n\t    /**\n\t     * Opacity of object's controlling borders when object is active and moving\n\t     * @type Number\n\t     * @default\n\t     */\n\t    borderOpacityWhenMoving:  0.4,\n\t\n\t    /**\n\t     * Scale factor of object's controlling borders\n\t     * @type Number\n\t     * @default\n\t     */\n\t    borderScaleFactor:        1,\n\t\n\t    /**\n\t     * Transform matrix (similar to SVG's transform matrix)\n\t     * @type Array\n\t     */\n\t    transformMatrix:          null,\n\t\n\t    /**\n\t     * Minimum allowed scale value of an object\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minScaleLimit:            0.01,\n\t\n\t    /**\n\t     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n\t     * But events still fire on it.\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    selectable:               true,\n\t\n\t    /**\n\t     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    evented:                  true,\n\t\n\t    /**\n\t     * When set to `false`, an object is not rendered on canvas\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    visible:                  true,\n\t\n\t    /**\n\t     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    hasControls:              true,\n\t\n\t    /**\n\t     * When set to `false`, object's controlling borders are not rendered\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    hasBorders:               true,\n\t\n\t    /**\n\t     * When set to `false`, object's controlling rotating point will not be visible or selectable\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    hasRotatingPoint:         true,\n\t\n\t    /**\n\t     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    rotatingPointOffset:      40,\n\t\n\t    /**\n\t     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    perPixelTargetFind:       false,\n\t\n\t    /**\n\t     * When `false`, default object's values are not included in its serialization\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    includeDefaultValues:     true,\n\t\n\t    /**\n\t     * Function that determines clipping of an object (context is passed as a first argument)\n\t     * Note that context origin is at the object's center point (not left/top corner)\n\t     * @type Function\n\t     */\n\t    clipTo:                   null,\n\t\n\t    /**\n\t     * When `true`, object horizontal movement is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockMovementX:            false,\n\t\n\t    /**\n\t     * When `true`, object vertical movement is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockMovementY:            false,\n\t\n\t    /**\n\t     * When `true`, object rotation is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockRotation:             false,\n\t\n\t    /**\n\t     * When `true`, object horizontal scaling is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockScalingX:             false,\n\t\n\t    /**\n\t     * When `true`, object vertical scaling is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockScalingY:             false,\n\t\n\t    /**\n\t     * When `true`, object non-uniform scaling is locked\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    lockUniScaling:           false,\n\t\n\t    /**\n\t     * When `true`, object cannot be flipped by scaling into negative values\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t\n\t    lockScalingFlip:          false,\n\t    /**\n\t     * List of properties to consider when checking if state\n\t     * of an object is changed (fabric.Object#hasStateChanged)\n\t     * as well as for history (undo/redo) purposes\n\t     * @type Array\n\t     */\n\t    stateProperties:  (\n\t      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\n\t      'stroke strokeWidth strokeDashArray strokeLineCap strokeLineJoin strokeMiterLimit ' +\n\t      'angle opacity fill fillRule globalCompositeOperation shadow clipTo visible backgroundColor ' +\n\t      'alignX alignY meetOrSlice'\n\t    ).split(' '),\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     */\n\t    initialize: function(options) {\n\t      if (options) {\n\t        this.setOptions(options);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initGradient: function(options) {\n\t      if (options.fill && options.fill.colorStops && !(options.fill instanceof fabric.Gradient)) {\n\t        this.set('fill', new fabric.Gradient(options.fill));\n\t      }\n\t      if (options.stroke && options.stroke.colorStops && !(options.stroke instanceof fabric.Gradient)) {\n\t        this.set('stroke', new fabric.Gradient(options.stroke));\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initPattern: function(options) {\n\t      if (options.fill && options.fill.source && !(options.fill instanceof fabric.Pattern)) {\n\t        this.set('fill', new fabric.Pattern(options.fill));\n\t      }\n\t      if (options.stroke && options.stroke.source && !(options.stroke instanceof fabric.Pattern)) {\n\t        this.set('stroke', new fabric.Pattern(options.stroke));\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initClipping: function(options) {\n\t      if (!options.clipTo || typeof options.clipTo !== 'string') {\n\t        return;\n\t      }\n\t\n\t      var functionBody = fabric.util.getFunctionBody(options.clipTo);\n\t      if (typeof functionBody !== 'undefined') {\n\t        this.clipTo = new Function('ctx', functionBody);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets object's properties from options\n\t     * @param {Object} [options] Options object\n\t     */\n\t    setOptions: function(options) {\n\t      for (var prop in options) {\n\t        this.set(prop, options[prop]);\n\t      }\n\t      this._initGradient(options);\n\t      this._initPattern(options);\n\t      this._initClipping(options);\n\t    },\n\t\n\t    /**\n\t     * Transforms context when rendering an object\n\t     * @param {CanvasRenderingContext2D} ctx Context\n\t     * @param {Boolean} fromLeft When true, context is transformed to object's top/left corner. This is used when rendering text on Node\n\t     */\n\t    transform: function(ctx, fromLeft) {\n\t      if (this.group && this.canvas.preserveObjectStacking && this.group === this.canvas._activeGroup) {\n\t        this.group.transform(ctx);\n\t      }\n\t      var center = fromLeft ? this._getLeftTopCoords() : this.getCenterPoint();\n\t      ctx.translate(center.x, center.y);\n\t      ctx.rotate(degreesToRadians(this.angle));\n\t      ctx.scale(\n\t        this.scaleX * (this.flipX ? -1 : 1),\n\t        this.scaleY * (this.flipY ? -1 : 1)\n\t      );\n\t    },\n\t\n\t    /**\n\t     * Returns an object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\t\n\t          object = {\n\t            type:                     this.type,\n\t            originX:                  this.originX,\n\t            originY:                  this.originY,\n\t            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\n\t            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\n\t            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\n\t            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\n\t            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\n\t            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\n\t            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n\t            strokeDashArray:          this.strokeDashArray,\n\t            strokeLineCap:            this.strokeLineCap,\n\t            strokeLineJoin:           this.strokeLineJoin,\n\t            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n\t            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n\t            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n\t            angle:                    toFixed(this.getAngle(), NUM_FRACTION_DIGITS),\n\t            flipX:                    this.flipX,\n\t            flipY:                    this.flipY,\n\t            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\n\t            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\n\t            visible:                  this.visible,\n\t            clipTo:                   this.clipTo && String(this.clipTo),\n\t            backgroundColor:          this.backgroundColor,\n\t            fillRule:                 this.fillRule,\n\t            globalCompositeOperation: this.globalCompositeOperation,\n\t            transformMatrix:          this.transformMatrix\n\t          };\n\t\n\t      if (!this.includeDefaultValues) {\n\t        object = this._removeDefaultValues(object);\n\t      }\n\t\n\t      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\t\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Returns (dataless) object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toDatalessObject: function(propertiesToInclude) {\n\t      // will be overwritten by subclasses\n\t      return this.toObject(propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} object\n\t     */\n\t    _removeDefaultValues: function(object) {\n\t      var prototype = fabric.util.getKlass(object.type).prototype,\n\t          stateProperties = prototype.stateProperties;\n\t\n\t      stateProperties.forEach(function(prop) {\n\t        if (object[prop] === prototype[prop]) {\n\t          delete object[prop];\n\t        }\n\t        var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\n\t                      Object.prototype.toString.call(prototype[prop]) === '[object Array]';\n\t\n\t        // basically a check for [] === []\n\t        if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\n\t          delete object[prop];\n\t        }\n\t      });\n\t\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Returns a string representation of an instance\n\t     * @return {String}\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.' + capitalize(this.type) + '>';\n\t    },\n\t\n\t    /**\n\t     * Basic getter\n\t     * @param {String} property Property name\n\t     * @return {Any} value of a property\n\t     */\n\t    get: function(property) {\n\t      return this[property];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setObject: function(obj) {\n\t      for (var prop in obj) {\n\t        this._set(prop, obj[prop]);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n\t     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n\t     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    set: function(key, value) {\n\t      if (typeof key === 'object') {\n\t        this._setObject(key);\n\t      }\n\t      else {\n\t        if (typeof value === 'function' && key !== 'clipTo') {\n\t          this._set(key, value(this.get(key)));\n\t        }\n\t        else {\n\t          this._set(key, value);\n\t        }\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     * @return {fabric.Object} thisArg\n\t     */\n\t    _set: function(key, value) {\n\t      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY');\n\t\n\t      if (shouldConstrainValue) {\n\t        value = this._constrainScale(value);\n\t      }\n\t      if (key === 'scaleX' && value < 0) {\n\t        this.flipX = !this.flipX;\n\t        value *= -1;\n\t      }\n\t      else if (key === 'scaleY' && value < 0) {\n\t        this.flipY = !this.flipY;\n\t        value *= -1;\n\t      }\n\t      else if (key === 'width' || key === 'height') {\n\t        this.minScaleLimit = toFixed(Math.min(0.1, 1/Math.max(this.width, this.height)), 2);\n\t      }\n\t      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\n\t        value = new fabric.Shadow(value);\n\t      }\n\t\n\t      this[key] = value;\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * This callback function is called by the parent group of an object every\n\t     * time a non-delegated property changes on the group. It is passed the key\n\t     * and value as parameters. Not adding in this function's signature to avoid\n\t     * Travis build error about unused variables.\n\t     */\n\t    setOnGroup: function() {\n\t      // implemented by sub-classes, as needed.\n\t    },\n\t\n\t    /**\n\t     * Toggles specified property from `true` to `false` or from `false` to `true`\n\t     * @param {String} property Property to toggle\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    toggle: function(property) {\n\t      var value = this.get(property);\n\t      if (typeof value === 'boolean') {\n\t        this.set(property, !value);\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets sourcePath of an object\n\t     * @param {String} value Value to set sourcePath to\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setSourcePath: function(value) {\n\t      this.sourcePath = value;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Retrieves viewportTransform from Object's canvas if possible\n\t     * @method getViewportTransform\n\t     * @memberOf fabric.Object.prototype\n\t     * @return {Boolean} flipY value // TODO\n\t     */\n\t    getViewportTransform: function() {\n\t      if (this.canvas && this.canvas.viewportTransform) {\n\t        return this.canvas.viewportTransform;\n\t      }\n\t      return [1, 0, 0, 1, 0, 0];\n\t    },\n\t\n\t    /**\n\t     * Renders an object on a specified context\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    render: function(ctx, noTransform) {\n\t      // do not render if width/height are zeros or object is not visible\n\t      if ((this.width === 0 && this.height === 0) || !this.visible) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      //setup fill rule for current object\n\t      this._setupCompositeOperation(ctx);\n\t      if (!noTransform) {\n\t        this.transform(ctx);\n\t      }\n\t      this._setStrokeStyles(ctx);\n\t      this._setFillStyles(ctx);\n\t      if (this.transformMatrix) {\n\t        ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      this._setOpacity(ctx);\n\t      this._setShadow(ctx);\n\t      this.clipTo && fabric.util.clipContext(this, ctx);\n\t      this._render(ctx, noTransform);\n\t      this.clipTo && ctx.restore();\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _setOpacity: function(ctx) {\n\t      if (this.group) {\n\t        this.group._setOpacity(ctx);\n\t      }\n\t      ctx.globalAlpha *= this.opacity;\n\t    },\n\t\n\t    _setStrokeStyles: function(ctx) {\n\t      if (this.stroke) {\n\t        ctx.lineWidth = this.strokeWidth;\n\t        ctx.lineCap = this.strokeLineCap;\n\t        ctx.lineJoin = this.strokeLineJoin;\n\t        ctx.miterLimit = this.strokeMiterLimit;\n\t        ctx.strokeStyle = this.stroke.toLive\n\t          ? this.stroke.toLive(ctx, this)\n\t          : this.stroke;\n\t      }\n\t    },\n\t\n\t    _setFillStyles: function(ctx) {\n\t      if (this.fill) {\n\t        ctx.fillStyle = this.fill.toLive\n\t          ? this.fill.toLive(ctx, this)\n\t          : this.fill;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Renders controls and borders for the object\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    _renderControls: function(ctx, noTransform) {\n\t      if (!this.active || noTransform) {\n\t        return;\n\t      }\n\t      var vpt = this.getViewportTransform();\n\t      ctx.save();\n\t      var center;\n\t      if (this.group) {\n\t        center = fabric.util.transformPoint(this.group.getCenterPoint(), vpt);\n\t        ctx.translate(center.x, center.y);\n\t        ctx.rotate(degreesToRadians(this.group.angle));\n\t      }\n\t      center = fabric.util.transformPoint(this.getCenterPoint(), vpt, null != this.group);\n\t      if (this.group) {\n\t        center.x *= this.group.scaleX;\n\t        center.y *= this.group.scaleY;\n\t      }\n\t      ctx.translate(center.x, center.y);\n\t      ctx.rotate(degreesToRadians(this.angle));\n\t      this.drawBorders(ctx);\n\t      this.drawControls(ctx);\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _setShadow: function(ctx) {\n\t      if (!this.shadow) {\n\t        return;\n\t      }\n\t\n\t      var multX = (this.canvas && this.canvas.viewportTransform[0]) || 1,\n\t          multY = (this.canvas && this.canvas.viewportTransform[3]) || 1;\n\t\n\t      ctx.shadowColor = this.shadow.color;\n\t      ctx.shadowBlur = this.shadow.blur * (multX + multY) * (this.scaleX + this.scaleY) / 4;\n\t      ctx.shadowOffsetX = this.shadow.offsetX * multX * this.scaleX;\n\t      ctx.shadowOffsetY = this.shadow.offsetY * multY * this.scaleY;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _removeShadow: function(ctx) {\n\t      if (!this.shadow) {\n\t        return;\n\t      }\n\t\n\t      ctx.shadowColor = '';\n\t      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderFill: function(ctx) {\n\t      if (!this.fill) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      if (this.fill.gradientTransform) {\n\t        var g = this.fill.gradientTransform;\n\t        ctx.transform.apply(ctx, g);\n\t      }\n\t      if (this.fill.toLive) {\n\t        ctx.translate(\n\t          -this.width / 2 + this.fill.offsetX || 0,\n\t          -this.height / 2 + this.fill.offsetY || 0);\n\t      }\n\t      if (this.fillRule === 'evenodd') {\n\t        ctx.fill('evenodd');\n\t      }\n\t      else {\n\t        ctx.fill();\n\t      }\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderStroke: function(ctx) {\n\t      if (!this.stroke || this.strokeWidth === 0) {\n\t        return;\n\t      }\n\t\n\t      if (this.shadow && !this.shadow.affectStroke) {\n\t        this._removeShadow(ctx);\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      if (this.strokeDashArray) {\n\t        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n\t        if (1 & this.strokeDashArray.length) {\n\t          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);\n\t        }\n\t        if (supportsLineDash) {\n\t          ctx.setLineDash(this.strokeDashArray);\n\t          this._stroke && this._stroke(ctx);\n\t        }\n\t        else {\n\t          this._renderDashedStroke && this._renderDashedStroke(ctx);\n\t        }\n\t        ctx.stroke();\n\t      }\n\t      else {\n\t        if (this.stroke.gradientTransform) {\n\t          var g = this.stroke.gradientTransform;\n\t          ctx.transform.apply(ctx, g);\n\t        }\n\t        this._stroke ? this._stroke(ctx) : ctx.stroke();\n\t      }\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Clones an instance\n\t     * @param {Function} callback Callback is invoked with a clone as a first argument\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {fabric.Object} clone of an instance\n\t     */\n\t    clone: function(callback, propertiesToInclude) {\n\t      if (this.constructor.fromObject) {\n\t        return this.constructor.fromObject(this.toObject(propertiesToInclude), callback);\n\t      }\n\t      return new fabric.Object(this.toObject(propertiesToInclude));\n\t    },\n\t\n\t    /**\n\t     * Creates an instance of fabric.Image out of an object\n\t     * @param {Function} callback callback, invoked with an instance as a first argument\n\t     * @return {fabric.Object} thisArg\n\t     */\n\t    cloneAsImage: function(callback) {\n\t      var dataUrl = this.toDataURL();\n\t      fabric.util.loadImage(dataUrl, function(img) {\n\t        if (callback) {\n\t          callback(new fabric.Image(img));\n\t        }\n\t      });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Converts an object into a data-url-like string\n\t     * @param {Object} options Options object\n\t     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n\t     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n\t     * @param {Number} [options.multiplier=1] Multiplier to scale by\n\t     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n\t     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n\t     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n\t     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n\t     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n\t     */\n\t    toDataURL: function(options) {\n\t      options || (options = { });\n\t\n\t      var el = fabric.util.createCanvasElement(),\n\t          boundingRect = this.getBoundingRect();\n\t\n\t      el.width = boundingRect.width;\n\t      el.height = boundingRect.height;\n\t\n\t      fabric.util.wrapElement(el, 'div');\n\t      var canvas = new fabric.StaticCanvas(el);\n\t\n\t      // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n\t      if (options.format === 'jpg') {\n\t        options.format = 'jpeg';\n\t      }\n\t\n\t      if (options.format === 'jpeg') {\n\t        canvas.backgroundColor = '#fff';\n\t      }\n\t\n\t      var origParams = {\n\t        active: this.get('active'),\n\t        left: this.getLeft(),\n\t        top: this.getTop()\n\t      };\n\t\n\t      this.set('active', false);\n\t      this.setPositionByOrigin(new fabric.Point(el.width / 2, el.height / 2), 'center', 'center');\n\t\n\t      var originalCanvas = this.canvas;\n\t      canvas.add(this);\n\t      var data = canvas.toDataURL(options);\n\t\n\t      this.set(origParams).setCoords();\n\t      this.canvas = originalCanvas;\n\t\n\t      canvas.dispose();\n\t      canvas = null;\n\t\n\t      return data;\n\t    },\n\t\n\t    /**\n\t     * Returns true if specified type is identical to the type of an instance\n\t     * @param {String} type Type to check against\n\t     * @return {Boolean}\n\t     */\n\t    isType: function(type) {\n\t      return this.type === type;\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return 0;\n\t    },\n\t\n\t    /**\n\t     * Returns a JSON representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} JSON\n\t     */\n\t    toJSON: function(propertiesToInclude) {\n\t      // delegate, not alias\n\t      return this.toObject(propertiesToInclude);\n\t    },\n\t\n\t    /**\n\t     * Sets gradient (fill or stroke) of an object\n\t     * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\n\t     * @param {String} property Property name 'stroke' or 'fill'\n\t     * @param {Object} [options] Options object\n\t     * @param {String} [options.type] Type of gradient 'radial' or 'linear'\n\t     * @param {Number} [options.x1=0] x-coordinate of start point\n\t     * @param {Number} [options.y1=0] y-coordinate of start point\n\t     * @param {Number} [options.x2=0] x-coordinate of end point\n\t     * @param {Number} [options.y2=0] y-coordinate of end point\n\t     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\n\t     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\n\t     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\n\t     * @example <caption>Set linear gradient</caption>\n\t     * object.setGradient('fill', {\n\t     *   type: 'linear',\n\t     *   x1: -object.width / 2,\n\t     *   y1: 0,\n\t     *   x2: object.width / 2,\n\t     *   y2: 0,\n\t     *   colorStops: {\n\t     *     0: 'red',\n\t     *     0.5: '#005555',\n\t     *     1: 'rgba(0,0,255,0.5)'\n\t     *   }\n\t     * });\n\t     * canvas.renderAll();\n\t     * @example <caption>Set radial gradient</caption>\n\t     * object.setGradient('fill', {\n\t     *   type: 'radial',\n\t     *   x1: 0,\n\t     *   y1: 0,\n\t     *   x2: 0,\n\t     *   y2: 0,\n\t     *   r1: object.width / 2,\n\t     *   r2: 10,\n\t     *   colorStops: {\n\t     *     0: 'red',\n\t     *     0.5: '#005555',\n\t     *     1: 'rgba(0,0,255,0.5)'\n\t     *   }\n\t     * });\n\t     * canvas.renderAll();\n\t     */\n\t    setGradient: function(property, options) {\n\t      options || (options = { });\n\t\n\t      var gradient = { colorStops: [] };\n\t\n\t      gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\n\t      gradient.coords = {\n\t        x1: options.x1,\n\t        y1: options.y1,\n\t        x2: options.x2,\n\t        y2: options.y2\n\t      };\n\t\n\t      if (options.r1 || options.r2) {\n\t        gradient.coords.r1 = options.r1;\n\t        gradient.coords.r2 = options.r2;\n\t      }\n\t\n\t      for (var position in options.colorStops) {\n\t        var color = new fabric.Color(options.colorStops[position]);\n\t        gradient.colorStops.push({\n\t          offset: position,\n\t          color: color.toRgb(),\n\t          opacity: color.getAlpha()\n\t        });\n\t      }\n\t\n\t      return this.set(property, fabric.Gradient.forObject(this, gradient));\n\t    },\n\t\n\t    /**\n\t     * Sets pattern fill of an object\n\t     * @param {Object} options Options object\n\t     * @param {(String|HTMLImageElement)} options.source Pattern source\n\t     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n\t     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\n\t     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\n\t     * @example <caption>Set pattern</caption>\n\t     * fabric.util.loadImage('http://fabricjs.com/assets/escheresque_ste.png', function(img) {\n\t     *   object.setPatternFill({\n\t     *     source: img,\n\t     *     repeat: 'repeat'\n\t     *   });\n\t     *   canvas.renderAll();\n\t     * });\n\t     */\n\t    setPatternFill: function(options) {\n\t      return this.set('fill', new fabric.Pattern(options));\n\t    },\n\t\n\t    /**\n\t     * Sets {@link fabric.Object#shadow|shadow} of an object\n\t     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n\t     * @param {String} [options.color=rgb(0,0,0)] Shadow color\n\t     * @param {Number} [options.blur=0] Shadow blur\n\t     * @param {Number} [options.offsetX=0] Shadow horizontal offset\n\t     * @param {Number} [options.offsetY=0] Shadow vertical offset\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\n\t     * @example <caption>Set shadow with string notation</caption>\n\t     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\n\t     * canvas.renderAll();\n\t     * @example <caption>Set shadow with object notation</caption>\n\t     * object.setShadow({\n\t     *   color: 'red',\n\t     *   blur: 10,\n\t     *   offsetX: 20,\n\t     *   offsetY: 20\n\t     * });\n\t     * canvas.renderAll();\n\t     */\n\t    setShadow: function(options) {\n\t      return this.set('shadow', options ? new fabric.Shadow(options) : null);\n\t    },\n\t\n\t    /**\n\t     * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\n\t     * @param {String} color Color value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setColor: function(color) {\n\t      this.set('fill', color);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets \"angle\" of an instance\n\t     * @param {Number} angle Angle value (in degrees)\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setAngle: function(angle) {\n\t      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\n\t\n\t      if (shouldCenterOrigin) {\n\t        this._setOriginToCenter();\n\t      }\n\t\n\t      this.set('angle', angle);\n\t\n\t      if (shouldCenterOrigin) {\n\t        this._resetOrigin();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object horizontally on canvas to which it was added last.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    centerH: function () {\n\t      this.canvas.centerObjectH(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object vertically on canvas to which it was added last.\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    centerV: function () {\n\t      this.canvas.centerObjectV(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Centers object vertically and horizontally on canvas to which is was added last\n\t     * You might need to call `setCoords` on an object after centering, to update controls area.\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    center: function () {\n\t      this.canvas.centerObject(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Removes object from canvas to which it was added last\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    remove: function() {\n\t      this.canvas.remove(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns coordinates of a pointer relative to an object\n\t     * @param {Event} e Event to operate upon\n\t     * @param {Object} [pointer] Pointer to operate upon (instead of event)\n\t     * @return {Object} Coordinates of a pointer (x, y)\n\t     */\n\t    getLocalPointer: function(e, pointer) {\n\t      pointer = pointer || this.canvas.getPointer(e);\n\t      var pClicked = new fabric.Point(pointer.x, pointer.y),\n\t          objectLeftTop = this._getLeftTopCoords();\n\t      if (this.angle) {\n\t        pClicked = fabric.util.rotatePoint(\n\t          pClicked, objectLeftTop, fabric.util.degreesToRadians(-this.angle));\n\t      }\n\t      return {\n\t        x: pClicked.x - objectLeftTop.x,\n\t        y: pClicked.y - objectLeftTop.y\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Sets canvas globalCompositeOperation for specific object\n\t     * custom composition operation for the particular object can be specifed using globalCompositeOperation property\n\t     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n\t     */\n\t    _setupCompositeOperation: function (ctx) {\n\t      if (this.globalCompositeOperation) {\n\t        ctx.globalCompositeOperation = this.globalCompositeOperation;\n\t      }\n\t    }\n\t  });\n\t\n\t  fabric.util.createAccessors(fabric.Object);\n\t\n\t  /**\n\t   * Alias for {@link fabric.Object.prototype.setAngle}\n\t   * @alias rotate -> setAngle\n\t   * @memberOf fabric.Object\n\t   */\n\t  fabric.Object.prototype.rotate = fabric.Object.prototype.setAngle;\n\t\n\t  extend(fabric.Object.prototype, fabric.Observable);\n\t\n\t  /**\n\t   * Defines the number of fraction digits to use when serializing object values.\n\t   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n\t   * @static\n\t   * @memberOf fabric.Object\n\t   * @constant\n\t   * @type Number\n\t   */\n\t  fabric.Object.NUM_FRACTION_DIGITS = 2;\n\t\n\t  /**\n\t   * Unique id used internally when creating SVG elements\n\t   * @static\n\t   * @memberOf fabric.Object\n\t   * @type Number\n\t   */\n\t  fabric.Object.__uid = 0;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  var degreesToRadians = fabric.util.degreesToRadians,\n\t      originXOffset = {\n\t        left: -0.5,\n\t        center: 0,\n\t        right: 0.5\n\t      },\n\t      originYOffset = {\n\t        top: -0.5,\n\t        center: 0,\n\t        bottom: 0.5\n\t      };\n\t\n\t  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t    /**\n\t     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n\t     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n\t     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n\t      var x = point.x,\n\t          y = point.y,\n\t          offsetX = originXOffset[toOriginX] - originXOffset[fromOriginX],\n\t          offsetY = originYOffset[toOriginY] - originYOffset[fromOriginY],\n\t          dim;\n\t      if (offsetX || offsetY) {\n\t        dim = this._getTransformedDimensions();\n\t        x = point.x + offsetX * dim.x;\n\t        y = point.y + offsetY * dim.y;\n\t      }\n\t      return new fabric.Point(x, y);\n\t    },\n\t\n\t    /**\n\t     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n\t     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    translateToCenterPoint: function(point, originX, originY) {\n\t      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\n\t      if (this.angle) {\n\t        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n\t      }\n\t      return p;\n\t    },\n\t\n\t    /**\n\t     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n\t     * @param {fabric.Point} center The point which corresponds to center of the object\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    translateToOriginPoint: function(center, originX, originY) {\n\t      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n\t      if (this.angle) {\n\t        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n\t      }\n\t      return p;\n\t    },\n\t\n\t    /**\n\t     * Returns the real center coordinates of the object\n\t     * @return {fabric.Point}\n\t     */\n\t    getCenterPoint: function() {\n\t      var leftTop = new fabric.Point(this.left, this.top);\n\t      return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n\t    },\n\t\n\t    /**\n\t     * Returns the coordinates of the object based on center coordinates\n\t     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n\t     * @return {fabric.Point}\n\t     */\n\t    // getOriginPoint: function(center) {\n\t    //   return this.translateToOriginPoint(center, this.originX, this.originY);\n\t    // },\n\t\n\t    /**\n\t     * Returns the coordinates of the object as if it has a different origin\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    getPointByOrigin: function(originX, originY) {\n\t      var center = this.getCenterPoint();\n\t      return this.translateToOriginPoint(center, originX, originY);\n\t    },\n\t\n\t    /**\n\t     * Returns the point in local coordinates\n\t     * @param {fabric.Point} point The point relative to the global coordinate system\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {fabric.Point}\n\t     */\n\t    toLocalPoint: function(point, originX, originY) {\n\t      var center = this.getCenterPoint(),\n\t          p, p2;\n\t\n\t      if (originX && originY) {\n\t        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n\t      }\n\t      else {\n\t        p = new fabric.Point(this.left, this.top);\n\t      }\n\t\n\t      p2 = new fabric.Point(point.x, point.y);\n\t      if (this.angle) {\n\t        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n\t      }\n\t      return p2.subtractEquals(p);\n\t    },\n\t\n\t    /**\n\t     * Returns the point in global coordinates\n\t     * @param {fabric.Point} The point relative to the local coordinate system\n\t     * @return {fabric.Point}\n\t     */\n\t    // toGlobalPoint: function(point) {\n\t    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n\t    // },\n\t\n\t    /**\n\t     * Sets the position of the object taking into consideration the object's origin\n\t     * @param {fabric.Point} pos The new position of the object\n\t     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n\t     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n\t     * @return {void}\n\t     */\n\t    setPositionByOrigin: function(pos, originX, originY) {\n\t      var center = this.translateToCenterPoint(pos, originX, originY),\n\t          position = this.translateToOriginPoint(center, this.originX, this.originY);\n\t\n\t      this.set('left', position.x);\n\t      this.set('top', position.y);\n\t    },\n\t\n\t    /**\n\t     * @param {String} to One of 'left', 'center', 'right'\n\t     */\n\t    adjustPosition: function(to) {\n\t      var angle = degreesToRadians(this.angle),\n\t          hypotFull = this.getWidth(),\n\t          xFull = Math.cos(angle) * hypotFull,\n\t          yFull = Math.sin(angle) * hypotFull;\n\t\n\t      //TODO: this function does not consider mixed situation like top, center.\n\t      this.left += xFull * (originXOffset[to] - originXOffset[this.originX]);\n\t      this.top += yFull * (originXOffset[to] - originXOffset[this.originX]);\n\t\n\t      this.setCoords();\n\t      this.originX = to;\n\t    },\n\t\n\t    /**\n\t     * Sets the origin/position of the object to it's center point\n\t     * @private\n\t     * @return {void}\n\t     */\n\t    _setOriginToCenter: function() {\n\t      this._originalOriginX = this.originX;\n\t      this._originalOriginY = this.originY;\n\t\n\t      var center = this.getCenterPoint();\n\t\n\t      this.originX = 'center';\n\t      this.originY = 'center';\n\t\n\t      this.left = center.x;\n\t      this.top = center.y;\n\t    },\n\t\n\t    /**\n\t     * Resets the origin/position of the object to it's original origin\n\t     * @private\n\t     * @return {void}\n\t     */\n\t    _resetOrigin: function() {\n\t      var originPoint = this.translateToOriginPoint(\n\t        this.getCenterPoint(),\n\t        this._originalOriginX,\n\t        this._originalOriginY);\n\t\n\t      this.originX = this._originalOriginX;\n\t      this.originY = this._originalOriginY;\n\t\n\t      this.left = originPoint.x;\n\t      this.top = originPoint.y;\n\t\n\t      this._originalOriginX = null;\n\t      this._originalOriginY = null;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getLeftTopCoords: function() {\n\t      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\n\t    }\n\t  });\n\t\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var degreesToRadians = fabric.util.degreesToRadians;\n\t\n\t  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t    /**\n\t     * Object containing coordinates of object's controls\n\t     * @type Object\n\t     * @default\n\t     */\n\t    oCoords: null,\n\t\n\t    /**\n\t     * Checks if object intersects with an area formed by 2 points\n\t     * @param {Object} pointTL top-left point of area\n\t     * @param {Object} pointBR bottom-right point of area\n\t     * @return {Boolean} true if object intersects with an area formed by 2 points\n\t     */\n\t    intersectsWithRect: function(pointTL, pointBR) {\n\t      var oCoords = this.oCoords,\n\t          tl = new fabric.Point(oCoords.tl.x, oCoords.tl.y),\n\t          tr = new fabric.Point(oCoords.tr.x, oCoords.tr.y),\n\t          bl = new fabric.Point(oCoords.bl.x, oCoords.bl.y),\n\t          br = new fabric.Point(oCoords.br.x, oCoords.br.y),\n\t          intersection = fabric.Intersection.intersectPolygonRectangle(\n\t            [tl, tr, br, bl],\n\t            pointTL,\n\t            pointBR\n\t          );\n\t      return intersection.status === 'Intersection';\n\t    },\n\t\n\t    /**\n\t     * Checks if object intersects with another object\n\t     * @param {Object} other Object to test\n\t     * @return {Boolean} true if object intersects with another object\n\t     */\n\t    intersectsWithObject: function(other) {\n\t      // extracts coords\n\t      function getCoords(oCoords) {\n\t        return {\n\t          tl: new fabric.Point(oCoords.tl.x, oCoords.tl.y),\n\t          tr: new fabric.Point(oCoords.tr.x, oCoords.tr.y),\n\t          bl: new fabric.Point(oCoords.bl.x, oCoords.bl.y),\n\t          br: new fabric.Point(oCoords.br.x, oCoords.br.y)\n\t        };\n\t      }\n\t      var thisCoords = getCoords(this.oCoords),\n\t          otherCoords = getCoords(other.oCoords),\n\t          intersection = fabric.Intersection.intersectPolygonPolygon(\n\t            [thisCoords.tl, thisCoords.tr, thisCoords.br, thisCoords.bl],\n\t            [otherCoords.tl, otherCoords.tr, otherCoords.br, otherCoords.bl]\n\t          );\n\t\n\t      return intersection.status === 'Intersection';\n\t    },\n\t\n\t    /**\n\t     * Checks if object is fully contained within area of another object\n\t     * @param {Object} other Object to test\n\t     * @return {Boolean} true if object is fully contained within area of another object\n\t     */\n\t    isContainedWithinObject: function(other) {\n\t      var boundingRect = other.getBoundingRect(),\n\t          point1 = new fabric.Point(boundingRect.left, boundingRect.top),\n\t          point2 = new fabric.Point(boundingRect.left + boundingRect.width, boundingRect.top + boundingRect.height);\n\t\n\t      return this.isContainedWithinRect(point1, point2);\n\t    },\n\t\n\t    /**\n\t     * Checks if object is fully contained within area formed by 2 points\n\t     * @param {Object} pointTL top-left point of area\n\t     * @param {Object} pointBR bottom-right point of area\n\t     * @return {Boolean} true if object is fully contained within area formed by 2 points\n\t     */\n\t    isContainedWithinRect: function(pointTL, pointBR) {\n\t      var boundingRect = this.getBoundingRect();\n\t\n\t      return (\n\t        boundingRect.left >= pointTL.x &&\n\t        boundingRect.left + boundingRect.width <= pointBR.x &&\n\t        boundingRect.top >= pointTL.y &&\n\t        boundingRect.top + boundingRect.height <= pointBR.y\n\t      );\n\t    },\n\t\n\t    /**\n\t     * Checks if point is inside the object\n\t     * @param {fabric.Point} point Point to check against\n\t     * @return {Boolean} true if point is inside the object\n\t     */\n\t    containsPoint: function(point) {\n\t      var lines = this._getImageLines(this.oCoords),\n\t          xPoints = this._findCrossPoints(point, lines);\n\t\n\t      // if xPoints is odd then point is inside the object\n\t      return (xPoints !== 0 && xPoints % 2 === 1);\n\t    },\n\t\n\t    /**\n\t     * Method that returns an object with the object edges in it, given the coordinates of the corners\n\t     * @private\n\t     * @param {Object} oCoords Coordinates of the object corners\n\t     */\n\t    _getImageLines: function(oCoords) {\n\t      return {\n\t        topline: {\n\t          o: oCoords.tl,\n\t          d: oCoords.tr\n\t        },\n\t        rightline: {\n\t          o: oCoords.tr,\n\t          d: oCoords.br\n\t        },\n\t        bottomline: {\n\t          o: oCoords.br,\n\t          d: oCoords.bl\n\t        },\n\t        leftline: {\n\t          o: oCoords.bl,\n\t          d: oCoords.tl\n\t        }\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Helper method to determine how many cross points are between the 4 object edges\n\t     * and the horizontal line determined by a point on canvas\n\t     * @private\n\t     * @param {fabric.Point} point Point to check\n\t     * @param {Object} oCoords Coordinates of the object being evaluated\n\t     */\n\t    _findCrossPoints: function(point, oCoords) {\n\t      var b1, b2, a1, a2, xi, yi,\n\t          xcount = 0,\n\t          iLine;\n\t\n\t      for (var lineKey in oCoords) {\n\t        iLine = oCoords[lineKey];\n\t        // optimisation 1: line below point. no cross\n\t        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\n\t          continue;\n\t        }\n\t        // optimisation 2: line above point. no cross\n\t        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\n\t          continue;\n\t        }\n\t        // optimisation 3: vertical line case\n\t        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\n\t          xi = iLine.o.x;\n\t          yi = point.y;\n\t        }\n\t        // calculate the intersection point\n\t        else {\n\t          b1 = 0;\n\t          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n\t          a1 = point.y - b1 * point.x;\n\t          a2 = iLine.o.y - b2 * iLine.o.x;\n\t\n\t          xi = - (a1 - a2) / (b1 - b2);\n\t          yi = a1 + b1 * xi;\n\t        }\n\t        // dont count xi < point.x cases\n\t        if (xi >= point.x) {\n\t          xcount += 1;\n\t        }\n\t        // optimisation 4: specific for square images\n\t        if (xcount === 2) {\n\t          break;\n\t        }\n\t      }\n\t      return xcount;\n\t    },\n\t\n\t    /**\n\t     * Returns width of an object's bounding rectangle\n\t     * @deprecated since 1.0.4\n\t     * @return {Number} width value\n\t     */\n\t    getBoundingRectWidth: function() {\n\t      return this.getBoundingRect().width;\n\t    },\n\t\n\t    /**\n\t     * Returns height of an object's bounding rectangle\n\t     * @deprecated since 1.0.4\n\t     * @return {Number} height value\n\t     */\n\t    getBoundingRectHeight: function() {\n\t      return this.getBoundingRect().height;\n\t    },\n\t\n\t    /**\n\t     * Returns coordinates of object's bounding rectangle (left, top, width, height)\n\t     * @return {Object} Object with left, top, width, height properties\n\t     */\n\t    getBoundingRect: function() {\n\t      this.oCoords || this.setCoords();\n\t\n\t      var xCoords = [this.oCoords.tl.x, this.oCoords.tr.x, this.oCoords.br.x, this.oCoords.bl.x],\n\t          minX = fabric.util.array.min(xCoords),\n\t          maxX = fabric.util.array.max(xCoords),\n\t          width = Math.abs(minX - maxX),\n\t\n\t          yCoords = [this.oCoords.tl.y, this.oCoords.tr.y, this.oCoords.br.y, this.oCoords.bl.y],\n\t          minY = fabric.util.array.min(yCoords),\n\t          maxY = fabric.util.array.max(yCoords),\n\t          height = Math.abs(minY - maxY);\n\t\n\t      return {\n\t        left: minX,\n\t        top: minY,\n\t        width: width,\n\t        height: height\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Returns width of an object\n\t     * @return {Number} width value\n\t     */\n\t    getWidth: function() {\n\t      return this.width * this.scaleX;\n\t    },\n\t\n\t    /**\n\t     * Returns height of an object\n\t     * @return {Number} height value\n\t     */\n\t    getHeight: function() {\n\t      return this.height * this.scaleY;\n\t    },\n\t\n\t    /**\n\t     * Makes sure the scale is valid and modifies it if necessary\n\t     * @private\n\t     * @param {Number} value\n\t     * @return {Number}\n\t     */\n\t    _constrainScale: function(value) {\n\t      if (Math.abs(value) < this.minScaleLimit) {\n\t        if (value < 0) {\n\t          return -this.minScaleLimit;\n\t        }\n\t        else {\n\t          return this.minScaleLimit;\n\t        }\n\t      }\n\t      return value;\n\t    },\n\t\n\t    /**\n\t     * Scales an object (equally by x and y)\n\t     * @param {Number} value Scale factor\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    scale: function(value) {\n\t      value = this._constrainScale(value);\n\t\n\t      if (value < 0) {\n\t        this.flipX = !this.flipX;\n\t        this.flipY = !this.flipY;\n\t        value *= -1;\n\t      }\n\t\n\t      this.scaleX = value;\n\t      this.scaleY = value;\n\t      this.setCoords();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n\t     * @param {Number} value New width value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    scaleToWidth: function(value) {\n\t      // adjust to bounding rect factor so that rotated shapes would fit as well\n\t      var boundingRectFactor = this.getBoundingRectWidth() / this.getWidth();\n\t      return this.scale(value / this.width / boundingRectFactor);\n\t    },\n\t\n\t    /**\n\t     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n\t     * @param {Number} value New height value\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    scaleToHeight: function(value) {\n\t      // adjust to bounding rect factor so that rotated shapes would fit as well\n\t      var boundingRectFactor = this.getBoundingRectHeight() / this.getHeight();\n\t      return this.scale(value / this.height / boundingRectFactor);\n\t    },\n\t\n\t    /**\n\t     * Sets corner position coordinates based on current angle, width and height\n\t     * See https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setCoords: function() {\n\t      var theta = degreesToRadians(this.angle),\n\t          vpt = this.getViewportTransform(),\n\t          dim = this._calculateCurrentDimensions(true),\n\t          currentWidth = dim.x, currentHeight = dim.y;\n\t\n\t      // If width is negative, make postive. Fixes path selection issue\n\t      if (currentWidth < 0) {\n\t        currentWidth = Math.abs(currentWidth);\n\t      }\n\t\n\t      var sinTh = Math.sin(theta),\n\t          cosTh = Math.cos(theta),\n\t          _angle = currentWidth > 0 ? Math.atan(currentHeight / currentWidth) : 0,\n\t          _hypotenuse = (currentWidth / Math.cos(_angle)) / 2,\n\t          offsetX = Math.cos(_angle + theta) * _hypotenuse,\n\t          offsetY = Math.sin(_angle + theta) * _hypotenuse,\n\t\n\t          // offset added for rotate and scale actions\n\t          coords = fabric.util.transformPoint(this.getCenterPoint(), vpt),\n\t          tl  = new fabric.Point(coords.x - offsetX, coords.y - offsetY),\n\t          tr  = new fabric.Point(tl.x + (currentWidth * cosTh), tl.y + (currentWidth * sinTh)),\n\t          bl  = new fabric.Point(tl.x - (currentHeight * sinTh), tl.y + (currentHeight * cosTh)),\n\t          br  = new fabric.Point(coords.x + offsetX, coords.y + offsetY),\n\t          ml  = new fabric.Point((tl.x + bl.x)/2, (tl.y + bl.y)/2),\n\t          mt  = new fabric.Point((tr.x + tl.x)/2, (tr.y + tl.y)/2),\n\t          mr  = new fabric.Point((br.x + tr.x)/2, (br.y + tr.y)/2),\n\t          mb  = new fabric.Point((br.x + bl.x)/2, (br.y + bl.y)/2),\n\t          mtr = new fabric.Point(mt.x + sinTh * this.rotatingPointOffset, mt.y - cosTh * this.rotatingPointOffset);\n\t      // debugging\n\t\n\t      /* setTimeout(function() {\n\t         canvas.contextTop.fillStyle = 'green';\n\t         canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\n\t         canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\n\t         canvas.contextTop.fillRect(br.x, br.y, 3, 3);\n\t         canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\n\t         canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\n\t         canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\n\t         canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\n\t         canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\n\t         canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\n\t       }, 50); */\n\t\n\t      this.oCoords = {\n\t        // corners\n\t        tl: tl, tr: tr, br: br, bl: bl,\n\t        // middle\n\t        ml: ml, mt: mt, mr: mr, mb: mb,\n\t        // rotating point\n\t        mtr: mtr\n\t      };\n\t\n\t      // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n\t      this._setCornerCoords && this._setCornerCoords();\n\t\n\t      return this;\n\t    },\n\t\n\t    _calcDimensionsTransformMatrix: function() {\n\t      // introduce skew matrix here later\n\t      return [this.scaleX, 0, 0, this.scaleY, 0, 0];\n\t    }\n\t  });\n\t})();\n\t\n\t\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t  /**\n\t   * Moves an object to the bottom of the stack of drawn objects\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  sendToBack: function() {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n\t    }\n\t    else {\n\t      this.canvas.sendToBack(this);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Moves an object to the top of the stack of drawn objects\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  bringToFront: function() {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n\t    }\n\t    else {\n\t      this.canvas.bringToFront(this);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Moves an object down in stack of drawn objects\n\t   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  sendBackwards: function(intersecting) {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n\t    }\n\t    else {\n\t      this.canvas.sendBackwards(this, intersecting);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Moves an object up in stack of drawn objects\n\t   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  bringForward: function(intersecting) {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n\t    }\n\t    else {\n\t      this.canvas.bringForward(this, intersecting);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Moves an object to specified level in stack of drawn objects\n\t   * @param {Number} index New position of object\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  moveTo: function(index) {\n\t    if (this.group) {\n\t      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n\t    }\n\t    else {\n\t      this.canvas.moveTo(this, index);\n\t    }\n\t    return this;\n\t  }\n\t});\n\t\n\t\n\t/* _TO_SVG_START_ */\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t  /**\n\t   * Returns styles-string for svg-export\n\t   * @return {String}\n\t   */\n\t  getSvgStyles: function() {\n\t\n\t    var fill = this.fill\n\t          ? (this.fill.toLive ? 'url(#SVGID_' + this.fill.id + ')' : this.fill)\n\t          : 'none',\n\t        fillRule = this.fillRule,\n\t        stroke = this.stroke\n\t          ? (this.stroke.toLive ? 'url(#SVGID_' + this.stroke.id + ')' : this.stroke)\n\t          : 'none',\n\t\n\t        strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n\t        strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\n\t        strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n\t        strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n\t        strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n\t        opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n\t\n\t        visibility = this.visible ? '' : ' visibility: hidden;',\n\t        filter = this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\n\t\n\t    return [\n\t      'stroke: ', stroke, '; ',\n\t      'stroke-width: ', strokeWidth, '; ',\n\t      'stroke-dasharray: ', strokeDashArray, '; ',\n\t      'stroke-linecap: ', strokeLineCap, '; ',\n\t      'stroke-linejoin: ', strokeLineJoin, '; ',\n\t      'stroke-miterlimit: ', strokeMiterLimit, '; ',\n\t      'fill: ', fill, '; ',\n\t      'fill-rule: ', fillRule, '; ',\n\t      'opacity: ', opacity, ';',\n\t      filter,\n\t      visibility\n\t    ].join('');\n\t  },\n\t\n\t  /**\n\t   * Returns transform-string for svg-export\n\t   * @return {String}\n\t   */\n\t  getSvgTransform: function() {\n\t    if (this.group && this.group.type === 'path-group') {\n\t      return '';\n\t    }\n\t    var toFixed = fabric.util.toFixed,\n\t        angle = this.getAngle(),\n\t        vpt = !this.canvas || this.canvas.svgViewportTransformation ? this.getViewportTransform() : [1, 0, 0, 1, 0, 0],\n\t        center = fabric.util.transformPoint(this.getCenterPoint(), vpt),\n\t\n\t        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\t\n\t        translatePart = this.type === 'path-group' ? '' : 'translate(' +\n\t                          toFixed(center.x, NUM_FRACTION_DIGITS) +\n\t                          ' ' +\n\t                          toFixed(center.y, NUM_FRACTION_DIGITS) +\n\t                        ')',\n\t\n\t        anglePart = angle !== 0\n\t          ? (' rotate(' + toFixed(angle, NUM_FRACTION_DIGITS) + ')')\n\t          : '',\n\t\n\t        scalePart = (this.scaleX === 1 && this.scaleY === 1 && vpt[0] === 1 && vpt[3] === 1)\n\t          ? '' :\n\t          (' scale(' +\n\t            toFixed(this.scaleX * vpt[0], NUM_FRACTION_DIGITS) +\n\t            ' ' +\n\t            toFixed(this.scaleY * vpt[3], NUM_FRACTION_DIGITS) +\n\t          ')'),\n\t\n\t        addTranslateX = this.type === 'path-group' ? this.width * vpt[0] : 0,\n\t\n\t        flipXPart = this.flipX ? ' matrix(-1 0 0 1 ' + addTranslateX + ' 0) ' : '',\n\t\n\t        addTranslateY = this.type === 'path-group' ? this.height * vpt[3] : 0,\n\t\n\t        flipYPart = this.flipY ? ' matrix(1 0 0 -1 0 ' + addTranslateY + ')' : '';\n\t\n\t    return [\n\t      translatePart, anglePart, scalePart, flipXPart, flipYPart\n\t    ].join('');\n\t  },\n\t\n\t  /**\n\t   * Returns transform-string for svg-export from the transform matrix of single elements\n\t   * @return {String}\n\t   */\n\t  getSvgTransformMatrix: function() {\n\t    return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ') ' : '';\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _createBaseSVGMarkup: function() {\n\t    var markup = [ ];\n\t\n\t    if (this.fill && this.fill.toLive) {\n\t      markup.push(this.fill.toSVG(this, false));\n\t    }\n\t    if (this.stroke && this.stroke.toLive) {\n\t      markup.push(this.stroke.toSVG(this, false));\n\t    }\n\t    if (this.shadow) {\n\t      markup.push(this.shadow.toSVG(this));\n\t    }\n\t    return markup;\n\t  }\n\t});\n\t/* _TO_SVG_END_ */\n\t\n\t\n\t/*\n\t  Depends on `stateProperties`\n\t*/\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t  /**\n\t   * Returns true if object state (one of its state properties) was changed\n\t   * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n\t   */\n\t  hasStateChanged: function() {\n\t    return this.stateProperties.some(function(prop) {\n\t      return this.get(prop) !== this.originalState[prop];\n\t    }, this);\n\t  },\n\t\n\t  /**\n\t   * Saves state of an object\n\t   * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n\t   * @return {fabric.Object} thisArg\n\t   */\n\t  saveState: function(options) {\n\t    this.stateProperties.forEach(function(prop) {\n\t      this.originalState[prop] = this.get(prop);\n\t    }, this);\n\t\n\t    if (options && options.stateProperties) {\n\t      options.stateProperties.forEach(function(prop) {\n\t        this.originalState[prop] = this.get(prop);\n\t      }, this);\n\t    }\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Setups state of an object\n\t   * @return {fabric.Object} thisArg\n\t   */\n\t  setupState: function() {\n\t    this.originalState = { };\n\t    this.saveState();\n\t\n\t    return this;\n\t  }\n\t});\n\t\n\t\n\t(function() {\n\t\n\t  var degreesToRadians = fabric.util.degreesToRadians,\n\t      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n\t      isVML = function() { return typeof G_vmlCanvasManager !== 'undefined'; };\n\t  //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\t\n\t  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t    /**\n\t     * The object interactivity controls.\n\t     * @private\n\t     */\n\t    _controlsVisibility: null,\n\t\n\t    /**\n\t     * Determines which corner has been clicked\n\t     * @private\n\t     * @param {Object} pointer The pointer indicating the mouse position\n\t     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n\t     */\n\t    _findTargetCorner: function(pointer) {\n\t      if (!this.hasControls || !this.active) {\n\t        return false;\n\t      }\n\t\n\t      var ex = pointer.x,\n\t          ey = pointer.y,\n\t          xPoints,\n\t          lines;\n\t\n\t      for (var i in this.oCoords) {\n\t\n\t        if (!this.isControlVisible(i)) {\n\t          continue;\n\t        }\n\t\n\t        if (i === 'mtr' && !this.hasRotatingPoint) {\n\t          continue;\n\t        }\n\t\n\t        if (this.get('lockUniScaling') &&\n\t           (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\n\t          continue;\n\t        }\n\t\n\t        lines = this._getImageLines(this.oCoords[i].corner);\n\t\n\t        // debugging\n\t\n\t        // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n\t        // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n\t\n\t        // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n\t        // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n\t\n\t        // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n\t        // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n\t\n\t        // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n\t        // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n\t\n\t        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\n\t        if (xPoints !== 0 && xPoints % 2 === 1) {\n\t          this.__corner = i;\n\t          return i;\n\t        }\n\t      }\n\t      return false;\n\t    },\n\t\n\t    /**\n\t     * Sets the coordinates of the draggable boxes in the corners of\n\t     * the image used to scale/rotate it.\n\t     * @private\n\t     */\n\t    _setCornerCoords: function() {\n\t      var coords = this.oCoords,\n\t          newTheta = degreesToRadians(45 - this.angle),\n\t          /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\n\t          /* 0.707106 stands for sqrt(2)/2 */\n\t          cornerHypotenuse = this.cornerSize * 0.707106,\n\t          cosHalfOffset = cornerHypotenuse * Math.cos(newTheta),\n\t          sinHalfOffset = cornerHypotenuse * Math.sin(newTheta),\n\t          x, y;\n\t\n\t      for (var point in coords) {\n\t        x = coords[point].x;\n\t        y = coords[point].y;\n\t        coords[point].corner = {\n\t          tl: {\n\t            x: x - sinHalfOffset,\n\t            y: y - cosHalfOffset\n\t          },\n\t          tr: {\n\t            x: x + cosHalfOffset,\n\t            y: y - sinHalfOffset\n\t          },\n\t          bl: {\n\t            x: x - cosHalfOffset,\n\t            y: y + sinHalfOffset\n\t          },\n\t          br: {\n\t            x: x + sinHalfOffset,\n\t            y: y + cosHalfOffset\n\t          }\n\t        };\n\t      }\n\t    },\n\t\n\t    /*\n\t     * Calculate object dimensions from its properties\n\t     * @private\n\t     */\n\t    _getNonTransformedDimensions: function() {\n\t      var strokeWidth = this.strokeWidth,\n\t          w = this.width,\n\t          h = this.height,\n\t          capped = this.strokeLineCap === 'round' || this.strokeLineCap === 'square',\n\t          vLine = this.type === 'line' && this.width === 0,\n\t          hLine = this.type === 'line' && this.height === 0,\n\t          sLine = vLine || hLine,\n\t          strokeW = (capped && hLine) || !sLine,\n\t          strokeH = (capped && vLine) || !sLine;\n\t\n\t      if (vLine) {\n\t        w = strokeWidth;\n\t      }\n\t      else if (hLine) {\n\t        h = strokeWidth;\n\t      }\n\t      if (strokeW) {\n\t        w += (w < 0 ? -strokeWidth : strokeWidth);\n\t      }\n\t      if (strokeH) {\n\t        h += (h < 0 ? -strokeWidth : strokeWidth);\n\t      }\n\t      return { x: w, y: h };\n\t    },\n\t\n\t    /*\n\t     * @private\n\t     */\n\t    _getTransformedDimensions: function(dimensions) {\n\t      if (!dimensions) {\n\t        dimensions = this._getNonTransformedDimensions();\n\t      }\n\t      var transformMatrix = this._calcDimensionsTransformMatrix();\n\t      return fabric.util.transformPoint(dimensions, transformMatrix, true);\n\t    },\n\t\n\t    /*\n\t     * private\n\t     */\n\t    _calculateCurrentDimensions: function(shouldTransform)  {\n\t      var vpt = this.getViewportTransform(),\n\t          dim = this._getTransformedDimensions(),\n\t          w = dim.x, h = dim.y;\n\t\n\t      w += 2 * this.padding;\n\t      h += 2 * this.padding;\n\t\n\t      if (shouldTransform) {\n\t        return fabric.util.transformPoint(new fabric.Point(w, h), vpt, true);\n\t      }\n\t      return { x: w, y: h };\n\t    },\n\t\n\t    /**\n\t     * Draws borders of an object's bounding box.\n\t     * Requires public properties: width, height\n\t     * Requires public options: padding, borderColor\n\t     * @param {CanvasRenderingContext2D} ctx Context to draw on\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    drawBorders: function(ctx) {\n\t      if (!this.hasBorders) {\n\t        return this;\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n\t      ctx.strokeStyle = this.borderColor;\n\t      ctx.lineWidth = 1 / this.borderScaleFactor;\n\t\n\t      var wh = this._calculateCurrentDimensions(true),\n\t          width = wh.x,\n\t          height = wh.y;\n\t      if (this.group) {\n\t        width = width * this.group.scaleX;\n\t        height = height * this.group.scaleY;\n\t      }\n\t\n\t      ctx.strokeRect(\n\t        ~~(-(width / 2)) - 0.5, // offset needed to make lines look sharper\n\t        ~~(-(height / 2)) - 0.5,\n\t        ~~(width) + 1, // double offset needed to make lines look sharper\n\t        ~~(height) + 1\n\t      );\n\t\n\t      if (this.hasRotatingPoint && this.isControlVisible('mtr') && !this.get('lockRotation') && this.hasControls) {\n\t\n\t        var rotateHeight = -height / 2;\n\t\n\t        ctx.beginPath();\n\t        ctx.moveTo(0, rotateHeight);\n\t        ctx.lineTo(0, rotateHeight - this.rotatingPointOffset);\n\t        ctx.closePath();\n\t        ctx.stroke();\n\t      }\n\t\n\t      ctx.restore();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Draws corners of an object's bounding box.\n\t     * Requires public properties: width, height\n\t     * Requires public options: cornerSize, padding\n\t     * @param {CanvasRenderingContext2D} ctx Context to draw on\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    drawControls: function(ctx) {\n\t      if (!this.hasControls) {\n\t        return this;\n\t      }\n\t\n\t      var wh = this._calculateCurrentDimensions(true),\n\t          width = wh.x,\n\t          height = wh.y,\n\t          left = -(width / 2),\n\t          top = -(height / 2),\n\t          scaleOffset = this.cornerSize / 2,\n\t          methodName = this.transparentCorners ? 'strokeRect' : 'fillRect';\n\t\n\t      ctx.save();\n\t\n\t      ctx.lineWidth = 1;\n\t\n\t      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n\t      ctx.strokeStyle = ctx.fillStyle = this.cornerColor;\n\t\n\t      // top-left\n\t      this._drawControl('tl', ctx, methodName,\n\t        left - scaleOffset,\n\t        top - scaleOffset);\n\t\n\t      // top-right\n\t      this._drawControl('tr', ctx, methodName,\n\t        left + width - scaleOffset,\n\t        top - scaleOffset);\n\t\n\t      // bottom-left\n\t      this._drawControl('bl', ctx, methodName,\n\t        left - scaleOffset,\n\t        top + height - scaleOffset);\n\t\n\t      // bottom-right\n\t      this._drawControl('br', ctx, methodName,\n\t        left + width - scaleOffset,\n\t        top + height - scaleOffset);\n\t\n\t      if (!this.get('lockUniScaling')) {\n\t\n\t        // middle-top\n\t        this._drawControl('mt', ctx, methodName,\n\t          left + width/2 - scaleOffset,\n\t          top - scaleOffset);\n\t\n\t        // middle-bottom\n\t        this._drawControl('mb', ctx, methodName,\n\t          left + width/2 - scaleOffset,\n\t          top + height - scaleOffset);\n\t\n\t        // middle-right\n\t        this._drawControl('mr', ctx, methodName,\n\t          left + width - scaleOffset,\n\t          top + height/2 - scaleOffset);\n\t\n\t        // middle-left\n\t        this._drawControl('ml', ctx, methodName,\n\t          left - scaleOffset,\n\t          top + height/2 - scaleOffset);\n\t      }\n\t\n\t      // middle-top-rotate\n\t      if (this.hasRotatingPoint) {\n\t        this._drawControl('mtr', ctx, methodName,\n\t          left + width/2 - scaleOffset,\n\t          top - this.rotatingPointOffset - scaleOffset);\n\t      }\n\t\n\t      ctx.restore();\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _drawControl: function(control, ctx, methodName, left, top) {\n\t      if (!this.isControlVisible(control)) {\n\t        return;\n\t      }\n\t      var size = this.cornerSize;\n\t      isVML() || this.transparentCorners || ctx.clearRect(left, top, size, size);\n\t      ctx[methodName](left, top, size, size);\n\t    },\n\t\n\t    /**\n\t     * Returns true if the specified control is visible, false otherwise.\n\t     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n\t     * @returns {Boolean} true if the specified control is visible, false otherwise\n\t     */\n\t    isControlVisible: function(controlName) {\n\t      return this._getControlsVisibility()[controlName];\n\t    },\n\t\n\t    /**\n\t     * Sets the visibility of the specified control.\n\t     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n\t     * @param {Boolean} visible true to set the specified control visible, false otherwise\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setControlVisible: function(controlName, visible) {\n\t      this._getControlsVisibility()[controlName] = visible;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets the visibility state of object controls.\n\t     * @param {Object} [options] Options object\n\t     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n\t     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n\t     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n\t     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n\t     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n\t     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n\t     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n\t     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n\t     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n\t     * @return {fabric.Object} thisArg\n\t     * @chainable\n\t     */\n\t    setControlsVisibility: function(options) {\n\t      options || (options = { });\n\t\n\t      for (var p in options) {\n\t        this.setControlVisible(p, options[p]);\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns the instance of the control visibility set for this object.\n\t     * @private\n\t     * @returns {Object}\n\t     */\n\t    _getControlsVisibility: function() {\n\t      if (!this._controlsVisibility) {\n\t        this._controlsVisibility = {\n\t          tl: true,\n\t          tr: true,\n\t          br: true,\n\t          bl: true,\n\t          ml: true,\n\t          mt: true,\n\t          mr: true,\n\t          mb: true,\n\t          mtr: true\n\t        };\n\t      }\n\t      return this._controlsVisibility;\n\t    }\n\t  });\n\t})();\n\t\n\t\n\tfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t  /**\n\t   * Animation duration (in ms) for fx* methods\n\t   * @type Number\n\t   * @default\n\t   */\n\t  FX_DURATION: 500,\n\t\n\t  /**\n\t   * Centers object horizontally with animation.\n\t   * @param {fabric.Object} object Object to center\n\t   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n\t   * @param {Function} [callbacks.onComplete] Invoked on completion\n\t   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  fxCenterObjectH: function (object, callbacks) {\n\t    callbacks = callbacks || { };\n\t\n\t    var empty = function() { },\n\t        onComplete = callbacks.onComplete || empty,\n\t        onChange = callbacks.onChange || empty,\n\t        _this = this;\n\t\n\t    fabric.util.animate({\n\t      startValue: object.get('left'),\n\t      endValue: this.getCenter().left,\n\t      duration: this.FX_DURATION,\n\t      onChange: function(value) {\n\t        object.set('left', value);\n\t        _this.renderAll();\n\t        onChange();\n\t      },\n\t      onComplete: function() {\n\t        object.setCoords();\n\t        onComplete();\n\t      }\n\t    });\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Centers object vertically with animation.\n\t   * @param {fabric.Object} object Object to center\n\t   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n\t   * @param {Function} [callbacks.onComplete] Invoked on completion\n\t   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  fxCenterObjectV: function (object, callbacks) {\n\t    callbacks = callbacks || { };\n\t\n\t    var empty = function() { },\n\t        onComplete = callbacks.onComplete || empty,\n\t        onChange = callbacks.onChange || empty,\n\t        _this = this;\n\t\n\t    fabric.util.animate({\n\t      startValue: object.get('top'),\n\t      endValue: this.getCenter().top,\n\t      duration: this.FX_DURATION,\n\t      onChange: function(value) {\n\t        object.set('top', value);\n\t        _this.renderAll();\n\t        onChange();\n\t      },\n\t      onComplete: function() {\n\t        object.setCoords();\n\t        onComplete();\n\t      }\n\t    });\n\t\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Same as `fabric.Canvas#remove` but animated\n\t   * @param {fabric.Object} object Object to remove\n\t   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n\t   * @param {Function} [callbacks.onComplete] Invoked on completion\n\t   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  fxRemove: function (object, callbacks) {\n\t    callbacks = callbacks || { };\n\t\n\t    var empty = function() { },\n\t        onComplete = callbacks.onComplete || empty,\n\t        onChange = callbacks.onChange || empty,\n\t        _this = this;\n\t\n\t    fabric.util.animate({\n\t      startValue: object.get('opacity'),\n\t      endValue: 0,\n\t      duration: this.FX_DURATION,\n\t      onStart: function() {\n\t        object.set('active', false);\n\t      },\n\t      onChange: function(value) {\n\t        object.set('opacity', value);\n\t        _this.renderAll();\n\t        onChange();\n\t      },\n\t      onComplete: function () {\n\t        _this.remove(object);\n\t        onComplete();\n\t      }\n\t    });\n\t\n\t    return this;\n\t  }\n\t});\n\t\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t  /**\n\t   * Animates object's properties\n\t   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n\t   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n\t   * @return {fabric.Object} thisArg\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#animation}\n\t   * @chainable\n\t   *\n\t   * As object — multiple properties\n\t   *\n\t   * object.animate({ left: ..., top: ... });\n\t   * object.animate({ left: ..., top: ... }, { duration: ... });\n\t   *\n\t   * As string — one property\n\t   *\n\t   * object.animate('left', ...);\n\t   * object.animate('left', { duration: ... });\n\t   *\n\t   */\n\t  animate: function() {\n\t    if (arguments[0] && typeof arguments[0] === 'object') {\n\t      var propsToAnimate = [ ], prop, skipCallbacks;\n\t      for (prop in arguments[0]) {\n\t        propsToAnimate.push(prop);\n\t      }\n\t      for (var i = 0, len = propsToAnimate.length; i < len; i++) {\n\t        prop = propsToAnimate[i];\n\t        skipCallbacks = i !== len - 1;\n\t        this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\n\t      }\n\t    }\n\t    else {\n\t      this._animate.apply(this, arguments);\n\t    }\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {String} property Property to animate\n\t   * @param {String} to Value to animate to\n\t   * @param {Object} [options] Options object\n\t   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n\t   */\n\t  _animate: function(property, to, options, skipCallbacks) {\n\t    var _this = this, propPair;\n\t\n\t    to = to.toString();\n\t\n\t    if (!options) {\n\t      options = { };\n\t    }\n\t    else {\n\t      options = fabric.util.object.clone(options);\n\t    }\n\t\n\t    if (~property.indexOf('.')) {\n\t      propPair = property.split('.');\n\t    }\n\t\n\t    var currentValue = propPair\n\t      ? this.get(propPair[0])[propPair[1]]\n\t      : this.get(property);\n\t\n\t    if (!('from' in options)) {\n\t      options.from = currentValue;\n\t    }\n\t\n\t    if (~to.indexOf('=')) {\n\t      to = currentValue + parseFloat(to.replace('=', ''));\n\t    }\n\t    else {\n\t      to = parseFloat(to);\n\t    }\n\t\n\t    fabric.util.animate({\n\t      startValue: options.from,\n\t      endValue: to,\n\t      byValue: options.by,\n\t      easing: options.easing,\n\t      duration: options.duration,\n\t      abort: options.abort && function() {\n\t        return options.abort.call(_this);\n\t      },\n\t      onChange: function(value) {\n\t        if (propPair) {\n\t          _this[propPair[0]][propPair[1]] = value;\n\t        }\n\t        else {\n\t          _this.set(property, value);\n\t        }\n\t        if (skipCallbacks) {\n\t          return;\n\t        }\n\t        options.onChange && options.onChange();\n\t      },\n\t      onComplete: function() {\n\t        if (skipCallbacks) {\n\t          return;\n\t        }\n\t\n\t        _this.setCoords();\n\t        options.onComplete && options.onComplete();\n\t      }\n\t    });\n\t  }\n\t});\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\n\t      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\t\n\t  if (fabric.Line) {\n\t    fabric.warn('fabric.Line is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Line class\n\t   * @class fabric.Line\n\t   * @extends fabric.Object\n\t   * @see {@link fabric.Line#initialize} for constructor definition\n\t   */\n\t  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'line',\n\t\n\t    /**\n\t     * x value or first line edge\n\t     * @type Number\n\t     * @default\n\t     */\n\t    x1: 0,\n\t\n\t    /**\n\t     * y value or first line edge\n\t     * @type Number\n\t     * @default\n\t     */\n\t    y1: 0,\n\t\n\t    /**\n\t     * x value or second line edge\n\t     * @type Number\n\t     * @default\n\t     */\n\t    x2: 0,\n\t\n\t    /**\n\t     * y value or second line edge\n\t     * @type Number\n\t     * @default\n\t     */\n\t    y2: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array} [points] Array of points\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Line} thisArg\n\t     */\n\t    initialize: function(points, options) {\n\t      options = options || { };\n\t\n\t      if (!points) {\n\t        points = [0, 0, 0, 0];\n\t      }\n\t\n\t      this.callSuper('initialize', options);\n\t\n\t      this.set('x1', points[0]);\n\t      this.set('y1', points[1]);\n\t      this.set('x2', points[2]);\n\t      this.set('y2', points[3]);\n\t\n\t      this._setWidthHeight(options);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options\n\t     */\n\t    _setWidthHeight: function(options) {\n\t      options || (options = { });\n\t\n\t      this.width = Math.abs(this.x2 - this.x1);\n\t      this.height = Math.abs(this.y2 - this.y1);\n\t\n\t      this.left = 'left' in options\n\t        ? options.left\n\t        : this._getLeftToOriginX();\n\t\n\t      this.top = 'top' in options\n\t        ? options.top\n\t        : this._getTopToOriginY();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     */\n\t    _set: function(key, value) {\n\t      this.callSuper('_set', key, value);\n\t      if (typeof coordProps[key] !== 'undefined') {\n\t        this._setWidthHeight();\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\n\t     */\n\t    _getLeftToOriginX: makeEdgeToOriginGetter(\n\t      { // property names\n\t        origin: 'originX',\n\t        axis1: 'x1',\n\t        axis2: 'x2',\n\t        dimension: 'width'\n\t      },\n\t      { // possible values of origin\n\t        nearest: 'left',\n\t        center: 'center',\n\t        farthest: 'right'\n\t      }\n\t    ),\n\t\n\t    /**\n\t     * @private\n\t     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\n\t     */\n\t    _getTopToOriginY: makeEdgeToOriginGetter(\n\t      { // property names\n\t        origin: 'originY',\n\t        axis1: 'y1',\n\t        axis2: 'y2',\n\t        dimension: 'height'\n\t      },\n\t      { // possible values of origin\n\t        nearest: 'top',\n\t        center: 'center',\n\t        farthest: 'bottom'\n\t      }\n\t    ),\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t      ctx.beginPath();\n\t\n\t      if (noTransform) {\n\t        //  Line coords are distances from left-top of canvas to origin of line.\n\t        //  To render line in a path-group, we need to translate them to\n\t        //  distances from center of path-group to center of line.\n\t        var cp = this.getCenterPoint();\n\t        ctx.translate(\n\t          cp.x - this.strokeWidth / 2,\n\t          cp.y - this.strokeWidth / 2\n\t        );\n\t      }\n\t\n\t      if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\n\t        // move from center (of virtual box) to its left/top corner\n\t        // we can't assume x1, y1 is top left and x2, y2 is bottom right\n\t        var p = this.calcLinePoints();\n\t        ctx.moveTo(p.x1, p.y1);\n\t        ctx.lineTo(p.x2, p.y2);\n\t      }\n\t\n\t      ctx.lineWidth = this.strokeWidth;\n\t\n\t      // TODO: test this\n\t      // make sure setting \"fill\" changes color of a line\n\t      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n\t      var origStrokeStyle = ctx.strokeStyle;\n\t      ctx.strokeStyle = this.stroke || ctx.fillStyle;\n\t      this.stroke && this._renderStroke(ctx);\n\t      ctx.strokeStyle = origStrokeStyle;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var p = this.calcLinePoints();\n\t\n\t      ctx.beginPath();\n\t      fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\n\t      ctx.closePath();\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @methd toObject\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\n\t    },\n\t\n\t    /**\n\t     * Recalculates line points given width and height\n\t     * @private\n\t     */\n\t    calcLinePoints: function() {\n\t      var xMult = this.x1 <= this.x2 ? -1 : 1,\n\t          yMult = this.y1 <= this.y2 ? -1 : 1,\n\t          x1 = (xMult * this.width * 0.5),\n\t          y1 = (yMult * this.height * 0.5),\n\t          x2 = (xMult * this.width * -0.5),\n\t          y2 = (yMult * this.height * -0.5);\n\t\n\t      return {\n\t        x1: x1,\n\t        x2: x2,\n\t        y1: y1,\n\t        y2: y2\n\t      };\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(),\n\t          p = { x1: this.x1, x2: this.x2, y1: this.y1, y2: this.y2 };\n\t\n\t      if (!(this.group && this.group.type === 'path-group')) {\n\t        p = this.calcLinePoints();\n\t      }\n\t      markup.push(\n\t        '<line ',\n\t          'x1=\"', p.x1,\n\t          '\" y1=\"', p.y1,\n\t          '\" x2=\"', p.x2,\n\t          '\" y2=\"', p.y2,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          this.getSvgTransformMatrix(),\n\t        '\"/>\\n'\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Line\n\t   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n\t   */\n\t  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\n\t\n\t  /**\n\t   * Returns fabric.Line instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Line\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Line} instance of fabric.Line\n\t   */\n\t  fabric.Line.fromElement = function(element, options) {\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\n\t        points = [\n\t          parsedAttributes.x1 || 0,\n\t          parsedAttributes.y1 || 0,\n\t          parsedAttributes.x2 || 0,\n\t          parsedAttributes.y2 || 0\n\t        ];\n\t    return new fabric.Line(points, extend(parsedAttributes, options));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns fabric.Line instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Line\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Line} instance of fabric.Line\n\t   */\n\t  fabric.Line.fromObject = function(object) {\n\t    var points = [object.x1, object.y1, object.x2, object.y2];\n\t    return new fabric.Line(points, object);\n\t  };\n\t\n\t  /**\n\t   * Produces a function that calculates distance from canvas edge to Line origin.\n\t   */\n\t  function makeEdgeToOriginGetter(propertyNames, originValues) {\n\t    var origin = propertyNames.origin,\n\t        axis1 = propertyNames.axis1,\n\t        axis2 = propertyNames.axis2,\n\t        dimension = propertyNames.dimension,\n\t        nearest = originValues.nearest,\n\t        center = originValues.center,\n\t        farthest = originValues.farthest;\n\t\n\t    return function() {\n\t      switch (this.get(origin)) {\n\t      case nearest:\n\t        return Math.min(this.get(axis1), this.get(axis2));\n\t      case center:\n\t        return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\n\t      case farthest:\n\t        return Math.max(this.get(axis1), this.get(axis2));\n\t      }\n\t    };\n\t\n\t  }\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      pi = Math.PI,\n\t      extend = fabric.util.object.extend;\n\t\n\t  if (fabric.Circle) {\n\t    fabric.warn('fabric.Circle is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Circle class\n\t   * @class fabric.Circle\n\t   * @extends fabric.Object\n\t   * @see {@link fabric.Circle#initialize} for constructor definition\n\t   */\n\t  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'circle',\n\t\n\t    /**\n\t     * Radius of this circle\n\t     * @type Number\n\t     * @default\n\t     */\n\t    radius: 0,\n\t\n\t    /**\n\t     * Start angle of the circle, moving clockwise\n\t     * @type Number\n\t     * @default 0\n\t     */\n\t    startAngle: 0,\n\t\n\t    /**\n\t     * End angle of the circle\n\t     * @type Number\n\t     * @default 2Pi\n\t     */\n\t    endAngle: pi * 2,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Circle} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.callSuper('initialize', options);\n\t      this.set('radius', options.radius || 0);\n\t\n\t      this.startAngle = options.startAngle || this.startAngle;\n\t      this.endAngle = options.endAngle || this.endAngle;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     * @return {fabric.Circle} thisArg\n\t     */\n\t    _set: function(key, value) {\n\t      this.callSuper('_set', key, value);\n\t\n\t      if (key === 'radius') {\n\t        this.setRadius(value);\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), {\n\t        radius: this.get('radius'),\n\t        startAngle: this.startAngle,\n\t        endAngle: this.endAngle\n\t      });\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(), x = 0, y = 0,\n\t      angle = (this.endAngle - this.startAngle) % ( 2 * pi);\n\t\n\t      if (angle === 0) {\n\t        if (this.group && this.group.type === 'path-group') {\n\t          x = this.left + this.radius;\n\t          y = this.top + this.radius;\n\t        }\n\t        markup.push(\n\t          '<circle ',\n\t            'cx=\"' + x + '\" cy=\"' + y + '\" ',\n\t            'r=\"', this.radius,\n\t            '\" style=\"', this.getSvgStyles(),\n\t            '\" transform=\"', this.getSvgTransform(),\n\t            ' ', this.getSvgTransformMatrix(),\n\t          '\"/>\\n'\n\t        );\n\t      }\n\t      else {\n\t        var startX = Math.cos(this.startAngle) * this.radius,\n\t            startY = Math.sin(this.startAngle) * this.radius,\n\t            endX = Math.cos(this.endAngle) * this.radius,\n\t            endY = Math.sin(this.endAngle) * this.radius,\n\t            largeFlag = angle > pi ? '1' : '0';\n\t\n\t        markup.push(\n\t          '<path d=\"M ' + startX + ' ' + startY,\n\t          ' A ' + this.radius + ' ' + this.radius,\n\t          ' 0 ', + largeFlag + ' 1', ' ' + endX + ' ' + endY,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          ' ', this.getSvgTransformMatrix(),\n\t          '\"/>\\n'\n\t        );\n\t      }\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t      ctx.beginPath();\n\t      ctx.arc(noTransform ? this.left + this.radius : 0,\n\t              noTransform ? this.top + this.radius : 0,\n\t              this.radius,\n\t              this.startAngle,\n\t              this.endAngle, false);\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * Returns horizontal radius of an object (according to how an object is scaled)\n\t     * @return {Number}\n\t     */\n\t    getRadiusX: function() {\n\t      return this.get('radius') * this.get('scaleX');\n\t    },\n\t\n\t    /**\n\t     * Returns vertical radius of an object (according to how an object is scaled)\n\t     * @return {Number}\n\t     */\n\t    getRadiusY: function() {\n\t      return this.get('radius') * this.get('scaleY');\n\t    },\n\t\n\t    /**\n\t     * Sets radius of an object (and updates width accordingly)\n\t     * @return {fabric.Circle} thisArg\n\t     */\n\t    setRadius: function(value) {\n\t      this.radius = value;\n\t      return this.set('width', value * 2).set('height', value * 2);\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Circle\n\t   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n\t   */\n\t  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\n\t\n\t  /**\n\t   * Returns {@link fabric.Circle} instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Circle\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @throws {Error} If value of `r` attribute is missing or invalid\n\t   * @return {fabric.Circle} Instance of fabric.Circle\n\t   */\n\t  fabric.Circle.fromElement = function(element, options) {\n\t    options || (options = { });\n\t\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\n\t\n\t    if (!isValidRadius(parsedAttributes)) {\n\t      throw new Error('value of `r` attribute is required and can not be negative');\n\t    }\n\t\n\t    parsedAttributes.left = parsedAttributes.left || 0;\n\t    parsedAttributes.top = parsedAttributes.top || 0;\n\t\n\t    var obj = new fabric.Circle(extend(parsedAttributes, options));\n\t\n\t    obj.left -= obj.radius;\n\t    obj.top -= obj.radius;\n\t    return obj;\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  function isValidRadius(attributes) {\n\t    return (('radius' in attributes) && (attributes.radius >= 0));\n\t  }\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns {@link fabric.Circle} instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Circle\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {Object} Instance of fabric.Circle\n\t   */\n\t  fabric.Circle.fromObject = function(object) {\n\t    return new fabric.Circle(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Triangle) {\n\t    fabric.warn('fabric.Triangle is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Triangle class\n\t   * @class fabric.Triangle\n\t   * @extends fabric.Object\n\t   * @return {fabric.Triangle} thisArg\n\t   * @see {@link fabric.Triangle#initialize} for constructor definition\n\t   */\n\t  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'triangle',\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.callSuper('initialize', options);\n\t\n\t      this.set('width', options.width || 100)\n\t          .set('height', options.height || 100);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      var widthBy2 = this.width / 2,\n\t          heightBy2 = this.height / 2;\n\t\n\t      ctx.beginPath();\n\t      ctx.moveTo(-widthBy2, heightBy2);\n\t      ctx.lineTo(0, -heightBy2);\n\t      ctx.lineTo(widthBy2, heightBy2);\n\t      ctx.closePath();\n\t\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var widthBy2 = this.width / 2,\n\t          heightBy2 = this.height / 2;\n\t\n\t      ctx.beginPath();\n\t      fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\n\t      ctx.closePath();\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(),\n\t          widthBy2 = this.width / 2,\n\t          heightBy2 = this.height / 2,\n\t          points = [\n\t            -widthBy2 + ' ' + heightBy2,\n\t            '0 ' + -heightBy2,\n\t            widthBy2 + ' ' + heightBy2\n\t          ]\n\t          .join(',');\n\t\n\t      markup.push(\n\t        '<polygon ',\n\t          'points=\"', points,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t        '\"/>'\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns fabric.Triangle instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Triangle\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {Object} instance of Canvas.Triangle\n\t   */\n\t  fabric.Triangle.fromObject = function(object) {\n\t    return new fabric.Triangle(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      piBy2   = Math.PI * 2,\n\t      extend = fabric.util.object.extend;\n\t\n\t  if (fabric.Ellipse) {\n\t    fabric.warn('fabric.Ellipse is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Ellipse class\n\t   * @class fabric.Ellipse\n\t   * @extends fabric.Object\n\t   * @return {fabric.Ellipse} thisArg\n\t   * @see {@link fabric.Ellipse#initialize} for constructor definition\n\t   */\n\t  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'ellipse',\n\t\n\t    /**\n\t     * Horizontal radius\n\t     * @type Number\n\t     * @default\n\t     */\n\t    rx:   0,\n\t\n\t    /**\n\t     * Vertical radius\n\t     * @type Number\n\t     * @default\n\t     */\n\t    ry:   0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Ellipse} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.callSuper('initialize', options);\n\t\n\t      this.set('rx', options.rx || 0);\n\t      this.set('ry', options.ry || 0);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     * @return {fabric.Ellipse} thisArg\n\t     */\n\t    _set: function(key, value) {\n\t      this.callSuper('_set', key, value);\n\t      switch (key) {\n\t\n\t        case 'rx':\n\t          this.rx = value;\n\t          this.set('width', value * 2);\n\t          break;\n\t\n\t        case 'ry':\n\t          this.ry = value;\n\t          this.set('height', value * 2);\n\t          break;\n\t\n\t      }\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns horizontal radius of an object (according to how an object is scaled)\n\t     * @return {Number}\n\t     */\n\t    getRx: function() {\n\t      return this.get('rx') * this.get('scaleX');\n\t    },\n\t\n\t    /**\n\t     * Returns Vertical radius of an object (according to how an object is scaled)\n\t     * @return {Number}\n\t     */\n\t    getRy: function() {\n\t      return this.get('ry') * this.get('scaleY');\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), {\n\t        rx: this.get('rx'),\n\t        ry: this.get('ry')\n\t      });\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(), x = 0, y = 0;\n\t      if (this.group && this.group.type === 'path-group') {\n\t        x = this.left + this.rx;\n\t        y = this.top + this.ry;\n\t      }\n\t      markup.push(\n\t        '<ellipse ',\n\t          'cx=\"', x, '\" cy=\"', y, '\" ',\n\t          'rx=\"', this.rx,\n\t          '\" ry=\"', this.ry,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          this.getSvgTransformMatrix(),\n\t        '\"/>\\n'\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t      ctx.beginPath();\n\t      ctx.save();\n\t      ctx.transform(1, 0, 0, this.ry/this.rx, 0, 0);\n\t      ctx.arc(\n\t        noTransform ? this.left + this.rx : 0,\n\t        noTransform ? (this.top + this.ry) * this.rx/this.ry : 0,\n\t        this.rx,\n\t        0,\n\t        piBy2,\n\t        false);\n\t      ctx.restore();\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Ellipse\n\t   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n\t   */\n\t  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\n\t\n\t  /**\n\t   * Returns {@link fabric.Ellipse} instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Ellipse\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Ellipse}\n\t   */\n\t  fabric.Ellipse.fromElement = function(element, options) {\n\t    options || (options = { });\n\t\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\n\t\n\t    parsedAttributes.left = parsedAttributes.left || 0;\n\t    parsedAttributes.top = parsedAttributes.top || 0;\n\t\n\t    var ellipse = new fabric.Ellipse(extend(parsedAttributes, options));\n\t\n\t    ellipse.top -= ellipse.ry;\n\t    ellipse.left -= ellipse.rx;\n\t    return ellipse;\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns {@link fabric.Ellipse} instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Ellipse\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Ellipse}\n\t   */\n\t  fabric.Ellipse.fromObject = function(object) {\n\t    return new fabric.Ellipse(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  if (fabric.Rect) {\n\t    fabric.warn('fabric.Rect is already defined');\n\t    return;\n\t  }\n\t\n\t  var stateProperties = fabric.Object.prototype.stateProperties.concat();\n\t  stateProperties.push('rx', 'ry', 'x', 'y');\n\t\n\t  /**\n\t   * Rectangle class\n\t   * @class fabric.Rect\n\t   * @extends fabric.Object\n\t   * @return {fabric.Rect} thisArg\n\t   * @see {@link fabric.Rect#initialize} for constructor definition\n\t   */\n\t  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n\t\n\t    /**\n\t     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n\t     * as well as for history (undo/redo) purposes\n\t     * @type Array\n\t     */\n\t    stateProperties: stateProperties,\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'rect',\n\t\n\t    /**\n\t     * Horizontal border radius\n\t     * @type Number\n\t     * @default\n\t     */\n\t    rx:   0,\n\t\n\t    /**\n\t     * Vertical border radius\n\t     * @type Number\n\t     * @default\n\t     */\n\t    ry:   0,\n\t\n\t    /**\n\t     * Used to specify dash pattern for stroke on this object\n\t     * @type Array\n\t     */\n\t    strokeDashArray: null,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} [options] Options object\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.callSuper('initialize', options);\n\t      this._initRxRy();\n\t\n\t    },\n\t\n\t    /**\n\t     * Initializes rx/ry attributes\n\t     * @private\n\t     */\n\t    _initRxRy: function() {\n\t      if (this.rx && !this.ry) {\n\t        this.ry = this.rx;\n\t      }\n\t      else if (this.ry && !this.rx) {\n\t        this.rx = this.ry;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t\n\t      // optimize 1x1 case (used in spray brush)\n\t      if (this.width === 1 && this.height === 1) {\n\t        ctx.fillRect(0, 0, 1, 1);\n\t        return;\n\t      }\n\t\n\t      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\n\t          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\n\t          w = this.width,\n\t          h = this.height,\n\t          x = noTransform ? this.left : -this.width / 2,\n\t          y = noTransform ? this.top : -this.height / 2,\n\t          isRounded = rx !== 0 || ry !== 0,\n\t          k = 1 - 0.5522847498 /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */;\n\t\n\t      ctx.beginPath();\n\t\n\t      ctx.moveTo(x + rx, y);\n\t\n\t      ctx.lineTo(x + w - rx, y);\n\t      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n\t\n\t      ctx.lineTo(x + w, y + h - ry);\n\t      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n\t\n\t      ctx.lineTo(x + rx, y + h);\n\t      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n\t\n\t      ctx.lineTo(x, y + ry);\n\t      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n\t\n\t      ctx.closePath();\n\t\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var x = -this.width / 2,\n\t          y = -this.height / 2,\n\t          w = this.width,\n\t          h = this.height;\n\t\n\t      ctx.beginPath();\n\t      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n\t      ctx.closePath();\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n\t        rx: this.get('rx') || 0,\n\t        ry: this.get('ry') || 0\n\t      });\n\t      if (!this.includeDefaultValues) {\n\t        this._removeDefaultValues(object);\n\t      }\n\t      return object;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(), x = this.left, y = this.top;\n\t      if (!(this.group && this.group.type === 'path-group')) {\n\t        x = -this.width / 2;\n\t        y = -this.height / 2;\n\t      }\n\t      markup.push(\n\t        '<rect ',\n\t          'x=\"', x, '\" y=\"', y,\n\t          '\" rx=\"', this.get('rx'), '\" ry=\"', this.get('ry'),\n\t          '\" width=\"', this.width, '\" height=\"', this.height,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          this.getSvgTransformMatrix(),\n\t        '\"/>\\n');\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\n\t   * @static\n\t   * @memberOf fabric.Rect\n\t   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n\t   */\n\t  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\n\t\n\t  /**\n\t   * Returns {@link fabric.Rect} instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Rect\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Rect} Instance of fabric.Rect\n\t   */\n\t  fabric.Rect.fromElement = function(element, options) {\n\t    if (!element) {\n\t      return null;\n\t    }\n\t    options = options || { };\n\t\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\n\t\n\t    parsedAttributes.left = parsedAttributes.left || 0;\n\t    parsedAttributes.top  = parsedAttributes.top  || 0;\n\t    var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n\t    rect.visible = rect.width > 0 && rect.height > 0;\n\t    return rect;\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns {@link fabric.Rect} instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Rect\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {Object} instance of fabric.Rect\n\t   */\n\t  fabric.Rect.fromObject = function(object) {\n\t    return new fabric.Rect(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { });\n\t\n\t  if (fabric.Polyline) {\n\t    fabric.warn('fabric.Polyline is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Polyline class\n\t   * @class fabric.Polyline\n\t   * @extends fabric.Object\n\t   * @see {@link fabric.Polyline#initialize} for constructor definition\n\t   */\n\t  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'polyline',\n\t\n\t    /**\n\t     * Points array\n\t     * @type Array\n\t     * @default\n\t     */\n\t    points: null,\n\t\n\t    /**\n\t     * Minimum X from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minX: 0,\n\t\n\t    /**\n\t     * Minimum Y from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minY: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array} points Array of points (where each point is an object with x and y)\n\t     * @param {Object} [options] Options object\n\t     * @param {Boolean} [skipOffset] Whether points offsetting should be skipped\n\t     * @return {fabric.Polyline} thisArg\n\t     * @example\n\t     * var poly = new fabric.Polyline([\n\t     *     { x: 10, y: 10 },\n\t     *     { x: 50, y: 30 },\n\t     *     { x: 40, y: 70 },\n\t     *     { x: 60, y: 50 },\n\t     *     { x: 100, y: 150 },\n\t     *     { x: 40, y: 100 }\n\t     *   ], {\n\t     *   stroke: 'red',\n\t     *   left: 100,\n\t     *   top: 100\n\t     * });\n\t     */\n\t    initialize: function(points, options) {\n\t      return fabric.Polygon.prototype.initialize.call(this, points, options);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _calcDimensions: function() {\n\t      return fabric.Polygon.prototype._calcDimensions.call(this);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _applyPointOffset: function() {\n\t      return fabric.Polygon.prototype._applyPointOffset.call(this);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return fabric.Polygon.prototype.toObject.call(this, propertiesToInclude);\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      return fabric.Polygon.prototype.toSVG.call(this, reviver);\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      if (!fabric.Polygon.prototype.commonRender.call(this, ctx)) {\n\t        return;\n\t      }\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var p1, p2;\n\t\n\t      ctx.beginPath();\n\t      for (var i = 0, len = this.points.length; i < len; i++) {\n\t        p1 = this.points[i];\n\t        p2 = this.points[i + 1] || p1;\n\t        fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return this.get('points').length;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Polyline\n\t   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n\t   */\n\t  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\t\n\t  /**\n\t   * Returns fabric.Polyline instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Polyline\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Polyline} Instance of fabric.Polyline\n\t   */\n\t  fabric.Polyline.fromElement = function(element, options) {\n\t    if (!element) {\n\t      return null;\n\t    }\n\t    options || (options = { });\n\t\n\t    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n\t        parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);\n\t\n\t    return new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns fabric.Polyline instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Polyline\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Polyline} Instance of fabric.Polyline\n\t   */\n\t  fabric.Polyline.fromObject = function(object) {\n\t    var points = object.points;\n\t    return new fabric.Polyline(points, object, true);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      min = fabric.util.array.min,\n\t      max = fabric.util.array.max,\n\t      toFixed = fabric.util.toFixed;\n\t\n\t  if (fabric.Polygon) {\n\t    fabric.warn('fabric.Polygon is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Polygon class\n\t   * @class fabric.Polygon\n\t   * @extends fabric.Object\n\t   * @see {@link fabric.Polygon#initialize} for constructor definition\n\t   */\n\t  fabric.Polygon = fabric.util.createClass(fabric.Object, /** @lends fabric.Polygon.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'polygon',\n\t\n\t    /**\n\t     * Points array\n\t     * @type Array\n\t     * @default\n\t     */\n\t    points: null,\n\t\n\t    /**\n\t     * Minimum X from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minX: 0,\n\t\n\t    /**\n\t     * Minimum Y from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minY: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array} points Array of points\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Polygon} thisArg\n\t     */\n\t    initialize: function(points, options) {\n\t      options = options || { };\n\t      this.points = points || [ ];\n\t      this.callSuper('initialize', options);\n\t      this._calcDimensions();\n\t      if (!('top' in options)) {\n\t        this.top = this.minY;\n\t      }\n\t      if (!('left' in options)) {\n\t        this.left = this.minX;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _calcDimensions: function() {\n\t\n\t      var points = this.points,\n\t          minX = min(points, 'x'),\n\t          minY = min(points, 'y'),\n\t          maxX = max(points, 'x'),\n\t          maxY = max(points, 'y');\n\t\n\t      this.width = (maxX - minX) || 0;\n\t      this.height = (maxY - minY) || 0;\n\t\n\t      this.minX = minX || 0,\n\t      this.minY = minY || 0;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _applyPointOffset: function() {\n\t      // change points to offset polygon into a bounding box\n\t      // executed one time\n\t      this.points.forEach(function(p) {\n\t        p.x -= (this.minX + this.width / 2);\n\t        p.y -= (this.minY + this.height / 2);\n\t      }, this);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), {\n\t        points: this.points.concat()\n\t      });\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var points = [],\n\t          markup = this._createBaseSVGMarkup();\n\t\n\t      for (var i = 0, len = this.points.length; i < len; i++) {\n\t        points.push(toFixed(this.points[i].x, 2), ',', toFixed(this.points[i].y, 2), ' ');\n\t      }\n\t\n\t      markup.push(\n\t        '<', this.type, ' ',\n\t          'points=\"', points.join(''),\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(),\n\t          ' ', this.getSvgTransformMatrix(),\n\t        '\"/>\\n'\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      if (!this.commonRender(ctx)) {\n\t        return;\n\t      }\n\t      this._renderFill(ctx);\n\t      if (this.stroke || this.strokeDashArray) {\n\t        ctx.closePath();\n\t        this._renderStroke(ctx);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    commonRender: function(ctx) {\n\t      var point, len = this.points.length;\n\t\n\t      if (!len || isNaN(this.points[len - 1].y)) {\n\t        // do not draw if no points or odd points\n\t        // NaN comes from parseFloat of a empty string in parser\n\t        return false;\n\t      }\n\t\n\t      ctx.beginPath();\n\t\n\t      if (this._applyPointOffset) {\n\t        if (!(this.group && this.group.type === 'path-group')) {\n\t          this._applyPointOffset();\n\t        }\n\t        this._applyPointOffset = null;\n\t      }\n\t\n\t      ctx.moveTo(this.points[0].x, this.points[0].y);\n\t      for (var i = 0; i < len; i++) {\n\t        point = this.points[i];\n\t        ctx.lineTo(point.x, point.y);\n\t      }\n\t      return true;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      fabric.Polyline.prototype._renderDashedStroke.call(this, ctx);\n\t      ctx.closePath();\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return this.points.length;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\n\t   * @static\n\t   * @memberOf fabric.Polygon\n\t   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\n\t   */\n\t  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\t\n\t  /**\n\t   * Returns {@link fabric.Polygon} instance from an SVG element\n\t   * @static\n\t   * @memberOf fabric.Polygon\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Polygon} Instance of fabric.Polygon\n\t   */\n\t  fabric.Polygon.fromElement = function(element, options) {\n\t    if (!element) {\n\t      return null;\n\t    }\n\t\n\t    options || (options = { });\n\t\n\t    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n\t        parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);\n\t\n\t    return new fabric.Polygon(points, extend(parsedAttributes, options));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns fabric.Polygon instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Polygon\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Polygon} Instance of fabric.Polygon\n\t   */\n\t  fabric.Polygon.fromObject = function(object) {\n\t    return new fabric.Polygon(object.points, object, true);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      min = fabric.util.array.min,\n\t      max = fabric.util.array.max,\n\t      extend = fabric.util.object.extend,\n\t      _toString = Object.prototype.toString,\n\t      drawArc = fabric.util.drawArc,\n\t      commandLengths = {\n\t        m: 2,\n\t        l: 2,\n\t        h: 1,\n\t        v: 1,\n\t        c: 6,\n\t        s: 4,\n\t        q: 4,\n\t        t: 2,\n\t        a: 7\n\t      },\n\t      repeatedCommands = {\n\t        m: 'l',\n\t        M: 'L'\n\t      };\n\t\n\t  if (fabric.Path) {\n\t    fabric.warn('fabric.Path is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Path class\n\t   * @class fabric.Path\n\t   * @extends fabric.Object\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#path_and_pathgroup}\n\t   * @see {@link fabric.Path#initialize} for constructor definition\n\t   */\n\t  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'path',\n\t\n\t    /**\n\t     * Array of path points\n\t     * @type Array\n\t     * @default\n\t     */\n\t    path: null,\n\t\n\t    /**\n\t     * Minimum X from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minX: 0,\n\t\n\t    /**\n\t     * Minimum Y from points values, necessary to offset points\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minY: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Path} thisArg\n\t     */\n\t    initialize: function(path, options) {\n\t      options = options || { };\n\t\n\t      this.setOptions(options);\n\t\n\t      if (!path) {\n\t        path = [ ];\n\t      }\n\t\n\t      var fromArray = _toString.call(path) === '[object Array]';\n\t\n\t      this.path = fromArray\n\t        ? path\n\t        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n\t        : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n\t\n\t      if (!this.path) {\n\t        return;\n\t      }\n\t\n\t      if (!fromArray) {\n\t        this.path = this._parsePath();\n\t      }\n\t\n\t      this._setPositionDimensions(options);\n\t\n\t      if (options.sourcePath) {\n\t        this.setSourcePath(options.sourcePath);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} options Options object\n\t     */\n\t    _setPositionDimensions: function(options) {\n\t      var calcDim = this._parseDimensions();\n\t\n\t      this.minX = calcDim.left;\n\t      this.minY = calcDim.top;\n\t      this.width = calcDim.width;\n\t      this.height = calcDim.height;\n\t\n\t      if (typeof options.left === 'undefined') {\n\t        this.left = calcDim.left + (this.originX === 'center'\n\t          ? this.width / 2\n\t          : this.originX === 'right'\n\t            ? this.width\n\t            : 0);\n\t      }\n\t\n\t      if (typeof options.top === 'undefined') {\n\t        this.top = calcDim.top + (this.originY === 'center'\n\t          ? this.height / 2\n\t          : this.originY === 'bottom'\n\t            ? this.height\n\t            : 0);\n\t      }\n\t\n\t      this.pathOffset = this.pathOffset || {\n\t        x: this.minX + this.width / 2,\n\t        y: this.minY + this.height / 2\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx context to render path on\n\t     */\n\t    _render: function(ctx) {\n\t      var current, // current instruction\n\t          previous = null,\n\t          subpathStartX = 0,\n\t          subpathStartY = 0,\n\t          x = 0, // current x\n\t          y = 0, // current y\n\t          controlX = 0, // current control point x\n\t          controlY = 0, // current control point y\n\t          tempX,\n\t          tempY,\n\t          l = -this.pathOffset.x,\n\t          t = -this.pathOffset.y;\n\t\n\t      if (this.group && this.group.type === 'path-group') {\n\t        l = 0;\n\t        t = 0;\n\t      }\n\t\n\t      ctx.beginPath();\n\t\n\t      for (var i = 0, len = this.path.length; i < len; ++i) {\n\t\n\t        current = this.path[i];\n\t\n\t        switch (current[0]) { // first letter\n\t\n\t          case 'l': // lineto, relative\n\t            x += current[1];\n\t            y += current[2];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'L': // lineto, absolute\n\t            x = current[1];\n\t            y = current[2];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'h': // horizontal lineto, relative\n\t            x += current[1];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'H': // horizontal lineto, absolute\n\t            x = current[1];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'v': // vertical lineto, relative\n\t            y += current[1];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'V': // verical lineto, absolute\n\t            y = current[1];\n\t            ctx.lineTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'm': // moveTo, relative\n\t            x += current[1];\n\t            y += current[2];\n\t            subpathStartX = x;\n\t            subpathStartY = y;\n\t            ctx.moveTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'M': // moveTo, absolute\n\t            x = current[1];\n\t            y = current[2];\n\t            subpathStartX = x;\n\t            subpathStartY = y;\n\t            ctx.moveTo(x + l, y + t);\n\t            break;\n\t\n\t          case 'c': // bezierCurveTo, relative\n\t            tempX = x + current[5];\n\t            tempY = y + current[6];\n\t            controlX = x + current[3];\n\t            controlY = y + current[4];\n\t            ctx.bezierCurveTo(\n\t              x + current[1] + l, // x1\n\t              y + current[2] + t, // y1\n\t              controlX + l, // x2\n\t              controlY + t, // y2\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'C': // bezierCurveTo, absolute\n\t            x = current[5];\n\t            y = current[6];\n\t            controlX = current[3];\n\t            controlY = current[4];\n\t            ctx.bezierCurveTo(\n\t              current[1] + l,\n\t              current[2] + t,\n\t              controlX + l,\n\t              controlY + t,\n\t              x + l,\n\t              y + t\n\t            );\n\t            break;\n\t\n\t          case 's': // shorthand cubic bezierCurveTo, relative\n\t\n\t            // transform to absolute x,y\n\t            tempX = x + current[3];\n\t            tempY = y + current[4];\n\t\n\t            if (previous[0].match(/[CcSs]/) === null) {\n\t              // If there is no previous command or if the previous command was not a C, c, S, or s,\n\t              // the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control points\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t\n\t            ctx.bezierCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              x + current[1] + l,\n\t              y + current[2] + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            // set control point to 2nd one of this command\n\t            // \"... the first control point is assumed to be\n\t            // the reflection of the second control point on\n\t            // the previous command relative to the current point.\"\n\t            controlX = x + current[1];\n\t            controlY = y + current[2];\n\t\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'S': // shorthand cubic bezierCurveTo, absolute\n\t            tempX = current[3];\n\t            tempY = current[4];\n\t            if (previous[0].match(/[CcSs]/) === null) {\n\t              // If there is no previous command or if the previous command was not a C, c, S, or s,\n\t              // the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control points\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t            ctx.bezierCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              current[1] + l,\n\t              current[2] + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t\n\t            // set control point to 2nd one of this command\n\t            // \"... the first control point is assumed to be\n\t            // the reflection of the second control point on\n\t            // the previous command relative to the current point.\"\n\t            controlX = current[1];\n\t            controlY = current[2];\n\t\n\t            break;\n\t\n\t          case 'q': // quadraticCurveTo, relative\n\t            // transform to absolute x,y\n\t            tempX = x + current[3];\n\t            tempY = y + current[4];\n\t\n\t            controlX = x + current[1];\n\t            controlY = y + current[2];\n\t\n\t            ctx.quadraticCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'Q': // quadraticCurveTo, absolute\n\t            tempX = current[3];\n\t            tempY = current[4];\n\t\n\t            ctx.quadraticCurveTo(\n\t              current[1] + l,\n\t              current[2] + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            controlX = current[1];\n\t            controlY = current[2];\n\t            break;\n\t\n\t          case 't': // shorthand quadraticCurveTo, relative\n\t\n\t            // transform to absolute x,y\n\t            tempX = x + current[1];\n\t            tempY = y + current[2];\n\t\n\t            if (previous[0].match(/[QqTt]/) === null) {\n\t              // If there is no previous command or if the previous command was not a Q, q, T or t,\n\t              // assume the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control point\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t\n\t            ctx.quadraticCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t\n\t            break;\n\t\n\t          case 'T':\n\t            tempX = current[1];\n\t            tempY = current[2];\n\t\n\t            if (previous[0].match(/[QqTt]/) === null) {\n\t              // If there is no previous command or if the previous command was not a Q, q, T or t,\n\t              // assume the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control point\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t            ctx.quadraticCurveTo(\n\t              controlX + l,\n\t              controlY + t,\n\t              tempX + l,\n\t              tempY + t\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'a':\n\t            // TODO: optimize this\n\t            drawArc(ctx, x + l, y + t, [\n\t              current[1],\n\t              current[2],\n\t              current[3],\n\t              current[4],\n\t              current[5],\n\t              current[6] + x + l,\n\t              current[7] + y + t\n\t            ]);\n\t            x += current[6];\n\t            y += current[7];\n\t            break;\n\t\n\t          case 'A':\n\t            // TODO: optimize this\n\t            drawArc(ctx, x + l, y + t, [\n\t              current[1],\n\t              current[2],\n\t              current[3],\n\t              current[4],\n\t              current[5],\n\t              current[6] + l,\n\t              current[7] + t\n\t            ]);\n\t            x = current[6];\n\t            y = current[7];\n\t            break;\n\t\n\t          case 'z':\n\t          case 'Z':\n\t            x = subpathStartX;\n\t            y = subpathStartY;\n\t            ctx.closePath();\n\t            break;\n\t        }\n\t        previous = current;\n\t      }\n\t      this._renderFill(ctx);\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of an instance\n\t     * @return {String} string representation of an instance\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.Path (' + this.complexity() +\n\t        '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var o = extend(this.callSuper('toObject', propertiesToInclude), {\n\t        path: this.path.map(function(item) { return item.slice() }),\n\t        pathOffset: this.pathOffset\n\t      });\n\t      if (this.sourcePath) {\n\t        o.sourcePath = this.sourcePath;\n\t      }\n\t      if (this.transformMatrix) {\n\t        o.transformMatrix = this.transformMatrix;\n\t      }\n\t      return o;\n\t    },\n\t\n\t    /**\n\t     * Returns dataless object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toDatalessObject: function(propertiesToInclude) {\n\t      var o = this.toObject(propertiesToInclude);\n\t      if (this.sourcePath) {\n\t        o.path = this.sourcePath;\n\t      }\n\t      delete o.sourcePath;\n\t      return o;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var chunks = [],\n\t          markup = this._createBaseSVGMarkup(), addTransform = '';\n\t\n\t      for (var i = 0, len = this.path.length; i < len; i++) {\n\t        chunks.push(this.path[i].join(' '));\n\t      }\n\t      var path = chunks.join(' ');\n\t      if (!(this.group && this.group.type === 'path-group')) {\n\t        addTransform = ' translate(' + (-this.pathOffset.x) + ', ' + (-this.pathOffset.y) + ') ';\n\t      }\n\t      markup.push(\n\t        //jscs:disable validateIndentation\n\t        '<path ',\n\t          'd=\"', path,\n\t          '\" style=\"', this.getSvgStyles(),\n\t          '\" transform=\"', this.getSvgTransform(), addTransform,\n\t          this.getSvgTransformMatrix(), '\" stroke-linecap=\"round\" ',\n\t        '/>\\n'\n\t        //jscs:enable validateIndentation\n\t      );\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns number representation of an instance complexity\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return this.path.length;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _parsePath: function() {\n\t      var result = [ ],\n\t          coords = [ ],\n\t          currentPath,\n\t          parsed,\n\t          re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/ig,\n\t          match,\n\t          coordsStr;\n\t\n\t      for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\n\t        currentPath = this.path[i];\n\t\n\t        coordsStr = currentPath.slice(1).trim();\n\t        coords.length = 0;\n\t\n\t        while ((match = re.exec(coordsStr))) {\n\t          coords.push(match[0]);\n\t        }\n\t\n\t        coordsParsed = [ currentPath.charAt(0) ];\n\t\n\t        for (var j = 0, jlen = coords.length; j < jlen; j++) {\n\t          parsed = parseFloat(coords[j]);\n\t          if (!isNaN(parsed)) {\n\t            coordsParsed.push(parsed);\n\t          }\n\t        }\n\t\n\t        var command = coordsParsed[0],\n\t            commandLength = commandLengths[command.toLowerCase()],\n\t            repeatedCommand = repeatedCommands[command] || command;\n\t\n\t        if (coordsParsed.length - 1 > commandLength) {\n\t          for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\n\t            result.push([ command ].concat(coordsParsed.slice(k, k + commandLength)));\n\t            command = repeatedCommand;\n\t          }\n\t        }\n\t        else {\n\t          result.push(coordsParsed);\n\t        }\n\t      }\n\t\n\t      return result;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _parseDimensions: function() {\n\t\n\t      var aX = [],\n\t          aY = [],\n\t          current, // current instruction\n\t          previous = null,\n\t          subpathStartX = 0,\n\t          subpathStartY = 0,\n\t          x = 0, // current x\n\t          y = 0, // current y\n\t          controlX = 0, // current control point x\n\t          controlY = 0, // current control point y\n\t          tempX,\n\t          tempY,\n\t          bounds;\n\t\n\t      for (var i = 0, len = this.path.length; i < len; ++i) {\n\t\n\t        current = this.path[i];\n\t\n\t        switch (current[0]) { // first letter\n\t\n\t          case 'l': // lineto, relative\n\t            x += current[1];\n\t            y += current[2];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'L': // lineto, absolute\n\t            x = current[1];\n\t            y = current[2];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'h': // horizontal lineto, relative\n\t            x += current[1];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'H': // horizontal lineto, absolute\n\t            x = current[1];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'v': // vertical lineto, relative\n\t            y += current[1];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'V': // verical lineto, absolute\n\t            y = current[1];\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'm': // moveTo, relative\n\t            x += current[1];\n\t            y += current[2];\n\t            subpathStartX = x;\n\t            subpathStartY = y;\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'M': // moveTo, absolute\n\t            x = current[1];\n\t            y = current[2];\n\t            subpathStartX = x;\n\t            subpathStartY = y;\n\t            bounds = [ ];\n\t            break;\n\t\n\t          case 'c': // bezierCurveTo, relative\n\t            tempX = x + current[5];\n\t            tempY = y + current[6];\n\t            controlX = x + current[3];\n\t            controlY = y + current[4];\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              x + current[1], // x1\n\t              y + current[2], // y1\n\t              controlX, // x2\n\t              controlY, // y2\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'C': // bezierCurveTo, absolute\n\t            x = current[5];\n\t            y = current[6];\n\t            controlX = current[3];\n\t            controlY = current[4];\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              current[1],\n\t              current[2],\n\t              controlX,\n\t              controlY,\n\t              x,\n\t              y\n\t            );\n\t            break;\n\t\n\t          case 's': // shorthand cubic bezierCurveTo, relative\n\t\n\t            // transform to absolute x,y\n\t            tempX = x + current[3];\n\t            tempY = y + current[4];\n\t\n\t            if (previous[0].match(/[CcSs]/) === null) {\n\t              // If there is no previous command or if the previous command was not a C, c, S, or s,\n\t              // the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control points\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              x + current[1],\n\t              y + current[2],\n\t              tempX,\n\t              tempY\n\t            );\n\t            // set control point to 2nd one of this command\n\t            // \"... the first control point is assumed to be\n\t            // the reflection of the second control point on\n\t            // the previous command relative to the current point.\"\n\t            controlX = x + current[1];\n\t            controlY = y + current[2];\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'S': // shorthand cubic bezierCurveTo, absolute\n\t            tempX = current[3];\n\t            tempY = current[4];\n\t            if (previous[0].match(/[CcSs]/) === null) {\n\t              // If there is no previous command or if the previous command was not a C, c, S, or s,\n\t              // the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control points\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              current[1],\n\t              current[2],\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            // set control point to 2nd one of this command\n\t            // \"... the first control point is assumed to be\n\t            // the reflection of the second control point on\n\t            // the previous command relative to the current point.\"\n\t            controlX = current[1];\n\t            controlY = current[2];\n\t            break;\n\t\n\t          case 'q': // quadraticCurveTo, relative\n\t            // transform to absolute x,y\n\t            tempX = x + current[3];\n\t            tempY = y + current[4];\n\t            controlX = x + current[1];\n\t            controlY = y + current[2];\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              controlX,\n\t              controlY,\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'Q': // quadraticCurveTo, absolute\n\t            controlX = current[1];\n\t            controlY = current[2];\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              controlX,\n\t              controlY,\n\t              current[3],\n\t              current[4]\n\t            );\n\t            x = current[3];\n\t            y = current[4];\n\t            break;\n\t\n\t          case 't': // shorthand quadraticCurveTo, relative\n\t            // transform to absolute x,y\n\t            tempX = x + current[1];\n\t            tempY = y + current[2];\n\t            if (previous[0].match(/[QqTt]/) === null) {\n\t              // If there is no previous command or if the previous command was not a Q, q, T or t,\n\t              // assume the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control point\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              controlX,\n\t              controlY,\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t\n\t            break;\n\t\n\t          case 'T':\n\t            tempX = current[1];\n\t            tempY = current[2];\n\t\n\t            if (previous[0].match(/[QqTt]/) === null) {\n\t              // If there is no previous command or if the previous command was not a Q, q, T or t,\n\t              // assume the control point is coincident with the current point\n\t              controlX = x;\n\t              controlY = y;\n\t            }\n\t            else {\n\t              // calculate reflection of previous control point\n\t              controlX = 2 * x - controlX;\n\t              controlY = 2 * y - controlY;\n\t            }\n\t            bounds = fabric.util.getBoundsOfCurve(x, y,\n\t              controlX,\n\t              controlY,\n\t              controlX,\n\t              controlY,\n\t              tempX,\n\t              tempY\n\t            );\n\t            x = tempX;\n\t            y = tempY;\n\t            break;\n\t\n\t          case 'a':\n\t            // TODO: optimize this\n\t            bounds = fabric.util.getBoundsOfArc(x, y,\n\t              current[1],\n\t              current[2],\n\t              current[3],\n\t              current[4],\n\t              current[5],\n\t              current[6] + x,\n\t              current[7] + y\n\t            );\n\t            x += current[6];\n\t            y += current[7];\n\t            break;\n\t\n\t          case 'A':\n\t            // TODO: optimize this\n\t            bounds = fabric.util.getBoundsOfArc(x, y,\n\t              current[1],\n\t              current[2],\n\t              current[3],\n\t              current[4],\n\t              current[5],\n\t              current[6],\n\t              current[7]\n\t            );\n\t            x = current[6];\n\t            y = current[7];\n\t            break;\n\t\n\t          case 'z':\n\t          case 'Z':\n\t            x = subpathStartX;\n\t            y = subpathStartY;\n\t            break;\n\t        }\n\t        previous = current;\n\t        bounds.forEach(function (point) {\n\t          aX.push(point.x);\n\t          aY.push(point.y);\n\t        });\n\t        aX.push(x);\n\t        aY.push(y);\n\t      }\n\t\n\t      var minX = min(aX) || 0,\n\t          minY = min(aY) || 0,\n\t          maxX = max(aX) || 0,\n\t          maxY = max(aY) || 0,\n\t          deltaX = maxX - minX,\n\t          deltaY = maxY - minY,\n\t\n\t          o = {\n\t            left: minX,\n\t            top: minY,\n\t            width: deltaX,\n\t            height: deltaY\n\t          };\n\t\n\t      return o;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Creates an instance of fabric.Path from an object\n\t   * @static\n\t   * @memberOf fabric.Path\n\t   * @param {Object} object\n\t   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n\t   */\n\t  fabric.Path.fromObject = function(object, callback) {\n\t    if (typeof object.path === 'string') {\n\t      fabric.loadSVGFromURL(object.path, function (elements) {\n\t        var path = elements[0],\n\t            pathUrl = object.path;\n\t\n\t        delete object.path;\n\t\n\t        fabric.util.object.extend(path, object);\n\t        path.setSourcePath(pathUrl);\n\t\n\t        callback(path);\n\t      });\n\t    }\n\t    else {\n\t      callback(new fabric.Path(object.path, object));\n\t    }\n\t  };\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\n\t   * @static\n\t   * @memberOf fabric.Path\n\t   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n\t   */\n\t  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\n\t\n\t  /**\n\t   * Creates an instance of fabric.Path from an SVG <path> element\n\t   * @static\n\t   * @memberOf fabric.Path\n\t   * @param {SVGElement} element to parse\n\t   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n\t   * @param {Object} [options] Options object\n\t   */\n\t  fabric.Path.fromElement = function(element, callback, options) {\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\n\t    callback && callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @memberOf fabric.Path\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.Path.async = true;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      invoke = fabric.util.array.invoke,\n\t      parentToObject = fabric.Object.prototype.toObject;\n\t\n\t  if (fabric.PathGroup) {\n\t    fabric.warn('fabric.PathGroup is already defined');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Path group class\n\t   * @class fabric.PathGroup\n\t   * @extends fabric.Path\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#path_and_pathgroup}\n\t   * @see {@link fabric.PathGroup#initialize} for constructor definition\n\t   */\n\t  fabric.PathGroup = fabric.util.createClass(fabric.Path, /** @lends fabric.PathGroup.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'path-group',\n\t\n\t    /**\n\t     * Fill value\n\t     * @type String\n\t     * @default\n\t     */\n\t    fill: '',\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Array} paths\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.PathGroup} thisArg\n\t     */\n\t    initialize: function(paths, options) {\n\t\n\t      options = options || { };\n\t      this.paths = paths || [ ];\n\t\n\t      for (var i = this.paths.length; i--;) {\n\t        this.paths[i].group = this;\n\t      }\n\t\n\t      if (options.toBeParsed) {\n\t        this.parseDimensionsFromPaths(options);\n\t        delete options.toBeParsed;\n\t      }\n\t      this.setOptions(options);\n\t      this.setCoords();\n\t\n\t      if (options.sourcePath) {\n\t        this.setSourcePath(options.sourcePath);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Calculate width and height based on paths contained\n\t     */\n\t    parseDimensionsFromPaths: function(options) {\n\t      var points, p, xC = [ ], yC = [ ], path, height, width,\n\t          m;\n\t      for (var j = this.paths.length; j--;) {\n\t        path = this.paths[j];\n\t        height = path.height + path.strokeWidth;\n\t        width = path.width + path.strokeWidth;\n\t        points = [\n\t          { x: path.left, y: path.top },\n\t          { x: path.left + width, y: path.top },\n\t          { x: path.left, y: path.top + height },\n\t          { x: path.left + width, y: path.top + height }\n\t        ];\n\t        m = this.paths[j].transformMatrix;\n\t        for (var i = 0; i < points.length; i++) {\n\t          p = points[i];\n\t          if (m) {\n\t            p = fabric.util.transformPoint(p, m, false);\n\t          }\n\t          xC.push(p.x);\n\t          yC.push(p.y);\n\t        }\n\t      }\n\t      options.width = Math.max.apply(null, xC);\n\t      options.height = Math.max.apply(null, yC);\n\t    },\n\t\n\t    /**\n\t     * Renders this group on a specified context\n\t     * @param {CanvasRenderingContext2D} ctx Context to render this instance on\n\t     */\n\t    render: function(ctx) {\n\t      // do not render if object is not visible\n\t      if (!this.visible) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      if (this.transformMatrix) {\n\t        ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      this.transform(ctx);\n\t\n\t      this._setShadow(ctx);\n\t      this.clipTo && fabric.util.clipContext(this, ctx);\n\t      ctx.translate(-this.width/2, -this.height/2);\n\t      for (var i = 0, l = this.paths.length; i < l; ++i) {\n\t        this.paths[i].render(ctx, true);\n\t      }\n\t      this.clipTo && ctx.restore();\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Sets certain property to a certain value\n\t     * @param {String} prop\n\t     * @param {Any} value\n\t     * @return {fabric.PathGroup} thisArg\n\t     */\n\t    _set: function(prop, value) {\n\t\n\t      if (prop === 'fill' && value && this.isSameColor()) {\n\t        var i = this.paths.length;\n\t        while (i--) {\n\t          this.paths[i]._set(prop, value);\n\t        }\n\t      }\n\t\n\t      return this.callSuper('_set', prop, value);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of this path group\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var o = extend(parentToObject.call(this, propertiesToInclude), {\n\t        paths: invoke(this.getObjects(), 'toObject', propertiesToInclude)\n\t      });\n\t      if (this.sourcePath) {\n\t        o.sourcePath = this.sourcePath;\n\t      }\n\t      return o;\n\t    },\n\t\n\t    /**\n\t     * Returns dataless object representation of this path group\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} dataless object representation of an instance\n\t     */\n\t    toDatalessObject: function(propertiesToInclude) {\n\t      var o = this.toObject(propertiesToInclude);\n\t      if (this.sourcePath) {\n\t        o.paths = this.sourcePath;\n\t      }\n\t      return o;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var objects = this.getObjects(),\n\t          p = this.getPointByOrigin('left', 'top'),\n\t          translatePart = 'translate(' + p.x + ' ' + p.y + ')',\n\t          markup = [\n\t            //jscs:disable validateIndentation\n\t            '<g ',\n\t              'style=\"', this.getSvgStyles(), '\" ',\n\t              'transform=\"', this.getSvgTransformMatrix(), translatePart, this.getSvgTransform(), '\" ',\n\t            '>\\n'\n\t            //jscs:enable validateIndentation\n\t          ];\n\t\n\t      for (var i = 0, len = objects.length; i < len; i++) {\n\t        markup.push(objects[i].toSVG(reviver));\n\t      }\n\t      markup.push('</g>\\n');\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns a string representation of this path group\n\t     * @return {String} string representation of an object\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.PathGroup (' + this.complexity() +\n\t        '): { top: ' + this.top + ', left: ' + this.left + ' }>';\n\t    },\n\t\n\t    /**\n\t     * Returns true if all paths in this group are of same color\n\t     * @return {Boolean} true if all paths are of the same color (`fill`)\n\t     */\n\t    isSameColor: function() {\n\t      var firstPathFill = (this.getObjects()[0].get('fill') || '').toLowerCase();\n\t      return this.getObjects().every(function(path) {\n\t        return (path.get('fill') || '').toLowerCase() === firstPathFill;\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Returns number representation of object's complexity\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return this.paths.reduce(function(total, path) {\n\t        return total + ((path && path.complexity) ? path.complexity() : 0);\n\t      }, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns all paths in this path group\n\t     * @return {Array} array of path objects included in this path group\n\t     */\n\t    getObjects: function() {\n\t      return this.paths;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Creates fabric.PathGroup instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.PathGroup\n\t   * @param {Object} object Object to create an instance from\n\t   * @param {Function} callback Callback to invoke when an fabric.PathGroup instance is created\n\t   */\n\t  fabric.PathGroup.fromObject = function(object, callback) {\n\t    if (typeof object.paths === 'string') {\n\t      fabric.loadSVGFromURL(object.paths, function (elements) {\n\t\n\t        var pathUrl = object.paths;\n\t        delete object.paths;\n\t\n\t        var pathGroup = fabric.util.groupSVGElements(elements, object, pathUrl);\n\t\n\t        callback(pathGroup);\n\t      });\n\t    }\n\t    else {\n\t      fabric.util.enlivenObjects(object.paths, function(enlivenedObjects) {\n\t        delete object.paths;\n\t        callback(new fabric.PathGroup(enlivenedObjects, object));\n\t      });\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @memberOf fabric.PathGroup\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.PathGroup.async = true;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      min = fabric.util.array.min,\n\t      max = fabric.util.array.max,\n\t      invoke = fabric.util.array.invoke;\n\t\n\t  if (fabric.Group) {\n\t    return;\n\t  }\n\t\n\t  // lock-related properties, for use in fabric.Group#get\n\t  // to enable locking behavior on group\n\t  // when one of its objects has lock-related properties set\n\t  var _lockProperties = {\n\t    lockMovementX:  true,\n\t    lockMovementY:  true,\n\t    lockRotation:   true,\n\t    lockScalingX:   true,\n\t    lockScalingY:   true,\n\t    lockUniScaling: true\n\t  };\n\t\n\t  /**\n\t   * Group class\n\t   * @class fabric.Group\n\t   * @extends fabric.Object\n\t   * @mixes fabric.Collection\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#groups}\n\t   * @see {@link fabric.Group#initialize} for constructor definition\n\t   */\n\t  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'group',\n\t\n\t    /**\n\t     * Width of stroke\n\t     * @type Number\n\t     * @default\n\t     */\n\t    strokeWidth: 0,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Object} objects Group objects\n\t     * @param {Object} [options] Options object\n\t     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n\t     * @return {Object} thisArg\n\t     */\n\t    initialize: function(objects, options, isAlreadyGrouped) {\n\t      options = options || { };\n\t\n\t      this._objects = [];\n\t      // if objects enclosed in a group have been grouped already,\n\t      // we cannot change properties of objects.\n\t      // Thus we need to set options to group without objects,\n\t      // because delegatedProperties propagate to objects.\n\t      isAlreadyGrouped && this.callSuper('initialize', options);\n\t\n\t      this._objects = objects || [];\n\t      for (var i = this._objects.length; i--; ) {\n\t        this._objects[i].group = this;\n\t      }\n\t\n\t      this.originalState = { };\n\t\n\t      if (options.originX) {\n\t        this.originX = options.originX;\n\t      }\n\t      if (options.originY) {\n\t        this.originY = options.originY;\n\t      }\n\t\n\t      if (isAlreadyGrouped) {\n\t        // do not change coordinate of objects enclosed in a group,\n\t        // because objects coordinate system have been group coodinate system already.\n\t        this._updateObjectsCoords(true);\n\t      }\n\t      else {\n\t        this._calcBounds();\n\t        this._updateObjectsCoords();\n\t        this.callSuper('initialize', options);\n\t      }\n\t\n\t      this.setCoords();\n\t      this.saveCoords();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n\t     */\n\t    _updateObjectsCoords: function(skipCoordsChange) {\n\t      for (var i = this._objects.length; i--; ){\n\t        this._updateObjectCoords(this._objects[i], skipCoordsChange);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} object\n\t     * @param {Boolean} [skipCoordsChange] if true, coordinates of object dose not change\n\t     */\n\t    _updateObjectCoords: function(object, skipCoordsChange) {\n\t      // do not display corners of objects enclosed in a group\n\t      object.__origHasControls = object.hasControls;\n\t      object.hasControls = false;\n\t\n\t      if (skipCoordsChange) {\n\t        return;\n\t      }\n\t\n\t      var objectLeft = object.getLeft(),\n\t          objectTop = object.getTop(),\n\t          center = this.getCenterPoint();\n\t\n\t      object.set({\n\t        originalLeft: objectLeft,\n\t        originalTop: objectTop,\n\t        left: objectLeft - center.x,\n\t        top: objectTop - center.y\n\t      });\n\t      object.setCoords();\n\t    },\n\t\n\t    /**\n\t     * Returns string represenation of a group\n\t     * @return {String}\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.Group: (' + this.complexity() + ')>';\n\t    },\n\t\n\t    /**\n\t     * Adds an object to a group; Then recalculates group's dimension, position.\n\t     * @param {Object} object\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    addWithUpdate: function(object) {\n\t      this._restoreObjectsState();\n\t      if (object) {\n\t        this._objects.push(object);\n\t        object.group = this;\n\t        object._set('canvas', this.canvas);\n\t      }\n\t      // since _restoreObjectsState set objects inactive\n\t      this.forEachObject(this._setObjectActive, this);\n\t      this._calcBounds();\n\t      this._updateObjectsCoords();\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setObjectActive: function(object) {\n\t      object.set('active', true);\n\t      object.group = this;\n\t    },\n\t\n\t    /**\n\t     * Removes an object from a group; Then recalculates group's dimension, position.\n\t     * @param {Object} object\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    removeWithUpdate: function(object) {\n\t      this._moveFlippedObject(object);\n\t      this._restoreObjectsState();\n\t\n\t      // since _restoreObjectsState set objects inactive\n\t      this.forEachObject(this._setObjectActive, this);\n\t\n\t      this.remove(object);\n\t      this._calcBounds();\n\t      this._updateObjectsCoords();\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onObjectAdded: function(object) {\n\t      object.group = this;\n\t      object._set('canvas', this.canvas);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onObjectRemoved: function(object) {\n\t      delete object.group;\n\t      object.set('active', false);\n\t    },\n\t\n\t    /**\n\t     * Properties that are delegated to group objects when reading/writing\n\t     * @param {Object} delegatedProperties\n\t     */\n\t    delegatedProperties: {\n\t      fill:             true,\n\t      opacity:          true,\n\t      fontFamily:       true,\n\t      fontWeight:       true,\n\t      fontSize:         true,\n\t      fontStyle:        true,\n\t      lineHeight:       true,\n\t      textDecoration:   true,\n\t      textAlign:        true,\n\t      backgroundColor:  true\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _set: function(key, value) {\n\t      var i = this._objects.length;\n\t\n\t      if (this.delegatedProperties[key] || key === 'canvas') {\n\t        while (i--) {\n\t          this._objects[i].set(key, value);\n\t        }\n\t      }\n\t      else {\n\t        while (i--) {\n\t          this._objects[i].setOnGroup(key, value);\n\t        }\n\t      }\n\t\n\t      this.callSuper('_set', key, value);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return extend(this.callSuper('toObject', propertiesToInclude), {\n\t        objects: invoke(this._objects, 'toObject', propertiesToInclude)\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Renders instance on a given context\n\t     * @param {CanvasRenderingContext2D} ctx context to render instance on\n\t     */\n\t    render: function(ctx) {\n\t      // do not render if object is not visible\n\t      if (!this.visible) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      if (this.transformMatrix) {\n\t        ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      this.transform(ctx);\n\t      this.clipTo && fabric.util.clipContext(this, ctx);\n\t      // the array is now sorted in order of highest first, so start from end\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._renderObject(this._objects[i], ctx);\n\t      }\n\t\n\t      this.clipTo && ctx.restore();\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Renders controls and borders for the object\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Boolean} [noTransform] When true, context is not transformed\n\t     */\n\t    _renderControls: function(ctx, noTransform) {\n\t      this.callSuper('_renderControls', ctx, noTransform);\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        this._objects[i]._renderControls(ctx);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _renderObject: function(object, ctx) {\n\t      // do not render if object is not visible\n\t      if (!object.visible) {\n\t        return;\n\t      }\n\t\n\t      var originalHasRotatingPoint = object.hasRotatingPoint;\n\t      object.hasRotatingPoint = false;\n\t      object.render(ctx);\n\t      object.hasRotatingPoint = originalHasRotatingPoint;\n\t    },\n\t\n\t    /**\n\t     * Retores original state of each of group objects (original state is that which was before group was created).\n\t     * @private\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    _restoreObjectsState: function() {\n\t      this._objects.forEach(this._restoreObjectState, this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Realises the transform from this group onto the supplied object\n\t     * i.e. it tells you what would happen if the supplied object was in\n\t     * the group, and then the group was destroyed. It mutates the supplied\n\t     * object.\n\t     * @param {fabric.Object} object\n\t     * @return {fabric.Object} transformedObject\n\t     */\n\t    realizeTransform: function(object) {\n\t      this._moveFlippedObject(object);\n\t      this._setObjectPosition(object);\n\t      return object;\n\t    },\n\t\n\t    /**\n\t     * Moves a flipped object to the position where it's displayed\n\t     * @private\n\t     * @param {fabric.Object} object\n\t     * @return {fabric.Group} thisArg\n\t     */\n\t    _moveFlippedObject: function(object) {\n\t      var oldOriginX = object.get('originX'),\n\t          oldOriginY = object.get('originY'),\n\t          center = object.getCenterPoint();\n\t\n\t      object.set({\n\t        originX: 'center',\n\t        originY: 'center',\n\t        left: center.x,\n\t        top: center.y\n\t      });\n\t\n\t      this._toggleFlipping(object);\n\t\n\t      var newOrigin = object.getPointByOrigin(oldOriginX, oldOriginY);\n\t\n\t      object.set({\n\t        originX: oldOriginX,\n\t        originY: oldOriginY,\n\t        left: newOrigin.x,\n\t        top: newOrigin.y\n\t      });\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _toggleFlipping: function(object) {\n\t      if (this.flipX) {\n\t        object.toggle('flipX');\n\t        object.set('left', -object.get('left'));\n\t        object.setAngle(-object.getAngle());\n\t      }\n\t      if (this.flipY) {\n\t        object.toggle('flipY');\n\t        object.set('top', -object.get('top'));\n\t        object.setAngle(-object.getAngle());\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Restores original state of a specified object in group\n\t     * @private\n\t     * @param {fabric.Object} object\n\t     * @return {fabric.Group} thisArg\n\t     */\n\t    _restoreObjectState: function(object) {\n\t      this._setObjectPosition(object);\n\t\n\t      object.setCoords();\n\t      object.hasControls = object.__origHasControls;\n\t      delete object.__origHasControls;\n\t      object.set('active', false);\n\t      object.setCoords();\n\t      delete object.group;\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setObjectPosition: function(object) {\n\t      var center = this.getCenterPoint(),\n\t          rotated = this._getRotatedLeftTop(object);\n\t\n\t      object.set({\n\t        angle: object.getAngle() + this.getAngle(),\n\t        left: center.x + rotated.left,\n\t        top: center.y + rotated.top,\n\t        scaleX: object.get('scaleX') * this.get('scaleX'),\n\t        scaleY: object.get('scaleY') * this.get('scaleY')\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getRotatedLeftTop: function(object) {\n\t      var groupAngle = this.getAngle() * (Math.PI / 180);\n\t      return {\n\t        left: (-Math.sin(groupAngle) * object.getTop() * this.get('scaleY') +\n\t                Math.cos(groupAngle) * object.getLeft() * this.get('scaleX')),\n\t\n\t        top:  (Math.cos(groupAngle) * object.getTop() * this.get('scaleY') +\n\t               Math.sin(groupAngle) * object.getLeft() * this.get('scaleX'))\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Destroys a group (restoring state of its objects)\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    destroy: function() {\n\t      this._objects.forEach(this._moveFlippedObject, this);\n\t      return this._restoreObjectsState();\n\t    },\n\t\n\t    /**\n\t     * Saves coordinates of this instance (to be used together with `hasMoved`)\n\t     * @saveCoords\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    saveCoords: function() {\n\t      this._originalLeft = this.get('left');\n\t      this._originalTop = this.get('top');\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Checks whether this group was moved (since `saveCoords` was called last)\n\t     * @return {Boolean} true if an object was moved (since fabric.Group#saveCoords was called)\n\t     */\n\t    hasMoved: function() {\n\t      return this._originalLeft !== this.get('left') ||\n\t             this._originalTop !== this.get('top');\n\t    },\n\t\n\t    /**\n\t     * Sets coordinates of all group objects\n\t     * @return {fabric.Group} thisArg\n\t     * @chainable\n\t     */\n\t    setObjectsCoords: function() {\n\t      this.forEachObject(function(object) {\n\t        object.setCoords();\n\t      });\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _calcBounds: function(onlyWidthHeight) {\n\t      var aX = [],\n\t          aY = [],\n\t          o, prop,\n\t          props = ['tr', 'br', 'bl', 'tl'],\n\t          i = 0, iLen = this._objects.length,\n\t          j, jLen = props.length;\n\t\n\t      for ( ; i < iLen; ++i) {\n\t        o = this._objects[i];\n\t        o.setCoords();\n\t        for (j = 0; j < jLen; j++) {\n\t          prop = props[j];\n\t          aX.push(o.oCoords[prop].x);\n\t          aY.push(o.oCoords[prop].y);\n\t        }\n\t      }\n\t\n\t      this.set(this._getBounds(aX, aY, onlyWidthHeight));\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getBounds: function(aX, aY, onlyWidthHeight) {\n\t      var ivt = fabric.util.invertTransform(this.getViewportTransform()),\n\t          minXY = fabric.util.transformPoint(new fabric.Point(min(aX), min(aY)), ivt),\n\t          maxXY = fabric.util.transformPoint(new fabric.Point(max(aX), max(aY)), ivt),\n\t          obj = {\n\t            width: (maxXY.x - minXY.x) || 0,\n\t            height: (maxXY.y - minXY.y) || 0\n\t          };\n\t\n\t      if (!onlyWidthHeight) {\n\t        obj.left = minXY.x || 0;\n\t        obj.top = minXY.y || 0;\n\t        if (this.originX === 'center') {\n\t          obj.left += obj.width / 2;\n\t        }\n\t        if (this.originX === 'right') {\n\t          obj.left += obj.width;\n\t        }\n\t        if (this.originY === 'center') {\n\t          obj.top += obj.height / 2;\n\t        }\n\t        if (this.originY === 'bottom') {\n\t          obj.top += obj.height;\n\t        }\n\t      }\n\t      return obj;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns svg representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = [\n\t        //jscs:disable validateIndentation\n\t        '<g ',\n\t          'transform=\"', this.getSvgTransform(),\n\t        '\">\\n'\n\t        //jscs:enable validateIndentation\n\t      ];\n\t\n\t      for (var i = 0, len = this._objects.length; i < len; i++) {\n\t        markup.push(this._objects[i].toSVG(reviver));\n\t      }\n\t\n\t      markup.push('</g>\\n');\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns requested property\n\t     * @param {String} prop Property to get\n\t     * @return {Any}\n\t     */\n\t    get: function(prop) {\n\t      if (prop in _lockProperties) {\n\t        if (this[prop]) {\n\t          return this[prop];\n\t        }\n\t        else {\n\t          for (var i = 0, len = this._objects.length; i < len; i++) {\n\t            if (this._objects[i][prop]) {\n\t              return true;\n\t            }\n\t          }\n\t          return false;\n\t        }\n\t      }\n\t      else {\n\t        if (prop in this.delegatedProperties) {\n\t          return this._objects[0] && this._objects[0].get(prop);\n\t        }\n\t        return this[prop];\n\t      }\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns {@link fabric.Group} instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Group\n\t   * @param {Object} object Object to create a group from\n\t   * @param {Function} [callback] Callback to invoke when an group instance is created\n\t   * @return {fabric.Group} An instance of fabric.Group\n\t   */\n\t  fabric.Group.fromObject = function(object, callback) {\n\t    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n\t      delete object.objects;\n\t      callback && callback(new fabric.Group(enlivenedObjects, object, true));\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @memberOf fabric.Group\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.Group.async = true;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var extend = fabric.util.object.extend;\n\t\n\t  if (!global.fabric) {\n\t    global.fabric = { };\n\t  }\n\t\n\t  if (global.fabric.Image) {\n\t    fabric.warn('fabric.Image is already defined.');\n\t    return;\n\t  }\n\t\n\t  /**\n\t   * Image class\n\t   * @class fabric.Image\n\t   * @extends fabric.Object\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#images}\n\t   * @see {@link fabric.Image#initialize} for constructor definition\n\t   */\n\t  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'image',\n\t\n\t    /**\n\t     * crossOrigin value (one of \"\", \"anonymous\", \"allow-credentials\")\n\t     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n\t     * @type String\n\t     * @default\n\t     */\n\t    crossOrigin: '',\n\t\n\t    /**\n\t     * AlignX value, part of preserveAspectRatio (one of \"none\", \"mid\", \"min\", \"max\")\n\t     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n\t     * This parameter defines how the picture is aligned to its viewport when image element width differs from image width.\n\t     * @type String\n\t     * @default\n\t     */\n\t    alignX: 'none',\n\t\n\t    /**\n\t     * AlignY value, part of preserveAspectRatio (one of \"none\", \"mid\", \"min\", \"max\")\n\t     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n\t     * This parameter defines how the picture is aligned to its viewport when image element height differs from image height.\n\t     * @type String\n\t     * @default\n\t     */\n\t    alignY: 'none',\n\t\n\t    /**\n\t     * meetOrSlice value, part of preserveAspectRatio  (one of \"meet\", \"slice\").\n\t     * if meet the image is always fully visibile, if slice the viewport is always filled with image.\n\t     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n\t     * @type String\n\t     * @default\n\t     */\n\t    meetOrSlice: 'meet',\n\t\n\t    /**\n\t     * private\n\t     * contains last value of scaleX to detect\n\t     * if the Image got resized after the last Render\n\t     * @type Number\n\t     */\n\t    _lastScaleX: 1,\n\t\n\t    /**\n\t     * private\n\t     * contains last value of scaleY to detect\n\t     * if the Image got resized after the last Render\n\t     * @type Number\n\t     */\n\t    _lastScaleY: 1,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {HTMLImageElement | String} element Image element\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Image} thisArg\n\t     */\n\t    initialize: function(element, options) {\n\t      options || (options = { });\n\t      this.filters = [ ];\n\t      this.resizeFilters = [ ];\n\t      this.callSuper('initialize', options);\n\t      this._initElement(element, options);\n\t    },\n\t\n\t    /**\n\t     * Returns image element which this instance if based on\n\t     * @return {HTMLImageElement} Image element\n\t     */\n\t    getElement: function() {\n\t      return this._element;\n\t    },\n\t\n\t    /**\n\t     * Sets image element for this instance to a specified one.\n\t     * If filters defined they are applied to new image.\n\t     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n\t     * @param {HTMLImageElement} element\n\t     * @param {Function} [callback] Callback is invoked when all filters have been applied and new image is generated\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Image} thisArg\n\t     * @chainable\n\t     */\n\t    setElement: function(element, callback, options) {\n\t      this._element = element;\n\t      this._originalElement = element;\n\t      this._initConfig(options);\n\t\n\t      if (this.filters.length !== 0) {\n\t        this.applyFilters(callback);\n\t      }\n\t      else if (callback) {\n\t        callback();\n\t      }\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Sets crossOrigin value (on an instance and corresponding image element)\n\t     * @return {fabric.Image} thisArg\n\t     * @chainable\n\t     */\n\t    setCrossOrigin: function(value) {\n\t      this.crossOrigin = value;\n\t      this._element.crossOrigin = value;\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Returns original size of an image\n\t     * @return {Object} Object with \"width\" and \"height\" properties\n\t     */\n\t    getOriginalSize: function() {\n\t      var element = this.getElement();\n\t      return {\n\t        width: element.width,\n\t        height: element.height\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _stroke: function(ctx) {\n\t      ctx.save();\n\t      this._setStrokeStyles(ctx);\n\t      ctx.beginPath();\n\t      ctx.strokeRect(-this.width / 2, -this.height / 2, this.width, this.height);\n\t      ctx.closePath();\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderDashedStroke: function(ctx) {\n\t      var x = -this.width / 2,\n\t          y = -this.height / 2,\n\t          w = this.width,\n\t          h = this.height;\n\t\n\t      ctx.save();\n\t      this._setStrokeStyles(ctx);\n\t\n\t      ctx.beginPath();\n\t      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n\t      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n\t      ctx.closePath();\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var filters = [ ];\n\t      this.filters.forEach(function(filterObj) {\n\t        if (filterObj) {\n\t          filters.push(filterObj.toObject());\n\t        }\n\t      });\n\t      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n\t        src: this._originalElement.src || this._originalElement._src,\n\t        filters: filters,\n\t        crossOrigin: this.crossOrigin,\n\t        alignX: this.alignX,\n\t        alignY: this.alignY,\n\t        meetOrSlice: this.meetOrSlice\n\t      });\n\t\n\t      if (this.resizeFilters.length > 0) {\n\t        object.resizeFilters = this.resizeFilters.map(function(filterObj) {\n\t          return filterObj && filterObj.toObject();\n\t        });\n\t      }\n\t\n\t      if (!this.includeDefaultValues) {\n\t        this._removeDefaultValues(object);\n\t      }\n\t\n\t      return object;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = [], x = -this.width / 2, y = -this.height / 2,\n\t          preserveAspectRatio = 'none';\n\t      if (this.group && this.group.type === 'path-group') {\n\t        x = this.left;\n\t        y = this.top;\n\t      }\n\t      if (this.alignX !== 'none' && this.alignY !== 'none') {\n\t        preserveAspectRatio = 'x' + this.alignX + 'Y' + this.alignY + ' ' + this.meetOrSlice;\n\t      }\n\t      markup.push(\n\t        '<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n',\n\t          '<image xlink:href=\"', this.getSvgSrc(),\n\t            '\" x=\"', x, '\" y=\"', y,\n\t            '\" style=\"', this.getSvgStyles(),\n\t            // we're essentially moving origin of transformation from top/left corner to the center of the shape\n\t            // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n\t            // so that object's center aligns with container's left/top\n\t            '\" width=\"', this.width,\n\t            '\" height=\"', this.height,\n\t            '\" preserveAspectRatio=\"', preserveAspectRatio, '\"',\n\t          '></image>\\n'\n\t      );\n\t\n\t      if (this.stroke || this.strokeDashArray) {\n\t        var origFill = this.fill;\n\t        this.fill = null;\n\t        markup.push(\n\t          '<rect ',\n\t            'x=\"', x, '\" y=\"', y,\n\t            '\" width=\"', this.width, '\" height=\"', this.height,\n\t            '\" style=\"', this.getSvgStyles(),\n\t          '\"/>\\n'\n\t        );\n\t        this.fill = origFill;\n\t      }\n\t\n\t      markup.push('</g>\\n');\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Returns source of an image\n\t     * @return {String} Source of an image\n\t     */\n\t    getSrc: function() {\n\t      if (this.getElement()) {\n\t        return this.getElement().src || this.getElement()._src;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Sets source of an image\n\t     * @param {String} src Source string (URL)\n\t     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Image} thisArg\n\t     * @chainable\n\t     */\n\t    setSrc: function(src, callback, options) {\n\t      fabric.util.loadImage(src, function(img) {\n\t        return this.setElement(img, callback, options);\n\t      }, this, options && options.crossOrigin);\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of an instance\n\t     * @return {String} String representation of an instance\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n\t    },\n\t\n\t    /**\n\t     * Returns a clone of an instance\n\t     * @param {Function} callback Callback is invoked with a clone as a first argument\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     */\n\t    clone: function(callback, propertiesToInclude) {\n\t      this.constructor.fromObject(this.toObject(propertiesToInclude), callback);\n\t    },\n\t\n\t    /**\n\t     * Applies filters assigned to this image (from \"filters\" array)\n\t     * @method applyFilters\n\t     * @param {Function} callback Callback is invoked when all filters have been applied and new image is generated\n\t     * @return {fabric.Image} thisArg\n\t     * @chainable\n\t     */\n\t    applyFilters: function(callback, filters, imgElement, forResizing) {\n\t\n\t      filters = filters || this.filters;\n\t      imgElement = imgElement || this._originalElement;\n\t\n\t      if (!imgElement) {\n\t        return;\n\t      }\n\t\n\t      var imgEl = imgElement,\n\t          canvasEl = fabric.util.createCanvasElement(),\n\t          replacement = fabric.util.createImage(),\n\t          _this = this;\n\t\n\t      canvasEl.width = imgEl.width;\n\t      canvasEl.height = imgEl.height;\n\t      canvasEl.getContext('2d').drawImage(imgEl, 0, 0, imgEl.width, imgEl.height);\n\t\n\t      if (filters.length === 0) {\n\t        this._element = imgElement;\n\t        callback && callback();\n\t        return canvasEl;\n\t      }\n\t      filters.forEach(function(filter) {\n\t        filter && filter.applyTo(canvasEl, filter.scaleX || _this.scaleX, filter.scaleY || _this.scaleY);\n\t        if (!forResizing && filter && filter.type === 'Resize') {\n\t          _this.width *= filter.scaleX;\n\t          _this.height *= filter.scaleY;\n\t        }\n\t      });\n\t\n\t      /** @ignore */\n\t      replacement.width = canvasEl.width;\n\t      replacement.height = canvasEl.height;\n\t\n\t      if (fabric.isLikelyNode) {\n\t        replacement.src = canvasEl.toBuffer(undefined, fabric.Image.pngCompression);\n\t        // onload doesn't fire in some node versions, so we invoke callback manually\n\t        _this._element = replacement;\n\t        !forResizing && (_this._filteredEl = replacement);\n\t        callback && callback();\n\t      }\n\t      else {\n\t        replacement.onload = function() {\n\t          _this._element = replacement;\n\t          !forResizing && (_this._filteredEl = replacement);\n\t          callback && callback();\n\t          replacement.onload = canvasEl = imgEl = null;\n\t        };\n\t        replacement.src = canvasEl.toDataURL('image/png');\n\t      }\n\t      return canvasEl;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx, noTransform) {\n\t      var x, y, imageMargins = this._findMargins(), elementToDraw;\n\t\n\t      x = (noTransform ? this.left : -this.width / 2);\n\t      y = (noTransform ? this.top : -this.height / 2);\n\t\n\t      if (this.meetOrSlice === 'slice') {\n\t        ctx.beginPath();\n\t        ctx.rect(x, y, this.width, this.height);\n\t        ctx.clip();\n\t      }\n\t\n\t      if (this.isMoving === false && this.resizeFilters.length && this._needsResize()) {\n\t        this._lastScaleX = this.scaleX;\n\t        this._lastScaleY = this.scaleY;\n\t        elementToDraw = this.applyFilters(null, this.resizeFilters, this._filteredEl || this._originalElement, true);\n\t      }\n\t      else {\n\t        elementToDraw = this._element;\n\t      }\n\t      elementToDraw && ctx.drawImage(elementToDraw,\n\t                                     x + imageMargins.marginX,\n\t                                     y + imageMargins.marginY,\n\t                                     imageMargins.width,\n\t                                     imageMargins.height\n\t                                    );\n\t\n\t      this._renderStroke(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private, needed to check if image needs resize\n\t     */\n\t    _needsResize: function() {\n\t      return (this.scaleX !== this._lastScaleX || this.scaleY !== this._lastScaleY);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _findMargins: function() {\n\t      var width = this.width, height = this.height, scales,\n\t          scale, marginX = 0, marginY = 0;\n\t\n\t      if (this.alignX !== 'none' || this.alignY !== 'none') {\n\t        scales = [this.width / this._element.width, this.height / this._element.height];\n\t        scale = this.meetOrSlice === 'meet'\n\t                ? Math.min.apply(null, scales) : Math.max.apply(null, scales);\n\t        width = this._element.width * scale;\n\t        height = this._element.height * scale;\n\t        if (this.alignX === 'Mid') {\n\t          marginX = (this.width - width) / 2;\n\t        }\n\t        if (this.alignX === 'Max') {\n\t          marginX = this.width - width;\n\t        }\n\t        if (this.alignY === 'Mid') {\n\t          marginY = (this.height - height) / 2;\n\t        }\n\t        if (this.alignY === 'Max') {\n\t          marginY = this.height - height;\n\t        }\n\t      }\n\t      return {\n\t        width:  width,\n\t        height: height,\n\t        marginX: marginX,\n\t        marginY: marginY\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _resetWidthHeight: function() {\n\t      var element = this.getElement();\n\t\n\t      this.set('width', element.width);\n\t      this.set('height', element.height);\n\t    },\n\t\n\t    /**\n\t     * The Image class's initialization method. This method is automatically\n\t     * called by the constructor.\n\t     * @private\n\t     * @param {HTMLImageElement|String} element The element representing the image\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initElement: function(element, options) {\n\t      this.setElement(fabric.util.getById(element), null, options);\n\t      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Options object\n\t     */\n\t    _initConfig: function(options) {\n\t      options || (options = { });\n\t      this.setOptions(options);\n\t      this._setWidthHeight(options);\n\t      if (this._element && this.crossOrigin) {\n\t        this._element.crossOrigin = this.crossOrigin;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Array} filters to be initialized\n\t     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n\t     */\n\t    _initFilters: function(filters, callback) {\n\t      if (filters && filters.length) {\n\t        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n\t          callback && callback(enlivenedObjects);\n\t        }, 'fabric.Image.filters');\n\t      }\n\t      else {\n\t        callback && callback();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} [options] Object with width/height properties\n\t     */\n\t    _setWidthHeight: function(options) {\n\t      this.width = 'width' in options\n\t        ? options.width\n\t        : (this.getElement()\n\t            ? this.getElement().width || 0\n\t            : 0);\n\t\n\t      this.height = 'height' in options\n\t        ? options.height\n\t        : (this.getElement()\n\t            ? this.getElement().height || 0\n\t            : 0);\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity of this instance\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Default CSS class name for canvas\n\t   * @static\n\t   * @type String\n\t   * @default\n\t   */\n\t  fabric.Image.CSS_CANVAS = 'canvas-img';\n\t\n\t  /**\n\t   * Alias for getSrc\n\t   * @static\n\t   */\n\t  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n\t\n\t  /**\n\t   * Creates an instance of fabric.Image from its object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @param {Function} [callback] Callback to invoke when an image instance is created\n\t   */\n\t  fabric.Image.fromObject = function(object, callback) {\n\t    fabric.util.loadImage(object.src, function(img) {\n\t      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n\t        object.filters = filters || [ ];\n\t        fabric.Image.prototype._initFilters.call(object, object.resizeFilters, function(resizeFilters) {\n\t          object.resizeFilters = resizeFilters || [ ];\n\t          var instance = new fabric.Image(img, object);\n\t          callback && callback(instance);\n\t        });\n\t      });\n\t    }, null, object.crossOrigin);\n\t  };\n\t\n\t  /**\n\t   * Creates an instance of fabric.Image from an URL string\n\t   * @static\n\t   * @param {String} url URL to create an image from\n\t   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\n\t   * @param {Object} [imgOptions] Options object\n\t   */\n\t  fabric.Image.fromURL = function(url, callback, imgOptions) {\n\t    fabric.util.loadImage(url, function(img) {\n\t      callback && callback(new fabric.Image(img, imgOptions));\n\t    }, null, imgOptions && imgOptions.crossOrigin);\n\t  };\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\n\t   * @static\n\t   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n\t   */\n\t  fabric.Image.ATTRIBUTE_NAMES =\n\t    fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href'.split(' '));\n\t\n\t  /**\n\t   * Returns {@link fabric.Image} instance from an SVG element\n\t   * @static\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Function} callback Callback to execute when fabric.Image object is created\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Image} Instance of fabric.Image\n\t   */\n\t  fabric.Image.fromElement = function(element, callback, options) {\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES),\n\t        align = 'xMidYMid', meetOrSlice = 'meet', alignX, alignY, aspectRatioAttrs;\n\t\n\t    if (parsedAttributes.preserveAspectRatio) {\n\t      aspectRatioAttrs = parsedAttributes.preserveAspectRatio.split(' ');\n\t    }\n\t\n\t    if (aspectRatioAttrs && aspectRatioAttrs.length) {\n\t      meetOrSlice = aspectRatioAttrs.pop();\n\t      if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\n\t        align = meetOrSlice;\n\t        meetOrSlice = 'meet';\n\t      }\n\t      else if (aspectRatioAttrs.length) {\n\t        align = aspectRatioAttrs.pop();\n\t      }\n\t    }\n\t    //divide align in alignX and alignY\n\t    alignX = align !== 'none' ? align.slice(1, 4) : 'none';\n\t    alignY = align !== 'none' ? align.slice(5, 8) : 'none';\n\t    parsedAttributes.alignX = alignX;\n\t    parsedAttributes.alignY = alignY;\n\t    parsedAttributes.meetOrSlice = meetOrSlice;\n\t    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\n\t      extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.Image.async = true;\n\t\n\t  /**\n\t   * Indicates compression level used when generating PNG under Node (in applyFilters). Any of 0-9\n\t   * @static\n\t   * @type Number\n\t   * @default\n\t   */\n\t  fabric.Image.pngCompression = 1;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\tfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\t\n\t  /**\n\t   * @private\n\t   * @return {Number} angle value\n\t   */\n\t  _getAngleValueForStraighten: function() {\n\t    var angle = this.getAngle() % 360;\n\t    if (angle > 0) {\n\t      return Math.round((angle - 1) / 90) * 90;\n\t    }\n\t    return Math.round(angle / 90) * 90;\n\t  },\n\t\n\t  /**\n\t   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  straighten: function() {\n\t    this.setAngle(this._getAngleValueForStraighten());\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Same as {@link fabric.Object.prototype.straighten} but with animation\n\t   * @param {Object} callbacks Object with callback functions\n\t   * @param {Function} [callbacks.onComplete] Invoked on completion\n\t   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n\t   * @return {fabric.Object} thisArg\n\t   * @chainable\n\t   */\n\t  fxStraighten: function(callbacks) {\n\t    callbacks = callbacks || { };\n\t\n\t    var empty = function() { },\n\t        onComplete = callbacks.onComplete || empty,\n\t        onChange = callbacks.onChange || empty,\n\t        _this = this;\n\t\n\t    fabric.util.animate({\n\t      startValue: this.get('angle'),\n\t      endValue: this._getAngleValueForStraighten(),\n\t      duration: this.FX_DURATION,\n\t      onChange: function(value) {\n\t        _this.setAngle(value);\n\t        onChange();\n\t      },\n\t      onComplete: function() {\n\t        _this.setCoords();\n\t        onComplete();\n\t      },\n\t      onStart: function() {\n\t        _this.set('active', false);\n\t      }\n\t    });\n\t\n\t    return this;\n\t  }\n\t});\n\t\n\tfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\t\n\t  /**\n\t   * Straightens object, then rerenders canvas\n\t   * @param {fabric.Object} object Object to straighten\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  straightenObject: function (object) {\n\t    object.straighten();\n\t    this.renderAll();\n\t    return this;\n\t  },\n\t\n\t  /**\n\t   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\n\t   * @param {fabric.Object} object Object to straighten\n\t   * @return {fabric.Canvas} thisArg\n\t   * @chainable\n\t   */\n\t  fxStraightenObject: function (object) {\n\t    object.fxStraighten({\n\t      onChange: this.renderAll.bind(this)\n\t    });\n\t    return this;\n\t  }\n\t});\n\t\n\t\n\t/**\n\t * @namespace fabric.Image.filters\n\t * @memberOf fabric.Image\n\t * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#image_filters}\n\t * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t */\n\tfabric.Image.filters = fabric.Image.filters || { };\n\t\n\t/**\n\t * Root filter class from which all filter classes inherit from\n\t * @class fabric.Image.filters.BaseFilter\n\t * @memberOf fabric.Image.filters\n\t */\n\tfabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n\t\n\t  /**\n\t   * Filter type\n\t   * @param {String} type\n\t   * @default\n\t   */\n\t  type: 'BaseFilter',\n\t\n\t  /**\n\t   * Constructor\n\t   * @param {Object} [options] Options object\n\t   */\n\t  initialize: function(options) {\n\t    if (options) {\n\t      this.setOptions(options);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Sets filter's properties from options\n\t   * @param {Object} [options] Options object\n\t   */\n\t  setOptions: function(options) {\n\t    for (var prop in options) {\n\t      this[prop] = options[prop];\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns object representation of an instance\n\t   * @return {Object} Object representation of an instance\n\t   */\n\t  toObject: function() {\n\t    return { type: this.type };\n\t  },\n\t\n\t  /**\n\t   * Returns a JSON representation of an instance\n\t   * @return {Object} JSON\n\t   */\n\t  toJSON: function() {\n\t    // delegate, not alias\n\t    return this.toObject();\n\t  }\n\t});\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Brightness filter class\n\t   * @class fabric.Image.filters.Brightness\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Brightness({\n\t   *   brightness: 200\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Brightness = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Brightness',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Brightness.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.brightness=0] Value to brighten the image up (0..255)\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.brightness = options.brightness || 0;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          brightness = this.brightness;\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t        data[i] += brightness;\n\t        data[i + 1] += brightness;\n\t        data[i + 2] += brightness;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        brightness: this.brightness\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n\t   */\n\t  fabric.Image.filters.Brightness.fromObject = function(object) {\n\t    return new fabric.Image.filters.Brightness(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n\t   * @class fabric.Image.filters.Convolute\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example <caption>Sharpen filter</caption>\n\t   * var filter = new fabric.Image.filters.Convolute({\n\t   *   matrix: [ 0, -1,  0,\n\t   *            -1,  5, -1,\n\t   *             0, -1,  0 ]\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Blur filter</caption>\n\t   * var filter = new fabric.Image.filters.Convolute({\n\t   *   matrix: [ 1/9, 1/9, 1/9,\n\t   *             1/9, 1/9, 1/9,\n\t   *             1/9, 1/9, 1/9 ]\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Emboss filter</caption>\n\t   * var filter = new fabric.Image.filters.Convolute({\n\t   *   matrix: [ 1,   1,  1,\n\t   *             1, 0.7, -1,\n\t   *            -1,  -1, -1 ]\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Emboss filter with opaqueness</caption>\n\t   * var filter = new fabric.Image.filters.Convolute({\n\t   *   opaque: true,\n\t   *   matrix: [ 1,   1,  1,\n\t   *             1, 0.7, -1,\n\t   *            -1,  -1, -1 ]\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Convolute = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Convolute',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Convolute.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n\t     * @param {Array} [options.matrix] Filter matrix\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.opaque = options.opaque;\n\t      this.matrix = options.matrix || [\n\t        0, 0, 0,\n\t        0, 1, 0,\n\t        0, 0, 0\n\t      ];\n\t\n\t      var canvasEl = fabric.util.createCanvasElement();\n\t      this.tmpCtx = canvasEl.getContext('2d');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createImageData: function(w, h) {\n\t      return this.tmpCtx.createImageData(w, h);\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t\n\t      var weights = this.matrix,\n\t          context = canvasEl.getContext('2d'),\n\t          pixels = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t\n\t          side = Math.round(Math.sqrt(weights.length)),\n\t          halfSide = Math.floor(side/2),\n\t          src = pixels.data,\n\t          sw = pixels.width,\n\t          sh = pixels.height,\n\t\n\t          // pad output by the convolution matrix\n\t          w = sw,\n\t          h = sh,\n\t          output = this._createImageData(w, h),\n\t\n\t          dst = output.data,\n\t\n\t          // go through the destination image pixels\n\t          alphaFac = this.opaque ? 1 : 0;\n\t\n\t      for (var y = 0; y < h; y++) {\n\t        for (var x = 0; x < w; x++) {\n\t          var sy = y,\n\t              sx = x,\n\t              dstOff = (y * w + x) * 4,\n\t              // calculate the weighed sum of the source image pixels that\n\t              // fall under the convolution matrix\n\t              r = 0, g = 0, b = 0, a = 0;\n\t\n\t          for (var cy = 0; cy < side; cy++) {\n\t            for (var cx = 0; cx < side; cx++) {\n\t\n\t              var scy = sy + cy - halfSide,\n\t                  scx = sx + cx - halfSide;\n\t\n\t              /* jshint maxdepth:5 */\n\t              if (scy < 0 || scy > sh || scx < 0 || scx > sw) {\n\t                continue;\n\t              }\n\t\n\t              var srcOff = (scy * sw + scx) * 4,\n\t                  wt = weights[cy * side + cx];\n\t\n\t              r += src[srcOff] * wt;\n\t              g += src[srcOff + 1] * wt;\n\t              b += src[srcOff + 2] * wt;\n\t              a += src[srcOff + 3] * wt;\n\t            }\n\t          }\n\t          dst[dstOff] = r;\n\t          dst[dstOff + 1] = g;\n\t          dst[dstOff + 2] = b;\n\t          dst[dstOff + 3] = a + alphaFac * (255 - a);\n\t        }\n\t      }\n\t\n\t      context.putImageData(output, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        opaque: this.opaque,\n\t        matrix: this.matrix\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n\t   */\n\t  fabric.Image.filters.Convolute.fromObject = function(object) {\n\t    return new fabric.Image.filters.Convolute(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * GradientTransparency filter class\n\t   * @class fabric.Image.filters.GradientTransparency\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.GradientTransparency#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.GradientTransparency({\n\t   *   threshold: 200\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.GradientTransparency = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.GradientTransparency.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'GradientTransparency',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.GradientTransparency.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.threshold=100] Threshold value\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.threshold = options.threshold || 100;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          threshold = this.threshold,\n\t          total = data.length;\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t        data[i + 3] = threshold + 255 * (total - i) / total;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        threshold: this.threshold\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.GradientTransparency} Instance of fabric.Image.filters.GradientTransparency\n\t   */\n\t  fabric.Image.filters.GradientTransparency.fromObject = function(object) {\n\t    return new fabric.Image.filters.GradientTransparency(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { });\n\t\n\t  /**\n\t   * Grayscale image filter class\n\t   * @class fabric.Image.filters.Grayscale\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Grayscale();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Grayscale = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Grayscale',\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Grayscale.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          len = imageData.width * imageData.height * 4,\n\t          index = 0,\n\t          average;\n\t\n\t      while (index < len) {\n\t        average = (data[index] + data[index + 1] + data[index + 2]) / 3;\n\t        data[index]     = average;\n\t        data[index + 1] = average;\n\t        data[index + 2] = average;\n\t        index += 4;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n\t   */\n\t  fabric.Image.filters.Grayscale.fromObject = function() {\n\t    return new fabric.Image.filters.Grayscale();\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { });\n\t\n\t  /**\n\t   * Invert filter class\n\t   * @class fabric.Image.filters.Invert\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Invert();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Invert = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Invert',\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Invert.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i;\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        data[i] = 255 - data[i];\n\t        data[i + 1] = 255 - data[i + 1];\n\t        data[i + 2] = 255 - data[i + 2];\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n\t   */\n\t  fabric.Image.filters.Invert.fromObject = function() {\n\t    return new fabric.Image.filters.Invert();\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Mask filter class\n\t   * See http://resources.aleph-1.com/mask/\n\t   * @class fabric.Image.filters.Mask\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Mask#initialize} for constructor definition\n\t   */\n\t  fabric.Image.filters.Mask = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Mask.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Mask',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Mask.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {fabric.Image} [options.mask] Mask image object\n\t     * @param {Number} [options.channel=0] Rgb channel (0, 1, 2 or 3)\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.mask = options.mask;\n\t      this.channel = [ 0, 1, 2, 3 ].indexOf(options.channel) > -1 ? options.channel : 0;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      if (!this.mask) {\n\t        return;\n\t      }\n\t\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          maskEl = this.mask.getElement(),\n\t          maskCanvasEl = fabric.util.createCanvasElement(),\n\t          channel = this.channel,\n\t          i,\n\t          iLen = imageData.width * imageData.height * 4;\n\t\n\t      maskCanvasEl.width = maskEl.width;\n\t      maskCanvasEl.height = maskEl.height;\n\t\n\t      maskCanvasEl.getContext('2d').drawImage(maskEl, 0, 0, maskEl.width, maskEl.height);\n\t\n\t      var maskImageData = maskCanvasEl.getContext('2d').getImageData(0, 0, maskEl.width, maskEl.height),\n\t          maskData = maskImageData.data;\n\t\n\t      for (i = 0; i < iLen; i += 4) {\n\t        data[i + 3] = maskData[i + channel];\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        mask: this.mask.toObject(),\n\t        channel: this.channel\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @param {Function} [callback] Callback to invoke when a mask filter instance is created\n\t   */\n\t  fabric.Image.filters.Mask.fromObject = function(object, callback) {\n\t    fabric.util.loadImage(object.mask.src, function(img) {\n\t      object.mask = new fabric.Image(img, object.mask);\n\t      callback && callback(new fabric.Image.filters.Mask(object));\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Indicates that instances of this type are async\n\t   * @static\n\t   * @type Boolean\n\t   * @default\n\t   */\n\t  fabric.Image.filters.Mask.async = true;\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Noise filter class\n\t   * @class fabric.Image.filters.Noise\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Noise({\n\t   *   noise: 700\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Noise = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Noise',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Noise.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.noise=0] Noise value\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.noise = options.noise || 0;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          noise = this.noise, rand;\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t\n\t        rand = (0.5 - Math.random()) * noise;\n\t\n\t        data[i] += rand;\n\t        data[i + 1] += rand;\n\t        data[i + 2] += rand;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        noise: this.noise\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n\t   */\n\t  fabric.Image.filters.Noise.fromObject = function(object) {\n\t    return new fabric.Image.filters.Noise(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Pixelate filter class\n\t   * @class fabric.Image.filters.Pixelate\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Pixelate({\n\t   *   blocksize: 8\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Pixelate = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Pixelate',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Pixelate.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.blocksize=4] Blocksize for pixelate\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.blocksize = options.blocksize || 4;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = imageData.height,\n\t          jLen = imageData.width,\n\t          index, i, j, r, g, b, a;\n\t\n\t      for (i = 0; i < iLen; i += this.blocksize) {\n\t        for (j = 0; j < jLen; j += this.blocksize) {\n\t\n\t          index = (i * 4) * jLen + (j * 4);\n\t\n\t          r = data[index];\n\t          g = data[index + 1];\n\t          b = data[index + 2];\n\t          a = data[index + 3];\n\t\n\t          /*\n\t           blocksize: 4\n\t\n\t           [1,x,x,x,1]\n\t           [x,x,x,x,1]\n\t           [x,x,x,x,1]\n\t           [x,x,x,x,1]\n\t           [1,1,1,1,1]\n\t           */\n\t\n\t          for (var _i = i, _ilen = i + this.blocksize; _i < _ilen; _i++) {\n\t            for (var _j = j, _jlen = j + this.blocksize; _j < _jlen; _j++) {\n\t              index = (_i * 4) * jLen + (_j * 4);\n\t              data[index] = r;\n\t              data[index + 1] = g;\n\t              data[index + 2] = b;\n\t              data[index + 3] = a;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        blocksize: this.blocksize\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n\t   */\n\t  fabric.Image.filters.Pixelate.fromObject = function(object) {\n\t    return new fabric.Image.filters.Pixelate(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Remove white filter class\n\t   * @class fabric.Image.filters.RemoveWhite\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.RemoveWhite#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.RemoveWhite({\n\t   *   threshold: 40,\n\t   *   distance: 140\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.RemoveWhite = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.RemoveWhite.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'RemoveWhite',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.RemoveWhite.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {Number} [options.threshold=30] Threshold value\n\t     * @param {Number} [options.distance=20] Distance value\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t      this.threshold = options.threshold || 30;\n\t      this.distance = options.distance || 20;\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          threshold = this.threshold,\n\t          distance = this.distance,\n\t          limit = 255 - threshold,\n\t          abs = Math.abs,\n\t          r, g, b;\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t        r = data[i];\n\t        g = data[i + 1];\n\t        b = data[i + 2];\n\t\n\t        if (r > limit &&\n\t            g > limit &&\n\t            b > limit &&\n\t            abs(r - g) < distance &&\n\t            abs(r - b) < distance &&\n\t            abs(g - b) < distance\n\t        ) {\n\t          data[i + 3] = 1;\n\t        }\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        threshold: this.threshold,\n\t        distance: this.distance\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.RemoveWhite} Instance of fabric.Image.filters.RemoveWhite\n\t   */\n\t  fabric.Image.filters.RemoveWhite.fromObject = function(object) {\n\t    return new fabric.Image.filters.RemoveWhite(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { });\n\t\n\t  /**\n\t   * Sepia filter class\n\t   * @class fabric.Image.filters.Sepia\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Sepia();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Sepia = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Sepia',\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Sepia.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i, avg;\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        avg = 0.3  * data[i] + 0.59 * data[i + 1] + 0.11 * data[i + 2];\n\t        data[i] = avg + 100;\n\t        data[i + 1] = avg + 50;\n\t        data[i + 2] = avg + 255;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Sepia} Instance of fabric.Image.filters.Sepia\n\t   */\n\t  fabric.Image.filters.Sepia.fromObject = function() {\n\t    return new fabric.Image.filters.Sepia();\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { });\n\t\n\t  /**\n\t   * Sepia2 filter class\n\t   * @class fabric.Image.filters.Sepia2\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Sepia2();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Sepia2 = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia2.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Sepia2',\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Sepia.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i, r, g, b;\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        r = data[i];\n\t        g = data[i + 1];\n\t        b = data[i + 2];\n\t\n\t        data[i] = (r * 0.393 + g * 0.769 + b * 0.189 ) / 1.351;\n\t        data[i + 1] = (r * 0.349 + g * 0.686 + b * 0.168 ) / 1.203;\n\t        data[i + 2] = (r * 0.272 + g * 0.534 + b * 0.131 ) / 2.140;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Sepia2} Instance of fabric.Image.filters.Sepia2\n\t   */\n\t  fabric.Image.filters.Sepia2.fromObject = function() {\n\t    return new fabric.Image.filters.Sepia2();\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Tint filter class\n\t   * Adapted from <a href=\"https://github.com/mezzoblue/PaintbrushJS\">https://github.com/mezzoblue/PaintbrushJS</a>\n\t   * @class fabric.Image.filters.Tint\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link fabric.Image.filters.Tint#initialize} for constructor definition\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example <caption>Tint filter with hex color and opacity</caption>\n\t   * var filter = new fabric.Image.filters.Tint({\n\t   *   color: '#3513B0',\n\t   *   opacity: 0.5\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Tint filter with rgba color</caption>\n\t   * var filter = new fabric.Image.filters.Tint({\n\t   *   color: 'rgba(53, 21, 176, 0.5)'\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Tint = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Tint.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Tint',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Tint.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {String} [options.color=#000000] Color to tint the image with\n\t     * @param {Number} [options.opacity] Opacity value that controls the tint effect's transparency (0..1)\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.color = options.color || '#000000';\n\t      this.opacity = typeof options.opacity !== 'undefined'\n\t                      ? options.opacity\n\t                      : new fabric.Color(this.color).getAlpha();\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i,\n\t          tintR, tintG, tintB,\n\t          r, g, b, alpha1,\n\t          source;\n\t\n\t      source = new fabric.Color(this.color).getSource();\n\t\n\t      tintR = source[0] * this.opacity;\n\t      tintG = source[1] * this.opacity;\n\t      tintB = source[2] * this.opacity;\n\t\n\t      alpha1 = 1 - this.opacity;\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        r = data[i];\n\t        g = data[i + 1];\n\t        b = data[i + 2];\n\t\n\t        // alpha compositing\n\t        data[i] = tintR + r * alpha1;\n\t        data[i + 1] = tintG + g * alpha1;\n\t        data[i + 2] = tintB + b * alpha1;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        color: this.color,\n\t        opacity: this.opacity\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Tint} Instance of fabric.Image.filters.Tint\n\t   */\n\t  fabric.Image.filters.Tint.fromObject = function(object) {\n\t    return new fabric.Image.filters.Tint(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend;\n\t\n\t  /**\n\t   * Multiply filter class\n\t   * Adapted from <a href=\"http://www.laurenscorijn.com/articles/colormath-basics\">http://www.laurenscorijn.com/articles/colormath-basics</a>\n\t   * @class fabric.Image.filters.Multiply\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @example <caption>Multiply filter with hex color</caption>\n\t   * var filter = new fabric.Image.filters.Multiply({\n\t   *   color: '#F0F'\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   * @example <caption>Multiply filter with rgb color</caption>\n\t   * var filter = new fabric.Image.filters.Multiply({\n\t   *   color: 'rgb(53, 21, 176)'\n\t   * });\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Multiply = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Multiply.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Multiply',\n\t\n\t    /**\n\t     * Constructor\n\t     * @memberOf fabric.Image.filters.Multiply.prototype\n\t     * @param {Object} [options] Options object\n\t     * @param {String} [options.color=#000000] Color to multiply the image pixels with\n\t     */\n\t    initialize: function(options) {\n\t      options = options || { };\n\t\n\t      this.color = options.color || '#000000';\n\t    },\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          iLen = data.length, i,\n\t          source;\n\t\n\t      source = new fabric.Color(this.color).getSource();\n\t\n\t      for (i = 0; i < iLen; i+=4) {\n\t        data[i] *= source[0] / 255;\n\t        data[i + 1] *= source[1] / 255;\n\t        data[i + 2] *= source[2] / 255;\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return extend(this.callSuper('toObject'), {\n\t        color: this.color\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Image.filters.Multiply} Instance of fabric.Image.filters.Multiply\n\t   */\n\t  fabric.Image.filters.Multiply.fromObject = function(object) {\n\t    return new fabric.Image.filters.Multiply(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t  'use strict';\n\t\n\t  var fabric = global.fabric;\n\t\n\t  /**\n\t   * Color Blend filter class\n\t   * @class fabric.Image.filter.Blend\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Blend({\n\t   *  color: '#000',\n\t   *  mode: 'multiply'\n\t   * });\n\t   *\n\t   * var filter = new fabric.Image.filters.Blend({\n\t   *  image: fabricImageObject,\n\t   *  mode: 'multiply',\n\t   *  alpha: 0.5\n\t   * });\n\t\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Blend = fabric.util.createClass({\n\t    type: 'Blend',\n\t\n\t    initialize: function(options) {\n\t      options = options || {};\n\t      this.color = options.color || '#000';\n\t      this.image = options.image || false;\n\t      this.mode = options.mode || 'multiply';\n\t      this.alpha = options.alpha || 1;\n\t    },\n\t\n\t    applyTo: function(canvasEl) {\n\t      var context = canvasEl.getContext('2d'),\n\t          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\t          data = imageData.data,\n\t          tr, tg, tb,\n\t          r, g, b,\n\t          _r, _g, _b,\n\t          source,\n\t          isImage = false;\n\t\n\t      if (this.image) {\n\t        // Blend images\n\t        isImage = true;\n\t\n\t        var _el = fabric.util.createCanvasElement();\n\t        _el.width = this.image.width;\n\t        _el.height = this.image.height;\n\t\n\t        var tmpCanvas = new fabric.StaticCanvas(_el);\n\t        tmpCanvas.add(this.image);\n\t        var context2 =  tmpCanvas.getContext('2d');\n\t        source = context2.getImageData(0, 0, tmpCanvas.width, tmpCanvas.height).data;\n\t      }\n\t      else {\n\t        // Blend color\n\t        source = new fabric.Color(this.color).getSource();\n\t\n\t        tr = source[0] * this.alpha;\n\t        tg = source[1] * this.alpha;\n\t        tb = source[2] * this.alpha;\n\t      }\n\t\n\t      for (var i = 0, len = data.length; i < len; i += 4) {\n\t\n\t        r = data[i];\n\t        g = data[i + 1];\n\t        b = data[i + 2];\n\t\n\t        if (isImage) {\n\t          tr = source[i] * this.alpha;\n\t          tg = source[i + 1] * this.alpha;\n\t          tb = source[i + 2] * this.alpha;\n\t        }\n\t\n\t        switch (this.mode) {\n\t          case 'multiply':\n\t            data[i] = r * tr / 255;\n\t            data[i + 1] = g * tg / 255;\n\t            data[i + 2] = b * tb / 255;\n\t            break;\n\t          case 'screen':\n\t            data[i] = 1 - (1 - r) * (1 - tr);\n\t            data[i + 1] = 1 - (1 - g) * (1 - tg);\n\t            data[i + 2] = 1 - (1 - b) * (1 - tb);\n\t            break;\n\t          case 'add':\n\t            data[i] = Math.min(255, r + tr);\n\t            data[i + 1] = Math.min(255, g + tg);\n\t            data[i + 2] = Math.min(255, b + tb);\n\t            break;\n\t          case 'diff':\n\t          case 'difference':\n\t            data[i] = Math.abs(r - tr);\n\t            data[i + 1] = Math.abs(g - tg);\n\t            data[i + 2] = Math.abs(b - tb);\n\t            break;\n\t          case 'subtract':\n\t            _r = r - tr;\n\t            _g = g - tg;\n\t            _b = b - tb;\n\t\n\t            data[i] = (_r < 0) ? 0 : _r;\n\t            data[i + 1] = (_g < 0) ? 0 : _g;\n\t            data[i + 2] = (_b < 0) ? 0 : _b;\n\t            break;\n\t          case 'darken':\n\t            data[i] = Math.min(r, tr);\n\t            data[i + 1] = Math.min(g, tg);\n\t            data[i + 2] = Math.min(b, tb);\n\t            break;\n\t          case 'lighten':\n\t            data[i] = Math.max(r, tr);\n\t            data[i + 1] = Math.max(g, tg);\n\t            data[i + 2] = Math.max(b, tb);\n\t            break;\n\t        }\n\t      }\n\t\n\t      context.putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return {\n\t        color: this.color,\n\t        image: this.image,\n\t        mode: this.mode,\n\t        alpha: this.alpha\n\t      };\n\t    }\n\t  });\n\t\n\t  fabric.Image.filters.Blend.fromObject = function(object) {\n\t    return new fabric.Image.filters.Blend(object);\n\t  };\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\n\t      sqrt = Math.sqrt, abs = Math.abs, max = Math.max, round = Math.round, sin = Math.sin,\n\t      ceil = Math.ceil;\n\t\n\t  /**\n\t   * Resize image filter class\n\t   * @class fabric.Image.filters.Resize\n\t   * @memberOf fabric.Image.filters\n\t   * @extends fabric.Image.filters.BaseFilter\n\t   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n\t   * @example\n\t   * var filter = new fabric.Image.filters.Resize();\n\t   * object.filters.push(filter);\n\t   * object.applyFilters(canvas.renderAll.bind(canvas));\n\t   */\n\t  fabric.Image.filters.Resize = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n\t\n\t    /**\n\t     * Filter type\n\t     * @param {String} type\n\t     * @default\n\t     */\n\t    type: 'Resize',\n\t\n\t    /**\n\t     * Resize type\n\t     * @param {String} resizeType\n\t     * @default\n\t     */\n\t    resizeType: 'hermite',\n\t\n\t    /**\n\t     * Scale factor for resizing, x axis\n\t     * @param {Number} scaleX\n\t     * @default\n\t     */\n\t    scaleX: 0,\n\t\n\t    /**\n\t     * Scale factor for resizing, y axis\n\t     * @param {Number} scaleY\n\t     * @default\n\t     */\n\t    scaleY: 0,\n\t\n\t    /**\n\t     * LanczosLobes parameter for lanczos filter\n\t     * @param {Number} lanczosLobes\n\t     * @default\n\t     */\n\t    lanczosLobes: 3,\n\t\n\t    /**\n\t     * Applies filter to canvas element\n\t     * @memberOf fabric.Image.filters.Resize.prototype\n\t     * @param {Object} canvasEl Canvas element to apply filter to\n\t     */\n\t    applyTo: function(canvasEl, scaleX, scaleY) {\n\t\n\t      this.rcpScaleX = 1 / scaleX;\n\t      this.rcpScaleY = 1 / scaleY;\n\t\n\t      var oW = canvasEl.width, oH = canvasEl.height,\n\t          dW = round(oW * scaleX), dH = round(oH * scaleY),\n\t          imageData;\n\t\n\t      if (this.resizeType === 'sliceHack') {\n\t        imageData = this.sliceByTwo(canvasEl, oW, oH, dW, dH);\n\t      }\n\t      if (this.resizeType === 'hermite') {\n\t        imageData = this.hermiteFastResize(canvasEl, oW, oH, dW, dH);\n\t      }\n\t      if (this.resizeType === 'bilinear') {\n\t        imageData = this.bilinearFiltering(canvasEl, oW, oH, dW, dH);\n\t      }\n\t      if (this.resizeType === 'lanczos') {\n\t        imageData = this.lanczosResize(canvasEl, oW, oH, dW, dH);\n\t      }\n\t      canvasEl.width = dW;\n\t      canvasEl.height = dH;\n\t      canvasEl.getContext('2d').putImageData(imageData, 0, 0);\n\t    },\n\t\n\t    sliceByTwo: function(canvasEl, width, height, newWidth, newHeight) {\n\t      var context = canvasEl.getContext('2d'), imageData,\n\t          multW = 0.5, multH = 0.5, signW = 1, signH = 1,\n\t          doneW = false, doneH = false, stepW = width, stepH = height,\n\t          tmpCanvas = fabric.util.createCanvasElement(),\n\t          tmpCtx = tmpCanvas.getContext('2d');\n\t      newWidth = floor(newWidth);\n\t      newHeight = floor(newHeight);\n\t      tmpCanvas.width = max(newWidth, width);\n\t      tmpCanvas.height = max(newHeight, height);\n\t\n\t      if (newWidth > width) {\n\t        multW = 2;\n\t        signW = -1;\n\t      }\n\t      if (newHeight > height) {\n\t        multH = 2;\n\t        signH = -1;\n\t      }\n\t      imageData = context.getImageData(0, 0, width, height);\n\t      canvasEl.width = max(newWidth, width);\n\t      canvasEl.height = max(newHeight, height);\n\t      context.putImageData(imageData, 0, 0);\n\t\n\t      while (!doneW || !doneH) {\n\t        width = stepW;\n\t        height = stepH;\n\t        if (newWidth * signW < floor(stepW * multW * signW)) {\n\t          stepW = floor(stepW * multW);\n\t        }\n\t        else {\n\t          stepW = newWidth;\n\t          doneW = true;\n\t        }\n\t        if (newHeight * signH < floor(stepH * multH * signH)) {\n\t          stepH = floor(stepH * multH);\n\t        }\n\t        else {\n\t          stepH = newHeight;\n\t          doneH = true;\n\t        }\n\t        imageData = context.getImageData(0, 0, width, height);\n\t        tmpCtx.putImageData(imageData, 0, 0);\n\t        context.clearRect(0, 0, stepW, stepH);\n\t        context.drawImage(tmpCanvas, 0, 0, width, height, 0, 0, stepW, stepH);\n\t      }\n\t      return context.getImageData(0, 0, newWidth, newHeight);\n\t    },\n\t\n\t    lanczosResize: function(canvasEl, oW, oH, dW, dH) {\n\t\n\t      function lanczosCreate(lobes) {\n\t        return function(x) {\n\t          if (x > lobes) {\n\t            return 0;\n\t          }\n\t          x *= Math.PI;\n\t          if (abs(x) < 1e-16) {\n\t            return 1;\n\t          }\n\t          var xx = x / lobes;\n\t          return sin(x) * sin(xx) / x / xx;\n\t        };\n\t      }\n\t\n\t      function process(u) {\n\t        var v, i, weight, idx, a, red, green,\n\t            blue, alpha, fX, fY;\n\t        center.x = (u + 0.5) * ratioX;\n\t        icenter.x = floor(center.x);\n\t        for (v = 0; v < dH; v++) {\n\t          center.y = (v + 0.5) * ratioY;\n\t          icenter.y = floor(center.y);\n\t          a = 0, red = 0, green = 0, blue = 0, alpha = 0;\n\t          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n\t            if (i < 0 || i >= oW) {\n\t              continue;\n\t            }\n\t            fX = floor(1000 * abs(i - center.x));\n\t            if (!cacheLanc[fX]) {\n\t              cacheLanc[fX] = { };\n\t            }\n\t            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n\t              if (j < 0 || j >= oH) {\n\t                continue;\n\t              }\n\t              fY = floor(1000 * abs(j - center.y));\n\t              if (!cacheLanc[fX][fY]) {\n\t                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n\t              }\n\t              weight = cacheLanc[fX][fY];\n\t              if (weight > 0) {\n\t                idx = (j * oW + i) * 4;\n\t                a += weight;\n\t                red += weight * srcData[idx];\n\t                green += weight * srcData[idx + 1];\n\t                blue += weight * srcData[idx + 2];\n\t                alpha += weight * srcData[idx + 3];\n\t              }\n\t            }\n\t          }\n\t          idx = (v * dW + u) * 4;\n\t          destData[idx] = red / a;\n\t          destData[idx + 1] = green / a;\n\t          destData[idx + 2] = blue / a;\n\t          destData[idx + 3] = alpha / a;\n\t        }\n\t\n\t        if (++u < dW) {\n\t          return process(u);\n\t        }\n\t        else {\n\t          return destImg;\n\t        }\n\t      }\n\t\n\t      var context = canvasEl.getContext('2d'),\n\t          srcImg = context.getImageData(0, 0, oW, oH),\n\t          destImg = context.getImageData(0, 0, dW, dH),\n\t          srcData = srcImg.data, destData = destImg.data,\n\t          lanczos = lanczosCreate(this.lanczosLobes),\n\t          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\n\t          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\n\t          range2X = ceil(ratioX * this.lanczosLobes / 2),\n\t          range2Y = ceil(ratioY * this.lanczosLobes / 2),\n\t          cacheLanc = { }, center = { }, icenter = { };\n\t\n\t      return process(0);\n\t    },\n\t\n\t    bilinearFiltering: function(canvasEl, w, h, w2, h2) {\n\t      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\n\t          color, offset = 0, origPix, ratioX = this.rcpScaleX,\n\t          ratioY = this.rcpScaleY, context = canvasEl.getContext('2d'),\n\t          w4 = 4 * (w - 1), img = context.getImageData(0, 0, w, h),\n\t          pixels = img.data, destImage = context.getImageData(0, 0, w2, h2),\n\t          destPixels = destImage.data;\n\t      for (i = 0; i < h2; i++) {\n\t        for (j = 0; j < w2; j++) {\n\t          x = floor(ratioX * j);\n\t          y = floor(ratioY * i);\n\t          xDiff = ratioX * j - x;\n\t          yDiff = ratioY * i - y;\n\t          origPix = 4 * (y * w + x);\n\t\n\t          for (chnl = 0; chnl < 4; chnl++) {\n\t            a = pixels[origPix + chnl];\n\t            b = pixels[origPix + 4 + chnl];\n\t            c = pixels[origPix + w4 + chnl];\n\t            d = pixels[origPix + w4 + 4 + chnl];\n\t            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\n\t                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n\t            destPixels[offset++] = color;\n\t          }\n\t        }\n\t      }\n\t      return destImage;\n\t    },\n\t\n\t    hermiteFastResize: function(canvasEl, oW, oH, dW, dH) {\n\t      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\n\t          ratioWHalf = ceil(ratioW / 2),\n\t          ratioHHalf = ceil(ratioH / 2),\n\t          context = canvasEl.getContext('2d'),\n\t          img = context.getImageData(0, 0, oW, oH), data = img.data,\n\t          img2 = context.getImageData(0, 0, dW, dH), data2 = img2.data;\n\t      for (var j = 0; j < dH; j++) {\n\t        for (var i = 0; i < dW; i++) {\n\t          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\n\t              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n\t          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n\t            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\n\t                centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n\t            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n\t              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\n\t                  w = sqrt(w0 + dx * dx);\n\t              /*jshint maxdepth:5 */\n\t              if (w > 1 && w < -1) {\n\t                continue;\n\t              }\n\t              //hermite filter\n\t              weight = 2 * w * w * w - 3 * w * w + 1;\n\t              if (weight > 0) {\n\t                dx = 4 * (xx + yy * oW);\n\t                //alpha\n\t                gxA += weight * data[dx + 3];\n\t                weightsAlpha += weight;\n\t                //colors\n\t                /*jshint maxdepth:6 */\n\t                if (data[dx + 3] < 255) {\n\t                  weight = weight * data[dx + 3] / 250;\n\t                }\n\t                /*jshint maxdepth:5 */\n\t                gxR += weight * data[dx];\n\t                gxG += weight * data[dx + 1];\n\t                gxB += weight * data[dx + 2];\n\t                weights += weight;\n\t              }\n\t              /*jshint maxdepth:4 */\n\t            }\n\t          }\n\t          data2[x2] = gxR / weights;\n\t          data2[x2 + 1] = gxG / weights;\n\t          data2[x2 + 2] = gxB / weights;\n\t          data2[x2 + 3] = gxA / weightsAlpha;\n\t        }\n\t      }\n\t      return img2;\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function() {\n\t      return {\n\t        type: this.type,\n\t        scaleX: this.scaleX,\n\t        scaleY: this.scaleY,\n\t        resizeType: this.resizeType,\n\t        lanczosLobes: this.lanczosLobes\n\t      };\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns filter instance from an object representation\n\t   * @static\n\t   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n\t   */\n\t  fabric.Image.filters.Resize.fromObject = function(object) {\n\t    return new fabric.Image.filters.Resize(object);\n\t  };\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = { }),\n\t      extend = fabric.util.object.extend,\n\t      clone = fabric.util.object.clone,\n\t      toFixed = fabric.util.toFixed,\n\t      supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\n\t      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\t\n\t  if (fabric.Text) {\n\t    fabric.warn('fabric.Text is already defined');\n\t    return;\n\t  }\n\t\n\t  var stateProperties = fabric.Object.prototype.stateProperties.concat();\n\t  stateProperties.push(\n\t    'fontFamily',\n\t    'fontWeight',\n\t    'fontSize',\n\t    'text',\n\t    'textDecoration',\n\t    'textAlign',\n\t    'fontStyle',\n\t    'lineHeight',\n\t    'textBackgroundColor'\n\t  );\n\t\n\t  /**\n\t   * Text class\n\t   * @class fabric.Text\n\t   * @extends fabric.Object\n\t   * @return {fabric.Text} thisArg\n\t   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#text}\n\t   * @see {@link fabric.Text#initialize} for constructor definition\n\t   */\n\t  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n\t\n\t    /**\n\t     * Properties which when set cause object to change dimensions\n\t     * @type Object\n\t     * @private\n\t     */\n\t    _dimensionAffectingProps: {\n\t      fontSize: true,\n\t      fontWeight: true,\n\t      fontFamily: true,\n\t      fontStyle: true,\n\t      lineHeight: true,\n\t      stroke: true,\n\t      strokeWidth: true,\n\t      text: true,\n\t      textAlign: true\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _reNewline: /\\r?\\n/,\n\t\n\t    /**\n\t     * Use this regular expression to filter for whitespace that is not a new line.\n\t     * Mostly used when text is 'justify' aligned.\n\t     * @private\n\t     */\n\t    _reSpacesAndTabs: /[ \\t\\r]+/g,\n\t\n\t    /**\n\t     * Retrieves object's fontSize\n\t     * @method getFontSize\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Font size (in pixels)\n\t     */\n\t\n\t    /**\n\t     * Sets object's fontSize\n\t     * @method setFontSize\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {Number} fontSize Font size (in pixels)\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's fontWeight\n\t     * @method getFontWeight\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {(String|Number)} Font weight\n\t     */\n\t\n\t    /**\n\t     * Sets object's fontWeight\n\t     * @method setFontWeight\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {(Number|String)} fontWeight Font weight\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's fontFamily\n\t     * @method getFontFamily\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Font family\n\t     */\n\t\n\t    /**\n\t     * Sets object's fontFamily\n\t     * @method setFontFamily\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} fontFamily Font family\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's text\n\t     * @method getText\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} text\n\t     */\n\t\n\t    /**\n\t     * Sets object's text\n\t     * @method setText\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} text Text\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's textDecoration\n\t     * @method getTextDecoration\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Text decoration\n\t     */\n\t\n\t    /**\n\t     * Sets object's textDecoration\n\t     * @method setTextDecoration\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} textDecoration Text decoration\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's fontStyle\n\t     * @method getFontStyle\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Font style\n\t     */\n\t\n\t    /**\n\t     * Sets object's fontStyle\n\t     * @method setFontStyle\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} fontStyle Font style\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's lineHeight\n\t     * @method getLineHeight\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {Number} Line height\n\t     */\n\t\n\t    /**\n\t     * Sets object's lineHeight\n\t     * @method setLineHeight\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {Number} lineHeight Line height\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's textAlign\n\t     * @method getTextAlign\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Text alignment\n\t     */\n\t\n\t    /**\n\t     * Sets object's textAlign\n\t     * @method setTextAlign\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} textAlign Text alignment\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Retrieves object's textBackgroundColor\n\t     * @method getTextBackgroundColor\n\t     * @memberOf fabric.Text.prototype\n\t     * @return {String} Text background color\n\t     */\n\t\n\t    /**\n\t     * Sets object's textBackgroundColor\n\t     * @method setTextBackgroundColor\n\t     * @memberOf fabric.Text.prototype\n\t     * @param {String} textBackgroundColor Text background color\n\t     * @return {fabric.Text}\n\t     * @chainable\n\t     */\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type:                 'text',\n\t\n\t    /**\n\t     * Font size (in pixels)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    fontSize:             40,\n\t\n\t    /**\n\t     * Font weight (e.g. bold, normal, 400, 600, 800)\n\t     * @type {(Number|String)}\n\t     * @default\n\t     */\n\t    fontWeight:           'normal',\n\t\n\t    /**\n\t     * Font family\n\t     * @type String\n\t     * @default\n\t     */\n\t    fontFamily:           'Times New Roman',\n\t\n\t    /**\n\t     * Text decoration Possible values: \"\", \"underline\", \"overline\" or \"line-through\".\n\t     * @type String\n\t     * @default\n\t     */\n\t    textDecoration:       '',\n\t\n\t    /**\n\t     * Text alignment. Possible values: \"left\", \"center\", or \"right\".\n\t     * @type String\n\t     * @default\n\t     */\n\t    textAlign:            'left',\n\t\n\t    /**\n\t     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n\t     * @type String\n\t     * @default\n\t     */\n\t    fontStyle:            '',\n\t\n\t    /**\n\t     * Line height\n\t     * @type Number\n\t     * @default\n\t     */\n\t    lineHeight:           1.16,\n\t\n\t    /**\n\t     * Background color of text lines\n\t     * @type String\n\t     * @default\n\t     */\n\t    textBackgroundColor:  '',\n\t\n\t    /**\n\t     * List of properties to consider when checking if\n\t     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n\t     * as well as for history (undo/redo) purposes\n\t     * @type Array\n\t     */\n\t    stateProperties:      stateProperties,\n\t\n\t    /**\n\t     * When defined, an object is rendered via stroke and this property specifies its color.\n\t     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n\t     * @type String\n\t     * @default\n\t     */\n\t    stroke:               null,\n\t\n\t    /**\n\t     * Shadow object representing shadow of this shape.\n\t     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n\t     * @type fabric.Shadow\n\t     * @default\n\t     */\n\t    shadow:               null,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _fontSizeFraction: 0.25,\n\t\n\t    /**\n\t     * Text Line proportion to font Size (in pixels)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    _fontSizeMult:             1.13,\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {String} text Text string\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Text} thisArg\n\t     */\n\t    initialize: function(text, options) {\n\t      options = options || { };\n\t      this.text = text;\n\t      this.__skipDimension = true;\n\t      this.setOptions(options);\n\t      this.__skipDimension = false;\n\t      this._initDimensions();\n\t    },\n\t\n\t    /**\n\t     * Renders text object on offscreen canvas, so that it would get dimensions\n\t     * @private\n\t     */\n\t    _initDimensions: function(ctx) {\n\t      if (this.__skipDimension) {\n\t        return;\n\t      }\n\t      if (!ctx) {\n\t        ctx = fabric.util.createCanvasElement().getContext('2d');\n\t        this._setTextStyles(ctx);\n\t      }\n\t      this._textLines = this._splitTextIntoLines();\n\t      this._clearCache();\n\t      //if textAlign is 'justify' i have to disable caching\n\t      //when calculating width of text and widths of line.\n\t      this._cacheLinesWidth = (this.textAlign !== 'justify');\n\t      this.width = this._getTextWidth(ctx);\n\t      this._cacheLinesWidth = true;\n\t      this.height = this._getTextHeight(ctx);\n\t    },\n\t\n\t    /**\n\t     * Returns string representation of an instance\n\t     * @return {String} String representation of text object\n\t     */\n\t    toString: function() {\n\t      return '#<fabric.Text (' + this.complexity() +\n\t        '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      this.clipTo && fabric.util.clipContext(this, ctx);\n\t      this._setOpacity(ctx);\n\t      this._setShadow(ctx);\n\t      this._setupCompositeOperation(ctx);\n\t      this._renderTextBackground(ctx);\n\t      this._setStrokeStyles(ctx);\n\t      this._setFillStyles(ctx);\n\t      this._renderText(ctx);\n\t      this._renderTextDecoration(ctx);\n\t      this.clipTo && ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderText: function(ctx) {\n\t\n\t      this._translateForTextAlign(ctx);\n\t      this._renderTextFill(ctx);\n\t      this._renderTextStroke(ctx);\n\t      this._translateForTextAlign(ctx, true);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Boolean} back Indicates if translate back or forward\n\t     */\n\t    _translateForTextAlign: function(ctx, back) {\n\t      if (this.textAlign !== 'left' && this.textAlign !== 'justify') {\n\t        var sign = back ? -1 : 1;\n\t        ctx.translate(this.textAlign === 'center' ? (sign * this.width / 2) : sign * this.width, 0);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _setTextStyles: function(ctx) {\n\t      ctx.textBaseline = 'alphabetic';\n\t      if (!this.skipTextAlign) {\n\t        ctx.textAlign = this.textAlign;\n\t      }\n\t      ctx.font = this._getFontDeclaration();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @return {Number} Height of fabric.Text object\n\t     */\n\t    _getTextHeight: function() {\n\t      return this._textLines.length * this._getHeightOfLine();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @return {Number} Maximum width of fabric.Text object\n\t     */\n\t    _getTextWidth: function(ctx) {\n\t      var maxWidth = this._getLineWidth(ctx, 0);\n\t\n\t      for (var i = 1, len = this._textLines.length; i < len; i++) {\n\t        var currentLineWidth = this._getLineWidth(ctx, i);\n\t        if (currentLineWidth > maxWidth) {\n\t          maxWidth = currentLineWidth;\n\t        }\n\t      }\n\t      return maxWidth;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} chars Chars to render\n\t     * @param {Number} left Left position of text\n\t     * @param {Number} top Top position of text\n\t     */\n\t    _renderChars: function(method, ctx, chars, left, top) {\n\t      // remove Text word from method var\n\t      var shortM = method.slice(0, -4);\n\t      if (this[shortM].toLive) {\n\t        var offsetX = -this.width / 2 + this[shortM].offsetX || 0,\n\t            offsetY = -this.height / 2 + this[shortM].offsetY || 0;\n\t        ctx.save();\n\t        ctx.translate(offsetX, offsetY);\n\t        left -= offsetX;\n\t        top -= offsetY;\n\t      }\n\t      ctx[method](chars, left, top);\n\t      this[shortM].toLive && ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} line Text to render\n\t     * @param {Number} left Left position of text\n\t     * @param {Number} top Top position of text\n\t     * @param {Number} lineIndex Index of a line in a text\n\t     */\n\t    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n\t      // lift the line by quarter of fontSize\n\t      top -= this.fontSize * this._fontSizeFraction;\n\t\n\t      // short-circuit\n\t      if (this.textAlign !== 'justify') {\n\t        this._renderChars(method, ctx, line, left, top, lineIndex);\n\t        return;\n\t      }\n\t\n\t      var lineWidth = this._getLineWidth(ctx, lineIndex),\n\t          totalWidth = this.width;\n\t      if (totalWidth >= lineWidth) {\n\t        // stretch the line\n\t        var words = line.split(/\\s+/),\n\t            wordsWidth = this._getWidthOfWords(ctx, line, lineIndex),\n\t            widthDiff = totalWidth - wordsWidth,\n\t            numSpaces = words.length - 1,\n\t            spaceWidth = widthDiff / numSpaces,\n\t            leftOffset = 0;\n\t\n\t        for (var i = 0, len = words.length; i < len; i++) {\n\t          this._renderChars(method, ctx, words[i], left + leftOffset, top, lineIndex);\n\t          leftOffset += ctx.measureText(words[i]).width + spaceWidth;\n\t        }\n\t      }\n\t      else {\n\t        this._renderChars(method, ctx, line, left, top, lineIndex);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} line\n\t     */\n\t    _getWidthOfWords: function (ctx, line) {\n\t      return ctx.measureText(line.replace(/\\s+/g, '')).width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @return {Number} Left offset\n\t     */\n\t    _getLeftOffset: function() {\n\t      return -this.width / 2;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @return {Number} Top offset\n\t     */\n\t    _getTopOffset: function() {\n\t      return -this.height / 2;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextFill: function(ctx) {\n\t      if (!this.fill && !this._skipFillStrokeCheck) {\n\t        return;\n\t      }\n\t\n\t      var lineHeights = 0;\n\t\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        var heightOfLine = this._getHeightOfLine(ctx, i),\n\t            maxHeight = heightOfLine / this.lineHeight;\n\t\n\t        this._renderTextLine(\n\t          'fillText',\n\t          ctx,\n\t          this._textLines[i],\n\t          this._getLeftOffset(),\n\t          this._getTopOffset() + lineHeights + maxHeight,\n\t          i\n\t        );\n\t        lineHeights += heightOfLine;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextStroke: function(ctx) {\n\t      if ((!this.stroke || this.strokeWidth === 0) && !this._skipFillStrokeCheck) {\n\t        return;\n\t      }\n\t\n\t      var lineHeights = 0;\n\t\n\t      if (this.shadow && !this.shadow.affectStroke) {\n\t        this._removeShadow(ctx);\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      if (this.strokeDashArray) {\n\t        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n\t        if (1 & this.strokeDashArray.length) {\n\t          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);\n\t        }\n\t        supportsLineDash && ctx.setLineDash(this.strokeDashArray);\n\t      }\n\t\n\t      ctx.beginPath();\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        var heightOfLine = this._getHeightOfLine(ctx, i),\n\t            maxHeight = heightOfLine / this.lineHeight;\n\t\n\t        this._renderTextLine(\n\t          'strokeText',\n\t          ctx,\n\t          this._textLines[i],\n\t          this._getLeftOffset(),\n\t          this._getTopOffset() + lineHeights + maxHeight,\n\t          i\n\t        );\n\t        lineHeights += heightOfLine;\n\t      }\n\t      ctx.closePath();\n\t      ctx.restore();\n\t    },\n\t\n\t    _getHeightOfLine: function() {\n\t      return this.fontSize * this._fontSizeMult * this.lineHeight;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Array} textLines Array of all text lines\n\t     */\n\t    _renderTextBackground: function(ctx) {\n\t      this._renderTextBoxBackground(ctx);\n\t      this._renderTextLinesBackground(ctx);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextBoxBackground: function(ctx) {\n\t      if (!this.backgroundColor) {\n\t        return;\n\t      }\n\t\n\t      ctx.fillStyle = this.backgroundColor;\n\t\n\t      ctx.fillRect(\n\t        this._getLeftOffset(),\n\t        this._getTopOffset(),\n\t        this.width,\n\t        this.height\n\t      );\n\t\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextLinesBackground: function(ctx) {\n\t      if (!this.textBackgroundColor) {\n\t        return;\n\t      }\n\t      var lineTopOffset = 0, heightOfLine = this._getHeightOfLine(),\n\t          lineWidth, lineLeftOffset;\n\t\n\t      ctx.fillStyle = this.textBackgroundColor;\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        if (this._textLines[i] !== '') {\n\t          lineWidth = this._getLineWidth(ctx, i);\n\t          lineLeftOffset = this._getLineLeftOffset(lineWidth);\n\t          ctx.fillRect(\n\t            this._getLeftOffset() + lineLeftOffset,\n\t            this._getTopOffset() + lineTopOffset,\n\t            lineWidth,\n\t            this.fontSize * this._fontSizeMult\n\t          );\n\t        }\n\t        lineTopOffset += heightOfLine;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Number} lineWidth Width of text line\n\t     * @return {Number} Line left offset\n\t     */\n\t    _getLineLeftOffset: function(lineWidth) {\n\t      if (this.textAlign === 'center') {\n\t        return (this.width - lineWidth) / 2;\n\t      }\n\t      if (this.textAlign === 'right') {\n\t        return this.width - lineWidth;\n\t      }\n\t      return 0;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _clearCache: function() {\n\t      this.__lineWidths = [ ];\n\t      this.__lineHeights = [ ];\n\t      this.__lineOffsets = [ ];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _shouldClearCache: function() {\n\t      var shouldClear = false;\n\t      if (this._forceClearCache) {\n\t        this._forceClearCache = false;\n\t        return true;\n\t      }\n\t      for (var prop in this._dimensionAffectingProps) {\n\t        if (this['__' + prop] !== this[prop]) {\n\t          this['__' + prop] = this[prop];\n\t          shouldClear = true;\n\t        }\n\t      }\n\t      return shouldClear;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} lineIndex line number\n\t     * @return {Number} Line width\n\t     */\n\t    _getLineWidth: function(ctx, lineIndex) {\n\t      if (this.__lineWidths[lineIndex]) {\n\t        return this.__lineWidths[lineIndex];\n\t      }\n\t      var width, wordCount, line = this._textLines[lineIndex];\n\t      if (line === '') {\n\t        width = 0;\n\t      }\n\t      else if (this.textAlign === 'justify' && this._cacheLinesWidth) {\n\t        wordCount = line.split(' ');\n\t        //consider not justify last line, not for now.\n\t        if (wordCount.length > 1) {\n\t          width = this.width;\n\t        }\n\t        else {\n\t          width = ctx.measureText(line).width;\n\t        }\n\t      }\n\t      else {\n\t        width = ctx.measureText(line).width;\n\t      }\n\t      this._cacheLinesWidth && (this.__lineWidths[lineIndex] = width);\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextDecoration: function(ctx) {\n\t      if (!this.textDecoration) {\n\t        return;\n\t      }\n\t\n\t      var halfOfVerticalBox = this.height / 2,\n\t          _this = this, offsets = [];\n\t\n\t      /** @ignore */\n\t      function renderLinesAtOffset(offsets) {\n\t        var i, lineHeight = 0, len, j, oLen, lineWidth,\n\t            lineLeftOffset, heightOfLine;\n\t\n\t        for (i = 0, len = _this._textLines.length; i < len; i++) {\n\t\n\t          lineWidth = _this._getLineWidth(ctx, i),\n\t          lineLeftOffset = _this._getLineLeftOffset(lineWidth),\n\t          heightOfLine = _this._getHeightOfLine(ctx, i);\n\t\n\t          for (j = 0, oLen = offsets.length; j < oLen; j++) {\n\t            ctx.fillRect(\n\t              _this._getLeftOffset() + lineLeftOffset,\n\t              lineHeight + (_this._fontSizeMult - 1 + offsets[j] ) * _this.fontSize - halfOfVerticalBox,\n\t              lineWidth,\n\t              _this.fontSize / 15);\n\t          }\n\t          lineHeight += heightOfLine;\n\t        }\n\t      }\n\t\n\t      if (this.textDecoration.indexOf('underline') > -1) {\n\t        offsets.push(0.85); // 1 - 3/16\n\t      }\n\t      if (this.textDecoration.indexOf('line-through') > -1) {\n\t        offsets.push(0.43);\n\t      }\n\t      if (this.textDecoration.indexOf('overline') > -1) {\n\t        offsets.push(-0.12);\n\t      }\n\t      if (offsets.length > 0) {\n\t        renderLinesAtOffset(offsets);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getFontDeclaration: function() {\n\t      return [\n\t        // node-canvas needs \"weight style\", while browsers need \"style weight\"\n\t        (fabric.isLikelyNode ? this.fontWeight : this.fontStyle),\n\t        (fabric.isLikelyNode ? this.fontStyle : this.fontWeight),\n\t        this.fontSize + 'px',\n\t        (fabric.isLikelyNode ? ('\"' + this.fontFamily + '\"') : this.fontFamily)\n\t      ].join(' ');\n\t    },\n\t\n\t    /**\n\t     * Renders text instance on a specified context\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    render: function(ctx, noTransform) {\n\t      // do not render if object is not visible\n\t      if (!this.visible) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      this._setTextStyles(ctx);\n\t\n\t      if (this._shouldClearCache()) {\n\t        this._initDimensions(ctx);\n\t      }\n\t      if (!noTransform) {\n\t        this.transform(ctx);\n\t      }\n\t      if (this.transformMatrix) {\n\t        ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      if (this.group && this.group.type === 'path-group') {\n\t        ctx.translate(this.left, this.top);\n\t      }\n\t      this._render(ctx);\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Returns the text as an array of lines.\n\t     * @returns {Array} Lines in the text\n\t     */\n\t    _splitTextIntoLines: function() {\n\t      return this.text.split(this._reNewline);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} Object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n\t        text:                 this.text,\n\t        fontSize:             this.fontSize,\n\t        fontWeight:           this.fontWeight,\n\t        fontFamily:           this.fontFamily,\n\t        fontStyle:            this.fontStyle,\n\t        lineHeight:           this.lineHeight,\n\t        textDecoration:       this.textDecoration,\n\t        textAlign:            this.textAlign,\n\t        textBackgroundColor:  this.textBackgroundColor\n\t      });\n\t      if (!this.includeDefaultValues) {\n\t        this._removeDefaultValues(object);\n\t      }\n\t      return object;\n\t    },\n\t\n\t    /* _TO_SVG_START_ */\n\t    /**\n\t     * Returns SVG representation of an instance\n\t     * @param {Function} [reviver] Method for further parsing of svg representation.\n\t     * @return {String} svg representation of an instance\n\t     */\n\t    toSVG: function(reviver) {\n\t      var markup = this._createBaseSVGMarkup(),\n\t          offsets = this._getSVGLeftTopOffsets(this.ctx),\n\t          textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n\t      this._wrapSVGTextAndBg(markup, textAndBg);\n\t\n\t      return reviver ? reviver(markup.join('')) : markup.join('');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getSVGLeftTopOffsets: function(ctx) {\n\t      var lineTop = this._getHeightOfLine(ctx, 0),\n\t          textLeft = -this.width / 2,\n\t          textTop = 0;\n\t\n\t      return {\n\t        textLeft: textLeft + (this.group && this.group.type === 'path-group' ? this.left : 0),\n\t        textTop: textTop + (this.group && this.group.type === 'path-group' ? -this.top : 0),\n\t        lineTop: lineTop\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _wrapSVGTextAndBg: function(markup, textAndBg) {\n\t      markup.push(\n\t        '\\t<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n',\n\t          textAndBg.textBgRects.join(''),\n\t          '\\t\\t<text ',\n\t            (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ': ''),\n\t            (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ': ''),\n\t            (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ': ''),\n\t            (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ': ''),\n\t            (this.textDecoration ? 'text-decoration=\"' + this.textDecoration + '\" ': ''),\n\t            'style=\"', this.getSvgStyles(), '\" >',\n\t            textAndBg.textSpans.join(''),\n\t          '</text>\\n',\n\t        '\\t</g>\\n'\n\t      );\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Number} textTopOffset Text top offset\n\t     * @param {Number} textLeftOffset Text left offset\n\t     * @return {Object}\n\t     */\n\t    _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\n\t      var textSpans = [ ],\n\t          textBgRects = [ ],\n\t          height = 0;\n\t      // bounding-box background\n\t      this._setSVGBg(textBgRects);\n\t\n\t      // text and text-background\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        if (this.textBackgroundColor) {\n\t          this._setSVGTextLineBg(textBgRects, i, textLeftOffset, textTopOffset, height);\n\t        }\n\t        this._setSVGTextLineText(i, textSpans, height, textLeftOffset, textTopOffset, textBgRects);\n\t        height += this._getHeightOfLine(this.ctx, i);\n\t      }\n\t\n\t      return {\n\t        textSpans: textSpans,\n\t        textBgRects: textBgRects\n\t      };\n\t    },\n\t\n\t    _setSVGTextLineText: function(i, textSpans, height, textLeftOffset, textTopOffset) {\n\t      var yPos = this.fontSize * (this._fontSizeMult - this._fontSizeFraction)\n\t        - textTopOffset + height - this.height / 2;\n\t      textSpans.push(\n\t        '<tspan x=\"',\n\t          toFixed(textLeftOffset + this._getLineLeftOffset(this.__lineWidths[i]), NUM_FRACTION_DIGITS), '\" ',\n\t          'y=\"',\n\t          toFixed(yPos, NUM_FRACTION_DIGITS),\n\t          '\" ',\n\t          // doing this on <tspan> elements since setting opacity\n\t          // on containing <text> one doesn't work in Illustrator\n\t          this._getFillAttributes(this.fill), '>',\n\t          fabric.util.string.escapeXml(this._textLines[i]),\n\t        '</tspan>'\n\t      );\n\t    },\n\t\n\t    _setSVGTextLineBg: function(textBgRects, i, textLeftOffset, textTopOffset, height) {\n\t      textBgRects.push(\n\t        '\\t\\t<rect ',\n\t          this._getFillAttributes(this.textBackgroundColor),\n\t          ' x=\"',\n\t          toFixed(textLeftOffset + this._getLineLeftOffset(this.__lineWidths[i]), NUM_FRACTION_DIGITS),\n\t          '\" y=\"',\n\t          toFixed(height - this.height / 2, NUM_FRACTION_DIGITS),\n\t          '\" width=\"',\n\t          toFixed(this.__lineWidths[i], NUM_FRACTION_DIGITS),\n\t          '\" height=\"',\n\t          toFixed(this._getHeightOfLine(this.ctx, i) / this.lineHeight, NUM_FRACTION_DIGITS),\n\t        '\"></rect>\\n');\n\t    },\n\t\n\t    _setSVGBg: function(textBgRects) {\n\t      if (this.backgroundColor) {\n\t        textBgRects.push(\n\t          '\\t\\t<rect ',\n\t            this._getFillAttributes(this.backgroundColor),\n\t            ' x=\"',\n\t            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\n\t            '\" y=\"',\n\t            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\n\t            '\" width=\"',\n\t            toFixed(this.width, NUM_FRACTION_DIGITS),\n\t            '\" height=\"',\n\t            toFixed(this.height, NUM_FRACTION_DIGITS),\n\t          '\"></rect>\\n');\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n\t     * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n\t     *\n\t     * @private\n\t     * @param {Any} value\n\t     * @return {String}\n\t     */\n\t    _getFillAttributes: function(value) {\n\t      var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\n\t      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\n\t        return 'fill=\"' + value + '\"';\n\t      }\n\t      return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\n\t    },\n\t    /* _TO_SVG_END_ */\n\t\n\t    /**\n\t     * Sets specified property to a specified value\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     * @return {fabric.Text} thisArg\n\t     * @chainable\n\t     */\n\t    _set: function(key, value) {\n\t      this.callSuper('_set', key, value);\n\t\n\t      if (key in this._dimensionAffectingProps) {\n\t        this._initDimensions();\n\t        this.setCoords();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Returns complexity of an instance\n\t     * @return {Number} complexity\n\t     */\n\t    complexity: function() {\n\t      return 1;\n\t    }\n\t  });\n\t\n\t  /* _FROM_SVG_START_ */\n\t  /**\n\t   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\n\t   * @static\n\t   * @memberOf fabric.Text\n\t   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n\t   */\n\t  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\n\t    'x y dx dy font-family font-style font-weight font-size text-decoration text-anchor'.split(' '));\n\t\n\t  /**\n\t   * Default SVG font size\n\t   * @static\n\t   * @memberOf fabric.Text\n\t   */\n\t  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\n\t\n\t  /**\n\t   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\n\t   * @static\n\t   * @memberOf fabric.Text\n\t   * @param {SVGElement} element Element to parse\n\t   * @param {Object} [options] Options object\n\t   * @return {fabric.Text} Instance of fabric.Text\n\t   */\n\t  fabric.Text.fromElement = function(element, options) {\n\t    if (!element) {\n\t      return null;\n\t    }\n\t\n\t    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES);\n\t    options = fabric.util.object.extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes);\n\t\n\t    options.top = options.top || 0;\n\t    options.left = options.left || 0;\n\t    if ('dx' in parsedAttributes) {\n\t      options.left += parsedAttributes.dx;\n\t    }\n\t    if ('dy' in parsedAttributes) {\n\t      options.top += parsedAttributes.dy;\n\t    }\n\t    if (!('fontSize' in options)) {\n\t      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\t    }\n\t\n\t    if (!options.originX) {\n\t      options.originX = 'left';\n\t    }\n\t    var textContent = element.textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' '),\n\t        text = new fabric.Text(textContent, options),\n\t        /*\n\t          Adjust positioning:\n\t            x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n\t            top/left properties in Fabric correspond to center point of text bounding box\n\t        */\n\t        offX = 0;\n\t\n\t    if (text.originX === 'left') {\n\t      offX = text.getWidth() / 2;\n\t    }\n\t    if (text.originX === 'right') {\n\t      offX = -text.getWidth() / 2;\n\t    }\n\t    text.set({\n\t      left: text.getLeft() + offX,\n\t      top: text.getTop() - text.getHeight() / 2 + text.fontSize * (0.18 + text._fontSizeFraction) /* 0.3 is the old lineHeight */\n\t    });\n\t\n\t    return text;\n\t  };\n\t  /* _FROM_SVG_END_ */\n\t\n\t  /**\n\t   * Returns fabric.Text instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Text\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Text} Instance of fabric.Text\n\t   */\n\t  fabric.Text.fromObject = function(object) {\n\t    return new fabric.Text(object.text, clone(object));\n\t  };\n\t\n\t  fabric.util.createAccessors(fabric.Text);\n\t\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  var clone = fabric.util.object.clone;\n\t\n\t  /**\n\t   * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\n\t   * prefix when observing canvas.\n\t   * @class fabric.IText\n\t   * @extends fabric.Text\n\t   * @mixes fabric.Observable\n\t   *\n\t   * @fires changed\n\t   * @fires selection:changed\n\t   * @fires editing:entered\n\t   * @fires editing:exited\n\t   *\n\t   * @return {fabric.IText} thisArg\n\t   * @see {@link fabric.IText#initialize} for constructor definition\n\t   *\n\t   * <p>Supported key combinations:</p>\n\t   * <pre>\n\t   *   Move cursor:                    left, right, up, down\n\t   *   Select character:               shift + left, shift + right\n\t   *   Select text vertically:         shift + up, shift + down\n\t   *   Move cursor by word:            alt + left, alt + right\n\t   *   Select words:                   shift + alt + left, shift + alt + right\n\t   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n\t   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n\t   *   Jump to start/end of text:      cmd + up, cmd + down\n\t   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n\t   *   Delete character:               backspace\n\t   *   Delete word:                    alt + backspace\n\t   *   Delete line:                    cmd + backspace\n\t   *   Forward delete:                 delete\n\t   *   Copy text:                      ctrl/cmd + c\n\t   *   Paste text:                     ctrl/cmd + v\n\t   *   Cut text:                       ctrl/cmd + x\n\t   *   Select entire text:             ctrl/cmd + a\n\t   *   Quit editing                    tab or esc\n\t   * </pre>\n\t   *\n\t   * <p>Supported mouse/touch combination</p>\n\t   * <pre>\n\t   *   Position cursor:                click/touch\n\t   *   Create selection:               click/touch & drag\n\t   *   Create selection:               click & shift + click\n\t   *   Select word:                    double click\n\t   *   Select line:                    triple click\n\t   * </pre>\n\t   */\n\t  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\n\t\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'i-text',\n\t\n\t    /**\n\t     * Index where text selection starts (or where cursor is when there is no selection)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    selectionStart: 0,\n\t\n\t    /**\n\t     * Index where text selection ends\n\t     * @type Number\n\t     * @default\n\t     */\n\t    selectionEnd: 0,\n\t\n\t    /**\n\t     * Color of text selection\n\t     * @type String\n\t     * @default\n\t     */\n\t    selectionColor: 'rgba(17,119,255,0.3)',\n\t\n\t    /**\n\t     * Indicates whether text is in editing mode\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    isEditing: false,\n\t\n\t    /**\n\t     * Indicates whether a text can be edited\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    editable: true,\n\t\n\t    /**\n\t     * Border color of text object while it's in editing mode\n\t     * @type String\n\t     * @default\n\t     */\n\t    editingBorderColor: 'rgba(102,153,255,0.25)',\n\t\n\t    /**\n\t     * Width of cursor (in px)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    cursorWidth: 2,\n\t\n\t    /**\n\t     * Color of default cursor (when not overwritten by character style)\n\t     * @type String\n\t     * @default\n\t     */\n\t    cursorColor: '#333',\n\t\n\t    /**\n\t     * Delay between cursor blink (in ms)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    cursorDelay: 1000,\n\t\n\t    /**\n\t     * Duration of cursor fadein (in ms)\n\t     * @type Number\n\t     * @default\n\t     */\n\t    cursorDuration: 600,\n\t\n\t    /**\n\t     * Object containing character styles\n\t     * (where top-level properties corresponds to line number and 2nd-level properties -- to char number in a line)\n\t     * @type Object\n\t     * @default\n\t     */\n\t    styles: null,\n\t\n\t    /**\n\t     * Indicates whether internal text char widths can be cached\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    caching: true,\n\t\n\t    /**\n\t     * @private\n\t     * @type Boolean\n\t     * @default\n\t     */\n\t    _skipFillStrokeCheck: false,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _reSpace: /\\s|\\n/,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _currentCursorOpacity: 0,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _selectionDirection: null,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _abortCursorAnimation: false,\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _charWidthsCache: { },\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {String} text Text string\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.IText} thisArg\n\t     */\n\t    initialize: function(text, options) {\n\t      this.styles = options ? (options.styles || { }) : { };\n\t      this.callSuper('initialize', text, options);\n\t      this.initBehavior();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _clearCache: function() {\n\t      this.callSuper('_clearCache');\n\t      this.__maxFontHeights = [ ];\n\t      this.__widthOfSpace = [ ];\n\t    },\n\t\n\t    /**\n\t     * Returns true if object has no styling\n\t     */\n\t    isEmptyStyles: function() {\n\t      if (!this.styles) {\n\t        return true;\n\t      }\n\t      var obj = this.styles;\n\t\n\t      for (var p1 in obj) {\n\t        for (var p2 in obj[p1]) {\n\t          /*jshint unused:false */\n\t          for (var p3 in obj[p1][p2]) {\n\t            return false;\n\t          }\n\t        }\n\t      }\n\t      return true;\n\t    },\n\t\n\t    /**\n\t     * Sets selection start (left boundary of a selection)\n\t     * @param {Number} index Index to set selection start to\n\t     */\n\t    setSelectionStart: function(index) {\n\t      index = Math.max(index, 0);\n\t      if (this.selectionStart !== index) {\n\t        this.fire('selection:changed');\n\t        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n\t        this.selectionStart = index;\n\t      }\n\t      this._updateTextarea();\n\t    },\n\t\n\t    /**\n\t     * Sets selection end (right boundary of a selection)\n\t     * @param {Number} index Index to set selection end to\n\t     */\n\t    setSelectionEnd: function(index) {\n\t      index = Math.min(index, this.text.length);\n\t      if (this.selectionEnd !== index) {\n\t        this.fire('selection:changed');\n\t        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n\t        this.selectionEnd = index;\n\t      }\n\t      this._updateTextarea();\n\t    },\n\t\n\t    /**\n\t     * Gets style of a current selection/cursor (at the start position)\n\t     * @param {Number} [startIndex] Start index to get styles at\n\t     * @param {Number} [endIndex] End index to get styles at\n\t     * @return {Object} styles Style object at a specified (or current) index\n\t     */\n\t    getSelectionStyles: function(startIndex, endIndex) {\n\t\n\t      if (arguments.length === 2) {\n\t        var styles = [ ];\n\t        for (var i = startIndex; i < endIndex; i++) {\n\t          styles.push(this.getSelectionStyles(i));\n\t        }\n\t        return styles;\n\t      }\n\t\n\t      var loc = this.get2DCursorLocation(startIndex),\n\t          style = this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n\t\n\t      return style || {};\n\t    },\n\t\n\t    /**\n\t     * Sets style of a current selection\n\t     * @param {Object} [styles] Styles object\n\t     * @return {fabric.IText} thisArg\n\t     * @chainable\n\t     */\n\t    setSelectionStyles: function(styles) {\n\t      if (this.selectionStart === this.selectionEnd) {\n\t        this._extendStyles(this.selectionStart, styles);\n\t      }\n\t      else {\n\t        for (var i = this.selectionStart; i < this.selectionEnd; i++) {\n\t          this._extendStyles(i, styles);\n\t        }\n\t      }\n\t      /* not included in _extendStyles to avoid clearing cache more than once */\n\t      this._forceClearCache = true;\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _extendStyles: function(index, styles) {\n\t      var loc = this.get2DCursorLocation(index);\n\t\n\t      if (!this._getLineStyle(loc.lineIndex)) {\n\t        this._setLineStyle(loc.lineIndex, {});\n\t      }\n\t\n\t      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n\t        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n\t      }\n\t\n\t      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _render: function(ctx) {\n\t      this.callSuper('_render', ctx);\n\t      this.ctx = ctx;\n\t      this.isEditing && this.renderCursorOrSelection();\n\t    },\n\t\n\t    /**\n\t     * Renders cursor or selection (depending on what exists)\n\t     */\n\t    renderCursorOrSelection: function() {\n\t      if (!this.active) {\n\t        return;\n\t      }\n\t\n\t      var chars = this.text.split(''),\n\t          boundaries, ctx;\n\t\n\t      if (this.canvas.contextTop) {\n\t        ctx = this.canvas.contextTop;\n\t        ctx.save();\n\t        ctx.transform.apply(ctx, this.canvas.viewportTransform);\n\t        this.transform(ctx);\n\t        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\n\t      }\n\t      else {\n\t        ctx = this.ctx;\n\t        ctx.save();\n\t      }\n\t\n\t      if (this.selectionStart === this.selectionEnd) {\n\t        boundaries = this._getCursorBoundaries(chars, 'cursor');\n\t        this.renderCursor(boundaries, ctx);\n\t      }\n\t      else {\n\t        boundaries = this._getCursorBoundaries(chars, 'selection');\n\t        this.renderSelection(chars, boundaries, ctx);\n\t      }\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n\t     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n\t     */\n\t    get2DCursorLocation: function(selectionStart) {\n\t      if (typeof selectionStart === 'undefined') {\n\t        selectionStart = this.selectionStart;\n\t      }\n\t      var len = this._textLines.length;\n\t      for (var i = 0; i < len; i++) {\n\t        if (selectionStart <= this._textLines[i].length) {\n\t          return {\n\t            lineIndex: i,\n\t            charIndex: selectionStart\n\t          };\n\t        }\n\t        selectionStart -= this._textLines[i].length + 1;\n\t      }\n\t      return {\n\t        lineIndex: i - 1,\n\t        charIndex: this._textLines[i - 1].length < selectionStart ? this._textLines[i - 1].length : selectionStart\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Returns complete style of char at the current cursor\n\t     * @param {Number} lineIndex Line index\n\t     * @param {Number} charIndex Char index\n\t     * @return {Object} Character style\n\t     */\n\t    getCurrentCharStyle: function(lineIndex, charIndex) {\n\t      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n\t\n\t      return {\n\t        fontSize: style && style.fontSize || this.fontSize,\n\t        fill: style && style.fill || this.fill,\n\t        textBackgroundColor: style && style.textBackgroundColor || this.textBackgroundColor,\n\t        textDecoration: style && style.textDecoration || this.textDecoration,\n\t        fontFamily: style && style.fontFamily || this.fontFamily,\n\t        fontWeight: style && style.fontWeight || this.fontWeight,\n\t        fontStyle: style && style.fontStyle || this.fontStyle,\n\t        stroke: style && style.stroke || this.stroke,\n\t        strokeWidth: style && style.strokeWidth || this.strokeWidth\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Returns fontSize of char at the current cursor\n\t     * @param {Number} lineIndex Line index\n\t     * @param {Number} charIndex Char index\n\t     * @return {Number} Character font size\n\t     */\n\t    getCurrentCharFontSize: function(lineIndex, charIndex) {\n\t      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n\t      return style && style.fontSize ? style.fontSize : this.fontSize;\n\t    },\n\t\n\t    /**\n\t     * Returns color (fill) of char at the current cursor\n\t     * @param {Number} lineIndex Line index\n\t     * @param {Number} charIndex Char index\n\t     * @return {String} Character color (fill)\n\t     */\n\t    getCurrentCharColor: function(lineIndex, charIndex) {\n\t      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n\t      return style && style.fill ? style.fill : this.cursorColor;\n\t    },\n\t\n\t    /**\n\t     * Returns cursor boundaries (left, top, leftOffset, topOffset)\n\t     * @private\n\t     * @param {Array} chars Array of characters\n\t     * @param {String} typeOfBoundaries\n\t     */\n\t    _getCursorBoundaries: function(chars, typeOfBoundaries) {\n\t\n\t      // left/top are left/top of entire text box\n\t      // leftOffset/topOffset are offset from that left/top point of a text box\n\t\n\t      var left = Math.round(this._getLeftOffset()),\n\t          top = this._getTopOffset(),\n\t\n\t          offsets = this._getCursorBoundariesOffsets(\n\t                      chars, typeOfBoundaries);\n\t\n\t      return {\n\t        left: left,\n\t        top: top,\n\t        leftOffset: offsets.left + offsets.lineLeft,\n\t        topOffset: offsets.top\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {\n\t\n\t      var lineLeftOffset = 0,\n\t\n\t          lineIndex = 0,\n\t          charIndex = 0,\n\t          topOffset = 0,\n\t          leftOffset = 0;\n\t\n\t      for (var i = 0; i < this.selectionStart; i++) {\n\t        if (chars[i] === '\\n') {\n\t          leftOffset = 0;\n\t          topOffset += this._getHeightOfLine(this.ctx, lineIndex);\n\t\n\t          lineIndex++;\n\t          charIndex = 0;\n\t        }\n\t        else {\n\t          leftOffset += this._getWidthOfChar(this.ctx, chars[i], lineIndex, charIndex);\n\t          charIndex++;\n\t        }\n\t\n\t        lineLeftOffset = this._getCachedLineOffset(lineIndex);\n\t      }\n\t      if (typeOfBoundaries === 'cursor') {\n\t        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, lineIndex) / this.lineHeight\n\t          - this.getCurrentCharFontSize(lineIndex, charIndex) * (1 - this._fontSizeFraction);\n\t      }\n\t\n\t      return {\n\t        top: topOffset,\n\t        left: leftOffset,\n\t        lineLeft: lineLeftOffset\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getCachedLineOffset: function(lineIndex) {\n\t      var widthOfLine = this._getLineWidth(this.ctx, lineIndex);\n\t\n\t      return this.__lineOffsets[lineIndex] ||\n\t        (this.__lineOffsets[lineIndex] = this._getLineLeftOffset(widthOfLine));\n\t    },\n\t\n\t    /**\n\t     * Renders cursor\n\t     * @param {Object} boundaries\n\t     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n\t     */\n\t    renderCursor: function(boundaries, ctx) {\n\t\n\t      var cursorLocation = this.get2DCursorLocation(),\n\t          lineIndex = cursorLocation.lineIndex,\n\t          charIndex = cursorLocation.charIndex,\n\t          charHeight = this.getCurrentCharFontSize(lineIndex, charIndex),\n\t          leftOffset = (lineIndex === 0 && charIndex === 0)\n\t                    ? this._getCachedLineOffset(lineIndex)\n\t                    : boundaries.leftOffset;\n\t\n\t      ctx.fillStyle = this.getCurrentCharColor(lineIndex, charIndex);\n\t      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\n\t\n\t      ctx.fillRect(\n\t        boundaries.left + leftOffset,\n\t        boundaries.top + boundaries.topOffset,\n\t        this.cursorWidth / this.scaleX,\n\t        charHeight);\n\t\n\t    },\n\t\n\t    /**\n\t     * Renders text selection\n\t     * @param {Array} chars Array of characters\n\t     * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n\t     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n\t     */\n\t    renderSelection: function(chars, boundaries, ctx) {\n\t\n\t      ctx.fillStyle = this.selectionColor;\n\t\n\t      var start = this.get2DCursorLocation(this.selectionStart),\n\t          end = this.get2DCursorLocation(this.selectionEnd),\n\t          startLine = start.lineIndex,\n\t          endLine = end.lineIndex;\n\t\n\t      for (var i = startLine; i <= endLine; i++) {\n\t        var lineOffset = this._getCachedLineOffset(i) || 0,\n\t            lineHeight = this._getHeightOfLine(this.ctx, i),\n\t            boxWidth = 0, line = this._textLines[i];\n\t\n\t        if (i === startLine) {\n\t          for (var j = 0, len = line.length; j < len; j++) {\n\t            if (j >= start.charIndex && (i !== endLine || j < end.charIndex)) {\n\t              boxWidth += this._getWidthOfChar(ctx, line[j], i, j);\n\t            }\n\t            if (j < start.charIndex) {\n\t              lineOffset += this._getWidthOfChar(ctx, line[j], i, j);\n\t            }\n\t          }\n\t        }\n\t        else if (i > startLine && i < endLine) {\n\t          boxWidth += this._getLineWidth(ctx, i) || 5;\n\t        }\n\t        else if (i === endLine) {\n\t          for (var j2 = 0, j2len = end.charIndex; j2 < j2len; j2++) {\n\t            boxWidth += this._getWidthOfChar(ctx, line[j2], i, j2);\n\t          }\n\t        }\n\t\n\t        ctx.fillRect(\n\t          boundaries.left + lineOffset,\n\t          boundaries.top + boundaries.topOffset,\n\t          boxWidth,\n\t          lineHeight);\n\t\n\t        boundaries.topOffset += lineHeight;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderChars: function(method, ctx, line, left, top, lineIndex) {\n\t\n\t      if (this.isEmptyStyles()) {\n\t        return this._renderCharsFast(method, ctx, line, left, top);\n\t      }\n\t\n\t      this.skipTextAlign = true;\n\t\n\t      // set proper box offset\n\t      left -= this.textAlign === 'center'\n\t        ? (this.width / 2)\n\t        : (this.textAlign === 'right')\n\t          ? this.width\n\t          : 0;\n\t\n\t      // set proper line offset\n\t      var lineHeight = this._getHeightOfLine(ctx, lineIndex),\n\t          lineLeftOffset = this._getCachedLineOffset(lineIndex),\n\t          prevStyle,\n\t          charsToRender = '';\n\t\n\t      left += lineLeftOffset || 0;\n\t\n\t      ctx.save();\n\t      top -= lineHeight / this.lineHeight * this._fontSizeFraction;\n\t      for (var i = 0, len = line.length; i <= len; i++) {\n\t        prevStyle = prevStyle || this.getCurrentCharStyle(lineIndex, i);\n\t        var thisStyle = this.getCurrentCharStyle(lineIndex, i + 1);\n\t\n\t        if (this._hasStyleChanged(prevStyle, thisStyle) || i === len) {\n\t          this._renderChar(method, ctx, lineIndex, i - 1, charsToRender, left, top, lineHeight);\n\t          charsToRender = '';\n\t          prevStyle = thisStyle;\n\t        }\n\t        charsToRender += line[i];\n\t      }\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} line Content of the line\n\t     * @param {Number} left Left coordinate\n\t     * @param {Number} top Top coordinate\n\t     */\n\t    _renderCharsFast: function(method, ctx, line, left, top) {\n\t      this.skipTextAlign = false;\n\t\n\t      if (method === 'fillText' && this.fill) {\n\t        this.callSuper('_renderChars', method, ctx, line, left, top);\n\t      }\n\t      if (method === 'strokeText' && ((this.stroke && this.strokeWidth > 0) || this.skipFillStrokeCheck)) {\n\t        this.callSuper('_renderChars', method, ctx, line, left, top);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} lineIndex\n\t     * @param {Number} i\n\t     * @param {String} _char\n\t     * @param {Number} left Left coordinate\n\t     * @param {Number} top Top coordinate\n\t     * @param {Number} lineHeight Height of the line\n\t     */\n\t    _renderChar: function(method, ctx, lineIndex, i, _char, left, top, lineHeight) {\n\t      var charWidth, charHeight,\n\t          decl = this._getStyleDeclaration(lineIndex, i),\n\t          offset = this._fontSizeFraction * lineHeight / this.lineHeight;\n\t\n\t      if (decl) {\n\t        var shouldStroke = decl.stroke || this.stroke,\n\t            shouldFill = decl.fill || this.fill;\n\t\n\t        ctx.save();\n\t        charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i, decl);\n\t        charHeight = this._getHeightOfChar(ctx, _char, lineIndex, i);\n\t\n\t        if (shouldFill) {\n\t          ctx.fillText(_char, left, top);\n\t        }\n\t        if (shouldStroke) {\n\t          ctx.strokeText(_char, left, top);\n\t        }\n\t\n\t        this._renderCharDecoration(ctx, decl, left, top, offset, charWidth, charHeight);\n\t        ctx.restore();\n\t\n\t        ctx.translate(charWidth, 0);\n\t      }\n\t      else {\n\t        if (method === 'strokeText' && this.stroke) {\n\t          ctx[method](_char, left, top);\n\t        }\n\t        if (method === 'fillText' && this.fill) {\n\t          ctx[method](_char, left, top);\n\t        }\n\t        charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i);\n\t        this._renderCharDecoration(ctx, null, left, top, offset, charWidth, this.fontSize);\n\t\n\t        ctx.translate(ctx.measureText(_char).width, 0);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} prevStyle\n\t     * @param {Object} thisStyle\n\t     */\n\t    _hasStyleChanged: function(prevStyle, thisStyle) {\n\t      return (prevStyle.fill !== thisStyle.fill ||\n\t              prevStyle.fontSize !== thisStyle.fontSize ||\n\t              prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n\t              prevStyle.textDecoration !== thisStyle.textDecoration ||\n\t              prevStyle.fontFamily !== thisStyle.fontFamily ||\n\t              prevStyle.fontWeight !== thisStyle.fontWeight ||\n\t              prevStyle.fontStyle !== thisStyle.fontStyle ||\n\t              prevStyle.stroke !== thisStyle.stroke ||\n\t              prevStyle.strokeWidth !== thisStyle.strokeWidth\n\t      );\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderCharDecoration: function(ctx, styleDeclaration, left, top, offset, charWidth, charHeight) {\n\t\n\t      var textDecoration = styleDeclaration\n\t            ? (styleDeclaration.textDecoration || this.textDecoration)\n\t            : this.textDecoration;\n\t\n\t      if (!textDecoration) {\n\t        return;\n\t      }\n\t\n\t      if (textDecoration.indexOf('underline') > -1) {\n\t        ctx.fillRect(\n\t          left,\n\t          top + charHeight / 10,\n\t          charWidth ,\n\t          charHeight / 15\n\t        );\n\t      }\n\t      if (textDecoration.indexOf('line-through') > -1) {\n\t        ctx.fillRect(\n\t          left,\n\t          top - charHeight * (this._fontSizeFraction + this._fontSizeMult - 1) + charHeight / 15,\n\t          charWidth,\n\t          charHeight / 15\n\t        );\n\t      }\n\t      if (textDecoration.indexOf('overline') > -1) {\n\t        ctx.fillRect(\n\t          left,\n\t          top - (this._fontSizeMult - this._fontSizeFraction) * charHeight,\n\t          charWidth,\n\t          charHeight / 15\n\t        );\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {String} method\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} line\n\t     */\n\t    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n\t      // to \"cancel\" this.fontSize subtraction in fabric.Text#_renderTextLine\n\t      // the adding 0.03 is just to align text with itext by overlap test\n\t      if (!this.isEmptyStyles()) {\n\t        top += this.fontSize * (this._fontSizeFraction + 0.03);\n\t      }\n\t      this.callSuper('_renderTextLine', method, ctx, line, left, top, lineIndex);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextDecoration: function(ctx) {\n\t      if (this.isEmptyStyles()) {\n\t        return this.callSuper('_renderTextDecoration', ctx);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _renderTextLinesBackground: function(ctx) {\n\t      if (!this.textBackgroundColor && !this.styles) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t\n\t      if (this.textBackgroundColor) {\n\t        ctx.fillStyle = this.textBackgroundColor;\n\t      }\n\t\n\t      var lineHeights = 0;\n\t\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t\n\t        var heightOfLine = this._getHeightOfLine(ctx, i);\n\t        if (this._textLines[i] === '') {\n\t          lineHeights += heightOfLine;\n\t          continue;\n\t        }\n\t\n\t        var lineWidth = this._getLineWidth(ctx, i),\n\t            lineLeftOffset = this._getCachedLineOffset(i);\n\t\n\t        if (this.textBackgroundColor) {\n\t          ctx.fillStyle = this.textBackgroundColor;\n\t\n\t          ctx.fillRect(\n\t            this._getLeftOffset() + lineLeftOffset,\n\t            this._getTopOffset() + lineHeights,\n\t            lineWidth,\n\t            heightOfLine / this.lineHeight\n\t          );\n\t        }\n\t        if (this._getLineStyle(i)) {\n\t          for (var j = 0, jlen = this._textLines[i].length; j < jlen; j++) {\n\t            var style = this._getStyleDeclaration(i, j);\n\t            if (style && style.textBackgroundColor) {\n\t\n\t              var _char = this._textLines[i][j];\n\t\n\t              ctx.fillStyle = style.textBackgroundColor;\n\t\n\t              ctx.fillRect(\n\t                this._getLeftOffset() + lineLeftOffset + this._getWidthOfCharsAt(ctx, i, j),\n\t                this._getTopOffset() + lineHeights,\n\t                this._getWidthOfChar(ctx, _char, i, j) + 1,\n\t                heightOfLine / this.lineHeight\n\t              );\n\t            }\n\t          }\n\t        }\n\t        lineHeights += heightOfLine;\n\t      }\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getCacheProp: function(_char, styleDeclaration) {\n\t      return _char +\n\t             styleDeclaration.fontFamily +\n\t             styleDeclaration.fontSize +\n\t             styleDeclaration.fontWeight +\n\t             styleDeclaration.fontStyle +\n\t             styleDeclaration.shadow;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {String} _char\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Object} [decl]\n\t     */\n\t    _applyCharStylesGetWidth: function(ctx, _char, lineIndex, charIndex, decl) {\n\t      var styleDeclaration = decl || this._getStyleDeclaration(lineIndex, charIndex);\n\t\n\t      if (styleDeclaration) {\n\t        // cloning so that original style object is not polluted with following font declarations\n\t        styleDeclaration = clone(styleDeclaration);\n\t      }\n\t      else {\n\t        styleDeclaration = { };\n\t      }\n\t\n\t      this._applyFontStyles(styleDeclaration);\n\t\n\t      var cacheProp = this._getCacheProp(_char, styleDeclaration);\n\t\n\t      // short-circuit if no styles\n\t      if (this.isEmptyStyles() && this._charWidthsCache[cacheProp] && this.caching) {\n\t        return this._charWidthsCache[cacheProp];\n\t      }\n\t\n\t      if (typeof styleDeclaration.shadow === 'string') {\n\t        styleDeclaration.shadow = new fabric.Shadow(styleDeclaration.shadow);\n\t      }\n\t\n\t      var fill = styleDeclaration.fill || this.fill;\n\t      ctx.fillStyle = fill.toLive\n\t        ? fill.toLive(ctx, this)\n\t        : fill;\n\t\n\t      if (styleDeclaration.stroke) {\n\t        ctx.strokeStyle = (styleDeclaration.stroke && styleDeclaration.stroke.toLive)\n\t          ? styleDeclaration.stroke.toLive(ctx, this)\n\t          : styleDeclaration.stroke;\n\t      }\n\t\n\t      ctx.lineWidth = styleDeclaration.strokeWidth || this.strokeWidth;\n\t      ctx.font = this._getFontDeclaration.call(styleDeclaration);\n\t      this._setShadow.call(styleDeclaration, ctx);\n\t\n\t      if (!this.caching) {\n\t        return ctx.measureText(_char).width;\n\t      }\n\t\n\t      if (!this._charWidthsCache[cacheProp]) {\n\t        this._charWidthsCache[cacheProp] = ctx.measureText(_char).width;\n\t      }\n\t\n\t      return this._charWidthsCache[cacheProp];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {Object} styleDeclaration\n\t     */\n\t    _applyFontStyles: function(styleDeclaration) {\n\t      if (!styleDeclaration.fontFamily) {\n\t        styleDeclaration.fontFamily = this.fontFamily;\n\t      }\n\t      if (!styleDeclaration.fontSize) {\n\t        styleDeclaration.fontSize = this.fontSize;\n\t      }\n\t      if (!styleDeclaration.fontWeight) {\n\t        styleDeclaration.fontWeight = this.fontWeight;\n\t      }\n\t      if (!styleDeclaration.fontStyle) {\n\t        styleDeclaration.fontStyle = this.fontStyle;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Boolean} [returnCloneOrEmpty=false]\n\t     * @private\n\t     */\n\t    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {\n\t      if (returnCloneOrEmpty) {\n\t        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])\n\t          ? clone(this.styles[lineIndex][charIndex])\n\t          : { };\n\t      }\n\t\n\t      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Object} style\n\t     * @private\n\t     */\n\t    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n\t      this.styles[lineIndex][charIndex] = style;\n\t    },\n\t\n\t    /**\n\t     *\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @private\n\t     */\n\t    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n\t      delete this.styles[lineIndex][charIndex];\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @private\n\t     */\n\t    _getLineStyle: function(lineIndex) {\n\t      return this.styles[lineIndex];\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Object} style\n\t     * @private\n\t     */\n\t    _setLineStyle: function(lineIndex, style) {\n\t      this.styles[lineIndex] = style;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @private\n\t     */\n\t    _deleteLineStyle: function(lineIndex) {\n\t      delete this.styles[lineIndex];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getWidthOfChar: function(ctx, _char, lineIndex, charIndex) {\n\t      if (this.textAlign === 'justify' && this._reSpacesAndTabs.test(_char)) {\n\t        return this._getWidthOfSpace(ctx, lineIndex);\n\t      }\n\t\n\t      var styleDeclaration = this._getStyleDeclaration(lineIndex, charIndex, true);\n\t      this._applyFontStyles(styleDeclaration);\n\t      var cacheProp = this._getCacheProp(_char, styleDeclaration);\n\t\n\t      if (this._charWidthsCache[cacheProp] && this.caching) {\n\t        return this._charWidthsCache[cacheProp];\n\t      }\n\t      else if (ctx) {\n\t        ctx.save();\n\t        var width = this._applyCharStylesGetWidth(ctx, _char, lineIndex, charIndex);\n\t        ctx.restore();\n\t        return width;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getHeightOfChar: function(ctx, _char, lineIndex, charIndex) {\n\t      var style = this._getStyleDeclaration(lineIndex, charIndex);\n\t      return style && style.fontSize ? style.fontSize : this.fontSize;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getHeightOfCharAt: function(ctx, lineIndex, charIndex) {\n\t      var _char = this._textLines[lineIndex][charIndex];\n\t      return this._getHeightOfChar(ctx, _char, lineIndex, charIndex);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getWidthOfCharsAt: function(ctx, lineIndex, charIndex) {\n\t      var width = 0, i, _char;\n\t      for (i = 0; i < charIndex; i++) {\n\t        _char = this._textLines[lineIndex][i];\n\t        width += this._getWidthOfChar(ctx, _char, lineIndex, i);\n\t      }\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getLineWidth: function(ctx, lineIndex) {\n\t      if (this.__lineWidths[lineIndex]) {\n\t        return this.__lineWidths[lineIndex];\n\t      }\n\t      this.__lineWidths[lineIndex] = this._getWidthOfCharsAt(ctx, lineIndex, this._textLines[lineIndex].length);\n\t      return this.__lineWidths[lineIndex];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} lineIndex\n\t     */\n\t    _getWidthOfSpace: function (ctx, lineIndex) {\n\t      if (this.__widthOfSpace[lineIndex]) {\n\t        return this.__widthOfSpace[lineIndex];\n\t      }\n\t      var line = this._textLines[lineIndex],\n\t          wordsWidth = this._getWidthOfWords(ctx, line, lineIndex),\n\t          widthDiff = this.width - wordsWidth,\n\t          numSpaces = line.length - line.replace(this._reSpacesAndTabs, '').length,\n\t          width = widthDiff / numSpaces;\n\t      this.__widthOfSpace[lineIndex] = width;\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     * @param {Number} line\n\t     * @param {Number} lineIndex\n\t     */\n\t    _getWidthOfWords: function (ctx, line, lineIndex) {\n\t      var width = 0;\n\t\n\t      for (var charIndex = 0; charIndex < line.length; charIndex++) {\n\t        var _char = line[charIndex];\n\t\n\t        if (!_char.match(/\\s/)) {\n\t          width += this._getWidthOfChar(ctx, _char, lineIndex, charIndex);\n\t        }\n\t      }\n\t\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getHeightOfLine: function(ctx, lineIndex) {\n\t      if (this.__lineHeights[lineIndex]) {\n\t        return this.__lineHeights[lineIndex];\n\t      }\n\t\n\t      var line = this._textLines[lineIndex],\n\t          maxHeight = this._getHeightOfChar(ctx, line[0], lineIndex, 0);\n\t\n\t      for (var i = 1, len = line.length; i < len; i++) {\n\t        var currentCharHeight = this._getHeightOfChar(ctx, line[i], lineIndex, i);\n\t        if (currentCharHeight > maxHeight) {\n\t          maxHeight = currentCharHeight;\n\t        }\n\t      }\n\t      this.__maxFontHeights[lineIndex] = maxHeight;\n\t      this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n\t      return this.__lineHeights[lineIndex];\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     * @param {CanvasRenderingContext2D} ctx Context to render on\n\t     */\n\t    _getTextHeight: function(ctx) {\n\t      var height = 0;\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        height += this._getHeightOfLine(ctx, i);\n\t      }\n\t      return height;\n\t    },\n\t\n\t    /**\n\t     * This method is overwritten to account for different top offset\n\t     * @private\n\t     */\n\t    _renderTextBoxBackground: function(ctx) {\n\t      if (!this.backgroundColor) {\n\t        return;\n\t      }\n\t\n\t      ctx.save();\n\t      ctx.fillStyle = this.backgroundColor;\n\t\n\t      ctx.fillRect(\n\t        this._getLeftOffset(),\n\t        this._getTopOffset(),\n\t        this.width,\n\t        this.height\n\t      );\n\t\n\t      ctx.restore();\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @method toObject\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {\n\t        styles: clone(this.styles)\n\t      });\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Returns fabric.IText instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.IText\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.IText} instance of fabric.IText\n\t   */\n\t  fabric.IText.fromObject = function(object) {\n\t    return new fabric.IText(object.text, clone(object));\n\t  };\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  var clone = fabric.util.object.clone;\n\t\n\t  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\t\n\t    /**\n\t     * Initializes all the interactive behavior of IText\n\t     */\n\t    initBehavior: function() {\n\t      this.initAddedHandler();\n\t      this.initRemovedHandler();\n\t      this.initCursorSelectionHandlers();\n\t      this.initDoubleClickSimulation();\n\t    },\n\t\n\t    /**\n\t     * Initializes \"selected\" event handler\n\t     */\n\t    initSelectedHandler: function() {\n\t      this.on('selected', function() {\n\t\n\t        var _this = this;\n\t        setTimeout(function() {\n\t          _this.selected = true;\n\t        }, 100);\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Initializes \"added\" event handler\n\t     */\n\t    initAddedHandler: function() {\n\t      var _this = this;\n\t      this.on('added', function() {\n\t        if (this.canvas && !this.canvas._hasITextHandlers) {\n\t          this.canvas._hasITextHandlers = true;\n\t          this._initCanvasHandlers();\n\t        }\n\t\n\t        // Track IText instances per-canvas. Only register in this array once added\n\t        // to a canvas; we don't want to leak a reference to the instance forever\n\t        // simply because it existed at some point.\n\t        // (Might be added to a collection, but not on a canvas.)\n\t        if (_this.canvas) {\n\t          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];\n\t          _this.canvas._iTextInstances.push(_this);\n\t        }\n\t      });\n\t    },\n\t\n\t    initRemovedHandler: function() {\n\t      var _this = this;\n\t      this.on('removed', function() {\n\t        // (Might be removed from a collection, but not on a canvas.)\n\t        if (_this.canvas) {\n\t          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];\n\t          fabric.util.removeFromArray(_this.canvas._iTextInstances, _this);\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _initCanvasHandlers: function() {\n\t      var _this = this;\n\t\n\t      this.canvas.on('selection:cleared', function() {\n\t        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);\n\t      });\n\t\n\t      this.canvas.on('mouse:up', function() {\n\t        if (_this.canvas._iTextInstances) {\n\t          _this.canvas._iTextInstances.forEach(function(obj) {\n\t            obj.__isMousedown = false;\n\t          });\n\t        }\n\t      });\n\t\n\t      this.canvas.on('object:selected', function() {\n\t        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _tick: function() {\n\t      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\n\t\n\t      var tickState;\n\t\n\t      tickState = {\n\t        isAborted: false,\n\t        abort: function() {\n\t          this.isAborted = true;\n\t        },\n\t      };\n\t\n\t      obj.animate('_currentCursorOpacity', targetOpacity, {\n\t        duration: duration,\n\t        onComplete: function() {\n\t          if (!tickState.isAborted) {\n\t            obj[completeMethod]();\n\t          }\n\t        },\n\t        onChange: function() {\n\t          if (obj.canvas) {\n\t            obj.canvas.clearContext(obj.canvas.contextTop || obj.ctx);\n\t            obj.renderCursorOrSelection();\n\t          }\n\t        },\n\t        abort: function() {\n\t          return tickState.isAborted;\n\t        }\n\t      });\n\t      return tickState;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _onTickComplete: function() {\n\t\n\t      var _this = this;\n\t\n\t      if (this._cursorTimeout1) {\n\t        clearTimeout(this._cursorTimeout1);\n\t      }\n\t      this._cursorTimeout1 = setTimeout(function() {\n\t        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\n\t      }, 100);\n\t    },\n\t\n\t    /**\n\t     * Initializes delayed cursor\n\t     */\n\t    initDelayedCursor: function(restart) {\n\t      var _this = this,\n\t          delay = restart ? 0 : this.cursorDelay;\n\t\n\t      this._currentTickState && this._currentTickState.abort();\n\t      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\t      clearTimeout(this._cursorTimeout1);\n\t      this._currentCursorOpacity = 1;\n\t      if (this.canvas) {\n\t        this.canvas.clearContext(this.canvas.contextTop || this.ctx);\n\t        this.renderCursorOrSelection();\n\t      }\n\t      if (this._cursorTimeout2) {\n\t        clearTimeout(this._cursorTimeout2);\n\t      }\n\t      this._cursorTimeout2 = setTimeout(function() {\n\t        _this._tick();\n\t      }, delay);\n\t    },\n\t\n\t    /**\n\t     * Aborts cursor animation and clears all timeouts\n\t     */\n\t    abortCursorAnimation: function() {\n\t      this._currentTickState && this._currentTickState.abort();\n\t      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\t\n\t      clearTimeout(this._cursorTimeout1);\n\t      clearTimeout(this._cursorTimeout2);\n\t\n\t      this._currentCursorOpacity = 0;\n\t      this.canvas && this.canvas.clearContext(this.canvas.contextTop || this.ctx);\n\t    },\n\t\n\t    /**\n\t     * Selects entire text\n\t     */\n\t    selectAll: function() {\n\t      this.setSelectionStart(0);\n\t      this.setSelectionEnd(this.text.length);\n\t    },\n\t\n\t    /**\n\t     * Returns selected text\n\t     * @return {String}\n\t     */\n\t    getSelectedText: function() {\n\t      return this.text.slice(this.selectionStart, this.selectionEnd);\n\t    },\n\t\n\t    /**\n\t     * Find new selection index representing start of current word according to current selection index\n\t     * @param {Number} startFrom Surrent selection index\n\t     * @return {Number} New selection index\n\t     */\n\t    findWordBoundaryLeft: function(startFrom) {\n\t      var offset = 0, index = startFrom - 1;\n\t\n\t      // remove space before cursor first\n\t      if (this._reSpace.test(this.text.charAt(index))) {\n\t        while (this._reSpace.test(this.text.charAt(index))) {\n\t          offset++;\n\t          index--;\n\t        }\n\t      }\n\t      while (/\\S/.test(this.text.charAt(index)) && index > -1) {\n\t        offset++;\n\t        index--;\n\t      }\n\t\n\t      return startFrom - offset;\n\t    },\n\t\n\t    /**\n\t     * Find new selection index representing end of current word according to current selection index\n\t     * @param {Number} startFrom Current selection index\n\t     * @return {Number} New selection index\n\t     */\n\t    findWordBoundaryRight: function(startFrom) {\n\t      var offset = 0, index = startFrom;\n\t\n\t      // remove space after cursor first\n\t      if (this._reSpace.test(this.text.charAt(index))) {\n\t        while (this._reSpace.test(this.text.charAt(index))) {\n\t          offset++;\n\t          index++;\n\t        }\n\t      }\n\t      while (/\\S/.test(this.text.charAt(index)) && index < this.text.length) {\n\t        offset++;\n\t        index++;\n\t      }\n\t\n\t      return startFrom + offset;\n\t    },\n\t\n\t    /**\n\t     * Find new selection index representing start of current line according to current selection index\n\t     * @param {Number} startFrom Current selection index\n\t     * @return {Number} New selection index\n\t     */\n\t    findLineBoundaryLeft: function(startFrom) {\n\t      var offset = 0, index = startFrom - 1;\n\t\n\t      while (!/\\n/.test(this.text.charAt(index)) && index > -1) {\n\t        offset++;\n\t        index--;\n\t      }\n\t\n\t      return startFrom - offset;\n\t    },\n\t\n\t    /**\n\t     * Find new selection index representing end of current line according to current selection index\n\t     * @param {Number} startFrom Current selection index\n\t     * @return {Number} New selection index\n\t     */\n\t    findLineBoundaryRight: function(startFrom) {\n\t      var offset = 0, index = startFrom;\n\t\n\t      while (!/\\n/.test(this.text.charAt(index)) && index < this.text.length) {\n\t        offset++;\n\t        index++;\n\t      }\n\t\n\t      return startFrom + offset;\n\t    },\n\t\n\t    /**\n\t     * Returns number of newlines in selected text\n\t     * @return {Number} Number of newlines in selected text\n\t     */\n\t    getNumNewLinesInSelectedText: function() {\n\t      var selectedText = this.getSelectedText(),\n\t          numNewLines  = 0;\n\t\n\t      for (var i = 0, len = selectedText.length; i < len; i++) {\n\t        if (selectedText[i] === '\\n') {\n\t          numNewLines++;\n\t        }\n\t      }\n\t      return numNewLines;\n\t    },\n\t\n\t    /**\n\t     * Finds index corresponding to beginning or end of a word\n\t     * @param {Number} selectionStart Index of a character\n\t     * @param {Number} direction: 1 or -1\n\t     * @return {Number} Index of the beginning or end of a word\n\t     */\n\t    searchWordBoundary: function(selectionStart, direction) {\n\t      var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,\n\t          _char     = this.text.charAt(index),\n\t          reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\t\n\t      while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {\n\t        index += direction;\n\t        _char = this.text.charAt(index);\n\t      }\n\t      if (reNonWord.test(_char) && _char !== '\\n') {\n\t        index += direction === 1 ? 0 : 1;\n\t      }\n\t      return index;\n\t    },\n\t\n\t    /**\n\t     * Selects a word based on the index\n\t     * @param {Number} selectionStart Index of a character\n\t     */\n\t    selectWord: function(selectionStart) {\n\t      var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\n\t          newSelectionEnd   = this.searchWordBoundary(selectionStart, 1);\n\t      /* search forward */\n\t\n\t      this.setSelectionStart(newSelectionStart);\n\t      this.setSelectionEnd(newSelectionEnd);\n\t    },\n\t\n\t    /**\n\t     * Selects a line based on the index\n\t     * @param {Number} selectionStart Index of a character\n\t     */\n\t    selectLine: function(selectionStart) {\n\t      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n\t          newSelectionEnd   = this.findLineBoundaryRight(selectionStart);\n\t\n\t      this.setSelectionStart(newSelectionStart);\n\t      this.setSelectionEnd(newSelectionEnd);\n\t    },\n\t\n\t    /**\n\t     * Enters editing state\n\t     * @return {fabric.IText} thisArg\n\t     * @chainable\n\t     */\n\t    enterEditing: function() {\n\t      if (this.isEditing || !this.editable) {\n\t        return;\n\t      }\n\t\n\t      if (this.canvas) {\n\t        this.exitEditingOnOthers(this.canvas);\n\t      }\n\t\n\t      this.isEditing = true;\n\t\n\t      this.initHiddenTextarea();\n\t      this.hiddenTextarea.focus();\n\t      this._updateTextarea();\n\t      this._saveEditingProps();\n\t      this._setEditingProps();\n\t\n\t      this._tick();\n\t      this.fire('editing:entered');\n\t\n\t      if (!this.canvas) {\n\t        return this;\n\t      }\n\t\n\t      this.canvas.renderAll();\n\t      this.canvas.fire('text:editing:entered', { target: this });\n\t      this.initMouseMoveHandler();\n\t      return this;\n\t    },\n\t\n\t    exitEditingOnOthers: function(canvas) {\n\t      if (canvas._iTextInstances) {\n\t        canvas._iTextInstances.forEach(function(obj) {\n\t          obj.selected = false;\n\t          if (obj.isEditing) {\n\t            obj.exitEditing();\n\t          }\n\t        });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Initializes \"mousemove\" event handler\n\t     */\n\t    initMouseMoveHandler: function() {\n\t      var _this = this;\n\t      this.canvas.on('mouse:move', function(options) {\n\t        if (!_this.__isMousedown || !_this.isEditing) {\n\t          return;\n\t        }\n\t\n\t        var newSelectionStart = _this.getSelectionStartFromPointer(options.e);\n\t        if (newSelectionStart >= _this.__selectionStartOnMouseDown) {\n\t          _this.setSelectionStart(_this.__selectionStartOnMouseDown);\n\t          _this.setSelectionEnd(newSelectionStart);\n\t        }\n\t        else {\n\t          _this.setSelectionStart(newSelectionStart);\n\t          _this.setSelectionEnd(_this.__selectionStartOnMouseDown);\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setEditingProps: function() {\n\t      this.hoverCursor = 'text';\n\t\n\t      if (this.canvas) {\n\t        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n\t      }\n\t\n\t      this.borderColor = this.editingBorderColor;\n\t\n\t      this.hasControls = this.selectable = false;\n\t      this.lockMovementX = this.lockMovementY = true;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _updateTextarea: function() {\n\t      if (!this.hiddenTextarea) {\n\t        return;\n\t      }\n\t\n\t      this.hiddenTextarea.value = this.text;\n\t      this.hiddenTextarea.selectionStart = this.selectionStart;\n\t      this.hiddenTextarea.selectionEnd = this.selectionEnd;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _saveEditingProps: function() {\n\t      this._savedProps = {\n\t        hasControls: this.hasControls,\n\t        borderColor: this.borderColor,\n\t        lockMovementX: this.lockMovementX,\n\t        lockMovementY: this.lockMovementY,\n\t        hoverCursor: this.hoverCursor,\n\t        defaultCursor: this.canvas && this.canvas.defaultCursor,\n\t        moveCursor: this.canvas && this.canvas.moveCursor\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _restoreEditingProps: function() {\n\t      if (!this._savedProps) {\n\t        return;\n\t      }\n\t\n\t      this.hoverCursor = this._savedProps.overCursor;\n\t      this.hasControls = this._savedProps.hasControls;\n\t      this.borderColor = this._savedProps.borderColor;\n\t      this.lockMovementX = this._savedProps.lockMovementX;\n\t      this.lockMovementY = this._savedProps.lockMovementY;\n\t\n\t      if (this.canvas) {\n\t        this.canvas.defaultCursor = this._savedProps.defaultCursor;\n\t        this.canvas.moveCursor = this._savedProps.moveCursor;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Exits from editing state\n\t     * @return {fabric.IText} thisArg\n\t     * @chainable\n\t     */\n\t    exitEditing: function() {\n\t\n\t      this.selected = false;\n\t      this.isEditing = false;\n\t      this.selectable = true;\n\t\n\t      this.selectionEnd = this.selectionStart;\n\t      this.hiddenTextarea && this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\n\t      this.hiddenTextarea = null;\n\t\n\t      this.abortCursorAnimation();\n\t      this._restoreEditingProps();\n\t      this._currentCursorOpacity = 0;\n\t\n\t      this.fire('editing:exited');\n\t      this.canvas && this.canvas.fire('text:editing:exited', { target: this });\n\t\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _removeExtraneousStyles: function() {\n\t      for (var prop in this.styles) {\n\t        if (!this._textLines[prop]) {\n\t          delete this.styles[prop];\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _removeCharsFromTo: function(start, end) {\n\t      while (end !== start) {\n\t        this._removeSingleCharAndStyle(start + 1);\n\t        end--;\n\t      }\n\t      this.setSelectionStart(start);\n\t    },\n\t\n\t    _removeSingleCharAndStyle: function(index) {\n\t      var isBeginningOfLine = this.text[index - 1] === '\\n',\n\t          indexStyle        = isBeginningOfLine ? index : index - 1;\n\t      this.removeStyleObject(isBeginningOfLine, indexStyle);\n\t      this.text = this.text.slice(0, index - 1) +\n\t        this.text.slice(index);\n\t\n\t      this._textLines = this._splitTextIntoLines();\n\t    },\n\t\n\t    /**\n\t     * Inserts characters where cursor is (replacing selection if one exists)\n\t     * @param {String} _chars Characters to insert\n\t     * @param {Boolean} useCopiedStyle use fabric.copiedTextStyle\n\t     */\n\t    insertChars: function(_chars, useCopiedStyle) {\n\t      var style;\n\t\n\t      if (this.selectionEnd - this.selectionStart > 1) {\n\t        this._removeCharsFromTo(this.selectionStart, this.selectionEnd);\n\t        this.setSelectionEnd(this.selectionStart);\n\t      }\n\t\n\t      for (var i = 0, len = _chars.length; i < len; i++) {\n\t        if (useCopiedStyle) {\n\t          style = fabric.copiedTextStyle[i];\n\t        }\n\t        this.insertChar(_chars[i], i < len - 1, style);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Inserts a character where cursor is\n\t     * @param {String} _char Characters to insert\n\t     * @param {Boolean} skipUpdate trigger rendering and updates at the end of text insert\n\t     * @param {Object} styleObject Style to be inserted for the new char\n\t     */\n\t    insertChar: function(_char, skipUpdate, styleObject) {\n\t      var isEndOfLine = this.text[this.selectionStart] === '\\n';\n\t      this.text = this.text.slice(0, this.selectionStart) +\n\t        _char + this.text.slice(this.selectionEnd);\n\t      this._textLines = this._splitTextIntoLines();\n\t      this.insertStyleObjects(_char, isEndOfLine, styleObject);\n\t      this.setSelectionStart(this.selectionStart + 1);\n\t      this.setSelectionEnd(this.selectionStart);\n\t      if (skipUpdate) {\n\t        return;\n\t      }\n\t      this.canvas && this.canvas.renderAll();\n\t      this.setCoords();\n\t      this.fire('changed');\n\t      this.canvas && this.canvas.fire('text:changed', { target: this });\n\t    },\n\t\n\t    /**\n\t     * Inserts new style object\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} charIndex Index of a char\n\t     * @param {Boolean} isEndOfLine True if it's end of line\n\t     */\n\t    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {\n\t\n\t      this.shiftLineStyles(lineIndex, +1);\n\t\n\t      if (!this.styles[lineIndex + 1]) {\n\t        this.styles[lineIndex + 1] = {};\n\t      }\n\t\n\t      var currentCharStyle = {},\n\t          newLineStyles    = {};\n\t\n\t      if (this.styles[lineIndex] && this.styles[lineIndex][charIndex - 1]) {\n\t        currentCharStyle = this.styles[lineIndex][charIndex - 1];\n\t      }\n\t\n\t      // if there's nothing after cursor,\n\t      // we clone current char style onto the next (otherwise empty) line\n\t      if (isEndOfLine) {\n\t        newLineStyles[0] = clone(currentCharStyle);\n\t        this.styles[lineIndex + 1] = newLineStyles;\n\t      }\n\t      // otherwise we clone styles of all chars\n\t      // after cursor onto the next line, from the beginning\n\t      else {\n\t        for (var index in this.styles[lineIndex]) {\n\t          if (parseInt(index, 10) >= charIndex) {\n\t            newLineStyles[parseInt(index, 10) - charIndex] = this.styles[lineIndex][index];\n\t            // remove lines from the previous line since they're on a new line now\n\t            delete this.styles[lineIndex][index];\n\t          }\n\t        }\n\t        this.styles[lineIndex + 1] = newLineStyles;\n\t      }\n\t      this._forceClearCache = true;\n\t    },\n\t\n\t    /**\n\t     * Inserts style object for a given line/char index\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} charIndex Index of a char\n\t     * @param {Object} [style] Style object to insert, if given\n\t     */\n\t    insertCharStyleObject: function(lineIndex, charIndex, style) {\n\t\n\t      var currentLineStyles       = this.styles[lineIndex],\n\t          currentLineStylesCloned = clone(currentLineStyles);\n\t\n\t      if (charIndex === 0 && !style) {\n\t        charIndex = 1;\n\t      }\n\t\n\t      // shift all char styles by 1 forward\n\t      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n\t      for (var index in currentLineStylesCloned) {\n\t        var numericIndex = parseInt(index, 10);\n\t\n\t        if (numericIndex >= charIndex) {\n\t          currentLineStyles[numericIndex + 1] = currentLineStylesCloned[numericIndex];\n\t\n\t          // only delete the style if there was nothing moved there\n\t          if (!currentLineStylesCloned[numericIndex - 1]) {\n\t            delete currentLineStyles[numericIndex];\n\t          }\n\t        }\n\t      }\n\t\n\t      this.styles[lineIndex][charIndex] =\n\t        style || clone(currentLineStyles[charIndex - 1]);\n\t      this._forceClearCache = true;\n\t    },\n\t\n\t    /**\n\t     * Inserts style object(s)\n\t     * @param {String} _chars Characters at the location where style is inserted\n\t     * @param {Boolean} isEndOfLine True if it's end of line\n\t     * @param {Object} [styleObject] Style to insert\n\t     */\n\t    insertStyleObjects: function(_chars, isEndOfLine, styleObject) {\n\t      // removed shortcircuit over isEmptyStyles\n\t\n\t      var cursorLocation = this.get2DCursorLocation(),\n\t          lineIndex      = cursorLocation.lineIndex,\n\t          charIndex      = cursorLocation.charIndex;\n\t\n\t      if (!this._getLineStyle(lineIndex)) {\n\t        this._setLineStyle(lineIndex, {});\n\t      }\n\t\n\t      if (_chars === '\\n') {\n\t        this.insertNewlineStyleObject(lineIndex, charIndex, isEndOfLine);\n\t      }\n\t      else {\n\t        this.insertCharStyleObject(lineIndex, charIndex, styleObject);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Shifts line styles up or down\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} offset Can be -1 or +1\n\t     */\n\t    shiftLineStyles: function(lineIndex, offset) {\n\t      // shift all line styles by 1 upward\n\t      var clonedStyles = clone(this.styles);\n\t      for (var line in this.styles) {\n\t        var numericLine = parseInt(line, 10);\n\t        if (numericLine > lineIndex) {\n\t          this.styles[numericLine + offset] = clonedStyles[numericLine];\n\t          if (!clonedStyles[numericLine - offset]) {\n\t            delete this.styles[numericLine];\n\t          }\n\t        }\n\t      }\n\t      //TODO: evaluate if delete old style lines with offset -1\n\t    },\n\t\n\t    /**\n\t     * Removes style object\n\t     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line\n\t     * @param {Number} [index] Optional index. When not given, current selectionStart is used.\n\t     */\n\t    removeStyleObject: function(isBeginningOfLine, index) {\n\t\n\t      var cursorLocation = this.get2DCursorLocation(index),\n\t          lineIndex      = cursorLocation.lineIndex,\n\t          charIndex      = cursorLocation.charIndex;\n\t\n\t      if (isBeginningOfLine) {\n\t\n\t        var textOnPreviousLine     = this._textLines[lineIndex - 1],\n\t            newCharIndexOnPrevLine = textOnPreviousLine\n\t              ? textOnPreviousLine.length\n\t              : 0;\n\t\n\t        if (!this.styles[lineIndex - 1]) {\n\t          this.styles[lineIndex - 1] = {};\n\t        }\n\t\n\t        for (charIndex in this.styles[lineIndex]) {\n\t          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]\n\t            = this.styles[lineIndex][charIndex];\n\t        }\n\t\n\t        this.shiftLineStyles(lineIndex, -1);\n\t\n\t      }\n\t      else {\n\t        var currentLineStyles = this.styles[lineIndex];\n\t\n\t        if (currentLineStyles) {\n\t          delete currentLineStyles[charIndex];\n\t          //console.log('deleting', lineIndex, charIndex + offset);\n\t        }\n\t\n\t        var currentLineStylesCloned = clone(currentLineStyles);\n\t\n\t        // shift all styles by 1 backwards\n\t        for (var i in currentLineStylesCloned) {\n\t          var numericIndex = parseInt(i, 10);\n\t          if (numericIndex >= charIndex && numericIndex !== 0) {\n\t            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];\n\t            delete currentLineStyles[numericIndex];\n\t          }\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Inserts new line\n\t     */\n\t    insertNewline: function() {\n\t      this.insertChars('\\n');\n\t    }\n\t  });\n\t})();\n\t\n\t\n\tfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\t  /**\n\t   * Initializes \"dbclick\" event handler\n\t   */\n\t  initDoubleClickSimulation: function() {\n\t\n\t    // for double click\n\t    this.__lastClickTime = +new Date();\n\t\n\t    // for triple click\n\t    this.__lastLastClickTime = +new Date();\n\t\n\t    this.__lastPointer = { };\n\t\n\t    this.on('mousedown', this.onMouseDown.bind(this));\n\t  },\n\t\n\t  onMouseDown: function(options) {\n\t\n\t    this.__newClickTime = +new Date();\n\t    var newPointer = this.canvas.getPointer(options.e);\n\t\n\t    if (this.isTripleClick(newPointer)) {\n\t      this.fire('tripleclick', options);\n\t      this._stopEvent(options.e);\n\t    }\n\t    else if (this.isDoubleClick(newPointer)) {\n\t      this.fire('dblclick', options);\n\t      this._stopEvent(options.e);\n\t    }\n\t\n\t    this.__lastLastClickTime = this.__lastClickTime;\n\t    this.__lastClickTime = this.__newClickTime;\n\t    this.__lastPointer = newPointer;\n\t    this.__lastIsEditing = this.isEditing;\n\t    this.__lastSelected = this.selected;\n\t  },\n\t\n\t  isDoubleClick: function(newPointer) {\n\t    return this.__newClickTime - this.__lastClickTime < 500 &&\n\t        this.__lastPointer.x === newPointer.x &&\n\t        this.__lastPointer.y === newPointer.y && this.__lastIsEditing;\n\t  },\n\t\n\t  isTripleClick: function(newPointer) {\n\t    return this.__newClickTime - this.__lastClickTime < 500 &&\n\t        this.__lastClickTime - this.__lastLastClickTime < 500 &&\n\t        this.__lastPointer.x === newPointer.x &&\n\t        this.__lastPointer.y === newPointer.y;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _stopEvent: function(e) {\n\t    e.preventDefault && e.preventDefault();\n\t    e.stopPropagation && e.stopPropagation();\n\t  },\n\t\n\t  /**\n\t   * Initializes event handlers related to cursor or selection\n\t   */\n\t  initCursorSelectionHandlers: function() {\n\t    this.initSelectedHandler();\n\t    this.initMousedownHandler();\n\t    this.initMouseupHandler();\n\t    this.initClicks();\n\t  },\n\t\n\t  /**\n\t   * Initializes double and triple click event handlers\n\t   */\n\t  initClicks: function() {\n\t    this.on('dblclick', function(options) {\n\t      this.selectWord(this.getSelectionStartFromPointer(options.e));\n\t    });\n\t    this.on('tripleclick', function(options) {\n\t      this.selectLine(this.getSelectionStartFromPointer(options.e));\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Initializes \"mousedown\" event handler\n\t   */\n\t  initMousedownHandler: function() {\n\t    this.on('mousedown', function(options) {\n\t\n\t      var pointer = this.canvas.getPointer(options.e);\n\t\n\t      this.__mousedownX = pointer.x;\n\t      this.__mousedownY = pointer.y;\n\t      this.__isMousedown = true;\n\t\n\t      if (this.hiddenTextarea && this.canvas) {\n\t        this.canvas.wrapperEl.appendChild(this.hiddenTextarea);\n\t      }\n\t\n\t      if (this.selected) {\n\t        this.setCursorByClick(options.e);\n\t      }\n\t\n\t      if (this.isEditing) {\n\t        this.__selectionStartOnMouseDown = this.selectionStart;\n\t        this.initDelayedCursor(true);\n\t      }\n\t    });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _isObjectMoved: function(e) {\n\t    var pointer = this.canvas.getPointer(e);\n\t\n\t    return this.__mousedownX !== pointer.x ||\n\t           this.__mousedownY !== pointer.y;\n\t  },\n\t\n\t  /**\n\t   * Initializes \"mouseup\" event handler\n\t   */\n\t  initMouseupHandler: function() {\n\t    this.on('mouseup', function(options) {\n\t      this.__isMousedown = false;\n\t      if (this._isObjectMoved(options.e)) {\n\t        return;\n\t      }\n\t\n\t      if (this.__lastSelected) {\n\t        this.enterEditing();\n\t        this.initDelayedCursor(true);\n\t      }\n\t      this.selected = true;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Changes cursor location in a text depending on passed pointer (x/y) object\n\t   * @param {Event} e Event object\n\t   */\n\t  setCursorByClick: function(e) {\n\t    var newSelectionStart = this.getSelectionStartFromPointer(e);\n\t\n\t    if (e.shiftKey) {\n\t      if (newSelectionStart < this.selectionStart) {\n\t        this.setSelectionEnd(this.selectionStart);\n\t        this.setSelectionStart(newSelectionStart);\n\t      }\n\t      else {\n\t        this.setSelectionEnd(newSelectionStart);\n\t      }\n\t    }\n\t    else {\n\t      this.setSelectionStart(newSelectionStart);\n\t      this.setSelectionEnd(newSelectionStart);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns index of a character corresponding to where an object was clicked\n\t   * @param {Event} e Event object\n\t   * @return {Number} Index of a character\n\t   */\n\t  getSelectionStartFromPointer: function(e) {\n\t    var mouseOffset = this.getLocalPointer(e),\n\t        prevWidth = 0,\n\t        width = 0,\n\t        height = 0,\n\t        charIndex = 0,\n\t        newSelectionStart,\n\t        line;\n\t\n\t    for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t      line = this._textLines[i];\n\t      height += this._getHeightOfLine(this.ctx, i) * this.scaleY;\n\t\n\t      var widthOfLine = this._getLineWidth(this.ctx, i),\n\t          lineLeftOffset = this._getLineLeftOffset(widthOfLine);\n\t\n\t      width = lineLeftOffset * this.scaleX;\n\t\n\t      if (this.flipX) {\n\t        // when oject is horizontally flipped we reverse chars\n\t        // we should reverse also style or do not revers at all.\n\t        this._textLines[i] = line.reverse().join('');\n\t      }\n\t\n\t      for (var j = 0, jlen = line.length; j < jlen; j++) {\n\t\n\t        prevWidth = width;\n\t\n\t        width += this._getWidthOfChar(this.ctx, line[j], i, this.flipX ? jlen - j : j) *\n\t                 this.scaleX;\n\t\n\t        if (height <= mouseOffset.y || width <= mouseOffset.x) {\n\t          charIndex++;\n\t          continue;\n\t        }\n\t\n\t        return this._getNewSelectionStartFromOffset(\n\t          mouseOffset, prevWidth, width, charIndex + i, jlen);\n\t      }\n\t\n\t      if (mouseOffset.y < height) {\n\t        //this happens just on end of lines.\n\t        return this._getNewSelectionStartFromOffset(\n\t          mouseOffset, prevWidth, width, charIndex + i - 1, jlen);\n\t      }\n\t    }\n\t\n\t    // clicked somewhere after all chars, so set at the end\n\t    if (typeof newSelectionStart === 'undefined') {\n\t      return this.text.length;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\n\t\n\t    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\n\t        distanceBtwNextCharAndCursor = width - mouseOffset.x,\n\t        offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ? 0 : 1,\n\t        newSelectionStart = index + offset;\n\t\n\t    // if object is horizontally flipped, mirror cursor location from the end\n\t    if (this.flipX) {\n\t      newSelectionStart = jlen - newSelectionStart;\n\t    }\n\t\n\t    if (newSelectionStart > this.text.length) {\n\t      newSelectionStart = this.text.length;\n\t    }\n\t\n\t    return newSelectionStart;\n\t  }\n\t});\n\t\n\t\n\tfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\t\n\t  /**\n\t   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n\t   */\n\t  initHiddenTextarea: function() {\n\t    this.hiddenTextarea = fabric.document.createElement('textarea');\n\t\n\t    this.hiddenTextarea.setAttribute('autocapitalize', 'off');\n\t    this.hiddenTextarea.style.cssText = 'position: fixed; bottom: 20px; left: 0px; opacity: 0;'\n\t                                        + ' width: 0px; height: 0px; z-index: -999;';\n\t    fabric.document.body.appendChild(this.hiddenTextarea);\n\t\n\t    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\n\t    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\n\t    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\n\t    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\n\t\n\t    if (!this._clickHandlerInitialized && this.canvas) {\n\t      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\n\t      this._clickHandlerInitialized = true;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _keysMap: {\n\t    8:  'removeChars',\n\t    9:  'exitEditing',\n\t    27: 'exitEditing',\n\t    13: 'insertNewline',\n\t    33: 'moveCursorUp',\n\t    34: 'moveCursorDown',\n\t    35: 'moveCursorRight',\n\t    36: 'moveCursorLeft',\n\t    37: 'moveCursorLeft',\n\t    38: 'moveCursorUp',\n\t    39: 'moveCursorRight',\n\t    40: 'moveCursorDown',\n\t    46: 'forwardDelete'\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _ctrlKeysMap: {\n\t    65: 'selectAll',\n\t    88: 'cut'\n\t  },\n\t\n\t  onClick: function() {\n\t    // No need to trigger click event here, focus is enough to have the keyboard appear on Android\n\t    this.hiddenTextarea && this.hiddenTextarea.focus();\n\t  },\n\t\n\t  /**\n\t   * Handles keyup event\n\t   * @param {Event} e Event object\n\t   */\n\t  onKeyDown: function(e) {\n\t    if (!this.isEditing) {\n\t      return;\n\t    }\n\t    if (e.keyCode in this._keysMap) {\n\t      this[this._keysMap[e.keyCode]](e);\n\t    }\n\t    else if ((e.keyCode in this._ctrlKeysMap) && (e.ctrlKey || e.metaKey)) {\n\t      this[this._ctrlKeysMap[e.keyCode]](e);\n\t    }\n\t    else {\n\t      return;\n\t    }\n\t    e.stopImmediatePropagation();\n\t    e.preventDefault();\n\t    this.canvas && this.canvas.renderAll();\n\t  },\n\t\n\t  /**\n\t   * Handles onInput event\n\t   * @param {Event} e Event object\n\t   */\n\t  onInput: function(e) {\n\t    if (!this.isEditing || this._cancelOnInput) {\n\t      this._cancelOnInput = false;\n\t      return;\n\t    }\n\t    var offset = this.selectionStart || 0,\n\t        textLength = this.text.length,\n\t        newTextLength = this.hiddenTextarea.value.length,\n\t        diff = newTextLength - textLength,\n\t        charsToInsert = this.hiddenTextarea.value.slice(offset, offset + diff);\n\t    this.insertChars(charsToInsert);\n\t    e.stopPropagation();\n\t  },\n\t\n\t  /**\n\t   * Forward delete\n\t   */\n\t  forwardDelete: function(e) {\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      if (this.selectionStart === this.text.length) {\n\t        return;\n\t      }\n\t      this.moveCursorRight(e);\n\t    }\n\t    this.removeChars(e);\n\t  },\n\t\n\t  /**\n\t   * Copies selected text\n\t   * @param {Event} e Event object\n\t   */\n\t  copy: function(e) {\n\t    var selectedText = this.getSelectedText(),\n\t        clipboardData = this._getClipboardData(e);\n\t\n\t    // Check for backward compatibility with old browsers\n\t    if (clipboardData) {\n\t      clipboardData.setData('text', selectedText);\n\t    }\n\t\n\t    fabric.copiedText = selectedText;\n\t    fabric.copiedTextStyle = this.getSelectionStyles(\n\t                          this.selectionStart,\n\t                          this.selectionEnd);\n\t  },\n\t\n\t  /**\n\t   * Pastes text\n\t   * @param {Event} e Event object\n\t   */\n\t  paste: function(e) {\n\t    var copiedText = null,\n\t        clipboardData = this._getClipboardData(e),\n\t        useCopiedStyle = true;\n\t\n\t    // Check for backward compatibility with old browsers\n\t    if (clipboardData) {\n\t      copiedText = clipboardData.getData('text').replace(/\\r/g, '');\n\t      if (!fabric.copiedTextStyle || fabric.copiedText !== copiedText) {\n\t        useCopiedStyle = false;\n\t      }\n\t    }\n\t    else {\n\t      copiedText = fabric.copiedText;\n\t    }\n\t\n\t    if (copiedText) {\n\t      this.insertChars(copiedText, useCopiedStyle);\n\t    }\n\t    this._cancelOnInput = true;\n\t  },\n\t\n\t  /**\n\t   * Cuts text\n\t   * @param {Event} e Event object\n\t   */\n\t  cut: function(e) {\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      return;\n\t    }\n\t\n\t    this.copy();\n\t    this.removeChars(e);\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Event} e Event object\n\t   * @return {Object} Clipboard data object\n\t   */\n\t  _getClipboardData: function(e) {\n\t    return e && (e.clipboardData || fabric.window.clipboardData);\n\t  },\n\t\n\t  /**\n\t   * Gets start offset of a selection\n\t   * @param {Event} e Event object\n\t   * @param {Boolean} isRight\n\t   * @return {Number}\n\t   */\n\t  getDownCursorOffset: function(e, isRight) {\n\t    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,\n\t        cursorLocation = this.get2DCursorLocation(selectionProp),\n\t        _char, lineLeftOffset, lineIndex = cursorLocation.lineIndex,\n\t        textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),\n\t        textOnSameLineAfterCursor = this._textLines[lineIndex].slice(cursorLocation.charIndex),\n\t        textOnNextLine = this._textLines[lineIndex + 1] || '';\n\t\n\t    // if on last line, down cursor goes to end of line\n\t    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\n\t\n\t      // move to the end of a text\n\t      return this.text.length - selectionProp;\n\t    }\n\t\n\t    var widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, lineIndex);\n\t    lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor);\n\t\n\t    var widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;\n\t\n\t    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {\n\t      _char = textOnSameLineBeforeCursor[i];\n\t      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);\n\t    }\n\t\n\t    var indexOnNextLine = this._getIndexOnNextLine(\n\t      cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor);\n\t\n\t    return textOnSameLineAfterCursor.length + 1 + indexOnNextLine;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _getIndexOnNextLine: function(cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor) {\n\t    var lineIndex = cursorLocation.lineIndex + 1,\n\t        widthOfNextLine = this._getLineWidth(this.ctx, lineIndex),\n\t        lineLeftOffset = this._getLineLeftOffset(widthOfNextLine),\n\t        widthOfCharsOnNextLine = lineLeftOffset,\n\t        indexOnNextLine = 0,\n\t        foundMatch;\n\t\n\t    for (var j = 0, jlen = textOnNextLine.length; j < jlen; j++) {\n\t\n\t      var _char = textOnNextLine[j],\n\t          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);\n\t\n\t      widthOfCharsOnNextLine += widthOfChar;\n\t\n\t      if (widthOfCharsOnNextLine > widthOfCharsOnSameLineBeforeCursor) {\n\t\n\t        foundMatch = true;\n\t\n\t        var leftEdge = widthOfCharsOnNextLine - widthOfChar,\n\t            rightEdge = widthOfCharsOnNextLine,\n\t            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),\n\t            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);\n\t\n\t        indexOnNextLine = offsetFromRightEdge < offsetFromLeftEdge ? j + 1 : j;\n\t\n\t        break;\n\t      }\n\t    }\n\t\n\t    // reached end\n\t    if (!foundMatch) {\n\t      indexOnNextLine = textOnNextLine.length;\n\t    }\n\t\n\t    return indexOnNextLine;\n\t  },\n\t\n\t  /**\n\t   * Moves cursor down\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorDown: function(e) {\n\t    this.abortCursorAnimation();\n\t    this._currentCursorOpacity = 1;\n\t\n\t    var offset = this.getDownCursorOffset(e, this._selectionDirection === 'right');\n\t\n\t    if (e.shiftKey) {\n\t      this.moveCursorDownWithShift(offset);\n\t    }\n\t    else {\n\t      this.moveCursorDownWithoutShift(offset);\n\t    }\n\t\n\t    this.initDelayedCursor();\n\t  },\n\t\n\t  /**\n\t   * Moves cursor down without keeping selection\n\t   * @param {Number} offset\n\t   */\n\t  moveCursorDownWithoutShift: function(offset) {\n\t    this._selectionDirection = 'right';\n\t    this.setSelectionStart(this.selectionStart + offset);\n\t    this.setSelectionEnd(this.selectionStart);\n\t  },\n\t\n\t  /**\n\t   * private\n\t   */\n\t  swapSelectionPoints: function() {\n\t    var swapSel = this.selectionEnd;\n\t    this.setSelectionEnd(this.selectionStart);\n\t    this.setSelectionStart(swapSel);\n\t  },\n\t\n\t  /**\n\t   * Moves cursor down while keeping selection\n\t   * @param {Number} offset\n\t   */\n\t  moveCursorDownWithShift: function(offset) {\n\t    if (this.selectionEnd === this.selectionStart) {\n\t      this._selectionDirection = 'right';\n\t    }\n\t    if (this._selectionDirection === 'right') {\n\t      this.setSelectionEnd(this.selectionEnd + offset);\n\t    }\n\t    else {\n\t      this.setSelectionStart(this.selectionStart + offset);\n\t    }\n\t    if (this.selectionEnd < this.selectionStart  && this._selectionDirection === 'left') {\n\t      this.swapSelectionPoints();\n\t      this._selectionDirection = 'right';\n\t    }\n\t    if (this.selectionEnd > this.text.length) {\n\t      this.setSelectionEnd(this.text.length);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @param {Event} e Event object\n\t   * @param {Boolean} isRight\n\t   * @return {Number}\n\t   */\n\t  getUpCursorOffset: function(e, isRight) {\n\t    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,\n\t        cursorLocation = this.get2DCursorLocation(selectionProp),\n\t        lineIndex = cursorLocation.lineIndex;\n\t    // if on first line, up cursor goes to start of line\n\t    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n\t      return selectionProp;\n\t    }\n\t\n\t    var textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),\n\t        textOnPreviousLine = this._textLines[lineIndex - 1] || '',\n\t        _char,\n\t        widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, cursorLocation.lineIndex),\n\t        lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor),\n\t        widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;\n\t\n\t    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {\n\t      _char = textOnSameLineBeforeCursor[i];\n\t      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);\n\t    }\n\t\n\t    var indexOnPrevLine = this._getIndexOnPrevLine(\n\t      cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor);\n\t\n\t    return textOnPreviousLine.length - indexOnPrevLine + textOnSameLineBeforeCursor.length;\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _getIndexOnPrevLine: function(cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor) {\n\t\n\t    var lineIndex = cursorLocation.lineIndex - 1,\n\t        widthOfPreviousLine = this._getLineWidth(this.ctx, lineIndex),\n\t        lineLeftOffset = this._getLineLeftOffset(widthOfPreviousLine),\n\t        widthOfCharsOnPreviousLine = lineLeftOffset,\n\t        indexOnPrevLine = 0,\n\t        foundMatch;\n\t\n\t    for (var j = 0, jlen = textOnPreviousLine.length; j < jlen; j++) {\n\t\n\t      var _char = textOnPreviousLine[j],\n\t          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);\n\t\n\t      widthOfCharsOnPreviousLine += widthOfChar;\n\t\n\t      if (widthOfCharsOnPreviousLine > widthOfCharsOnSameLineBeforeCursor) {\n\t\n\t        foundMatch = true;\n\t\n\t        var leftEdge = widthOfCharsOnPreviousLine - widthOfChar,\n\t            rightEdge = widthOfCharsOnPreviousLine,\n\t            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),\n\t            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);\n\t\n\t        indexOnPrevLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\n\t\n\t        break;\n\t      }\n\t    }\n\t\n\t    // reached end\n\t    if (!foundMatch) {\n\t      indexOnPrevLine = textOnPreviousLine.length - 1;\n\t    }\n\t\n\t    return indexOnPrevLine;\n\t  },\n\t\n\t  /**\n\t   * Moves cursor up\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorUp: function(e) {\n\t\n\t    this.abortCursorAnimation();\n\t    this._currentCursorOpacity = 1;\n\t\n\t    var offset = this.getUpCursorOffset(e, this._selectionDirection === 'right');\n\t    if (e.shiftKey) {\n\t      this.moveCursorUpWithShift(offset);\n\t    }\n\t    else {\n\t      this.moveCursorUpWithoutShift(offset);\n\t    }\n\t\n\t    this.initDelayedCursor();\n\t  },\n\t\n\t  /**\n\t   * Moves cursor up with shift\n\t   * @param {Number} offset\n\t   */\n\t  moveCursorUpWithShift: function(offset) {\n\t    if (this.selectionEnd === this.selectionStart) {\n\t      this._selectionDirection = 'left';\n\t    }\n\t    if (this._selectionDirection === 'right') {\n\t      this.setSelectionEnd(this.selectionEnd - offset);\n\t    }\n\t    else {\n\t      this.setSelectionStart(this.selectionStart - offset);\n\t    }\n\t    if (this.selectionEnd < this.selectionStart && this._selectionDirection === 'right') {\n\t      this.swapSelectionPoints();\n\t      this._selectionDirection = 'left';\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Moves cursor up without shift\n\t   * @param {Number} offset\n\t   */\n\t  moveCursorUpWithoutShift: function(offset) {\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      this.setSelectionStart(this.selectionStart - offset);\n\t    }\n\t    this.setSelectionEnd(this.selectionStart);\n\t\n\t    this._selectionDirection = 'left';\n\t  },\n\t\n\t  /**\n\t   * Moves cursor left\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorLeft: function(e) {\n\t    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n\t      return;\n\t    }\n\t\n\t    this.abortCursorAnimation();\n\t    this._currentCursorOpacity = 1;\n\t\n\t    if (e.shiftKey) {\n\t      this.moveCursorLeftWithShift(e);\n\t    }\n\t    else {\n\t      this.moveCursorLeftWithoutShift(e);\n\t    }\n\t\n\t    this.initDelayedCursor();\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _move: function(e, prop, direction) {\n\t    var propMethod = (prop === 'selectionStart' ? 'setSelectionStart' : 'setSelectionEnd');\n\t    if (e.altKey) {\n\t      this[propMethod](this['findWordBoundary' + direction](this[prop]));\n\t    }\n\t    else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\n\t      this[propMethod](this['findLineBoundary' + direction](this[prop]));\n\t    }\n\t    else {\n\t      this[propMethod](this[prop] + (direction === 'Left' ? -1 : 1));\n\t    }\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _moveLeft: function(e, prop) {\n\t    this._move(e, prop, 'Left');\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   */\n\t  _moveRight: function(e, prop) {\n\t    this._move(e, prop, 'Right');\n\t  },\n\t\n\t  /**\n\t   * Moves cursor left without keeping selection\n\t   * @param {Event} e\n\t   */\n\t  moveCursorLeftWithoutShift: function(e) {\n\t    this._selectionDirection = 'left';\n\t\n\t    // only move cursor when there is no selection,\n\t    // otherwise we discard it, and leave cursor on same place\n\t    if (this.selectionEnd === this.selectionStart) {\n\t      this._moveLeft(e, 'selectionStart');\n\t    }\n\t    this.setSelectionEnd(this.selectionStart);\n\t  },\n\t\n\t  /**\n\t   * Moves cursor left while keeping selection\n\t   * @param {Event} e\n\t   */\n\t  moveCursorLeftWithShift: function(e) {\n\t    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\n\t      this._moveLeft(e, 'selectionEnd');\n\t    }\n\t    else {\n\t      this._selectionDirection = 'left';\n\t      this._moveLeft(e, 'selectionStart');\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Moves cursor right\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorRight: function(e) {\n\t    if (this.selectionStart >= this.text.length && this.selectionEnd >= this.text.length) {\n\t      return;\n\t    }\n\t\n\t    this.abortCursorAnimation();\n\t    this._currentCursorOpacity = 1;\n\t\n\t    if (e.shiftKey) {\n\t      this.moveCursorRightWithShift(e);\n\t    }\n\t    else {\n\t      this.moveCursorRightWithoutShift(e);\n\t    }\n\t\n\t    this.initDelayedCursor();\n\t  },\n\t\n\t  /**\n\t   * Moves cursor right while keeping selection\n\t   * @param {Event} e\n\t   */\n\t  moveCursorRightWithShift: function(e) {\n\t    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\n\t      this._moveRight(e, 'selectionStart');\n\t    }\n\t    else {\n\t      this._selectionDirection = 'right';\n\t      this._moveRight(e, 'selectionEnd');\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Moves cursor right without keeping selection\n\t   * @param {Event} e Event object\n\t   */\n\t  moveCursorRightWithoutShift: function(e) {\n\t    this._selectionDirection = 'right';\n\t\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      this._moveRight(e, 'selectionStart');\n\t      this.setSelectionEnd(this.selectionStart);\n\t    }\n\t    else {\n\t      this.setSelectionEnd(this.selectionEnd + this.getNumNewLinesInSelectedText());\n\t      this.setSelectionStart(this.selectionEnd);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Removes characters selected by selection\n\t   * @param {Event} e Event object\n\t   */\n\t  removeChars: function(e) {\n\t    if (this.selectionStart === this.selectionEnd) {\n\t      this._removeCharsNearCursor(e);\n\t    }\n\t    else {\n\t      this._removeCharsFromTo(this.selectionStart, this.selectionEnd);\n\t    }\n\t\n\t    this.setSelectionEnd(this.selectionStart);\n\t\n\t    this._removeExtraneousStyles();\n\t\n\t    this.canvas && this.canvas.renderAll();\n\t\n\t    this.setCoords();\n\t    this.fire('changed');\n\t    this.canvas && this.canvas.fire('text:changed', { target: this });\n\t  },\n\t\n\t  /**\n\t   * @private\n\t   * @param {Event} e Event object\n\t   */\n\t  _removeCharsNearCursor: function(e) {\n\t    if (this.selectionStart === 0) {\n\t      return;\n\t    }\n\t    if (e.metaKey) {\n\t      // remove all till the start of current line\n\t      var leftLineBoundary = this.findLineBoundaryLeft(this.selectionStart);\n\t\n\t      this._removeCharsFromTo(leftLineBoundary, this.selectionStart);\n\t      this.setSelectionStart(leftLineBoundary);\n\t    }\n\t    else if (e.altKey) {\n\t      // remove all till the start of current word\n\t      var leftWordBoundary = this.findWordBoundaryLeft(this.selectionStart);\n\t\n\t      this._removeCharsFromTo(leftWordBoundary, this.selectionStart);\n\t      this.setSelectionStart(leftWordBoundary);\n\t    }\n\t    else {\n\t      this._removeSingleCharAndStyle(this.selectionStart);\n\t      this.setSelectionStart(this.selectionStart - 1);\n\t    }\n\t  }\n\t});\n\t\n\t\n\t/* _TO_SVG_START_ */\n\t(function() {\n\t  var toFixed = fabric.util.toFixed,\n\t      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\t\n\t  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGTextLineText: function(lineIndex, textSpans, height, textLeftOffset, textTopOffset, textBgRects) {\n\t      if (!this.styles[lineIndex]) {\n\t        fabric.Text.prototype._setSVGTextLineText.call(this,\n\t          lineIndex, textSpans, height, textLeftOffset, textTopOffset);\n\t      }\n\t      else {\n\t        this._setSVGTextLineChars(\n\t          lineIndex, textSpans, height, textLeftOffset, textBgRects);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _setSVGTextLineChars: function(lineIndex, textSpans, height, textLeftOffset, textBgRects) {\n\t\n\t      var chars = this._textLines[lineIndex],\n\t          charOffset = 0,\n\t          lineLeftOffset = this._getSVGLineLeftOffset(lineIndex) - this.width / 2,\n\t          lineOffset = this._getSVGLineTopOffset(lineIndex),\n\t          heightOfLine = this._getHeightOfLine(this.ctx, lineIndex);\n\t\n\t      for (var i = 0, len = chars.length; i < len; i++) {\n\t        var styleDecl = this.styles[lineIndex][i] || { };\n\t\n\t        textSpans.push(\n\t          this._createTextCharSpan(\n\t            chars[i], styleDecl, lineLeftOffset, lineOffset.lineTop + lineOffset.offset, charOffset));\n\t\n\t        var charWidth = this._getWidthOfChar(this.ctx, chars[i], lineIndex, i);\n\t\n\t        if (styleDecl.textBackgroundColor) {\n\t          textBgRects.push(\n\t            this._createTextCharBg(\n\t              styleDecl, lineLeftOffset, lineOffset.lineTop, heightOfLine, charWidth, charOffset));\n\t        }\n\t\n\t        charOffset += charWidth;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getSVGLineLeftOffset: function(lineIndex) {\n\t      return fabric.util.toFixed(this._getLineLeftOffset(this.__lineWidths[lineIndex]), 2);\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _getSVGLineTopOffset: function(lineIndex) {\n\t      var lineTopOffset = 0, lastHeight = 0;\n\t      for (var j = 0; j < lineIndex; j++) {\n\t        lineTopOffset += this._getHeightOfLine(this.ctx, j);\n\t      }\n\t      lastHeight = this._getHeightOfLine(this.ctx, j);\n\t      return {\n\t        lineTop: lineTopOffset,\n\t        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\n\t      };\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createTextCharBg: function(styleDecl, lineLeftOffset, lineTopOffset, heightOfLine, charWidth, charOffset) {\n\t      return [\n\t        //jscs:disable validateIndentation\n\t        '<rect fill=\"', styleDecl.textBackgroundColor,\n\t        '\" x=\"', toFixed(lineLeftOffset + charOffset, NUM_FRACTION_DIGITS),\n\t        '\" y=\"', toFixed(lineTopOffset - this.height/2, NUM_FRACTION_DIGITS),\n\t        '\" width=\"', toFixed(charWidth, NUM_FRACTION_DIGITS),\n\t        '\" height=\"', toFixed(heightOfLine / this.lineHeight, NUM_FRACTION_DIGITS),\n\t        '\"></rect>'\n\t        //jscs:enable validateIndentation\n\t      ].join('');\n\t    },\n\t\n\t    /**\n\t     * @private\n\t     */\n\t    _createTextCharSpan: function(_char, styleDecl, lineLeftOffset, lineTopOffset, charOffset) {\n\t\n\t      var fillStyles = this.getSvgStyles.call(fabric.util.object.extend({\n\t        visible: true,\n\t        fill: this.fill,\n\t        stroke: this.stroke,\n\t        type: 'text'\n\t      }, styleDecl));\n\t\n\t      return [\n\t        //jscs:disable validateIndentation\n\t        '<tspan x=\"', lineLeftOffset + charOffset, '\" y=\"',\n\t          lineTopOffset - this.height/2, '\" ',\n\t          (styleDecl.fontFamily ? 'font-family=\"' + styleDecl.fontFamily.replace(/\"/g, '\\'') + '\" ': ''),\n\t          (styleDecl.fontSize ? 'font-size=\"' + styleDecl.fontSize + '\" ': ''),\n\t          (styleDecl.fontStyle ? 'font-style=\"' + styleDecl.fontStyle + '\" ': ''),\n\t          (styleDecl.fontWeight ? 'font-weight=\"' + styleDecl.fontWeight + '\" ': ''),\n\t          (styleDecl.textDecoration ? 'text-decoration=\"' + styleDecl.textDecoration + '\" ': ''),\n\t          'style=\"', fillStyles, '\">',\n\t          fabric.util.string.escapeXml(_char),\n\t        '</tspan>'\n\t        //jscs:enable validateIndentation\n\t      ].join('');\n\t    }\n\t  });\n\t})();\n\t/* _TO_SVG_END_ */\n\t\n\t\n\t(function(global) {\n\t\n\t  'use strict';\n\t\n\t  var fabric = global.fabric || (global.fabric = {}),\n\t      clone  = fabric.util.object.clone;\n\t\n\t  /**\n\t   * Textbox class, based on IText, allows the user to resize the text rectangle\n\t   * and wraps lines automatically. Textboxes have their Y scaling locked, the\n\t   * user can only change width. Height is adjusted automatically based on the\n\t   * wrapping of lines.\n\t   * @class fabric.Textbox\n\t   * @extends fabric.IText\n\t   * @mixes fabric.Observable\n\t   * @return {fabric.Textbox} thisArg\n\t   * @see {@link fabric.Textbox#initialize} for constructor definition\n\t   */\n\t  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\n\t    /**\n\t     * Type of an object\n\t     * @type String\n\t     * @default\n\t     */\n\t    type: 'textbox',\n\t    /**\n\t     * Minimum width of textbox, in pixels.\n\t     * @type Number\n\t     * @default\n\t     */\n\t    minWidth: 20,\n\t    /**\n\t     * Minimum calculated width of a textbox, in pixels.\n\t     * @type Number\n\t     * @default\n\t     */\n\t    dynamicMinWidth: 0,\n\t    /**\n\t     * Cached array of text wrapping.\n\t     * @type Array\n\t     */\n\t    __cachedLines: null,\n\t    /**\n\t     * Constructor. Some scaling related property values are forced. Visibility\n\t     * of controls is also fixed; only the rotation and width controls are\n\t     * made available.\n\t     * @param {String} text Text string\n\t     * @param {Object} [options] Options object\n\t     * @return {fabric.Textbox} thisArg\n\t     */\n\t    initialize: function(text, options) {\n\t      this.ctx = fabric.util.createCanvasElement().getContext('2d');\n\t\n\t      this.callSuper('initialize', text, options);\n\t      this.set({\n\t        lockUniScaling: false,\n\t        lockScalingY: true,\n\t        lockScalingFlip: true,\n\t        hasBorders: true\n\t      });\n\t      this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());\n\t\n\t      // add width to this list of props that effect line wrapping.\n\t      this._dimensionAffectingProps.width = true;\n\t    },\n\t\n\t    /**\n\t     * Unlike superclass's version of this function, Textbox does not update\n\t     * its width.\n\t     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n\t     * @private\n\t     * @override\n\t     */\n\t    _initDimensions: function(ctx) {\n\t      if (this.__skipDimension) {\n\t        return;\n\t      }\n\t\n\t      if (!ctx) {\n\t        ctx = fabric.util.createCanvasElement().getContext('2d');\n\t        this._setTextStyles(ctx);\n\t      }\n\t\n\t      // clear dynamicMinWidth as it will be different after we re-wrap line\n\t      this.dynamicMinWidth = 0;\n\t\n\t      // wrap lines\n\t      this._textLines = this._splitTextIntoLines();\n\t\n\t      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n\t      if (this.dynamicMinWidth > this.width) {\n\t        this._set('width', this.dynamicMinWidth);\n\t      }\n\t\n\t      // clear cache and re-calculate height\n\t      this._clearCache();\n\t      this.height = this._getTextHeight(ctx);\n\t      this._setLineWidths();\n\t    },\n\t\n\t    /**\n\t     * set the __lineWidths cache array to support\n\t     * functions that expect it to be filled\n\t     * @private\n\t     */\n\t    _setLineWidths: function() {\n\t      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\t        this.__lineWidths[i] = this.width;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Generate an object that translates the style object so that it is\n\t     * broken up by visual lines (new lines and automatic wrapping).\n\t     * The original text styles object is broken up by actual lines (new lines only),\n\t     * which is only sufficient for Text / IText\n\t     * @private\n\t     */\n\t    _generateStyleMap: function() {\n\t      var realLineCount     = 0,\n\t          realLineCharCount = 0,\n\t          charCount         = 0,\n\t          map               = {};\n\t\n\t      for (var i = 0; i < this._textLines.length; i++) {\n\t        if (this.text[charCount] === '\\n') {\n\t          realLineCharCount = 0;\n\t          charCount++;\n\t          realLineCount++;\n\t        }\n\t        else if (this.text[charCount] === ' ') {\n\t          // this case deals with space's that are removed from end of lines when wrapping\n\t          realLineCharCount++;\n\t          charCount++;\n\t        }\n\t\n\t        map[i] = { line: realLineCount, offset: realLineCharCount };\n\t\n\t        charCount += this._textLines[i].length;\n\t        realLineCharCount += this._textLines[i].length;\n\t      }\n\t\n\t      return map;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Boolean} [returnCloneOrEmpty=false]\n\t     * @private\n\t     */\n\t    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {\n\t      if (this._styleMap) {\n\t        var map = this._styleMap[lineIndex];\n\t        lineIndex = map.line;\n\t        charIndex = map.offset + charIndex;\n\t      }\n\t\n\t      if (returnCloneOrEmpty) {\n\t        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])\n\t          ? clone(this.styles[lineIndex][charIndex])\n\t          : {};\n\t      }\n\t\n\t      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @param {Object} style\n\t     * @private\n\t     */\n\t    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n\t      var map = this._styleMap[lineIndex];\n\t      lineIndex = map.line;\n\t      charIndex = map.offset + charIndex;\n\t\n\t      this.styles[lineIndex][charIndex] = style;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Number} charIndex\n\t     * @private\n\t     */\n\t    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n\t      var map = this._styleMap[lineIndex];\n\t      lineIndex = map.line;\n\t      charIndex = map.offset + charIndex;\n\t\n\t      delete this.styles[lineIndex][charIndex];\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @private\n\t     */\n\t    _getLineStyle: function(lineIndex) {\n\t      var map = this._styleMap[lineIndex];\n\t      return this.styles[map.line];\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @param {Object} style\n\t     * @private\n\t     */\n\t    _setLineStyle: function(lineIndex, style) {\n\t      var map = this._styleMap[lineIndex];\n\t      this.styles[map.line] = style;\n\t    },\n\t\n\t    /**\n\t     * @param {Number} lineIndex\n\t     * @private\n\t     */\n\t    _deleteLineStyle: function(lineIndex) {\n\t      var map = this._styleMap[lineIndex];\n\t      delete this.styles[map.line];\n\t    },\n\t\n\t    /**\n\t     * Wraps text using the 'width' property of Textbox. First this function\n\t     * splits text on newlines, so we preserve newlines entered by the user.\n\t     * Then it wraps each line using the width of the Textbox by calling\n\t     * _wrapLine().\n\t     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n\t     * @param {String} text The string of text that is split into lines\n\t     * @returns {Array} Array of lines\n\t     */\n\t    _wrapText: function(ctx, text) {\n\t      var lines = text.split(this._reNewline), wrapped = [], i;\n\t\n\t      for (i = 0; i < lines.length; i++) {\n\t        wrapped = wrapped.concat(this._wrapLine(ctx, lines[i], i));\n\t      }\n\t\n\t      return wrapped;\n\t    },\n\t\n\t    /**\n\t     * Helper function to measure a string of text, given its lineIndex and charIndex offset\n\t     *\n\t     * @param {CanvasRenderingContext2D} ctx\n\t     * @param {String} text\n\t     * @param {number} lineIndex\n\t     * @param {number} charOffset\n\t     * @returns {number}\n\t     * @private\n\t     */\n\t    _measureText: function(ctx, text, lineIndex, charOffset) {\n\t      var width = 0, decl;\n\t      charOffset = charOffset || 0;\n\t\n\t      for (var i = 0; i < text.length; i++) {\n\t        if (this.styles && this.styles[lineIndex] && (decl = this.styles[lineIndex][i + charOffset])) {\n\t          ctx.save();\n\t          width += this._applyCharStylesGetWidth(ctx, text[i], lineIndex, i, decl);\n\t          ctx.restore();\n\t        }\n\t        else {\n\t          // @note: we intentionally pass in an empty style declaration, because if we pass in nothing, it will\n\t          // retry fetching style declaration\n\t          width += this._applyCharStylesGetWidth(ctx, text[i], lineIndex, i, {});\n\t        }\n\t      }\n\t\n\t      return width;\n\t    },\n\t\n\t    /**\n\t     * Wraps a line of text using the width of the Textbox and a context.\n\t     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n\t     * @param {String} text The string of text to split into lines\n\t     * @param {Number} lineIndex\n\t     * @returns {Array} Array of line(s) into which the given text is wrapped\n\t     * to.\n\t     */\n\t    _wrapLine: function(ctx, text, lineIndex) {\n\t      var maxWidth  = this.width,\n\t          lineWidth = this._measureText(ctx, text, lineIndex, 0);\n\t\n\t      // first case: does the whole line fit?\n\t      if (lineWidth < maxWidth) {\n\t        // if the current line is only one word, we need to keep track of it if it's a large word\n\t        if (text.indexOf(' ') === -1 && lineWidth > this.dynamicMinWidth) {\n\t          this.dynamicMinWidth = lineWidth;\n\t        }\n\t\n\t        return [text];\n\t      }\n\t\n\t      // if the whole line doesn't fit, we break it up into words\n\t      var lines            = [],\n\t          line             = '',\n\t          words            = text.split(' '),\n\t          offset           = 0,\n\t          infix            = '',\n\t          wordWidth        = 0,\n\t          largestWordWidth = 0;\n\t\n\t      while (words.length > 0) {\n\t        infix = line === '' ? '' : ' ';\n\t        wordWidth = this._measureText(ctx, words[0], lineIndex, line.length + infix.length + offset);\n\t        lineWidth = line === '' ? wordWidth : this._measureText(ctx, line + infix + words[0], lineIndex, offset);\n\t\n\t        if (lineWidth < maxWidth || (line === '' && wordWidth >= maxWidth)) {\n\t          line += infix + words.shift();\n\t        }\n\t        else {\n\t          offset += line.length + 1; // add 1 because each word is separated by a space\n\t          lines.push(line);\n\t          line = '';\n\t        }\n\t\n\t        if (words.length === 0) {\n\t          lines.push(line);\n\t        }\n\t\n\t        // keep track of largest word\n\t        if (wordWidth > largestWordWidth) {\n\t          largestWordWidth = wordWidth;\n\t        }\n\t      }\n\t\n\t      if (largestWordWidth > this.dynamicMinWidth) {\n\t        this.dynamicMinWidth = largestWordWidth;\n\t      }\n\t\n\t      return lines;\n\t    },\n\t\n\t    /**\n\t     * Gets lines of text to render in the Textbox. This function calculates\n\t     * text wrapping on the fly everytime it is called.\n\t     * @returns {Array} Array of lines in the Textbox.\n\t     * @override\n\t     */\n\t    _splitTextIntoLines: function() {\n\t      this.ctx.save();\n\t      this._setTextStyles(this.ctx);\n\t\n\t      var lines = this._wrapText(this.ctx, this.text);\n\t\n\t      this.ctx.restore();\n\t      this._textLines = lines;\n\t      this._styleMap = this._generateStyleMap();\n\t      return lines;\n\t    },\n\t\n\t    /**\n\t     * When part of a group, we don't want the Textbox's scale to increase if\n\t     * the group's increases. That's why we reduce the scale of the Textbox by\n\t     * the amount that the group's increases. This is to maintain the effective\n\t     * scale of the Textbox at 1, so that font-size values make sense. Otherwise\n\t     * the same font-size value would result in different actual size depending\n\t     * on the value of the scale.\n\t     * @param {String} key\n\t     * @param {Any} value\n\t     */\n\t    setOnGroup: function(key, value) {\n\t      if (key === 'scaleX') {\n\t        this.set('scaleX', Math.abs(1 / value));\n\t        this.set('width', (this.get('width') * value) /\n\t          (typeof this.__oldScaleX === 'undefined' ? 1 : this.__oldScaleX));\n\t        this.__oldScaleX = value;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start).\n\t     * Overrides the superclass function to take into account text wrapping.\n\t     *\n\t     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n\t     */\n\t    get2DCursorLocation: function(selectionStart) {\n\t      if (typeof selectionStart === 'undefined') {\n\t        selectionStart = this.selectionStart;\n\t      }\n\t\n\t      var numLines = this._textLines.length,\n\t          removed  = 0;\n\t\n\t      for (var i = 0; i < numLines; i++) {\n\t        var line    = this._textLines[i],\n\t            lineLen = line.length;\n\t\n\t        if (selectionStart <= removed + lineLen) {\n\t          return {\n\t            lineIndex: i,\n\t            charIndex: selectionStart - removed\n\t          };\n\t        }\n\t\n\t        removed += lineLen;\n\t\n\t        if (this.text[removed] === '\\n' || this.text[removed] === ' ') {\n\t          removed++;\n\t        }\n\t      }\n\t\n\t      return {\n\t        lineIndex: numLines - 1,\n\t        charIndex: this._textLines[numLines - 1].length\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Overrides superclass function and uses text wrapping data to get cursor\n\t     * boundary offsets instead of the array of chars.\n\t     * @param {Array} chars Unused\n\t     * @param {String} typeOfBoundaries Can be 'cursor' or 'selection'\n\t     * @returns {Object} Object with 'top', 'left', and 'lineLeft' properties set.\n\t     */\n\t    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {\n\t      var topOffset      = 0,\n\t          leftOffset     = 0,\n\t          cursorLocation = this.get2DCursorLocation(),\n\t          lineChars      = this._textLines[cursorLocation.lineIndex].split(''),\n\t          lineLeftOffset = this._getCachedLineOffset(cursorLocation.lineIndex);\n\t\n\t      for (var i = 0; i < cursorLocation.charIndex; i++) {\n\t        leftOffset += this._getWidthOfChar(this.ctx, lineChars[i], cursorLocation.lineIndex, i);\n\t      }\n\t\n\t      for (i = 0; i < cursorLocation.lineIndex; i++) {\n\t        topOffset += this._getHeightOfLine(this.ctx, i);\n\t      }\n\t\n\t      if (typeOfBoundaries === 'cursor') {\n\t        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, cursorLocation.lineIndex)\n\t          / this.lineHeight - this.getCurrentCharFontSize(cursorLocation.lineIndex, cursorLocation.charIndex)\n\t          * (1 - this._fontSizeFraction);\n\t      }\n\t\n\t      return {\n\t        top: topOffset,\n\t        left: leftOffset,\n\t        lineLeft: lineLeftOffset\n\t      };\n\t    },\n\t\n\t    getMinWidth: function() {\n\t      return Math.max(this.minWidth, this.dynamicMinWidth);\n\t    },\n\t\n\t    /**\n\t     * Returns object representation of an instance\n\t     * @method toObject\n\t     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n\t     * @return {Object} object representation of an instance\n\t     */\n\t    toObject: function(propertiesToInclude) {\n\t      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {\n\t        minWidth: this.minWidth\n\t      });\n\t    }\n\t  });\n\t  /**\n\t   * Returns fabric.Textbox instance from an object representation\n\t   * @static\n\t   * @memberOf fabric.Textbox\n\t   * @param {Object} object Object to create an instance from\n\t   * @return {fabric.Textbox} instance of fabric.Textbox\n\t   */\n\t  fabric.Textbox.fromObject = function(object) {\n\t    return new fabric.Textbox(object.text, clone(object));\n\t  };\n\t  /**\n\t   * Returns the default controls visibility required for Textboxes.\n\t   * @returns {Object}\n\t   */\n\t  fabric.Textbox.getTextboxControlVisibility = function() {\n\t    return {\n\t      tl: false,\n\t      tr: false,\n\t      br: false,\n\t      bl: false,\n\t      ml: true,\n\t      mt: false,\n\t      mr: true,\n\t      mb: false,\n\t      mtr: true\n\t    };\n\t  };\n\t  /**\n\t   * Contains all fabric.Textbox objects that have been created\n\t   * @static\n\t   * @memberOf fabric.Textbox\n\t   * @type Array\n\t   */\n\t  fabric.Textbox.instances = [];\n\t})( true ? exports : this);\n\t\n\t\n\t(function() {\n\t\n\t  /**\n\t   * Override _setObjectScale and add Textbox specific resizing behavior. Resizing\n\t   * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.\n\t   */\n\t  var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;\n\t\n\t  fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,\n\t                                                     lockScalingX, lockScalingY, by, lockScalingFlip) {\n\t\n\t    var t = transform.target;\n\t    if (t instanceof fabric.Textbox) {\n\t      var w = t.width * ((localMouse.x / transform.scaleX) / (t.width + t.strokeWidth));\n\t      if (w >= t.getMinWidth()) {\n\t        t.set('width', w);\n\t      }\n\t    }\n\t    else {\n\t      setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,\n\t        lockScalingX, lockScalingY, by, lockScalingFlip);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Sets controls of this group to the Textbox's special configuration if\n\t   * one is present in the group. Deletes _controlsVisibility otherwise, so that\n\t   * it gets initialized to default value at runtime.\n\t   */\n\t  fabric.Group.prototype._refreshControlsVisibility = function() {\n\t    if (typeof fabric.Textbox === 'undefined') {\n\t      return;\n\t    }\n\t    for (var i = this._objects.length; i--;) {\n\t      if (this._objects[i] instanceof fabric.Textbox) {\n\t        this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());\n\t        return;\n\t      }\n\t    }\n\t  };\n\t\n\t  var clone = fabric.util.object.clone;\n\t\n\t  fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {\n\t    /**\n\t     * @private\n\t     */\n\t    _removeExtraneousStyles: function() {\n\t      for (var prop in this._styleMap) {\n\t        if (!this._textLines[prop]) {\n\t          delete this.styles[this._styleMap[prop].line];\n\t        }\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Inserts style object for a given line/char index\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} charIndex Index of a char\n\t     * @param {Object} [style] Style object to insert, if given\n\t     */\n\t    insertCharStyleObject: function(lineIndex, charIndex, style) {\n\t      // adjust lineIndex and charIndex\n\t      var map = this._styleMap[lineIndex];\n\t      lineIndex = map.line;\n\t      charIndex = map.offset + charIndex;\n\t\n\t      fabric.IText.prototype.insertCharStyleObject.apply(this, [lineIndex, charIndex, style]);\n\t    },\n\t\n\t    /**\n\t     * Inserts new style object\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} charIndex Index of a char\n\t     * @param {Boolean} isEndOfLine True if it's end of line\n\t     */\n\t    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {\n\t      // adjust lineIndex and charIndex\n\t      var map = this._styleMap[lineIndex];\n\t      lineIndex = map.line;\n\t      charIndex = map.offset + charIndex;\n\t\n\t      fabric.IText.prototype.insertNewlineStyleObject.apply(this, [lineIndex, charIndex, isEndOfLine]);\n\t    },\n\t\n\t    /**\n\t     * Shifts line styles up or down. This function is slightly different than the one in\n\t     * itext_behaviour as it takes into account the styleMap.\n\t     *\n\t     * @param {Number} lineIndex Index of a line\n\t     * @param {Number} offset Can be -1 or +1\n\t     */\n\t    shiftLineStyles: function(lineIndex, offset) {\n\t      // shift all line styles by 1 upward\n\t      var clonedStyles = clone(this.styles),\n\t          map          = this._styleMap[lineIndex];\n\t\n\t      // adjust line index\n\t      lineIndex = map.line;\n\t\n\t      for (var line in this.styles) {\n\t        var numericLine = parseInt(line, 10);\n\t\n\t        if (numericLine > lineIndex) {\n\t          this.styles[numericLine + offset] = clonedStyles[numericLine];\n\t\n\t          if (!clonedStyles[numericLine - offset]) {\n\t            delete this.styles[numericLine];\n\t          }\n\t        }\n\t      }\n\t      //TODO: evaluate if delete old style lines with offset -1\n\t    },\n\t\n\t    /**\n\t     * Figure out programatically the text on previous actual line (actual = separated by \\n);\n\t     *\n\t     * @param {Number} lIndex\n\t     * @returns {String}\n\t     * @private\n\t     */\n\t    _getTextOnPreviousLine: function(lIndex) {\n\t      var textOnPreviousLine = this._textLines[lIndex - 1];\n\t\n\t      while (this._styleMap[lIndex - 2] && this._styleMap[lIndex - 2].line === this._styleMap[lIndex - 1].line) {\n\t        textOnPreviousLine = this._textLines[lIndex - 2] + textOnPreviousLine;\n\t\n\t        lIndex--;\n\t      }\n\t\n\t      return textOnPreviousLine;\n\t    },\n\t\n\t    /**\n\t     * Removes style object\n\t     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line\n\t     * @param {Number} [index] Optional index. When not given, current selectionStart is used.\n\t     */\n\t    removeStyleObject: function(isBeginningOfLine, index) {\n\t\n\t      var cursorLocation = this.get2DCursorLocation(index),\n\t          map            = this._styleMap[cursorLocation.lineIndex],\n\t          lineIndex      = map.line,\n\t          charIndex      = map.offset + cursorLocation.charIndex;\n\t\n\t      if (isBeginningOfLine) {\n\t        var textOnPreviousLine     = this._getTextOnPreviousLine(cursorLocation.lineIndex),\n\t            newCharIndexOnPrevLine = textOnPreviousLine ? textOnPreviousLine.length : 0;\n\t\n\t        if (!this.styles[lineIndex - 1]) {\n\t          this.styles[lineIndex - 1] = {};\n\t        }\n\t\n\t        for (charIndex in this.styles[lineIndex]) {\n\t          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]\n\t            = this.styles[lineIndex][charIndex];\n\t        }\n\t\n\t        this.shiftLineStyles(cursorLocation.lineIndex, -1);\n\t\n\t      }\n\t      else {\n\t        var currentLineStyles = this.styles[lineIndex];\n\t\n\t        if (currentLineStyles) {\n\t          delete currentLineStyles[charIndex];\n\t          //console.log('deleting', lineIndex, charIndex + offset);\n\t        }\n\t\n\t        var currentLineStylesCloned = clone(currentLineStyles);\n\t\n\t        // shift all styles by 1 backwards\n\t        for (var i in currentLineStylesCloned) {\n\t          var numericIndex = parseInt(i, 10);\n\t          if (numericIndex >= charIndex && numericIndex !== 0) {\n\t            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];\n\t            delete currentLineStyles[numericIndex];\n\t          }\n\t        }\n\t      }\n\t    }\n\t  });\n\t})();\n\t\n\t\n\t(function() {\n\t  var override = fabric.IText.prototype._getNewSelectionStartFromOffset;\n\t  /**\n\t   * Overrides the IText implementation and adjusts character index as there is not always a linebreak\n\t   *\n\t   * @param {Number} mouseOffset\n\t   * @param {Number} prevWidth\n\t   * @param {Number} width\n\t   * @param {Number} index\n\t   * @param {Number} jlen\n\t   * @returns {Number}\n\t   */\n\t  fabric.IText.prototype._getNewSelectionStartFromOffset = function(mouseOffset, prevWidth, width, index, jlen) {\n\t    index = override.call(this, mouseOffset, prevWidth, width, index, jlen);\n\t\n\t    // the index passed into the function is padded by the amount of lines from _textLines (to account for \\n)\n\t    // we need to remove this padding, and pad it by actual lines, and / or spaces that are meant to be there\n\t    var tmp     = 0,\n\t        removed = 0;\n\t\n\t    // account for removed characters\n\t    for (var i = 0; i < this._textLines.length; i++) {\n\t      tmp += this._textLines[i].length;\n\t\n\t      if (tmp + removed >= index) {\n\t        break;\n\t      }\n\t\n\t      if (this.text[tmp + removed] === '\\n' || this.text[tmp + removed] === ' ') {\n\t        removed++;\n\t      }\n\t    }\n\t\n\t    return index - i + removed;\n\t  };\n\t})();\n\t\n\t\n\t(function() {\n\t\n\t  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\n\t    return;\n\t  }\n\t\n\t  var DOMParser = __webpack_require__(1112).DOMParser,\n\t      URL = __webpack_require__(968),\n\t      HTTP = __webpack_require__(965),\n\t      HTTPS = __webpack_require__(1096),\n\t\n\t      Canvas = __webpack_require__(920),\n\t      Image = __webpack_require__(920).Image;\n\t\n\t  /** @private */\n\t  function request(url, encoding, callback) {\n\t    var oURL = URL.parse(url);\n\t\n\t    // detect if http or https is used\n\t    if ( !oURL.port ) {\n\t      oURL.port = ( oURL.protocol.indexOf('https:') === 0 ) ? 443 : 80;\n\t    }\n\t\n\t    // assign request handler based on protocol\n\t    var reqHandler = (oURL.protocol.indexOf('https:') === 0 ) ? HTTPS : HTTP,\n\t        req = reqHandler.request({\n\t          hostname: oURL.hostname,\n\t          port: oURL.port,\n\t          path: oURL.path,\n\t          method: 'GET'\n\t        }, function(response) {\n\t          var body = '';\n\t          if (encoding) {\n\t            response.setEncoding(encoding);\n\t          }\n\t          response.on('end', function () {\n\t            callback(body);\n\t          });\n\t          response.on('data', function (chunk) {\n\t            if (response.statusCode === 200) {\n\t              body += chunk;\n\t            }\n\t          });\n\t        });\n\t\n\t    req.on('error', function(err) {\n\t      if (err.errno === process.ECONNREFUSED) {\n\t        fabric.log('ECONNREFUSED: connection refused to ' + oURL.hostname + ':' + oURL.port);\n\t      }\n\t      else {\n\t        fabric.log(err.message);\n\t      }\n\t      callback(null);\n\t    });\n\t\n\t    req.end();\n\t  }\n\t\n\t  /** @private */\n\t  function requestFs(path, callback) {\n\t    var fs = __webpack_require__(1110);\n\t    fs.readFile(path, function (err, data) {\n\t      if (err) {\n\t        fabric.log(err);\n\t        throw err;\n\t      }\n\t      else {\n\t        callback(data);\n\t      }\n\t    });\n\t  }\n\t\n\t  fabric.util.loadImage = function(url, callback, context) {\n\t    function createImageAndCallBack(data) {\n\t      if (data) {\n\t        img.src = new Buffer(data, 'binary');\n\t        // preserving original url, which seems to be lost in node-canvas\n\t        img._src = url;\n\t        callback && callback.call(context, img);\n\t      }\n\t      else {\n\t        img = null;\n\t        callback && callback.call(context, null, true);\n\t      }\n\t    }\n\t    var img = new Image();\n\t    if (url && (url instanceof Buffer || url.indexOf('data') === 0)) {\n\t      img.src = img._src = url;\n\t      callback && callback.call(context, img);\n\t    }\n\t    else if (url && url.indexOf('http') !== 0) {\n\t      requestFs(url, createImageAndCallBack);\n\t    }\n\t    else if (url) {\n\t      request(url, 'binary', createImageAndCallBack);\n\t    }\n\t    else {\n\t      callback && callback.call(context, url);\n\t    }\n\t  };\n\t\n\t  fabric.loadSVGFromURL = function(url, callback, reviver) {\n\t    url = url.replace(/^\\n\\s*/, '').replace(/\\?.*$/, '').trim();\n\t    if (url.indexOf('http') !== 0) {\n\t      requestFs(url, function(body) {\n\t        fabric.loadSVGFromString(body.toString(), callback, reviver);\n\t      });\n\t    }\n\t    else {\n\t      request(url, '', function(body) {\n\t        fabric.loadSVGFromString(body, callback, reviver);\n\t      });\n\t    }\n\t  };\n\t\n\t  fabric.loadSVGFromString = function(string, callback, reviver) {\n\t    var doc = new DOMParser().parseFromString(string);\n\t    fabric.parseSVGDocument(doc.documentElement, function(results, options) {\n\t      callback && callback(results, options);\n\t    }, reviver);\n\t  };\n\t\n\t  fabric.util.getScript = function(url, callback) {\n\t    request(url, '', function(body) {\n\t      eval(body);\n\t      callback && callback();\n\t    });\n\t  };\n\t\n\t  fabric.Image.fromObject = function(object, callback) {\n\t    fabric.util.loadImage(object.src, function(img) {\n\t      var oImg = new fabric.Image(img);\n\t\n\t      oImg._initConfig(object);\n\t      oImg._initFilters(object.filters, function(filters) {\n\t        oImg.filters = filters || [ ];\n\t        oImg._initFilters(object.resizeFilters, function(resizeFilters) {\n\t          oImg.resizeFilters = resizeFilters || [ ];\n\t          callback && callback(oImg);\n\t        });\n\t      });\n\t    });\n\t  };\n\t  /**\n\t   * Only available when running fabric on node.js\n\t   * @param {Number} width Canvas width\n\t   * @param {Number} height Canvas height\n\t   * @param {Object} [options] Options to pass to FabricCanvas.\n\t   * @param {Object} [nodeCanvasOptions] Options to pass to NodeCanvas.\n\t   * @return {Object} wrapped canvas instance\n\t   */\n\t  fabric.createCanvasForNode = function(width, height, options, nodeCanvasOptions) {\n\t    nodeCanvasOptions = nodeCanvasOptions || options;\n\t\n\t    var canvasEl = fabric.document.createElement('canvas'),\n\t        nodeCanvas = new Canvas(width || 600, height || 600, nodeCanvasOptions);\n\t\n\t    // jsdom doesn't create style on canvas element, so here be temp. workaround\n\t    canvasEl.style = { };\n\t\n\t    canvasEl.width = nodeCanvas.width;\n\t    canvasEl.height = nodeCanvas.height;\n\t\n\t    var FabricCanvas = fabric.Canvas || fabric.StaticCanvas,\n\t        fabricCanvas = new FabricCanvas(canvasEl, options);\n\t\n\t    fabricCanvas.contextContainer = nodeCanvas.getContext('2d');\n\t    fabricCanvas.nodeCanvas = nodeCanvas;\n\t    fabricCanvas.Font = Canvas.Font;\n\t\n\t    return fabricCanvas;\n\t  };\n\t\n\t  /** @ignore */\n\t  fabric.StaticCanvas.prototype.createPNGStream = function() {\n\t    return this.nodeCanvas.createPNGStream();\n\t  };\n\t\n\t  fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n\t    return this.nodeCanvas.createJPEGStream(opts);\n\t  };\n\t\n\t  var origSetWidth = fabric.StaticCanvas.prototype.setWidth;\n\t  fabric.StaticCanvas.prototype.setWidth = function(width, options) {\n\t    origSetWidth.call(this, width, options);\n\t    this.nodeCanvas.width = width;\n\t    return this;\n\t  };\n\t  if (fabric.Canvas) {\n\t    fabric.Canvas.prototype.setWidth = fabric.StaticCanvas.prototype.setWidth;\n\t  }\n\t\n\t  var origSetHeight = fabric.StaticCanvas.prototype.setHeight;\n\t  fabric.StaticCanvas.prototype.setHeight = function(height, options) {\n\t    origSetHeight.call(this, height, options);\n\t    this.nodeCanvas.height = height;\n\t    return this;\n\t  };\n\t  if (fabric.Canvas) {\n\t    fabric.Canvas.prototype.setHeight = fabric.StaticCanvas.prototype.setHeight;\n\t  }\n\t\n\t})();\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(182).Buffer, __webpack_require__(55)))\n\n/***/ },\n\n/***/ 1092:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Stream = __webpack_require__(74);\n\tvar Response = __webpack_require__(1093);\n\tvar Base64 = __webpack_require__(1094);\n\tvar inherits = __webpack_require__(1095);\n\t\n\tvar Request = module.exports = function (xhr, params) {\n\t    var self = this;\n\t    self.writable = true;\n\t    self.xhr = xhr;\n\t    self.body = [];\n\t    \n\t    self.uri = (params.protocol || 'http:') + '//'\n\t        + params.host\n\t        + (params.port ? ':' + params.port : '')\n\t        + (params.path || '/')\n\t    ;\n\t    \n\t    if (typeof params.withCredentials === 'undefined') {\n\t        params.withCredentials = true;\n\t    }\n\t\n\t    try { xhr.withCredentials = params.withCredentials }\n\t    catch (e) {}\n\t    \n\t    if (params.responseType) try { xhr.responseType = params.responseType }\n\t    catch (e) {}\n\t    \n\t    xhr.open(\n\t        params.method || 'GET',\n\t        self.uri,\n\t        true\n\t    );\n\t\n\t    xhr.onerror = function(event) {\n\t        self.emit('error', new Error('Network error'));\n\t    };\n\t\n\t    self._headers = {};\n\t    \n\t    if (params.headers) {\n\t        var keys = objectKeys(params.headers);\n\t        for (var i = 0; i < keys.length; i++) {\n\t            var key = keys[i];\n\t            if (!self.isSafeRequestHeader(key)) continue;\n\t            var value = params.headers[key];\n\t            self.setHeader(key, value);\n\t        }\n\t    }\n\t    \n\t    if (params.auth) {\n\t        //basic auth\n\t        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));\n\t    }\n\t\n\t    var res = new Response;\n\t    res.on('close', function () {\n\t        self.emit('close');\n\t    });\n\t    \n\t    res.on('ready', function () {\n\t        self.emit('response', res);\n\t    });\n\t\n\t    res.on('error', function (err) {\n\t        self.emit('error', err);\n\t    });\n\t    \n\t    xhr.onreadystatechange = function () {\n\t        // Fix for IE9 bug\n\t        // SCRIPT575: Could not complete the operation due to error c00c023f\n\t        // It happens when a request is aborted, calling the success callback anyway with readyState === 4\n\t        if (xhr.__aborted) return;\n\t        res.handle(xhr);\n\t    };\n\t};\n\t\n\tinherits(Request, Stream);\n\t\n\tRequest.prototype.setHeader = function (key, value) {\n\t    this._headers[key.toLowerCase()] = value\n\t};\n\t\n\tRequest.prototype.getHeader = function (key) {\n\t    return this._headers[key.toLowerCase()]\n\t};\n\t\n\tRequest.prototype.removeHeader = function (key) {\n\t    delete this._headers[key.toLowerCase()]\n\t};\n\t\n\tRequest.prototype.write = function (s) {\n\t    this.body.push(s);\n\t};\n\t\n\tRequest.prototype.destroy = function (s) {\n\t    this.xhr.__aborted = true;\n\t    this.xhr.abort();\n\t    this.emit('close');\n\t};\n\t\n\tRequest.prototype.end = function (s) {\n\t    if (s !== undefined) this.body.push(s);\n\t\n\t    var keys = objectKeys(this._headers);\n\t    for (var i = 0; i < keys.length; i++) {\n\t        var key = keys[i];\n\t        var value = this._headers[key];\n\t        if (isArray(value)) {\n\t            for (var j = 0; j < value.length; j++) {\n\t                this.xhr.setRequestHeader(key, value[j]);\n\t            }\n\t        }\n\t        else this.xhr.setRequestHeader(key, value)\n\t    }\n\t\n\t    if (this.body.length === 0) {\n\t        this.xhr.send('');\n\t    }\n\t    else if (typeof this.body[0] === 'string') {\n\t        this.xhr.send(this.body.join(''));\n\t    }\n\t    else if (isArray(this.body[0])) {\n\t        var body = [];\n\t        for (var i = 0; i < this.body.length; i++) {\n\t            body.push.apply(body, this.body[i]);\n\t        }\n\t        this.xhr.send(body);\n\t    }\n\t    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {\n\t        var len = 0;\n\t        for (var i = 0; i < this.body.length; i++) {\n\t            len += this.body[i].length;\n\t        }\n\t        var body = new(this.body[0].constructor)(len);\n\t        var k = 0;\n\t        \n\t        for (var i = 0; i < this.body.length; i++) {\n\t            var b = this.body[i];\n\t            for (var j = 0; j < b.length; j++) {\n\t                body[k++] = b[j];\n\t            }\n\t        }\n\t        this.xhr.send(body);\n\t    }\n\t    else if (isXHR2Compatible(this.body[0])) {\n\t        this.xhr.send(this.body[0]);\n\t    }\n\t    else {\n\t        var body = '';\n\t        for (var i = 0; i < this.body.length; i++) {\n\t            body += this.body[i].toString();\n\t        }\n\t        this.xhr.send(body);\n\t    }\n\t};\n\t\n\t// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html\n\tRequest.unsafeHeaders = [\n\t    \"accept-charset\",\n\t    \"accept-encoding\",\n\t    \"access-control-request-headers\",\n\t    \"access-control-request-method\",\n\t    \"connection\",\n\t    \"content-length\",\n\t    \"cookie\",\n\t    \"cookie2\",\n\t    \"content-transfer-encoding\",\n\t    \"date\",\n\t    \"expect\",\n\t    \"host\",\n\t    \"keep-alive\",\n\t    \"origin\",\n\t    \"referer\",\n\t    \"te\",\n\t    \"trailer\",\n\t    \"transfer-encoding\",\n\t    \"upgrade\",\n\t    \"user-agent\",\n\t    \"via\"\n\t];\n\t\n\tRequest.prototype.isSafeRequestHeader = function (headerName) {\n\t    if (!headerName) return false;\n\t    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;\n\t};\n\t\n\tvar objectKeys = Object.keys || function (obj) {\n\t    var keys = [];\n\t    for (var key in obj) keys.push(key);\n\t    return keys;\n\t};\n\t\n\tvar isArray = Array.isArray || function (xs) {\n\t    return Object.prototype.toString.call(xs) === '[object Array]';\n\t};\n\t\n\tvar indexOf = function (xs, x) {\n\t    if (xs.indexOf) return xs.indexOf(x);\n\t    for (var i = 0; i < xs.length; i++) {\n\t        if (xs[i] === x) return i;\n\t    }\n\t    return -1;\n\t};\n\t\n\tvar isXHR2Compatible = function (obj) {\n\t    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;\n\t    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;\n\t    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;\n\t};\n\n\n/***/ },\n\n/***/ 1093:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Stream = __webpack_require__(74);\n\tvar util = __webpack_require__(453);\n\t\n\tvar Response = module.exports = function (res) {\n\t    this.offset = 0;\n\t    this.readable = true;\n\t};\n\t\n\tutil.inherits(Response, Stream);\n\t\n\tvar capable = {\n\t    streaming : true,\n\t    status2 : true\n\t};\n\t\n\tfunction parseHeaders (res) {\n\t    var lines = res.getAllResponseHeaders().split(/\\r?\\n/);\n\t    var headers = {};\n\t    for (var i = 0; i < lines.length; i++) {\n\t        var line = lines[i];\n\t        if (line === '') continue;\n\t        \n\t        var m = line.match(/^([^:]+):\\s*(.*)/);\n\t        if (m) {\n\t            var key = m[1].toLowerCase(), value = m[2];\n\t            \n\t            if (headers[key] !== undefined) {\n\t            \n\t                if (isArray(headers[key])) {\n\t                    headers[key].push(value);\n\t                }\n\t                else {\n\t                    headers[key] = [ headers[key], value ];\n\t                }\n\t            }\n\t            else {\n\t                headers[key] = value;\n\t            }\n\t        }\n\t        else {\n\t            headers[line] = true;\n\t        }\n\t    }\n\t    return headers;\n\t}\n\t\n\tResponse.prototype.getResponse = function (xhr) {\n\t    var respType = String(xhr.responseType).toLowerCase();\n\t    if (respType === 'blob') return xhr.responseBlob || xhr.response;\n\t    if (respType === 'arraybuffer') return xhr.response;\n\t    return xhr.responseText;\n\t}\n\t\n\tResponse.prototype.getHeader = function (key) {\n\t    return this.headers[key.toLowerCase()];\n\t};\n\t\n\tResponse.prototype.handle = function (res) {\n\t    if (res.readyState === 2 && capable.status2) {\n\t        try {\n\t            this.statusCode = res.status;\n\t            this.headers = parseHeaders(res);\n\t        }\n\t        catch (err) {\n\t            capable.status2 = false;\n\t        }\n\t        \n\t        if (capable.status2) {\n\t            this.emit('ready');\n\t        }\n\t    }\n\t    else if (capable.streaming && res.readyState === 3) {\n\t        try {\n\t            if (!this.statusCode) {\n\t                this.statusCode = res.status;\n\t                this.headers = parseHeaders(res);\n\t                this.emit('ready');\n\t            }\n\t        }\n\t        catch (err) {}\n\t        \n\t        try {\n\t            this._emitData(res);\n\t        }\n\t        catch (err) {\n\t            capable.streaming = false;\n\t        }\n\t    }\n\t    else if (res.readyState === 4) {\n\t        if (!this.statusCode) {\n\t            this.statusCode = res.status;\n\t            this.emit('ready');\n\t        }\n\t        this._emitData(res);\n\t        \n\t        if (res.error) {\n\t            this.emit('error', this.getResponse(res));\n\t        }\n\t        else this.emit('end');\n\t        \n\t        this.emit('close');\n\t    }\n\t};\n\t\n\tResponse.prototype._emitData = function (res) {\n\t    var respBody = this.getResponse(res);\n\t    if (respBody.toString().match(/ArrayBuffer/)) {\n\t        this.emit('data', new Uint8Array(respBody, this.offset));\n\t        this.offset = respBody.byteLength;\n\t        return;\n\t    }\n\t    if (respBody.length > this.offset) {\n\t        this.emit('data', respBody.slice(this.offset));\n\t        this.offset = respBody.length;\n\t    }\n\t};\n\t\n\tvar isArray = Array.isArray || function (xs) {\n\t    return Object.prototype.toString.call(xs) === '[object Array]';\n\t};\n\n\n/***/ },\n\n/***/ 1094:\n/***/ function(module, exports, __webpack_require__) {\n\n\t;(function () {\n\t\n\t  var object =  true ? exports : this; // #8: web workers\n\t  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\t\n\t  function InvalidCharacterError(message) {\n\t    this.message = message;\n\t  }\n\t  InvalidCharacterError.prototype = new Error;\n\t  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\t\n\t  // encoder\n\t  // [https://gist.github.com/999166] by [https://github.com/nignag]\n\t  object.btoa || (\n\t  object.btoa = function (input) {\n\t    for (\n\t      // initialize result and counter\n\t      var block, charCode, idx = 0, map = chars, output = '';\n\t      // if the next input index does not exist:\n\t      //   change the mapping table to \"=\"\n\t      //   check if d has no fractional digits\n\t      input.charAt(idx | 0) || (map = '=', idx % 1);\n\t      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n\t      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n\t    ) {\n\t      charCode = input.charCodeAt(idx += 3/4);\n\t      if (charCode > 0xFF) {\n\t        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n\t      }\n\t      block = block << 8 | charCode;\n\t    }\n\t    return output;\n\t  });\n\t\n\t  // decoder\n\t  // [https://gist.github.com/1020396] by [https://github.com/atk]\n\t  object.atob || (\n\t  object.atob = function (input) {\n\t    input = input.replace(/=+$/, '');\n\t    if (input.length % 4 == 1) {\n\t      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n\t    }\n\t    for (\n\t      // initialize result and counters\n\t      var bc = 0, bs, buffer, idx = 0, output = '';\n\t      // get next character\n\t      buffer = input.charAt(idx++);\n\t      // character found in table? initialize bit storage and add its ascii value;\n\t      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n\t        // and if not first of each 4 characters,\n\t        // convert the first 8 bits to one ascii character\n\t        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n\t    ) {\n\t      // try to find character in table (0-63, not found => -1)\n\t      buffer = chars.indexOf(buffer);\n\t    }\n\t    return output;\n\t  });\n\t\n\t}());\n\n\n/***/ },\n\n/***/ 1095:\n452,\n\n/***/ 1096:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar http = __webpack_require__(965);\n\t\n\tvar https = module.exports;\n\t\n\tfor (var key in http) {\n\t    if (http.hasOwnProperty(key)) https[key] = http[key];\n\t};\n\t\n\thttps.request = function (params, cb) {\n\t    if (!params) params = {};\n\t    params.scheme = 'https';\n\t    return http.request.call(this, params, cb);\n\t}\n\n\n/***/ },\n\n/***/ 1104:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */\n\t;(function(root) {\n\t\n\t\t/** Detect free variables */\n\t\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t\t!exports.nodeType && exports;\n\t\tvar freeModule = typeof module == 'object' && module &&\n\t\t\t!module.nodeType && module;\n\t\tvar freeGlobal = typeof global == 'object' && global;\n\t\tif (\n\t\t\tfreeGlobal.global === freeGlobal ||\n\t\t\tfreeGlobal.window === freeGlobal ||\n\t\t\tfreeGlobal.self === freeGlobal\n\t\t) {\n\t\t\troot = freeGlobal;\n\t\t}\n\t\n\t\t/**\n\t\t * The `punycode` object.\n\t\t * @name punycode\n\t\t * @type Object\n\t\t */\n\t\tvar punycode,\n\t\n\t\t/** Highest positive signed 32-bit float value */\n\t\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\t\n\t\t/** Bootstring parameters */\n\t\tbase = 36,\n\t\ttMin = 1,\n\t\ttMax = 26,\n\t\tskew = 38,\n\t\tdamp = 700,\n\t\tinitialBias = 72,\n\t\tinitialN = 128, // 0x80\n\t\tdelimiter = '-', // '\\x2D'\n\t\n\t\t/** Regular expressions */\n\t\tregexPunycode = /^xn--/,\n\t\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\t\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\t\n\t\t/** Error messages */\n\t\terrors = {\n\t\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t\t'invalid-input': 'Invalid input'\n\t\t},\n\t\n\t\t/** Convenience shortcuts */\n\t\tbaseMinusTMin = base - tMin,\n\t\tfloor = Math.floor,\n\t\tstringFromCharCode = String.fromCharCode,\n\t\n\t\t/** Temporary variable */\n\t\tkey;\n\t\n\t\t/*--------------------------------------------------------------------------*/\n\t\n\t\t/**\n\t\t * A generic error utility function.\n\t\t * @private\n\t\t * @param {String} type The error type.\n\t\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t\t */\n\t\tfunction error(type) {\n\t\t\tthrow RangeError(errors[type]);\n\t\t}\n\t\n\t\t/**\n\t\t * A generic `Array#map` utility function.\n\t\t * @private\n\t\t * @param {Array} array The array to iterate over.\n\t\t * @param {Function} callback The function that gets called for every array\n\t\t * item.\n\t\t * @returns {Array} A new array of values returned by the callback function.\n\t\t */\n\t\tfunction map(array, fn) {\n\t\t\tvar length = array.length;\n\t\t\tvar result = [];\n\t\t\twhile (length--) {\n\t\t\t\tresult[length] = fn(array[length]);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\n\t\t/**\n\t\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t\t * addresses.\n\t\t * @private\n\t\t * @param {String} domain The domain name or email address.\n\t\t * @param {Function} callback The function that gets called for every\n\t\t * character.\n\t\t * @returns {Array} A new string of characters returned by the callback\n\t\t * function.\n\t\t */\n\t\tfunction mapDomain(string, fn) {\n\t\t\tvar parts = string.split('@');\n\t\t\tvar result = '';\n\t\t\tif (parts.length > 1) {\n\t\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\t\tresult = parts[0] + '@';\n\t\t\t\tstring = parts[1];\n\t\t\t}\n\t\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\t\tvar labels = string.split('.');\n\t\t\tvar encoded = map(labels, fn).join('.');\n\t\t\treturn result + encoded;\n\t\t}\n\t\n\t\t/**\n\t\t * Creates an array containing the numeric code points of each Unicode\n\t\t * character in the string. While JavaScript uses UCS-2 internally,\n\t\t * this function will convert a pair of surrogate halves (each of which\n\t\t * UCS-2 exposes as separate characters) into a single code point,\n\t\t * matching UTF-16.\n\t\t * @see `punycode.ucs2.encode`\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode.ucs2\n\t\t * @name decode\n\t\t * @param {String} string The Unicode input string (UCS-2).\n\t\t * @returns {Array} The new array of code points.\n\t\t */\n\t\tfunction ucs2decode(string) {\n\t\t\tvar output = [],\n\t\t\t    counter = 0,\n\t\t\t    length = string.length,\n\t\t\t    value,\n\t\t\t    extra;\n\t\t\twhile (counter < length) {\n\t\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\t\toutput.push(value);\n\t\t\t\t\t\tcounter--;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\t\n\t\t/**\n\t\t * Creates a string based on an array of numeric code points.\n\t\t * @see `punycode.ucs2.decode`\n\t\t * @memberOf punycode.ucs2\n\t\t * @name encode\n\t\t * @param {Array} codePoints The array of numeric code points.\n\t\t * @returns {String} The new Unicode string (UCS-2).\n\t\t */\n\t\tfunction ucs2encode(array) {\n\t\t\treturn map(array, function(value) {\n\t\t\t\tvar output = '';\n\t\t\t\tif (value > 0xFFFF) {\n\t\t\t\t\tvalue -= 0x10000;\n\t\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t\t}\n\t\t\t\toutput += stringFromCharCode(value);\n\t\t\t\treturn output;\n\t\t\t}).join('');\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a basic code point into a digit/integer.\n\t\t * @see `digitToBasic()`\n\t\t * @private\n\t\t * @param {Number} codePoint The basic numeric code point value.\n\t\t * @returns {Number} The numeric value of a basic code point (for use in\n\t\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t\t * the code point does not represent a value.\n\t\t */\n\t\tfunction basicToDigit(codePoint) {\n\t\t\tif (codePoint - 48 < 10) {\n\t\t\t\treturn codePoint - 22;\n\t\t\t}\n\t\t\tif (codePoint - 65 < 26) {\n\t\t\t\treturn codePoint - 65;\n\t\t\t}\n\t\t\tif (codePoint - 97 < 26) {\n\t\t\t\treturn codePoint - 97;\n\t\t\t}\n\t\t\treturn base;\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a digit/integer into a basic code point.\n\t\t * @see `basicToDigit()`\n\t\t * @private\n\t\t * @param {Number} digit The numeric value of a basic code point.\n\t\t * @returns {Number} The basic code point whose value (when used for\n\t\t * representing integers) is `digit`, which needs to be in the range\n\t\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t\t * used; else, the lowercase form is used. The behavior is undefined\n\t\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t\t */\n\t\tfunction digitToBasic(digit, flag) {\n\t\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t\t// 26..35 map to ASCII 0..9\n\t\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t\t}\n\t\n\t\t/**\n\t\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t\t * @private\n\t\t */\n\t\tfunction adapt(delta, numPoints, firstTime) {\n\t\t\tvar k = 0;\n\t\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\t\tdelta += floor(delta / numPoints);\n\t\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t\t}\n\t\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t\t * symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t\t * @returns {String} The resulting string of Unicode symbols.\n\t\t */\n\t\tfunction decode(input) {\n\t\t\t// Don't use UCS-2\n\t\t\tvar output = [],\n\t\t\t    inputLength = input.length,\n\t\t\t    out,\n\t\t\t    i = 0,\n\t\t\t    n = initialN,\n\t\t\t    bias = initialBias,\n\t\t\t    basic,\n\t\t\t    j,\n\t\t\t    index,\n\t\t\t    oldi,\n\t\t\t    w,\n\t\t\t    k,\n\t\t\t    digit,\n\t\t\t    t,\n\t\t\t    /** Cached calculation results */\n\t\t\t    baseMinusT;\n\t\n\t\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t\t// the first basic code points to the output.\n\t\n\t\t\tbasic = input.lastIndexOf(delimiter);\n\t\t\tif (basic < 0) {\n\t\t\t\tbasic = 0;\n\t\t\t}\n\t\n\t\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t\t// if it's not a basic code point\n\t\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\t\terror('not-basic');\n\t\t\t\t}\n\t\t\t\toutput.push(input.charCodeAt(j));\n\t\t\t}\n\t\n\t\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t\t// points were copied; start at the beginning otherwise.\n\t\n\t\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\t\n\t\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t\t// value at the end to obtain `delta`.\n\t\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\t\n\t\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\t\terror('invalid-input');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\t\n\t\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\t\n\t\t\t\t\ti += digit * w;\n\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\n\t\t\t\t\tif (digit < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tw *= baseMinusT;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tout = output.length + 1;\n\t\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\t\n\t\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\t\n\t\t\t\tn += floor(i / out);\n\t\t\t\ti %= out;\n\t\n\t\t\t\t// Insert `n` at position `i` of the output\n\t\t\t\toutput.splice(i++, 0, n);\n\t\n\t\t\t}\n\t\n\t\t\treturn ucs2encode(output);\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t\t * Punycode string of ASCII-only symbols.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The string of Unicode symbols.\n\t\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t\t */\n\t\tfunction encode(input) {\n\t\t\tvar n,\n\t\t\t    delta,\n\t\t\t    handledCPCount,\n\t\t\t    basicLength,\n\t\t\t    bias,\n\t\t\t    j,\n\t\t\t    m,\n\t\t\t    q,\n\t\t\t    k,\n\t\t\t    t,\n\t\t\t    currentValue,\n\t\t\t    output = [],\n\t\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t\t    inputLength,\n\t\t\t    /** Cached calculation results */\n\t\t\t    handledCPCountPlusOne,\n\t\t\t    baseMinusT,\n\t\t\t    qMinusT;\n\t\n\t\t\t// Convert the input in UCS-2 to Unicode\n\t\t\tinput = ucs2decode(input);\n\t\n\t\t\t// Cache the length\n\t\t\tinputLength = input.length;\n\t\n\t\t\t// Initialize the state\n\t\t\tn = initialN;\n\t\t\tdelta = 0;\n\t\t\tbias = initialBias;\n\t\n\t\t\t// Handle the basic code points\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue < 0x80) {\n\t\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\thandledCPCount = basicLength = output.length;\n\t\n\t\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t\t// `basicLength` is the number of basic code points.\n\t\n\t\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\t\tif (basicLength) {\n\t\t\t\toutput.push(delimiter);\n\t\t\t}\n\t\n\t\t\t// Main encoding loop:\n\t\t\twhile (handledCPCount < inputLength) {\n\t\n\t\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t\t// larger one:\n\t\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\t\tcurrentValue = input[j];\n\t\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\t\tm = currentValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t\t// but guard against overflow\n\t\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\t\n\t\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\t\tn = m;\n\t\n\t\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\t\tcurrentValue = input[j];\n\t\n\t\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\t\terror('overflow');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\t\tdelta = 0;\n\t\t\t\t\t\t++handledCPCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t++delta;\n\t\t\t\t++n;\n\t\n\t\t\t}\n\t\t\treturn output.join('');\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a Punycode string representing a domain name or an email address\n\t\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t\t * it doesn't matter if you call it on a string that has already been\n\t\t * converted to Unicode.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The Punycoded domain name or email address to\n\t\t * convert to Unicode.\n\t\t * @returns {String} The Unicode representation of the given Punycode\n\t\t * string.\n\t\t */\n\t\tfunction toUnicode(input) {\n\t\t\treturn mapDomain(input, function(string) {\n\t\t\t\treturn regexPunycode.test(string)\n\t\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t\t: string;\n\t\t\t});\n\t\t}\n\t\n\t\t/**\n\t\t * Converts a Unicode string representing a domain name or an email address to\n\t\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t\t * ASCII.\n\t\t * @memberOf punycode\n\t\t * @param {String} input The domain name or email address to convert, as a\n\t\t * Unicode string.\n\t\t * @returns {String} The Punycode representation of the given domain name or\n\t\t * email address.\n\t\t */\n\t\tfunction toASCII(input) {\n\t\t\treturn mapDomain(input, function(string) {\n\t\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t\t: string;\n\t\t\t});\n\t\t}\n\t\n\t\t/*--------------------------------------------------------------------------*/\n\t\n\t\t/** Define the public API */\n\t\tpunycode = {\n\t\t\t/**\n\t\t\t * A string representing the current Punycode.js version number.\n\t\t\t * @memberOf punycode\n\t\t\t * @type String\n\t\t\t */\n\t\t\t'version': '1.3.2',\n\t\t\t/**\n\t\t\t * An object of methods to convert from JavaScript's internal character\n\t\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t\t * @memberOf punycode\n\t\t\t * @type Object\n\t\t\t */\n\t\t\t'ucs2': {\n\t\t\t\t'decode': ucs2decode,\n\t\t\t\t'encode': ucs2encode\n\t\t\t},\n\t\t\t'decode': decode,\n\t\t\t'encode': encode,\n\t\t\t'toASCII': toASCII,\n\t\t\t'toUnicode': toUnicode\n\t\t};\n\t\n\t\t/** Expose `punycode` */\n\t\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t\t// like the following:\n\t\tif (\n\t\t\ttrue\n\t\t) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\t\treturn punycode;\n\t\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (freeExports && freeModule) {\n\t\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\t\tfreeModule.exports = punycode;\n\t\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\t\tfor (key in punycode) {\n\t\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // in Rhino or a web browser\n\t\t\troot.punycode = punycode;\n\t\t}\n\t\n\t}(this));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35)(module), (function() { return this; }())))\n\n/***/ },\n\n/***/ 1105:\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\t'use strict';\n\t\n\t// If obj.hasOwnProperty has been overridden, then calling\n\t// obj.hasOwnProperty(prop) will break.\n\t// See: https://github.com/joyent/node/issues/1707\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\t\n\tmodule.exports = function(qs, sep, eq, options) {\n\t  sep = sep || '&';\n\t  eq = eq || '=';\n\t  var obj = {};\n\t\n\t  if (typeof qs !== 'string' || qs.length === 0) {\n\t    return obj;\n\t  }\n\t\n\t  var regexp = /\\+/g;\n\t  qs = qs.split(sep);\n\t\n\t  var maxKeys = 1000;\n\t  if (options && typeof options.maxKeys === 'number') {\n\t    maxKeys = options.maxKeys;\n\t  }\n\t\n\t  var len = qs.length;\n\t  // maxKeys <= 0 means that we should not limit keys count\n\t  if (maxKeys > 0 && len > maxKeys) {\n\t    len = maxKeys;\n\t  }\n\t\n\t  for (var i = 0; i < len; ++i) {\n\t    var x = qs[i].replace(regexp, '%20'),\n\t        idx = x.indexOf(eq),\n\t        kstr, vstr, k, v;\n\t\n\t    if (idx >= 0) {\n\t      kstr = x.substr(0, idx);\n\t      vstr = x.substr(idx + 1);\n\t    } else {\n\t      kstr = x;\n\t      vstr = '';\n\t    }\n\t\n\t    k = decodeURIComponent(kstr);\n\t    v = decodeURIComponent(vstr);\n\t\n\t    if (!hasOwnProperty(obj, k)) {\n\t      obj[k] = v;\n\t    } else if (Array.isArray(obj[k])) {\n\t      obj[k].push(v);\n\t    } else {\n\t      obj[k] = [obj[k], v];\n\t    }\n\t  }\n\t\n\t  return obj;\n\t};\n\n\n/***/ },\n\n/***/ 1106:\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\t'use strict';\n\t\n\tvar stringifyPrimitive = function(v) {\n\t  switch (typeof v) {\n\t    case 'string':\n\t      return v;\n\t\n\t    case 'boolean':\n\t      return v ? 'true' : 'false';\n\t\n\t    case 'number':\n\t      return isFinite(v) ? v : '';\n\t\n\t    default:\n\t      return '';\n\t  }\n\t};\n\t\n\tmodule.exports = function(obj, sep, eq, name) {\n\t  sep = sep || '&';\n\t  eq = eq || '=';\n\t  if (obj === null) {\n\t    obj = undefined;\n\t  }\n\t\n\t  if (typeof obj === 'object') {\n\t    return Object.keys(obj).map(function(k) {\n\t      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\t      if (Array.isArray(obj[k])) {\n\t        return obj[k].map(function(v) {\n\t          return ks + encodeURIComponent(stringifyPrimitive(v));\n\t        }).join(sep);\n\t      } else {\n\t        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n\t      }\n\t    }).join(sep);\n\t\n\t  }\n\t\n\t  if (!name) return '';\n\t  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n\t         encodeURIComponent(stringifyPrimitive(obj));\n\t};\n\n\n/***/ },\n\n/***/ 1107:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.decode = exports.parse = __webpack_require__(1105);\n\texports.encode = exports.stringify = __webpack_require__(1106);\n\n\n/***/ },\n\n/***/ 1110:\n1113,\n\n/***/ 1111:\n1113,\n\n/***/ 1112:\n1113\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 2.2.js\n **/","var http = module.exports;\nvar EventEmitter = require('events').EventEmitter;\nvar Request = require('./lib/request');\nvar url = require('url')\n\nhttp.request = function (params, cb) {\n    if (typeof params === 'string') {\n        params = url.parse(params)\n    }\n    if (!params) params = {};\n    if (!params.host && !params.port) {\n        params.port = parseInt(window.location.port, 10);\n    }\n    if (!params.host && params.hostname) {\n        params.host = params.hostname;\n    }\n\n    if (!params.protocol) {\n        if (params.scheme) {\n            params.protocol = params.scheme + ':';\n        } else {\n            params.protocol = window.location.protocol;\n        }\n    }\n\n    if (!params.host) {\n        params.host = window.location.hostname || window.location.host;\n    }\n    if (/:/.test(params.host)) {\n        if (!params.port) {\n            params.port = params.host.split(':')[1];\n        }\n        params.host = params.host.split(':')[0];\n    }\n    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;\n    \n    var req = new Request(new xhrHttp, params);\n    if (cb) req.on('response', cb);\n    return req;\n};\n\nhttp.get = function (params, cb) {\n    params.method = 'GET';\n    var req = http.request(params, cb);\n    req.end();\n    return req;\n};\n\nhttp.Agent = function () {};\nhttp.Agent.defaultMaxSockets = 4;\n\nvar xhrHttp = (function () {\n    if (typeof window === 'undefined') {\n        throw new Error('no window object present');\n    }\n    else if (window.XMLHttpRequest) {\n        return window.XMLHttpRequest;\n    }\n    else if (window.ActiveXObject) {\n        var axs = [\n            'Msxml2.XMLHTTP.6.0',\n            'Msxml2.XMLHTTP.3.0',\n            'Microsoft.XMLHTTP'\n        ];\n        for (var i = 0; i < axs.length; i++) {\n            try {\n                var ax = new(window.ActiveXObject)(axs[i]);\n                return function () {\n                    if (ax) {\n                        var ax_ = ax;\n                        ax = null;\n                        return ax_;\n                    }\n                    else {\n                        return new(window.ActiveXObject)(axs[i]);\n                    }\n                };\n            }\n            catch (e) {}\n        }\n        throw new Error('ajax not supported in this browser')\n    }\n    else {\n        throw new Error('ajax not supported in this browser');\n    }\n})();\n\nhttp.STATUS_CODES = {\n    100 : 'Continue',\n    101 : 'Switching Protocols',\n    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918\n    200 : 'OK',\n    201 : 'Created',\n    202 : 'Accepted',\n    203 : 'Non-Authoritative Information',\n    204 : 'No Content',\n    205 : 'Reset Content',\n    206 : 'Partial Content',\n    207 : 'Multi-Status',               // RFC 4918\n    300 : 'Multiple Choices',\n    301 : 'Moved Permanently',\n    302 : 'Moved Temporarily',\n    303 : 'See Other',\n    304 : 'Not Modified',\n    305 : 'Use Proxy',\n    307 : 'Temporary Redirect',\n    400 : 'Bad Request',\n    401 : 'Unauthorized',\n    402 : 'Payment Required',\n    403 : 'Forbidden',\n    404 : 'Not Found',\n    405 : 'Method Not Allowed',\n    406 : 'Not Acceptable',\n    407 : 'Proxy Authentication Required',\n    408 : 'Request Time-out',\n    409 : 'Conflict',\n    410 : 'Gone',\n    411 : 'Length Required',\n    412 : 'Precondition Failed',\n    413 : 'Request Entity Too Large',\n    414 : 'Request-URI Too Large',\n    415 : 'Unsupported Media Type',\n    416 : 'Requested Range Not Satisfiable',\n    417 : 'Expectation Failed',\n    418 : 'I\\'m a teapot',              // RFC 2324\n    422 : 'Unprocessable Entity',       // RFC 4918\n    423 : 'Locked',                     // RFC 4918\n    424 : 'Failed Dependency',          // RFC 4918\n    425 : 'Unordered Collection',       // RFC 4918\n    426 : 'Upgrade Required',           // RFC 2817\n    428 : 'Precondition Required',      // RFC 6585\n    429 : 'Too Many Requests',          // RFC 6585\n    431 : 'Request Header Fields Too Large',// RFC 6585\n    500 : 'Internal Server Error',\n    501 : 'Not Implemented',\n    502 : 'Bad Gateway',\n    503 : 'Service Unavailable',\n    504 : 'Gateway Time-out',\n    505 : 'HTTP Version Not Supported',\n    506 : 'Variant Also Negotiates',    // RFC 2295\n    507 : 'Insufficient Storage',       // RFC 4918\n    509 : 'Bandwidth Limit Exceeded',\n    510 : 'Not Extended',               // RFC 2774\n    511 : 'Network Authentication Required' // RFC 6585\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/http-browserify/index.js\n ** module id = 965\n ** module chunks = 2\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a puny coded representation of \"domain\".\n      // It only converts the part of the domain name that\n      // has non ASCII characters. I.e. it dosent matter if\n      // you call it with a domain that already is in ASCII.\n      var domainArray = this.hostname.split('.');\n      var newOut = [];\n      for (var i = 0; i < domainArray.length; ++i) {\n        var s = domainArray[i];\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?\n            'xn--' + punycode.encode(s) : s);\n      }\n      this.hostname = newOut.join('.');\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  Object.keys(this).forEach(function(k) {\n    result[k] = this[k];\n  }, this);\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    Object.keys(relative).forEach(function(k) {\n      if (k !== 'protocol')\n        result[k] = relative[k];\n    });\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      Object.keys(relative).forEach(function(k) {\n        result[k] = relative[k];\n      });\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host) && (last === '.' || last === '..') ||\n      last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last == '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especialy happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\nfunction isString(arg) {\n  return typeof arg === \"string\";\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\nfunction isNullOrUndefined(arg) {\n  return  arg == null;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/url/url.js\n ** module id = 968\n ** module chunks = 2\n **/","/* build: `node build.js modules=ALL exclude=json,gestures minifier=uglifyjs` */\n/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\n\nvar fabric = fabric || { version: \"1.6.0-rc.1\" };\nif (typeof exports !== 'undefined') {\n  exports.fabric = fabric;\n}\n\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  fabric.document = document;\n  fabric.window = window;\n  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\n  window.fabric = fabric;\n}\nelse {\n  // assume we're running under node.js when document/window are not present\n  fabric.document = require(\"jsdom\")\n    .jsdom(\"<!DOCTYPE html><html><head></head><body></body></html>\");\n\n  if (fabric.document.createWindow) {\n    fabric.window = fabric.document.createWindow();\n  } else {\n    fabric.window = fabric.document.parentWindow;\n  }\n}\n\n/**\n * True when in environment that supports touch events\n * @type boolean\n */\nfabric.isTouchSupported = \"ontouchstart\" in fabric.document.documentElement;\n\n/**\n * True when in environment that's probably Node.js\n * @type boolean\n */\nfabric.isLikelyNode = typeof Buffer !== 'undefined' &&\n                      typeof window === 'undefined';\n\n/* _FROM_SVG_START_ */\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nfabric.SHARED_ATTRIBUTES = [\n  \"display\",\n  \"transform\",\n  \"fill\", \"fill-opacity\", \"fill-rule\",\n  \"opacity\",\n  \"stroke\", \"stroke-dasharray\", \"stroke-linecap\",\n  \"stroke-linejoin\", \"stroke-miterlimit\",\n  \"stroke-opacity\", \"stroke-width\",\n  \"id\"\n];\n/* _FROM_SVG_END_ */\n\n/**\n * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n */\nfabric.DPI = 96;\nfabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)';\n\n\n/**\n * Device Pixel Ratio\n * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n */\nfabric.devicePixelRatio = fabric.window.devicePixelRatio ||\n                          fabric.window.webkitDevicePixelRatio ||\n                          fabric.window.mozDevicePixelRatio ||\n                          1;\n\n\n(function() {\n\n  /**\n   * @private\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  function _removeEventListener(eventName, handler) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      fabric.util.removeFromArray(this.__eventListeners[eventName], handler);\n    }\n    else {\n      this.__eventListeners[eventName].length = 0;\n    }\n  }\n\n  /**\n   * Observes specified event\n   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\n   * @memberOf fabric.Observable\n   * @alias on\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function observe(eventName, handler) {\n    if (!this.__eventListeners) {\n      this.__eventListeners = { };\n    }\n    // one object with key/value pairs was passed\n    if (arguments.length === 1) {\n      for (var prop in eventName) {\n        this.on(prop, eventName[prop]);\n      }\n    }\n    else {\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [ ];\n      }\n      this.__eventListeners[eventName].push(handler);\n    }\n    return this;\n  }\n\n  /**\n   * Stops event observing for a particular event handler. Calling this method\n   * without arguments removes all handlers for all events\n   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\n   * @memberOf fabric.Observable\n   * @alias off\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function to be deleted from EventListeners\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function stopObserving(eventName, handler) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (arguments.length === 0) {\n      this.__eventListeners = { };\n    }\n    // one object with key/value pairs was passed\n    else if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      for (var prop in eventName) {\n        _removeEventListener.call(this, prop, eventName[prop]);\n      }\n    }\n    else {\n      _removeEventListener.call(this, eventName, handler);\n    }\n    return this;\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\n   * @memberOf fabric.Observable\n   * @alias trigger\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function fire(eventName, options) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    var listenersForEvent = this.__eventListeners[eventName];\n    if (!listenersForEvent) {\n      return;\n    }\n\n    for (var i = 0, len = listenersForEvent.length; i < len; i++) {\n      // avoiding try/catch for perf. reasons\n      listenersForEvent[i].call(this, options || { });\n    }\n    return this;\n  }\n\n  /**\n   * @namespace fabric.Observable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#events}\n   * @see {@link http://fabricjs.com/events/|Events demo}\n   */\n  fabric.Observable = {\n    observe: observe,\n    stopObserving: stopObserving,\n    fire: fire,\n\n    on: observe,\n    off: stopObserving,\n    trigger: fire\n  };\n})();\n\n\n/**\n * @namespace fabric.Collection\n */\nfabric.Collection = {\n\n  /**\n   * Adds objects to collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * Objects should be instances of (or inherit from) fabric.Object\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   */\n  add: function () {\n    this._objects.push.apply(this._objects, arguments);\n    for (var i = 0, length = arguments.length; i < length; i++) {\n      this._onObjectAdded(arguments[i]);\n    }\n    this.renderOnAddRemove && this.renderAll();\n    return this;\n  },\n\n  /**\n   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * An object should be an instance of (or inherit from) fabric.Object\n   * @param {Object} object Object to insert\n   * @param {Number} index Index to insert object at\n   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  insertAt: function (object, index, nonSplicing) {\n    var objects = this.getObjects();\n    if (nonSplicing) {\n      objects[index] = object;\n    }\n    else {\n      objects.splice(index, 0, object);\n    }\n    this._onObjectAdded(object);\n    this.renderOnAddRemove && this.renderAll();\n    return this;\n  },\n\n  /**\n   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */\n  remove: function() {\n    var objects = this.getObjects(),\n        index;\n\n    for (var i = 0, length = arguments.length; i < length; i++) {\n      index = objects.indexOf(arguments[i]);\n\n      // only call onObjectRemoved if an object was actually removed\n      if (index !== -1) {\n        objects.splice(index, 1);\n        this._onObjectRemoved(arguments[i]);\n      }\n    }\n\n    this.renderOnAddRemove && this.renderAll();\n    return this;\n  },\n\n  /**\n   * Executes given function for each object in this group\n   * @param {Function} callback\n   *                   Callback invoked with current object as first argument,\n   *                   index - as second and an array of all objects - as third.\n   *                   Iteration happens in reverse order (for performance reasons).\n   *                   Callback is invoked in a context of Global Object (e.g. `window`)\n   *                   when no `context` argument is given\n   *\n   * @param {Object} context Context (aka thisObject)\n   * @return {Self} thisArg\n   */\n  forEachObject: function(callback, context) {\n    var objects = this.getObjects(),\n        i = objects.length;\n    while (i--) {\n      callback.call(context, objects[i], i, objects);\n    }\n    return this;\n  },\n\n  /**\n   * Returns an array of children objects of this instance\n   * Type parameter introduced in 1.3.10\n   * @param {String} [type] When specified, only objects of this type are returned\n   * @return {Array}\n   */\n  getObjects: function(type) {\n    if (typeof type === 'undefined') {\n      return this._objects;\n    }\n    return this._objects.filter(function(o) {\n      return o.type === type;\n    });\n  },\n\n  /**\n   * Returns object at specified index\n   * @param {Number} index\n   * @return {Self} thisArg\n   */\n  item: function (index) {\n    return this.getObjects()[index];\n  },\n\n  /**\n   * Returns true if collection contains no objects\n   * @return {Boolean} true if collection is empty\n   */\n  isEmpty: function () {\n    return this.getObjects().length === 0;\n  },\n\n  /**\n   * Returns a size of a collection (i.e: length of an array containing its objects)\n   * @return {Number} Collection size\n   */\n  size: function() {\n    return this.getObjects().length;\n  },\n\n  /**\n   * Returns true if collection contains an object\n   * @param {Object} object Object to check against\n   * @return {Boolean} `true` if collection contains an object\n   */\n  contains: function(object) {\n    return this.getObjects().indexOf(object) > -1;\n  },\n\n  /**\n   * Returns number representation of a collection complexity\n   * @return {Number} complexity\n   */\n  complexity: function () {\n    return this.getObjects().reduce(function (memo, current) {\n      memo += current.complexity ? current.complexity() : 0;\n      return memo;\n    }, 0);\n  }\n};\n\n\n(function(global) {\n\n  var sqrt = Math.sqrt,\n      atan2 = Math.atan2,\n      PiBy180 = Math.PI / 180;\n\n  /**\n   * @namespace fabric.util\n   */\n  fabric.util = {\n\n    /**\n     * Removes value from an array.\n     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} array\n     * @param {Any} value\n     * @return {Array} original array\n     */\n    removeFromArray: function(array, value) {\n      var idx = array.indexOf(value);\n      if (idx !== -1) {\n        array.splice(idx, 1);\n      }\n      return array;\n    },\n\n    /**\n     * Returns random number between 2 specified ones.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} min lower limit\n     * @param {Number} max upper limit\n     * @return {Number} random value (between min and max)\n     */\n    getRandomInt: function(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\n     * Transforms degrees to radians.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} degrees value in degrees\n     * @return {Number} value in radians\n     */\n    degreesToRadians: function(degrees) {\n      return degrees * PiBy180;\n    },\n\n    /**\n     * Transforms radians to degrees.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} radians value in radians\n     * @return {Number} value in degrees\n     */\n    radiansToDegrees: function(radians) {\n      return radians / PiBy180;\n    },\n\n    /**\n     * Rotates `point` around `origin` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {fabric.Point} point The point to rotate\n     * @param {fabric.Point} origin The origin of the rotation\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {fabric.Point} The new rotated point\n     */\n    rotatePoint: function(point, origin, radians) {\n      point.subtractEquals(origin);\n      var sin = Math.sin(radians),\n          cos = Math.cos(radians),\n          rx = point.x * cos - point.y * sin,\n          ry = point.x * sin + point.y * cos;\n      return new fabric.Point(rx, ry).addEquals(origin);\n    },\n\n    /**\n     * Apply transform t to point p\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Point} p The point to transform\n     * @param  {Array} t The transform\n     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n     * @return {fabric.Point} The transformed point\n     */\n    transformPoint: function(p, t, ignoreOffset) {\n      if (ignoreOffset) {\n        return new fabric.Point(\n          t[0] * p.x + t[2] * p.y,\n          t[1] * p.x + t[3] * p.y\n        );\n      }\n      return new fabric.Point(\n        t[0] * p.x + t[2] * p.y + t[4],\n        t[1] * p.x + t[3] * p.y + t[5]\n      );\n    },\n\n    /**\n     * Invert transformation t\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} t The transform\n     * @return {Array} The inverted transform\n     */\n    invertTransform: function(t) {\n      var a = 1 / (t[0] * t[3] - t[1] * t[2]),\n          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\n          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\n      r[4] = -o.x;\n      r[5] = -o.y;\n      return r;\n    },\n\n    /**\n     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number|String} number number to operate on\n     * @param {Number} fractionDigits number of fraction digits to \"leave\"\n     * @return {Number}\n     */\n    toFixed: function(number, fractionDigits) {\n      return parseFloat(Number(number).toFixed(fractionDigits));\n    },\n\n    /**\n     * Converts from attribute value to pixel value if applicable.\n     * Returns converted pixels or original value not converted.\n     * @param {Number|String} value number to operate on\n     * @return {Number|String}\n     */\n    parseUnit: function(value, fontSize) {\n      var unit = /\\D{0,2}$/.exec(value),\n          number = parseFloat(value);\n      if (!fontSize) {\n        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n      }\n      switch (unit[0]) {\n        case 'mm':\n          return number * fabric.DPI / 25.4;\n\n        case 'cm':\n          return number * fabric.DPI / 2.54;\n\n        case 'in':\n          return number * fabric.DPI;\n\n        case 'pt':\n          return number * fabric.DPI / 72; // or * 4 / 3\n\n        case 'pc':\n          return number * fabric.DPI / 72 * 12; // or * 16\n\n        case 'em':\n          return number * fontSize;\n\n        default:\n          return number;\n      }\n    },\n\n    /**\n     * Function which always returns `false`.\n     * @static\n     * @memberOf fabric.util\n     * @return {Boolean}\n     */\n    falseFunction: function() {\n      return false;\n    },\n\n    /**\n     * Returns klass \"Class\" object of given namespace\n     * @memberOf fabric.util\n     * @param {String} type Type of object (eg. 'circle')\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @return {Object} klass \"Class\"\n     */\n    getKlass: function(type, namespace) {\n      // capitalize first letter only\n      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n      return fabric.util.resolveNamespace(namespace)[type];\n    },\n\n    /**\n     * Returns object of given namespace\n     * @memberOf fabric.util\n     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n     * @return {Object} Object for given namespace (default fabric)\n     */\n    resolveNamespace: function(namespace) {\n      if (!namespace) {\n        return fabric;\n      }\n\n      var parts = namespace.split('.'),\n          len = parts.length,\n          obj = global || fabric.window;\n\n      for (var i = 0; i < len; ++i) {\n        obj = obj[parts[i]];\n      }\n\n      return obj;\n    },\n\n    /**\n     * Loads image element from given url and passes it to a callback\n     * @memberOf fabric.util\n     * @param {String} url URL representing an image\n     * @param {Function} callback Callback; invoked with loaded image\n     * @param {Any} [context] Context to invoke callback in\n     * @param {Object} [crossOrigin] crossOrigin value to set image element to\n     */\n    loadImage: function(url, callback, context, crossOrigin) {\n      if (!url) {\n        callback && callback.call(context, url);\n        return;\n      }\n\n      var img = fabric.util.createImage();\n\n      /** @ignore */\n      img.onload = function () {\n        callback && callback.call(context, img);\n        img = img.onload = img.onerror = null;\n      };\n\n      /** @ignore */\n      img.onerror = function() {\n        fabric.log('Error loading ' + img.src);\n        callback && callback.call(context, null, true);\n        img = img.onload = img.onerror = null;\n      };\n\n      // data-urls appear to be buggy with crossOrigin\n      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n      // see https://code.google.com/p/chromium/issues/detail?id=315152\n      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n      if (url.indexOf('data') !== 0 && typeof crossOrigin !== 'undefined') {\n        img.crossOrigin = crossOrigin;\n      }\n\n      img.src = url;\n    },\n\n    /**\n     * Creates corresponding fabric instances from their object representations\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} objects Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @param {Function} reviver Method for further parsing of object elements,\n     * called after each fabric object created.\n     */\n    enlivenObjects: function(objects, callback, namespace, reviver) {\n      objects = objects || [ ];\n\n      function onLoaded() {\n        if (++numLoadedObjects === numTotalObjects) {\n          callback && callback(enlivenedObjects);\n        }\n      }\n\n      var enlivenedObjects = [ ],\n          numLoadedObjects = 0,\n          numTotalObjects = objects.length;\n\n      if (!numTotalObjects) {\n        callback && callback(enlivenedObjects);\n        return;\n      }\n\n      objects.forEach(function (o, index) {\n        // if sparse array\n        if (!o || !o.type) {\n          onLoaded();\n          return;\n        }\n        var klass = fabric.util.getKlass(o.type, namespace);\n        if (klass.async) {\n          klass.fromObject(o, function (obj, error) {\n            if (!error) {\n              enlivenedObjects[index] = obj;\n              reviver && reviver(o, enlivenedObjects[index]);\n            }\n            onLoaded();\n          });\n        }\n        else {\n          enlivenedObjects[index] = klass.fromObject(o);\n          reviver && reviver(o, enlivenedObjects[index]);\n          onLoaded();\n        }\n      });\n    },\n\n    /**\n     * Groups SVG elements (usually those retrieved from SVG document)\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} elements SVG elements to group\n     * @param {Object} [options] Options object\n     * @return {fabric.Object|fabric.PathGroup}\n     */\n    groupSVGElements: function(elements, options, path) {\n      var object;\n\n      object = new fabric.PathGroup(elements, options);\n\n      if (typeof path !== 'undefined') {\n        object.setSourcePath(path);\n      }\n      return object;\n    },\n\n    /**\n     * Populates an object with properties of another object\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} source Source object\n     * @param {Object} destination Destination object\n     * @return {Array} properties Propertie names to include\n     */\n    populateWithProperties: function(source, destination, properties) {\n      if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\n        for (var i = 0, len = properties.length; i < len; i++) {\n          if (properties[i] in source) {\n            destination[properties[i]] = source[properties[i]];\n          }\n        }\n      }\n    },\n\n    /**\n     * Draws a dashed line between two points\n     *\n     * This method is used to draw dashed line around selection area.\n     * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\n     *\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x  start x coordinate\n     * @param {Number} y start y coordinate\n     * @param {Number} x2 end x coordinate\n     * @param {Number} y2 end y coordinate\n     * @param {Array} da dash array pattern\n     */\n    drawDashedLine: function(ctx, x, y, x2, y2, da) {\n      var dx = x2 - x,\n          dy = y2 - y,\n          len = sqrt(dx * dx + dy * dy),\n          rot = atan2(dy, dx),\n          dc = da.length,\n          di = 0,\n          draw = true;\n\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.moveTo(0, 0);\n      ctx.rotate(rot);\n\n      x = 0;\n      while (len > x) {\n        x += da[di++ % dc];\n        if (x > len) {\n          x = len;\n        }\n        ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\n        draw = !draw;\n      }\n\n      ctx.restore();\n    },\n\n    /**\n     * Creates canvas element and initializes it via excanvas if necessary\n     * @static\n     * @memberOf fabric.util\n     * @param {CanvasElement} [canvasEl] optional canvas element to initialize;\n     * when not given, element is created implicitly\n     * @return {CanvasElement} initialized canvas element\n     */\n    createCanvasElement: function(canvasEl) {\n      canvasEl || (canvasEl = fabric.document.createElement('canvas'));\n      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n      if (!canvasEl.getContext && typeof G_vmlCanvasManager !== 'undefined') {\n        G_vmlCanvasManager.initElement(canvasEl);\n      }\n      //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n      return canvasEl;\n    },\n\n    /**\n     * Creates image element (works on client and node)\n     * @static\n     * @memberOf fabric.util\n     * @return {HTMLImageElement} HTML image element\n     */\n    createImage: function() {\n      return fabric.isLikelyNode\n        ? new (require('canvas').Image)()\n        : fabric.document.createElement('img');\n    },\n\n    /**\n     * Creates accessors (getXXX, setXXX) for a \"class\", based on \"stateProperties\" array\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} klass \"Class\" to create accessors for\n     */\n    createAccessors: function(klass) {\n      var proto = klass.prototype;\n\n      for (var i = proto.stateProperties.length; i--; ) {\n\n        var propName = proto.stateProperties[i],\n            capitalizedPropName = propName.charAt(0).toUpperCase() + propName.slice(1),\n            setterName = 'set' + capitalizedPropName,\n            getterName = 'get' + capitalizedPropName;\n\n        // using `new Function` for better introspection\n        if (!proto[getterName]) {\n          proto[getterName] = (function(property) {\n            return new Function('return this.get(\"' + property + '\")');\n          })(propName);\n        }\n        if (!proto[setterName]) {\n          proto[setterName] = (function(property) {\n            return new Function('value', 'return this.set(\"' + property + '\", value)');\n          })(propName);\n        }\n      }\n    },\n\n    /**\n     * @static\n     * @memberOf fabric.util\n     * @param {fabric.Object} receiver Object implementing `clipTo` method\n     * @param {CanvasRenderingContext2D} ctx Context to clip\n     */\n    clipContext: function(receiver, ctx) {\n      ctx.save();\n      ctx.beginPath();\n      receiver.clipTo(ctx);\n      ctx.clip();\n    },\n\n    /**\n     * Multiply matrix A by matrix B to nest transformations\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a First transformMatrix\n     * @param  {Array} b Second transformMatrix\n     * @return {Array} The product of the two transform matrices\n     */\n    multiplyTransformMatrices: function(a, b) {\n      // Matrix multiply a * b\n      return [\n        a[0] * b[0] + a[2] * b[1],\n        a[1] * b[0] + a[3] * b[1],\n        a[0] * b[2] + a[2] * b[3],\n        a[1] * b[2] + a[3] * b[3],\n        a[0] * b[4] + a[2] * b[5] + a[4],\n        a[1] * b[4] + a[3] * b[5] + a[5]\n      ];\n    },\n\n    /**\n     * Returns string representation of function body\n     * @param {Function} fn Function to get body of\n     * @return {String} Function body\n     */\n    getFunctionBody: function(fn) {\n      return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\n    },\n\n    /**\n     * Returns true if context has transparent pixel\n     * at specified location (taking tolerance into account)\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x x coordinate\n     * @param {Number} y y coordinate\n     * @param {Number} tolerance Tolerance\n     */\n    isTransparent: function(ctx, x, y, tolerance) {\n\n      // If tolerance is > 0 adjust start coords to take into account.\n      // If moves off Canvas fix to 0\n      if (tolerance > 0) {\n        if (x > tolerance) {\n          x -= tolerance;\n        }\n        else {\n          x = 0;\n        }\n        if (y > tolerance) {\n          y -= tolerance;\n        }\n        else {\n          y = 0;\n        }\n      }\n\n      var _isTransparent = true,\n          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1);\n\n      // Split image data - for tolerance > 1, pixelDataSize = 4;\n      for (var i = 3, l = imageData.data.length; i < l; i += 4) {\n        var temp = imageData.data[i];\n        _isTransparent = temp <= 0;\n        if (_isTransparent === false) {\n          break; // Stop if colour found\n        }\n      }\n\n      imageData = null;\n\n      return _isTransparent;\n    }\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var arcToSegmentsCache = { },\n      segmentToBezierCache = { },\n      boundsOfCurveCache = { },\n      _join = Array.prototype.join;\n\n  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n   * http://mozilla.org/MPL/2.0/\n   */\n  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n    var argsString = _join.call(arguments);\n    if (arcToSegmentsCache[argsString]) {\n      return arcToSegmentsCache[argsString];\n    }\n\n    var PI = Math.PI, th = rotateX * PI / 180,\n        sinTh = Math.sin(th),\n        cosTh = Math.cos(th),\n        fromX = 0, fromY = 0;\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\n        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\n        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\n        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\n        root = 0;\n\n    if (pl < 0) {\n      var s = Math.sqrt(1 - pl/(rx2 * ry2));\n      rx *= s;\n      ry *= s;\n    }\n    else {\n      root = (large === sweep ? -1.0 : 1.0) *\n              Math.sqrt( pl /(rx2 * py2 + ry2 * px2));\n    }\n\n    var cx = root * rx * py / ry,\n        cy = -root * ry * px / rx,\n        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\n        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\n        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\n        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n\n    if (sweep === 0 && dtheta > 0) {\n      dtheta -= 2 * PI;\n    }\n    else if (sweep === 1 && dtheta < 0) {\n      dtheta += 2 * PI;\n    }\n\n    // Convert into cubic bezier segments <= 90deg\n    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\n        result = [], mDelta = dtheta / segments,\n        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\n        th3 = mTheta + mDelta;\n\n    for (var i = 0; i < segments; i++) {\n      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n      fromX = result[i][4];\n      fromY = result[i][5];\n      mTheta = th3;\n      th3 += mDelta;\n    }\n    arcToSegmentsCache[argsString] = result;\n    return result;\n  }\n\n  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n    var argsString2 = _join.call(arguments);\n    if (segmentToBezierCache[argsString2]) {\n      return segmentToBezierCache[argsString2];\n    }\n\n    var costh2 = Math.cos(th2),\n        sinth2 = Math.sin(th2),\n        costh3 = Math.cos(th3),\n        sinth3 = Math.sin(th3),\n        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\n        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\n        cp1X = fromX + mT * ( - cosTh * rx * sinth2 - sinTh * ry * costh2),\n        cp1Y = fromY + mT * ( - sinTh * rx * sinth2 + cosTh * ry * costh2),\n        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\n        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\n\n    segmentToBezierCache[argsString2] = [\n      cp1X, cp1Y,\n      cp2X, cp2Y,\n      toX, toY\n    ];\n    return segmentToBezierCache[argsString2];\n  }\n\n  /*\n   * Private\n   */\n  function calcVectorAngle(ux, uy, vx, vy) {\n    var ta = Math.atan2(uy, ux),\n        tb = Math.atan2(vy, vx);\n    if (tb >= ta) {\n      return tb - ta;\n    }\n    else {\n      return 2 * Math.PI - (ta - tb);\n    }\n  }\n\n  /**\n   * Draws arc\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Number} fx\n   * @param {Number} fy\n   * @param {Array} coords\n   */\n  fabric.util.drawArc = function(ctx, fx, fy, coords) {\n    var rx = coords[0],\n        ry = coords[1],\n        rot = coords[2],\n        large = coords[3],\n        sweep = coords[4],\n        tx = coords[5],\n        ty = coords[6],\n        segs = [[ ], [ ], [ ], [ ]],\n        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n    for (var i = 0, len = segsNorm.length; i < len; i++) {\n      segs[i][0] = segsNorm[i][0] + fx;\n      segs[i][1] = segsNorm[i][1] + fy;\n      segs[i][2] = segsNorm[i][2] + fx;\n      segs[i][3] = segsNorm[i][3] + fy;\n      segs[i][4] = segsNorm[i][4] + fx;\n      segs[i][5] = segsNorm[i][5] + fy;\n      ctx.bezierCurveTo.apply(ctx, segs[i]);\n    }\n  };\n\n  /**\n   * Calculate bounding box of a elliptic-arc\n   * @param {Number} fx start point of arc\n   * @param {Number} fy\n   * @param {Number} rx horizontal radius\n   * @param {Number} ry vertical radius\n   * @param {Number} rot angle of horizontal axe\n   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\n   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\n   * @param {Number} tx end point of arc\n   * @param {Number} ty\n   */\n  fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\n\n    var fromX = 0, fromY = 0, bound = [ ], bounds = [ ],\n    segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot),\n    boundCopy = [[ ], [ ]];\n\n    for (var i = 0, len = segs.length; i < len; i++) {\n      bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\n      boundCopy[0].x = bound[0].x + fx;\n      boundCopy[0].y = bound[0].y + fy;\n      boundCopy[1].x = bound[1].x + fx;\n      boundCopy[1].y = bound[1].y + fy;\n      bounds.push(boundCopy[0]);\n      bounds.push(boundCopy[1]);\n      fromX = segs[i][4];\n      fromY = segs[i][5];\n    }\n    return bounds;\n  };\n\n  /**\n   * Calculate bounding box of a beziercurve\n   * @param {Number} x0 starting point\n   * @param {Number} y0\n   * @param {Number} x1 first control point\n   * @param {Number} y1\n   * @param {Number} x2 secondo control point\n   * @param {Number} y2\n   * @param {Number} x3 end of beizer\n   * @param {Number} y3\n   */\n  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var argsString = _join.call(arguments);\n    if (boundsOfCurveCache[argsString]) {\n      return boundsOfCurveCache[argsString];\n    }\n\n    var sqrt = Math.sqrt,\n        min = Math.min, max = Math.max,\n        abs = Math.abs, tvalues = [ ],\n        bounds = [[ ], [ ]],\n        a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n    b = 6 * x0 - 12 * x1 + 6 * x2;\n    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n    c = 3 * x1 - 3 * x0;\n\n    for (var i = 0; i < 2; ++i) {\n      if (i > 0) {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n\n      if (abs(a) < 1e-12) {\n        if (abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      if (b2ac < 0) {\n        continue;\n      }\n      sqrtb2ac = sqrt(b2ac);\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    var x, y, j = tvalues.length, jlen = j, mt;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n      bounds[0][j] = x;\n\n      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n      bounds[1][j] = y;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    var result = [\n      {\n        x: min.apply(null, bounds[0]),\n        y: min.apply(null, bounds[1])\n      },\n      {\n        x: max.apply(null, bounds[0]),\n        y: max.apply(null, bounds[1])\n      }\n    ];\n    boundsOfCurveCache[argsString] = result;\n    return result;\n  }\n\n  fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n\n})();\n\n\n(function() {\n\n  var slice = Array.prototype.slice;\n\n  /* _ES5_COMPAT_START_ */\n\n  if (!Array.prototype.indexOf) {\n    /**\n     * Finds index of an element in an array\n     * @param {Any} searchElement\n     * @param {Number} [fromIndex]\n     * @return {Number}\n     */\n    Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n      if (this === void 0 || this === null) {\n        throw new TypeError();\n      }\n      var t = Object(this), len = t.length >>> 0;\n      if (len === 0) {\n        return -1;\n      }\n      var n = 0;\n      if (arguments.length > 0) {\n        n = Number(arguments[1]);\n        if (n !== n) { // shortcut for verifying if it's NaN\n          n = 0;\n        }\n        else if (n !== 0 && n !== Number.POSITIVE_INFINITY && n !== Number.NEGATIVE_INFINITY) {\n          n = (n > 0 || -1) * Math.floor(Math.abs(n));\n        }\n      }\n      if (n >= len) {\n        return -1;\n      }\n      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n      for (; k < len; k++) {\n        if (k in t && t[k] === searchElement) {\n          return k;\n        }\n      }\n      return -1;\n    };\n  }\n\n  if (!Array.prototype.forEach) {\n    /**\n     * Iterates an array, invoking callback for each element\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Array}\n     */\n    Array.prototype.forEach = function(fn, context) {\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this) {\n          fn.call(context, this[i], i, this);\n        }\n      }\n    };\n  }\n\n  if (!Array.prototype.map) {\n    /**\n     * Returns a result of iterating over an array, invoking callback for each element\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Array}\n     */\n    Array.prototype.map = function(fn, context) {\n      var result = [ ];\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this) {\n          result[i] = fn.call(context, this[i], i, this);\n        }\n      }\n      return result;\n    };\n  }\n\n  if (!Array.prototype.every) {\n    /**\n     * Returns true if a callback returns truthy value for all elements in an array\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Boolean}\n     */\n    Array.prototype.every = function(fn, context) {\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this && !fn.call(context, this[i], i, this)) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n\n  if (!Array.prototype.some) {\n    /**\n     * Returns true if a callback returns truthy value for at least one element in an array\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Boolean}\n     */\n    Array.prototype.some = function(fn, context) {\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this && fn.call(context, this[i], i, this)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n\n  if (!Array.prototype.filter) {\n    /**\n     * Returns the result of iterating over elements in an array\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [context] Context to invoke callback in\n     * @return {Array}\n     */\n    Array.prototype.filter = function(fn, context) {\n      var result = [ ], val;\n      for (var i = 0, len = this.length >>> 0; i < len; i++) {\n        if (i in this) {\n          val = this[i]; // in case fn mutates this\n          if (fn.call(context, val, i, this)) {\n            result.push(val);\n          }\n        }\n      }\n      return result;\n    };\n  }\n\n  if (!Array.prototype.reduce) {\n    /**\n     * Returns \"folded\" (reduced) result of iterating over elements in an array\n     * @param {Function} fn Callback to invoke for each element\n     * @param {Object} [initial] Object to use as the first argument to the first call of the callback\n     * @return {Any}\n     */\n    Array.prototype.reduce = function(fn /*, initial*/) {\n      var len = this.length >>> 0,\n          i = 0,\n          rv;\n\n      if (arguments.length > 1) {\n        rv = arguments[1];\n      }\n      else {\n        do {\n          if (i in this) {\n            rv = this[i++];\n            break;\n          }\n          // if array contains no values, no initial value to return\n          if (++i >= len) {\n            throw new TypeError();\n          }\n        }\n        while (true);\n      }\n      for (; i < len; i++) {\n        if (i in this) {\n          rv = fn.call(null, rv, this[i], i, this);\n        }\n      }\n      return rv;\n    };\n  }\n\n  /* _ES5_COMPAT_END_ */\n\n  /**\n   * Invokes method on all items in a given array\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} method Name of a method to invoke\n   * @return {Array}\n   */\n  function invoke(array, method) {\n    var args = slice.call(arguments, 2), result = [ ];\n    for (var i = 0, len = array.length; i < len; i++) {\n      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n    }\n    return result;\n  }\n\n  /**\n   * Finds maximum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {Any}\n   */\n  function max(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 >= value2;\n    });\n  }\n\n  /**\n   * Finds minimum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {Any}\n   */\n  function min(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 < value2;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function find(array, byProperty, condition) {\n    if (!array || array.length === 0) {\n      return;\n    }\n\n    var i = array.length - 1,\n        result = byProperty ? array[i][byProperty] : array[i];\n    if (byProperty) {\n      while (i--) {\n        if (condition(array[i][byProperty], result)) {\n          result = array[i][byProperty];\n        }\n      }\n    }\n    else {\n      while (i--) {\n        if (condition(array[i], result)) {\n          result = array[i];\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @namespace fabric.util.array\n   */\n  fabric.util.array = {\n    invoke: invoke,\n    min: min,\n    max: max\n  };\n\n})();\n\n\n(function() {\n\n  /**\n   * Copies all enumerable properties of one object to another\n   * @memberOf fabric.util.object\n   * @param {Object} destination Where to copy to\n   * @param {Object} source Where to copy from\n   * @return {Object}\n   */\n  function extend(destination, source) {\n    // JScript DontEnum bug is not taken care of\n    for (var property in source) {\n      destination[property] = source[property];\n    }\n    return destination;\n  }\n\n  /**\n   * Creates an empty object and copies all enumerable properties of another object to it\n   * @memberOf fabric.util.object\n   * @param {Object} object Object to clone\n   * @return {Object}\n   */\n  function clone(object) {\n    return extend({ }, object);\n  }\n\n  /** @namespace fabric.util.object */\n  fabric.util.object = {\n    extend: extend,\n    clone: clone\n  };\n\n})();\n\n\n(function() {\n\n  /* _ES5_COMPAT_START_ */\n  if (!String.prototype.trim) {\n    /**\n     * Trims a string (removing whitespace from the beginning and the end)\n     * @function external:String#trim\n     * @see <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/Trim\">String#trim on MDN</a>\n     */\n    String.prototype.trim = function () {\n      // this trim is not fully ES3 or ES5 compliant, but it should cover most cases for now\n      return this.replace(/^[\\s\\xA0]+/, '').replace(/[\\s\\xA0]+$/, '');\n    };\n  }\n  /* _ES5_COMPAT_END_ */\n\n  /**\n   * Camelizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to camelize\n   * @return {String} Camelized version of a string\n   */\n  function camelize(string) {\n    return string.replace(/-+(.)?/g, function(match, character) {\n      return character ? character.toUpperCase() : '';\n    });\n  }\n\n  /**\n   * Capitalizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to capitalize\n   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n   * and other letters stay untouched, if false first letter is capitalized\n   * and other letters are converted to lowercase.\n   * @return {String} Capitalized version of a string\n   */\n  function capitalize(string, firstLetterOnly) {\n    return string.charAt(0).toUpperCase() +\n      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n  }\n\n  /**\n   * Escapes XML in a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to escape\n   * @return {String} Escaped version of a string\n   */\n  function escapeXml(string) {\n    return string.replace(/&/g, '&amp;')\n       .replace(/\"/g, '&quot;')\n       .replace(/'/g, '&apos;')\n       .replace(/</g, '&lt;')\n       .replace(/>/g, '&gt;');\n  }\n\n  /**\n   * String utilities\n   * @namespace fabric.util.string\n   */\n  fabric.util.string = {\n    camelize: camelize,\n    capitalize: capitalize,\n    escapeXml: escapeXml\n  };\n}());\n\n\n/* _ES5_COMPAT_START_ */\n(function() {\n\n  var slice = Array.prototype.slice,\n      apply = Function.prototype.apply,\n      Dummy = function() { };\n\n  if (!Function.prototype.bind) {\n    /**\n     * Cross-browser approximation of ES5 Function.prototype.bind (not fully spec conforming)\n     * @see <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\">Function#bind on MDN</a>\n     * @param {Object} thisArg Object to bind function to\n     * @param {Any[]} [...] Values to pass to a bound function\n     * @return {Function}\n     */\n    Function.prototype.bind = function(thisArg) {\n      var _this = this, args = slice.call(arguments, 1), bound;\n      if (args.length) {\n        bound = function() {\n          return apply.call(_this, this instanceof Dummy ? this : thisArg, args.concat(slice.call(arguments)));\n        };\n      }\n      else {\n        /** @ignore */\n        bound = function() {\n          return apply.call(_this, this instanceof Dummy ? this : thisArg, arguments);\n        };\n      }\n      Dummy.prototype = this.prototype;\n      bound.prototype = new Dummy();\n\n      return bound;\n    };\n  }\n\n})();\n/* _ES5_COMPAT_END_ */\n\n\n(function() {\n\n  var slice = Array.prototype.slice, emptyFunction = function() { },\n\n      IS_DONTENUM_BUGGY = (function() {\n        for (var p in { toString: 1 }) {\n          if (p === 'toString') {\n            return false;\n          }\n        }\n        return true;\n      })(),\n\n      /** @ignore */\n      addMethods = function(klass, source, parent) {\n        for (var property in source) {\n\n          if (property in klass.prototype &&\n              typeof klass.prototype[property] === 'function' &&\n              (source[property] + '').indexOf('callSuper') > -1) {\n\n            klass.prototype[property] = (function(property) {\n              return function() {\n\n                var superclass = this.constructor.superclass;\n                this.constructor.superclass = parent;\n                var returnValue = source[property].apply(this, arguments);\n                this.constructor.superclass = superclass;\n\n                if (property !== 'initialize') {\n                  return returnValue;\n                }\n              };\n            })(property);\n          }\n          else {\n            klass.prototype[property] = source[property];\n          }\n\n          if (IS_DONTENUM_BUGGY) {\n            if (source.toString !== Object.prototype.toString) {\n              klass.prototype.toString = source.toString;\n            }\n            if (source.valueOf !== Object.prototype.valueOf) {\n              klass.prototype.valueOf = source.valueOf;\n            }\n          }\n        }\n      };\n\n  function Subclass() { }\n\n  function callSuper(methodName) {\n    var fn = this.constructor.superclass.prototype[methodName];\n    return (arguments.length > 1)\n      ? fn.apply(this, slice.call(arguments, 1))\n      : fn.call(this);\n  }\n\n  /**\n   * Helper for creation of \"classes\".\n   * @memberOf fabric.util\n   * @param {Function} [parent] optional \"Class\" to inherit from\n   * @param {Object} [properties] Properties shared by all instances of this class\n   *                  (be careful modifying objects defined here as this would affect all instances)\n   */\n  function createClass() {\n    var parent = null,\n        properties = slice.call(arguments, 0);\n\n    if (typeof properties[0] === 'function') {\n      parent = properties.shift();\n    }\n    function klass() {\n      this.initialize.apply(this, arguments);\n    }\n\n    klass.superclass = parent;\n    klass.subclasses = [ ];\n\n    if (parent) {\n      Subclass.prototype = parent.prototype;\n      klass.prototype = new Subclass();\n      parent.subclasses.push(klass);\n    }\n    for (var i = 0, length = properties.length; i < length; i++) {\n      addMethods(klass, properties[i], parent);\n    }\n    if (!klass.prototype.initialize) {\n      klass.prototype.initialize = emptyFunction;\n    }\n    klass.prototype.constructor = klass;\n    klass.prototype.callSuper = callSuper;\n    return klass;\n  }\n\n  fabric.util.createClass = createClass;\n})();\n\n\n(function () {\n\n  var unknown = 'unknown';\n\n  /* EVENT HANDLING */\n\n  function areHostMethods(object) {\n    var methodNames = Array.prototype.slice.call(arguments, 1),\n        t, i, len = methodNames.length;\n    for (i = 0; i < len; i++) {\n      t = typeof object[methodNames[i]];\n      if (!(/^(?:function|object|unknown)$/).test(t)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** @ignore */\n  var getElement,\n      setElement,\n      getUniqueId = (function () {\n        var uid = 0;\n        return function (element) {\n          return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);\n        };\n      })();\n\n  (function () {\n    var elements = { };\n    /** @ignore */\n    getElement = function (uid) {\n      return elements[uid];\n    };\n    /** @ignore */\n    setElement = function (uid, element) {\n      elements[uid] = element;\n    };\n  })();\n\n  function createListener(uid, handler) {\n    return {\n      handler: handler,\n      wrappedHandler: createWrappedHandler(uid, handler)\n    };\n  }\n\n  function createWrappedHandler(uid, handler) {\n    return function (e) {\n      handler.call(getElement(uid), e || fabric.window.event);\n    };\n  }\n\n  function createDispatcher(uid, eventName) {\n    return function (e) {\n      if (handlers[uid] && handlers[uid][eventName]) {\n        var handlersForEvent = handlers[uid][eventName];\n        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n          handlersForEvent[i].call(this, e || fabric.window.event);\n        }\n      }\n    };\n  }\n\n  var shouldUseAddListenerRemoveListener = (\n        areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&\n        areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),\n\n      shouldUseAttachEventDetachEvent = (\n        areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&\n        areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),\n\n      // IE branch\n      listeners = { },\n\n      // DOM L0 branch\n      handlers = { },\n\n      addListener, removeListener;\n\n  if (shouldUseAddListenerRemoveListener) {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      element.addEventListener(eventName, handler, false);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      element.removeEventListener(eventName, handler, false);\n    };\n  }\n\n  else if (shouldUseAttachEventDetachEvent) {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      var uid = getUniqueId(element);\n      setElement(uid, element);\n      if (!listeners[uid]) {\n        listeners[uid] = { };\n      }\n      if (!listeners[uid][eventName]) {\n        listeners[uid][eventName] = [ ];\n\n      }\n      var listener = createListener(uid, handler);\n      listeners[uid][eventName].push(listener);\n      element.attachEvent('on' + eventName, listener.wrappedHandler);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      var uid = getUniqueId(element), listener;\n      if (listeners[uid] && listeners[uid][eventName]) {\n        for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {\n          listener = listeners[uid][eventName][i];\n          if (listener && listener.handler === handler) {\n            element.detachEvent('on' + eventName, listener.wrappedHandler);\n            listeners[uid][eventName][i] = null;\n          }\n        }\n      }\n    };\n  }\n  else {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      var uid = getUniqueId(element);\n      if (!handlers[uid]) {\n        handlers[uid] = { };\n      }\n      if (!handlers[uid][eventName]) {\n        handlers[uid][eventName] = [ ];\n        var existingHandler = element['on' + eventName];\n        if (existingHandler) {\n          handlers[uid][eventName].push(existingHandler);\n        }\n        element['on' + eventName] = createDispatcher(uid, eventName);\n      }\n      handlers[uid][eventName].push(handler);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      var uid = getUniqueId(element);\n      if (handlers[uid] && handlers[uid][eventName]) {\n        var handlersForEvent = handlers[uid][eventName];\n        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n          if (handlersForEvent[i] === handler) {\n            handlersForEvent.splice(i, 1);\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Adds an event listener to an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.addListener = addListener;\n\n  /**\n   * Removes an event listener from an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.removeListener = removeListener;\n\n  /**\n   * Cross-browser wrapper for getting event's coordinates\n   * @memberOf fabric.util\n   * @param {Event} event Event object\n   */\n  function getPointer(event) {\n    event || (event = fabric.window.event);\n\n    var element = event.target ||\n                  (typeof event.srcElement !== unknown ? event.srcElement : null),\n\n        scroll = fabric.util.getScrollLeftTop(element);\n\n    return {\n      x: pointerX(event) + scroll.left,\n      y: pointerY(event) + scroll.top\n    };\n  }\n\n  var pointerX = function(event) {\n    // looks like in IE (<9) clientX at certain point (apparently when mouseup fires on VML element)\n    // is represented as COM object, with all the consequences, like \"unknown\" type and error on [[Get]]\n    // need to investigate later\n    return (typeof event.clientX !== unknown ? event.clientX : 0);\n  },\n\n  pointerY = function(event) {\n    return (typeof event.clientY !== unknown ? event.clientY : 0);\n  };\n\n  function _getPointer(event, pageProp, clientProp) {\n    var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';\n\n    return (event[touchProp] && event[touchProp][0]\n      ? (event[touchProp][0][pageProp] - (event[touchProp][0][pageProp] - event[touchProp][0][clientProp]))\n        || event[clientProp]\n      : event[clientProp]);\n  }\n\n  if (fabric.isTouchSupported) {\n    pointerX = function(event) {\n      return _getPointer(event, 'pageX', 'clientX');\n    };\n    pointerY = function(event) {\n      return _getPointer(event, 'pageY', 'clientY');\n    };\n  }\n\n  fabric.util.getPointer = getPointer;\n\n  fabric.util.object.extend(fabric.util, fabric.Observable);\n\n})();\n\n\n(function () {\n\n  /**\n   * Cross-browser wrapper for setting element's style\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {Object} styles\n   * @return {HTMLElement} Element that was passed as a first argument\n   */\n  function setStyle(element, styles) {\n    var elementStyle = element.style;\n    if (!elementStyle) {\n      return element;\n    }\n    if (typeof styles === 'string') {\n      element.style.cssText += ';' + styles;\n      return styles.indexOf('opacity') > -1\n        ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\n        : element;\n    }\n    for (var property in styles) {\n      if (property === 'opacity') {\n        setOpacity(element, styles[property]);\n      }\n      else {\n        var normalizedProperty = (property === 'float' || property === 'cssFloat')\n          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\n          : property;\n        elementStyle[normalizedProperty] = styles[property];\n      }\n    }\n    return element;\n  }\n\n  var parseEl = fabric.document.createElement('div'),\n      supportsOpacity = typeof parseEl.style.opacity === 'string',\n      supportsFilters = typeof parseEl.style.filter === 'string',\n      reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\n\n      /** @ignore */\n      setOpacity = function (element) { return element; };\n\n  if (supportsOpacity) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      element.style.opacity = value;\n      return element;\n    };\n  }\n  else if (supportsFilters) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      var es = element.style;\n      if (element.currentStyle && !element.currentStyle.hasLayout) {\n        es.zoom = 1;\n      }\n      if (reOpacity.test(es.filter)) {\n        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\n        es.filter = es.filter.replace(reOpacity, value);\n      }\n      else {\n        es.filter += ' alpha(opacity=' + (value * 100) + ')';\n      }\n      return element;\n    };\n  }\n\n  fabric.util.setStyle = setStyle;\n\n})();\n\n\n(function() {\n\n  var _slice = Array.prototype.slice;\n\n  /**\n   * Takes id and returns an element with that id (if one exists in a document)\n   * @memberOf fabric.util\n   * @param {String|HTMLElement} id\n   * @return {HTMLElement|null}\n   */\n  function getById(id) {\n    return typeof id === 'string' ? fabric.document.getElementById(id) : id;\n  }\n\n  var sliceCanConvertNodelists,\n      /**\n       * Converts an array-like object (e.g. arguments or NodeList) to an array\n       * @memberOf fabric.util\n       * @param {Object} arrayLike\n       * @return {Array}\n       */\n      toArray = function(arrayLike) {\n        return _slice.call(arrayLike, 0);\n      };\n\n  try {\n    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n  }\n  catch (err) { }\n\n  if (!sliceCanConvertNodelists) {\n    toArray = function(arrayLike) {\n      var arr = new Array(arrayLike.length), i = arrayLike.length;\n      while (i--) {\n        arr[i] = arrayLike[i];\n      }\n      return arr;\n    };\n  }\n\n  /**\n   * Creates specified element with specified attributes\n   * @memberOf fabric.util\n   * @param {String} tagName Type of an element to create\n   * @param {Object} [attributes] Attributes to set on an element\n   * @return {HTMLElement} Newly created element\n   */\n  function makeElement(tagName, attributes) {\n    var el = fabric.document.createElement(tagName);\n    for (var prop in attributes) {\n      if (prop === 'class') {\n        el.className = attributes[prop];\n      }\n      else if (prop === 'for') {\n        el.htmlFor = attributes[prop];\n      }\n      else {\n        el.setAttribute(prop, attributes[prop]);\n      }\n    }\n    return el;\n  }\n\n  /**\n   * Adds class to an element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to add class to\n   * @param {String} className Class to add to an element\n   */\n  function addClass(element, className) {\n    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\n      element.className += (element.className ? ' ' : '') + className;\n    }\n  }\n\n  /**\n   * Wraps element with another element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to wrap\n   * @param {HTMLElement|String} wrapper Element to wrap with\n   * @param {Object} [attributes] Attributes to set on a wrapper\n   * @return {HTMLElement} wrapper\n   */\n  function wrapElement(element, wrapper, attributes) {\n    if (typeof wrapper === 'string') {\n      wrapper = makeElement(wrapper, attributes);\n    }\n    if (element.parentNode) {\n      element.parentNode.replaceChild(wrapper, element);\n    }\n    wrapper.appendChild(element);\n    return wrapper;\n  }\n\n  /**\n   * Returns element scroll offsets\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to operate on\n   * @return {Object} Object with left/top values\n   */\n  function getScrollLeftTop(element) {\n\n    var left = 0,\n        top = 0,\n        docElement = fabric.document.documentElement,\n        body = fabric.document.body || {\n          scrollLeft: 0, scrollTop: 0\n        };\n\n    while (element && element.parentNode) {\n\n      element = element.parentNode;\n\n      if (element === fabric.document) {\n        left = body.scrollLeft || docElement.scrollLeft || 0;\n        top = body.scrollTop ||  docElement.scrollTop || 0;\n      }\n      else {\n        left += element.scrollLeft || 0;\n        top += element.scrollTop || 0;\n      }\n\n      if (element.nodeType === 1 &&\n          fabric.util.getElementStyle(element, 'position') === 'fixed') {\n        break;\n      }\n    }\n\n    return { left: left, top: top };\n  }\n\n  /**\n   * Returns offset for a given element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get offset for\n   * @return {Object} Object with \"left\" and \"top\" properties\n   */\n  function getElementOffset(element) {\n    var docElem,\n        doc = element && element.ownerDocument,\n        box = { left: 0, top: 0 },\n        offset = { left: 0, top: 0 },\n        scrollLeftTop,\n        offsetAttributes = {\n          borderLeftWidth: 'left',\n          borderTopWidth:  'top',\n          paddingLeft:     'left',\n          paddingTop:      'top'\n        };\n\n    if (!doc) {\n      return offset;\n    }\n\n    for (var attr in offsetAttributes) {\n      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n    }\n\n    docElem = doc.documentElement;\n    if ( typeof element.getBoundingClientRect !== 'undefined' ) {\n      box = element.getBoundingClientRect();\n    }\n\n    scrollLeftTop = getScrollLeftTop(element);\n\n    return {\n      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\n    };\n  }\n\n  /**\n   * Returns style attribute value of a given element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get style attribute for\n   * @param {String} attr Style attribute to get for element\n   * @return {String} Style attribute value of the given element.\n   */\n  var getElementStyle;\n  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n    getElementStyle = function(element, attr) {\n      var style = fabric.document.defaultView.getComputedStyle(element, null);\n      return style ? style[attr] : undefined;\n    };\n  }\n  else {\n    getElementStyle = function(element, attr) {\n      var value = element.style[attr];\n      if (!value && element.currentStyle) {\n        value = element.currentStyle[attr];\n      }\n      return value;\n    };\n  }\n\n  (function () {\n    var style = fabric.document.documentElement.style,\n        selectProp = 'userSelect' in style\n          ? 'userSelect'\n          : 'MozUserSelect' in style\n            ? 'MozUserSelect'\n            : 'WebkitUserSelect' in style\n              ? 'WebkitUserSelect'\n              : 'KhtmlUserSelect' in style\n                ? 'KhtmlUserSelect'\n                : '';\n\n    /**\n     * Makes element unselectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make unselectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementUnselectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = fabric.util.falseFunction;\n      }\n      if (selectProp) {\n        element.style[selectProp] = 'none';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = 'on';\n      }\n      return element;\n    }\n\n    /**\n     * Makes element selectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make selectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementSelectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = null;\n      }\n      if (selectProp) {\n        element.style[selectProp] = '';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = '';\n      }\n      return element;\n    }\n\n    fabric.util.makeElementUnselectable = makeElementUnselectable;\n    fabric.util.makeElementSelectable = makeElementSelectable;\n  })();\n\n  (function() {\n\n    /**\n     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\n     * @memberOf fabric.util\n     * @param {String} url URL of a script to load\n     * @param {Function} callback Callback to execute when script is finished loading\n     */\n    function getScript(url, callback) {\n      var headEl = fabric.document.getElementsByTagName('head')[0],\n          scriptEl = fabric.document.createElement('script'),\n          loading = true;\n\n      /** @ignore */\n      scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\n        if (loading) {\n          if (typeof this.readyState === 'string' &&\n              this.readyState !== 'loaded' &&\n              this.readyState !== 'complete') {\n            return;\n          }\n          loading = false;\n          callback(e || fabric.window.event);\n          scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\n        }\n      };\n      scriptEl.src = url;\n      headEl.appendChild(scriptEl);\n      // causes issue in Opera\n      // headEl.removeChild(scriptEl);\n    }\n\n    fabric.util.getScript = getScript;\n  })();\n\n  fabric.util.getById = getById;\n  fabric.util.toArray = toArray;\n  fabric.util.makeElement = makeElement;\n  fabric.util.addClass = addClass;\n  fabric.util.wrapElement = wrapElement;\n  fabric.util.getScrollLeftTop = getScrollLeftTop;\n  fabric.util.getElementOffset = getElementOffset;\n  fabric.util.getElementStyle = getElementStyle;\n\n})();\n\n\n(function() {\n\n  function addParamToUrl(url, param) {\n    return url + (/\\?/.test(url) ? '&' : '?') + param;\n  }\n\n  var makeXHR = (function() {\n    var factories = [\n      function() { return new ActiveXObject('Microsoft.XMLHTTP'); },\n      function() { return new ActiveXObject('Msxml2.XMLHTTP'); },\n      function() { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); },\n      function() { return new XMLHttpRequest(); }\n    ];\n    for (var i = factories.length; i--; ) {\n      try {\n        var req = factories[i]();\n        if (req) {\n          return factories[i];\n        }\n      }\n      catch (err) { }\n    }\n  })();\n\n  function emptyFn() { }\n\n  /**\n   * Cross-browser abstraction for sending XMLHttpRequest\n   * @memberOf fabric.util\n   * @param {String} url URL to send XMLHttpRequest to\n   * @param {Object} [options] Options object\n   * @param {String} [options.method=\"GET\"]\n   * @param {Function} options.onComplete Callback to invoke when request is completed\n   * @return {XMLHttpRequest} request\n   */\n  function request(url, options) {\n\n    options || (options = { });\n\n    var method = options.method ? options.method.toUpperCase() : 'GET',\n        onComplete = options.onComplete || function() { },\n        xhr = makeXHR(),\n        body;\n\n    /** @ignore */\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        onComplete(xhr);\n        xhr.onreadystatechange = emptyFn;\n      }\n    };\n\n    if (method === 'GET') {\n      body = null;\n      if (typeof options.parameters === 'string') {\n        url = addParamToUrl(url, options.parameters);\n      }\n    }\n\n    xhr.open(method, url, true);\n\n    if (method === 'POST' || method === 'PUT') {\n      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    }\n\n    xhr.send(body);\n    return xhr;\n  }\n\n  fabric.util.request = request;\n})();\n\n\n/**\n * Wrapper around `console.log` (when available)\n * @param {Any} [values] Values to log\n */\nfabric.log = function() { };\n\n/**\n * Wrapper around `console.warn` (when available)\n * @param {Any} [values] Values to log as a warning\n */\nfabric.warn = function() { };\n\n/* jshint ignore:start */\nif (typeof console !== 'undefined') {\n\n  ['log', 'warn'].forEach(function(methodName) {\n\n    if (typeof console[methodName] !== 'undefined' &&\n        typeof console[methodName].apply === 'function') {\n\n      fabric[methodName] = function() {\n        return console[methodName].apply(console, arguments);\n      };\n    }\n  });\n}\n/* jshint ignore:end */\n\n\n(function() {\n\n  /**\n   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {Object} [options] Animation options\n   * @param {Function} [options.onChange] Callback; invoked on every value change\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n   * @param {Number} [options.startValue=0] Starting value\n   * @param {Number} [options.endValue=100] Ending value\n   * @param {Number} [options.byValue=100] Value to modify the property by\n   * @param {Function} [options.easing] Easing function\n   * @param {Number} [options.duration=500] Duration of change (in ms)\n   */\n  function animate(options) {\n\n    requestAnimFrame(function(timestamp) {\n      options || (options = { });\n\n      var start = timestamp || +new Date(),\n          duration = options.duration || 500,\n          finish = start + duration, time,\n          onChange = options.onChange || function() { },\n          abort = options.abort || function() { return false; },\n          easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},\n          startValue = 'startValue' in options ? options.startValue : 0,\n          endValue = 'endValue' in options ? options.endValue : 100,\n          byValue = options.byValue || endValue - startValue;\n\n      options.onStart && options.onStart();\n\n      (function tick(ticktime) {\n        time = ticktime || +new Date();\n        var currentTime = time > finish ? duration : (time - start);\n        if (abort()) {\n          options.onComplete && options.onComplete();\n          return;\n        }\n        onChange(easing(currentTime, startValue, byValue, duration));\n        if (time > finish) {\n          options.onComplete && options.onComplete();\n          return;\n        }\n        requestAnimFrame(tick);\n      })(start);\n    });\n\n  }\n\n  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\n                          fabric.window.webkitRequestAnimationFrame ||\n                          fabric.window.mozRequestAnimationFrame    ||\n                          fabric.window.oRequestAnimationFrame      ||\n                          fabric.window.msRequestAnimationFrame     ||\n                          function(callback) {\n                            fabric.window.setTimeout(callback, 1000 / 60);\n                          };\n\n  /**\n   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n   * @memberOf fabric.util\n   * @param {Function} callback Callback to invoke\n   * @param {DOMElement} element optional Element to associate with animation\n   */\n  function requestAnimFrame() {\n    return _requestAnimFrame.apply(fabric.window, arguments);\n  }\n\n  fabric.util.animate = animate;\n  fabric.util.requestAnimFrame = requestAnimFrame;\n\n})();\n\n\n(function() {\n\n  function normalize(a, c, p, s) {\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    }\n    else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return { a: a, c: c, p: p, s: s };\n  }\n\n  function elastic(opts, t, d) {\n    return opts.a *\n      Math.pow(2, 10 * (t -= 1)) *\n      Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\n  }\n\n  /**\n   * Cubic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n  }\n\n  /**\n   * Cubic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutCubic(t, b, c, d) {\n    t /= d/2;\n    if (t < 1) {\n      return c / 2 * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n  }\n\n  /**\n   * Quartic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n  }\n\n  /**\n   * Quartic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  }\n\n  /**\n   * Quartic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutQuart(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t * t + b;\n    }\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n  }\n\n  /**\n   * Quintic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n  }\n\n  /**\n   * Quintic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  }\n\n  /**\n   * Quintic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutQuint(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n  }\n\n  /**\n   * Sinusoidal easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  }\n\n  /**\n   * Sinusoidal easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  }\n\n  /**\n   * Sinusoidal easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n  }\n\n  /**\n   * Exponential easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n  }\n\n  /**\n   * Exponential easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n  }\n\n  /**\n   * Exponential easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutExpo(t, b, c, d) {\n    if (t === 0) {\n      return b;\n    }\n    if (t === d) {\n      return b + c;\n    }\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    }\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n  }\n\n  /**\n   * Circular easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n  }\n\n  /**\n   * Circular easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n  }\n\n  /**\n   * Circular easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutCirc(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    }\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n  }\n\n  /**\n   * Elastic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d;\n    if (t === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    var opts = normalize(a, c, p, s);\n    return -elastic(opts, t, d) + b;\n  }\n\n  /**\n   * Elastic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d;\n    if (t === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    var opts = normalize(a, c, p, s);\n    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\n  }\n\n  /**\n   * Elastic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d / 2;\n    if (t === 2) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * (0.3 * 1.5);\n    }\n    var opts = normalize(a, c, p, s);\n    if (t < 1) {\n      return -0.5 * elastic(opts, t, d) + b;\n    }\n    return opts.a * Math.pow(2, -10 * (t -= 1)) *\n      Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\n  }\n\n  /**\n   * Backwards easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  }\n\n  /**\n   * Backwards easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  }\n\n  /**\n   * Backwards easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    }\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n  }\n\n  /**\n   * Bouncing easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInBounce(t, b, c, d) {\n    return c - easeOutBounce (d - t, 0, c, d) + b;\n  }\n\n  /**\n   * Bouncing easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n      return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2/2.75)) {\n      return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n    }\n    else if (t < (2.5/2.75)) {\n      return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n    }\n    else {\n      return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n    }\n  }\n\n  /**\n   * Bouncing easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutBounce(t, b, c, d) {\n    if (t < d / 2) {\n      return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\n    }\n    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n  }\n\n  /**\n   * Easing functions\n   * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\n   * @namespace fabric.util.ease\n   */\n  fabric.util.ease = {\n\n    /**\n     * Quadratic easing in\n     * @memberOf fabric.util.ease\n     */\n    easeInQuad: function(t, b, c, d) {\n      return c * (t /= d) * t + b;\n    },\n\n    /**\n     * Quadratic easing out\n     * @memberOf fabric.util.ease\n     */\n    easeOutQuad: function(t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b;\n    },\n\n    /**\n     * Quadratic easing in and out\n     * @memberOf fabric.util.ease\n     */\n    easeInOutQuad: function(t, b, c, d) {\n      t /= (d / 2);\n      if (t < 1) {\n        return c / 2 * t * t + b;\n      }\n      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    },\n\n    /**\n     * Cubic easing in\n     * @memberOf fabric.util.ease\n     */\n    easeInCubic: function(t, b, c, d) {\n      return c * (t /= d) * t * t + b;\n    },\n\n    easeOutCubic: easeOutCubic,\n    easeInOutCubic: easeInOutCubic,\n    easeInQuart: easeInQuart,\n    easeOutQuart: easeOutQuart,\n    easeInOutQuart: easeInOutQuart,\n    easeInQuint: easeInQuint,\n    easeOutQuint: easeOutQuint,\n    easeInOutQuint: easeInOutQuint,\n    easeInSine: easeInSine,\n    easeOutSine: easeOutSine,\n    easeInOutSine: easeInOutSine,\n    easeInExpo: easeInExpo,\n    easeOutExpo: easeOutExpo,\n    easeInOutExpo: easeInOutExpo,\n    easeInCirc: easeInCirc,\n    easeOutCirc: easeOutCirc,\n    easeInOutCirc: easeInOutCirc,\n    easeInElastic: easeInElastic,\n    easeOutElastic: easeOutElastic,\n    easeInOutElastic: easeInOutElastic,\n    easeInBack: easeInBack,\n    easeOutBack: easeOutBack,\n    easeInOutBack: easeInOutBack,\n    easeInBounce: easeInBounce,\n    easeOutBounce: easeOutBounce,\n    easeInOutBounce: easeInOutBounce\n  };\n\n}());\n\n\n(function(global) {\n\n  'use strict';\n\n  /**\n   * @name fabric\n   * @namespace\n   */\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      capitalize = fabric.util.string.capitalize,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      parseUnit = fabric.util.parseUnit,\n      multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\n\n      reAllowedSVGTagNames = /^(path|circle|polygon|polyline|ellipse|rect|line|image|text)$/i,\n      reViewBoxTagNames = /^(symbol|image|marker|pattern|view|svg)$/i,\n      reNotAllowedAncestors = /^(?:pattern|defs|symbol|metadata)$/i,\n      reAllowedParents = /^(symbol|g|a|svg)$/i,\n\n      attributesMap = {\n        cx:                   'left',\n        x:                    'left',\n        r:                    'radius',\n        cy:                   'top',\n        y:                    'top',\n        display:              'visible',\n        visibility:           'visible',\n        transform:            'transformMatrix',\n        'fill-opacity':       'fillOpacity',\n        'fill-rule':          'fillRule',\n        'font-family':        'fontFamily',\n        'font-size':          'fontSize',\n        'font-style':         'fontStyle',\n        'font-weight':        'fontWeight',\n        'stroke-dasharray':   'strokeDashArray',\n        'stroke-linecap':     'strokeLineCap',\n        'stroke-linejoin':    'strokeLineJoin',\n        'stroke-miterlimit':  'strokeMiterLimit',\n        'stroke-opacity':     'strokeOpacity',\n        'stroke-width':       'strokeWidth',\n        'text-decoration':    'textDecoration',\n        'text-anchor':        'originX'\n      },\n\n      colorAttributes = {\n        stroke: 'strokeOpacity',\n        fill:   'fillOpacity'\n      };\n\n  fabric.cssRules = { };\n  fabric.gradientDefs = { };\n\n  function normalizeAttr(attr) {\n    // transform attribute names\n    if (attr in attributesMap) {\n      return attributesMap[attr];\n    }\n    return attr;\n  }\n\n  function normalizeValue(attr, value, parentAttributes, fontSize) {\n    var isArray = Object.prototype.toString.call(value) === '[object Array]',\n        parsed;\n\n    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\n      value = '';\n    }\n    else if (attr === 'strokeDashArray') {\n      value = value.replace(/,/g, ' ').split(/\\s+/).map(function(n) {\n        return parseFloat(n);\n      });\n    }\n    else if (attr === 'transformMatrix') {\n      if (parentAttributes && parentAttributes.transformMatrix) {\n        value = multiplyTransformMatrices(\n          parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\n      }\n      else {\n        value = fabric.parseTransformAttribute(value);\n      }\n    }\n    else if (attr === 'visible') {\n      value = (value === 'none' || value === 'hidden') ? false : true;\n      // display=none on parent element always takes precedence over child element\n      if (parentAttributes && parentAttributes.visible === false) {\n        value = false;\n      }\n    }\n    else if (attr === 'originX' /* text-anchor */) {\n      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\n    }\n    else {\n      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\n    }\n\n    return (!isArray && isNaN(parsed) ? value : parsed);\n  }\n\n  /**\n   * @private\n   * @param {Object} attributes Array of attributes to parse\n   */\n  function _setStrokeFillOpacity(attributes) {\n    for (var attr in colorAttributes) {\n\n      if (!attributes[attr] || typeof attributes[colorAttributes[attr]] === 'undefined') {\n        continue;\n      }\n\n      if (attributes[attr].indexOf('url(') === 0) {\n        continue;\n      }\n\n      var color = new fabric.Color(attributes[attr]);\n      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\n    }\n    return attributes;\n  }\n\n  /**\n   * Parses \"transform\" attribute, returning an array of values\n   * @static\n   * @function\n   * @memberOf fabric\n   * @param {String} attributeValue String containing attribute value\n   * @return {Array} Array of 6 elements representing transformation matrix\n   */\n  fabric.parseTransformAttribute = (function() {\n    function rotateMatrix(matrix, args) {\n      var angle = args[0];\n\n      matrix[0] = Math.cos(angle);\n      matrix[1] = Math.sin(angle);\n      matrix[2] = -Math.sin(angle);\n      matrix[3] = Math.cos(angle);\n    }\n\n    function scaleMatrix(matrix, args) {\n      var multiplierX = args[0],\n          multiplierY = (args.length === 2) ? args[1] : args[0];\n\n      matrix[0] = multiplierX;\n      matrix[3] = multiplierY;\n    }\n\n    function skewXMatrix(matrix, args) {\n      matrix[2] = Math.tan(fabric.util.degreesToRadians(args[0]));\n    }\n\n    function skewYMatrix(matrix, args) {\n      matrix[1] = Math.tan(fabric.util.degreesToRadians(args[0]));\n    }\n\n    function translateMatrix(matrix, args) {\n      matrix[4] = args[0];\n      if (args.length === 2) {\n        matrix[5] = args[1];\n      }\n    }\n\n    // identity matrix\n    var iMatrix = [\n          1, // a\n          0, // b\n          0, // c\n          1, // d\n          0, // e\n          0  // f\n        ],\n\n        // == begin transform regexp\n        number = fabric.reNum,\n\n        commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\n\n        skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n        skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n        rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + ')' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' +\n                  '\\\\s*\\\\))',\n\n        transform = '(?:' +\n                    matrix + '|' +\n                    translate + '|' +\n                    scale + '|' +\n                    rotate + '|' +\n                    skewX + '|' +\n                    skewY +\n                    ')',\n\n        transforms = '(?:' + transform + '(?:' + commaWsp + transform + ')*' + ')',\n\n        transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\n\n        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n        reTransformList = new RegExp(transformList),\n        // == end transform regexp\n\n        reTransform = new RegExp(transform, 'g');\n\n    return function(attributeValue) {\n\n      // start with identity matrix\n      var matrix = iMatrix.concat(),\n          matrices = [ ];\n\n      // return if no argument was given or\n      // an argument does not match transform attribute regexp\n      if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\n        return matrix;\n      }\n\n      attributeValue.replace(reTransform, function(match) {\n\n        var m = new RegExp(transform).exec(match).filter(function (match) {\n              return (match !== '' && match != null);\n            }),\n            operation = m[1],\n            args = m.slice(2).map(parseFloat);\n\n        switch (operation) {\n          case 'translate':\n            translateMatrix(matrix, args);\n            break;\n          case 'rotate':\n            args[0] = fabric.util.degreesToRadians(args[0]);\n            rotateMatrix(matrix, args);\n            break;\n          case 'scale':\n            scaleMatrix(matrix, args);\n            break;\n          case 'skewX':\n            skewXMatrix(matrix, args);\n            break;\n          case 'skewY':\n            skewYMatrix(matrix, args);\n            break;\n          case 'matrix':\n            matrix = args;\n            break;\n        }\n\n        // snapshot current matrix into matrices array\n        matrices.push(matrix.concat());\n        // reset\n        matrix = iMatrix.concat();\n      });\n\n      var combinedMatrix = matrices[0];\n      while (matrices.length > 1) {\n        matrices.shift();\n        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\n      }\n      return combinedMatrix;\n    };\n  })();\n\n  /**\n   * @private\n   */\n  function parseStyleString(style, oStyle) {\n    var attr, value;\n    style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\n      var pair = chunk.split(':');\n\n      attr = normalizeAttr(pair[0].trim().toLowerCase());\n      value = normalizeValue(attr, pair[1].trim());\n\n      oStyle[attr] = value;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function parseStyleObject(style, oStyle) {\n    var attr, value;\n    for (var prop in style) {\n      if (typeof style[prop] === 'undefined') {\n        continue;\n      }\n\n      attr = normalizeAttr(prop.toLowerCase());\n      value = normalizeValue(attr, style[prop]);\n\n      oStyle[attr] = value;\n    }\n  }\n\n  /**\n   * @private\n   */\n  function getGlobalStylesForElement(element, svgUid) {\n    var styles = { };\n    for (var rule in fabric.cssRules[svgUid]) {\n      if (elementMatchesRule(element, rule.split(' '))) {\n        for (var property in fabric.cssRules[svgUid][rule]) {\n          styles[property] = fabric.cssRules[svgUid][rule][property];\n        }\n      }\n    }\n    return styles;\n  }\n\n  /**\n   * @private\n   */\n  function elementMatchesRule(element, selectors) {\n    var firstMatching, parentMatching = true;\n    //start from rightmost selector.\n    firstMatching = selectorMatches(element, selectors.pop());\n    if (firstMatching && selectors.length) {\n      parentMatching = doesSomeParentMatch(element, selectors);\n    }\n    return firstMatching && parentMatching && (selectors.length === 0);\n  }\n\n  function doesSomeParentMatch(element, selectors) {\n    var selector, parentMatching = true;\n    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\n      if (parentMatching) {\n        selector = selectors.pop();\n      }\n      element = element.parentNode;\n      parentMatching = selectorMatches(element, selector);\n    }\n    return selectors.length === 0;\n  }\n\n  /**\n   * @private\n   */\n  function selectorMatches(element, selector) {\n    var nodeName = element.nodeName,\n        classNames = element.getAttribute('class'),\n        id = element.getAttribute('id'), matcher;\n    // i check if a selector matches slicing away part from it.\n    // if i get empty string i should match\n    matcher = new RegExp('^' + nodeName, 'i');\n    selector = selector.replace(matcher, '');\n    if (id && selector.length) {\n      matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\n      selector = selector.replace(matcher, '');\n    }\n    if (classNames && selector.length) {\n      classNames = classNames.split(' ');\n      for (var i = classNames.length; i--;) {\n        matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\n        selector = selector.replace(matcher, '');\n      }\n    }\n    return selector.length === 0;\n  }\n\n  /**\n   * @private\n   * to support IE8 missing getElementById on SVGdocument\n   */\n  function elementById(doc, id) {\n    var el;\n    doc.getElementById && (el = doc.getElementById(id));\n    if (el) {\n      return el;\n    }\n    var node, i, idAttr, nodelist = doc.getElementsByTagName('*');\n    for (i = 0; i < nodelist.length; i++) {\n      node = nodelist[i];\n      if (idAttr === node.getAttribute('id')) {\n        return node;\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  function parseUseDirectives(doc) {\n    var nodelist = doc.getElementsByTagName('use'), i = 0;\n    while (nodelist.length && i < nodelist.length) {\n      var el = nodelist[i],\n          xlink = el.getAttribute('xlink:href').substr(1),\n          x = el.getAttribute('x') || 0,\n          y = el.getAttribute('y') || 0,\n          el2 = elementById(doc, xlink).cloneNode(true),\n          currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\n          parentNode, oldLength = nodelist.length, attr, j, attrs, l;\n\n      applyViewboxTransform(el2);\n      if (/^svg$/i.test(el2.nodeName)) {\n        var el3 = el2.ownerDocument.createElement('g');\n        for (j = 0, attrs = el2.attributes, l = attrs.length; j < l; j++) {\n          attr = attrs.item(j);\n          el3.setAttribute(attr.nodeName, attr.nodeValue);\n        }\n        while (el2.firstChild != null) {\n          el3.appendChild(el2.firstChild);\n        }\n        el2 = el3;\n      }\n\n      for (j = 0, attrs = el.attributes, l = attrs.length; j < l; j++) {\n        attr = attrs.item(j);\n        if (attr.nodeName === 'x' || attr.nodeName === 'y' || attr.nodeName === 'xlink:href') {\n          continue;\n        }\n\n        if (attr.nodeName === 'transform') {\n          currentTrans = attr.nodeValue + ' ' + currentTrans;\n        }\n        else {\n          el2.setAttribute(attr.nodeName, attr.nodeValue);\n        }\n      }\n\n      el2.setAttribute('transform', currentTrans);\n      el2.setAttribute('instantiated_by_use', '1');\n      el2.removeAttribute('id');\n      parentNode = el.parentNode;\n      parentNode.replaceChild(el2, el);\n      // some browsers do not shorten nodelist after replaceChild (IE8)\n      if (nodelist.length === oldLength) {\n        i++;\n      }\n    }\n  }\n\n  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n  // matches, e.g.: +14.56e-12, etc.\n  var reViewBoxAttrValue = new RegExp(\n    '^' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\n    '$'\n  );\n\n  /**\n   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n   */\n  function applyViewboxTransform(element) {\n\n    var viewBoxAttr = element.getAttribute('viewBox'),\n        scaleX = 1,\n        scaleY = 1,\n        minX = 0,\n        minY = 0,\n        viewBoxWidth, viewBoxHeight, matrix, el,\n        widthAttr = element.getAttribute('width'),\n        heightAttr = element.getAttribute('height'),\n        missingViewBox = (!viewBoxAttr || !reViewBoxTagNames.test(element.tagName)\n                           || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\n        missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\n        toBeParsed = missingViewBox && missingDimAttr,\n        parsedDim = { };\n\n    parsedDim.width = 0;\n    parsedDim.height = 0;\n    parsedDim.toBeParsed = toBeParsed;\n\n    if (toBeParsed) {\n      return parsedDim;\n    }\n\n    if (missingViewBox) {\n      parsedDim.width = parseUnit(widthAttr);\n      parsedDim.height = parseUnit(heightAttr);\n      return parsedDim;\n    }\n\n    minX = -parseFloat(viewBoxAttr[1]),\n    minY = -parseFloat(viewBoxAttr[2]),\n    viewBoxWidth = parseFloat(viewBoxAttr[3]),\n    viewBoxHeight = parseFloat(viewBoxAttr[4]);\n\n    if (!missingDimAttr) {\n      parsedDim.width = parseUnit(widthAttr);\n      parsedDim.height = parseUnit(heightAttr);\n      scaleX = parsedDim.width / viewBoxWidth;\n      scaleY = parsedDim.height / viewBoxHeight;\n    }\n    else {\n      parsedDim.width = viewBoxWidth;\n      parsedDim.height = viewBoxHeight;\n    }\n\n    // default is to preserve aspect ratio\n    // preserveAspectRatio attribute to be implemented\n    scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\n\n    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0) {\n      return parsedDim;\n    }\n\n    matrix = ' matrix(' + scaleX +\n                  ' 0' +\n                  ' 0 ' +\n                  scaleY + ' ' +\n                  (minX * scaleX) + ' ' +\n                  (minY * scaleY) + ') ';\n\n    if (element.tagName === 'svg') {\n      el = element.ownerDocument.createElement('g');\n      while (element.firstChild != null) {\n        el.appendChild(element.firstChild);\n      }\n      element.appendChild(el);\n    }\n    else {\n      el = element;\n      matrix = el.getAttribute('transform') + matrix;\n    }\n\n    el.setAttribute('transform', matrix);\n    return parsedDim;\n  }\n\n  /**\n   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n   * @static\n   * @function\n   * @memberOf fabric\n   * @param {SVGDocument} doc SVG document to parse\n   * @param {Function} callback Callback to call when parsing is finished; It's being passed an array of elements (parsed from a document).\n   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n   */\n  fabric.parseSVGDocument = (function() {\n\n    function hasAncestorWithNodeName(element, nodeName) {\n      while (element && (element = element.parentNode)) {\n        if (nodeName.test(element.nodeName) && !element.getAttribute('instantiated_by_use')) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    return function(doc, callback, reviver) {\n      if (!doc) {\n        return;\n      }\n\n      parseUseDirectives(doc);\n\n      var startTime = new Date(),\n          svgUid =  fabric.Object.__uid++,\n          options = applyViewboxTransform(doc),\n          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\n\n      options.svgUid = svgUid;\n\n      if (descendants.length === 0 && fabric.isLikelyNode) {\n        // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\n        // https://github.com/ajaxorg/node-o3-xml/issues/21\n        descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\n        var arr = [ ];\n        for (var i = 0, len = descendants.length; i < len; i++) {\n          arr[i] = descendants[i];\n        }\n        descendants = arr;\n      }\n\n      var elements = descendants.filter(function(el) {\n        applyViewboxTransform(el);\n        return reAllowedSVGTagNames.test(el.tagName) &&\n              !hasAncestorWithNodeName(el, reNotAllowedAncestors); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n      });\n\n      if (!elements || (elements && !elements.length)) {\n        callback && callback([], {});\n        return;\n      }\n\n      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\n      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\n      // Precedence of rules:   style > class > attribute\n      fabric.parseElements(elements, function(instances) {\n        fabric.documentParsingTime = new Date() - startTime;\n        if (callback) {\n          callback(instances, options);\n        }\n      }, clone(options), reviver);\n    };\n  })();\n\n  /**\n   * Used for caching SVG documents (loaded via `fabric.Canvas#loadSVGFromURL`)\n   * @namespace\n   */\n  var svgCache = {\n\n    /**\n     * @param {String} name\n     * @param {Function} callback\n     */\n    has: function (name, callback) {\n      callback(false);\n    },\n\n    get: function () {\n      /* NOOP */\n    },\n\n    set: function () {\n      /* NOOP */\n    }\n  };\n\n  /**\n   * @private\n   */\n  function _enlivenCachedObject(cachedObject) {\n\n    var objects = cachedObject.objects,\n        options = cachedObject.options;\n\n    objects = objects.map(function (o) {\n      return fabric[capitalize(o.type)].fromObject(o);\n    });\n\n    return ({ objects: objects, options: options });\n  }\n\n  /**\n   * @private\n   */\n  function _createSVGPattern(markup, canvas, property) {\n    if (canvas[property] && canvas[property].toSVG) {\n      markup.push(\n        '<pattern x=\"0\" y=\"0\" id=\"', property, 'Pattern\" ',\n          'width=\"', canvas[property].source.width,\n          '\" height=\"', canvas[property].source.height,\n          '\" patternUnits=\"userSpaceOnUse\">',\n        '<image x=\"0\" y=\"0\" ',\n        'width=\"', canvas[property].source.width,\n        '\" height=\"', canvas[property].source.height,\n        '\" xlink:href=\"', canvas[property].source.src,\n        '\"></image></pattern>'\n      );\n    }\n  }\n\n  var reFontDeclaration = new RegExp(\n    '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n      fabric.reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\n\n  extend(fabric, {\n    /**\n     * Parses a short font declaration, building adding its properties to a style object\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {String} value font declaration\n     * @param {Object} oStyle definition\n     */\n    parseFontDeclaration: function(value, oStyle) {\n      var match = value.match(reFontDeclaration);\n\n      if (!match) {\n        return;\n      }\n      var fontStyle = match[1],\n          // font variant is not used\n          // fontVariant = match[2],\n          fontWeight = match[3],\n          fontSize = match[4],\n          lineHeight = match[5],\n          fontFamily = match[6];\n\n      if (fontStyle) {\n        oStyle.fontStyle = fontStyle;\n      }\n      if (fontWeight) {\n        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\n      }\n      if (fontSize) {\n        oStyle.fontSize = parseUnit(fontSize);\n      }\n      if (fontFamily) {\n        oStyle.fontFamily = fontFamily;\n      }\n      if (lineHeight) {\n        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n      }\n    },\n\n    /**\n     * Parses an SVG document, returning all of the gradient declarations found in it\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n     */\n    getGradientDefs: function(doc) {\n      var linearGradientEls = doc.getElementsByTagName('linearGradient'),\n          radialGradientEls = doc.getElementsByTagName('radialGradient'),\n          el, i, j = 0, id, xlink, elList = [ ],\n          gradientDefs = { }, idsToXlinkMap = { };\n\n      elList.length = linearGradientEls.length + radialGradientEls.length;\n      i = linearGradientEls.length;\n      while (i--) {\n        elList[j++] = linearGradientEls[i];\n      }\n      i = radialGradientEls.length;\n      while (i--) {\n        elList[j++] = radialGradientEls[i];\n      }\n\n      while (j--) {\n        el = elList[j];\n        xlink = el.getAttribute('xlink:href');\n        id = el.getAttribute('id');\n        if (xlink) {\n          idsToXlinkMap[id] = xlink.substr(1);\n        }\n        gradientDefs[id] = el;\n      }\n\n      for (id in idsToXlinkMap) {\n        var el2 = gradientDefs[idsToXlinkMap[id]].cloneNode(true);\n        el = gradientDefs[id];\n        while (el2.firstChild) {\n          el.appendChild(el2.firstChild);\n        }\n      }\n      return gradientDefs;\n    },\n\n    /**\n     * Returns an object of attributes' name/value, given element and an array of attribute names;\n     * Parses parent \"g\" nodes recursively upwards.\n     * @static\n     * @memberOf fabric\n     * @param {DOMElement} element Element to parse\n     * @param {Array} attributes Array of attributes to parse\n     * @return {Object} object containing parsed attributes' names/values\n     */\n    parseAttributes: function(element, attributes, svgUid) {\n\n      if (!element) {\n        return;\n      }\n\n      var value,\n          parentAttributes = { },\n          fontSize;\n\n      if (typeof svgUid === 'undefined') {\n        svgUid = element.getAttribute('svgUid');\n      }\n      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n      if (element.parentNode && reAllowedParents.test(element.parentNode.nodeName)) {\n        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\n      }\n      fontSize = (parentAttributes && parentAttributes.fontSize ) ||\n                 element.getAttribute('font-size') || fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\n      var ownAttributes = attributes.reduce(function(memo, attr) {\n        value = element.getAttribute(attr);\n        if (value) {\n          attr = normalizeAttr(attr);\n          value = normalizeValue(attr, value, parentAttributes, fontSize);\n\n          memo[attr] = value;\n        }\n        return memo;\n      }, { });\n\n      // add values parsed from style, which take precedence over attributes\n      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n      ownAttributes = extend(ownAttributes,\n        extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));\n      if (ownAttributes.font) {\n        fabric.parseFontDeclaration(ownAttributes.font, ownAttributes);\n      }\n      return _setStrokeFillOpacity(extend(parentAttributes, ownAttributes));\n    },\n\n    /**\n     * Transforms an array of svg elements to corresponding fabric.* instances\n     * @static\n     * @memberOf fabric\n     * @param {Array} elements Array of elements to parse\n     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\n     * @param {Object} [options] Options object\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     */\n    parseElements: function(elements, callback, options, reviver) {\n      new fabric.ElementsParser(elements, callback, options, reviver).parse();\n    },\n\n    /**\n     * Parses \"style\" attribute, retuning an object with values\n     * @static\n     * @memberOf fabric\n     * @param {SVGElement} element Element to parse\n     * @return {Object} Objects with values parsed from style attribute of an element\n     */\n    parseStyleAttribute: function(element) {\n      var oStyle = { },\n          style = element.getAttribute('style');\n\n      if (!style) {\n        return oStyle;\n      }\n\n      if (typeof style === 'string') {\n        parseStyleString(style, oStyle);\n      }\n      else {\n        parseStyleObject(style, oStyle);\n      }\n\n      return oStyle;\n    },\n\n    /**\n     * Parses \"points\" attribute, returning an array of values\n     * @static\n     * @memberOf fabric\n     * @param {String} points points attribute string\n     * @return {Array} array of points\n     */\n    parsePointsAttribute: function(points) {\n\n      // points attribute is required and must not be empty\n      if (!points) {\n        return null;\n      }\n\n      // replace commas with whitespace and remove bookending whitespace\n      points = points.replace(/,/g, ' ').trim();\n\n      points = points.split(/\\s+/);\n      var parsedPoints = [ ], i, len;\n\n      i = 0;\n      len = points.length;\n      for (; i < len; i+=2) {\n        parsedPoints.push({\n          x: parseFloat(points[i]),\n          y: parseFloat(points[i + 1])\n        });\n      }\n\n      // odd number of points is an error\n      // if (parsedPoints.length % 2 !== 0) {\n      //   return null;\n      // }\n\n      return parsedPoints;\n    },\n\n    /**\n     * Returns CSS rules for a given SVG document\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @return {Object} CSS rules of this document\n     */\n    getCSSRules: function(doc) {\n      var styles = doc.getElementsByTagName('style'),\n          allRules = { }, rules;\n\n      // very crude parsing of style contents\n      for (var i = 0, len = styles.length; i < len; i++) {\n        var styleContents = styles[i].textContent;\n\n        // remove comments\n        styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n        if (styleContents.trim() === '') {\n          continue;\n        }\n        rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n        rules = rules.map(function(rule) { return rule.trim(); });\n\n        rules.forEach(function(rule) {\n\n          var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\n          ruleObj = { }, declaration = match[2].trim(),\n          propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\n\n          for (var i = 0, len = propertyValuePairs.length; i < len; i++) {\n            var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\n                property = normalizeAttr(pair[0]),\n                value = normalizeValue(property, pair[1], pair[0]);\n            ruleObj[property] = value;\n          }\n          rule = match[1];\n          rule.split(',').forEach(function(_rule) {\n            _rule = _rule.replace(/^svg/i, '').trim();\n            if (_rule === '') {\n              return;\n            }\n            allRules[_rule] = fabric.util.object.clone(ruleObj);\n          });\n        });\n      }\n      return allRules;\n    },\n\n    /**\n     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects. Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n     * @memberOf fabric\n     * @param {String} url\n     * @param {Function} callback\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     */\n    loadSVGFromURL: function(url, callback, reviver) {\n\n      url = url.replace(/^\\n\\s*/, '').trim();\n      svgCache.has(url, function (hasUrl) {\n        if (hasUrl) {\n          svgCache.get(url, function (value) {\n            var enlivedRecord = _enlivenCachedObject(value);\n            callback(enlivedRecord.objects, enlivedRecord.options);\n          });\n        }\n        else {\n          new fabric.util.request(url, {\n            method: 'get',\n            onComplete: onComplete\n          });\n        }\n      });\n\n      function onComplete(r) {\n\n        var xml = r.responseXML;\n        if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\n          xml = new ActiveXObject('Microsoft.XMLDOM');\n          xml.async = 'false';\n          //IE chokes on DOCTYPE\n          xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n        }\n        if (!xml || !xml.documentElement) {\n          return;\n        }\n\n        fabric.parseSVGDocument(xml.documentElement, function (results, options) {\n          svgCache.set(url, {\n            objects: fabric.util.array.invoke(results, 'toObject'),\n            options: options\n          });\n          callback(results, options);\n        }, reviver);\n      }\n    },\n\n    /**\n     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n     * @memberOf fabric\n     * @param {String} string\n     * @param {Function} callback\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     */\n    loadSVGFromString: function(string, callback, reviver) {\n      string = string.trim();\n      var doc;\n      if (typeof DOMParser !== 'undefined') {\n        var parser = new DOMParser();\n        if (parser && parser.parseFromString) {\n          doc = parser.parseFromString(string, 'text/xml');\n        }\n      }\n      else if (fabric.window.ActiveXObject) {\n        doc = new ActiveXObject('Microsoft.XMLDOM');\n        doc.async = 'false';\n        // IE chokes on DOCTYPE\n        doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n      }\n\n      fabric.parseSVGDocument(doc.documentElement, function (results, options) {\n        callback(results, options);\n      }, reviver);\n    },\n\n    /**\n     * Creates markup containing SVG font faces\n     * @param {Array} objects Array of fabric objects\n     * @return {String}\n     */\n    createSVGFontFacesMarkup: function(objects) {\n      var markup = '';\n\n      for (var i = 0, len = objects.length; i < len; i++) {\n        if (objects[i].type !== 'text' || !objects[i].path) {\n          continue;\n        }\n\n        markup += [\n          //jscs:disable validateIndentation\n          '@font-face {',\n            'font-family: ', objects[i].fontFamily, '; ',\n            'src: url(\\'', objects[i].path, '\\')',\n          '}'\n          //jscs:enable validateIndentation\n        ].join('');\n      }\n\n      if (markup) {\n        markup = [\n          //jscs:disable validateIndentation\n          '<style type=\"text/css\">',\n            '<![CDATA[',\n              markup,\n            ']]>',\n          '</style>'\n          //jscs:enable validateIndentation\n        ].join('');\n      }\n\n      return markup;\n    },\n\n    /**\n     * Creates markup containing SVG referenced elements like patterns, gradients etc.\n     * @param {fabric.Canvas} canvas instance of fabric.Canvas\n     * @return {String}\n     */\n    createSVGRefElementsMarkup: function(canvas) {\n      var markup = [ ];\n\n      _createSVGPattern(markup, canvas, 'backgroundColor');\n      _createSVGPattern(markup, canvas, 'overlayColor');\n\n      return markup.join('');\n    }\n  });\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\nfabric.ElementsParser = function(elements, callback, options, reviver) {\n  this.elements = elements;\n  this.callback = callback;\n  this.options = options;\n  this.reviver = reviver;\n  this.svgUid = (options && options.svgUid) || 0;\n};\n\nfabric.ElementsParser.prototype.parse = function() {\n  this.instances = new Array(this.elements.length);\n  this.numElements = this.elements.length;\n\n  this.createObjects();\n};\n\nfabric.ElementsParser.prototype.createObjects = function() {\n  for (var i = 0, len = this.elements.length; i < len; i++) {\n    this.elements[i].setAttribute('svgUid', this.svgUid);\n    (function(_this, i) {\n      setTimeout(function() {\n        _this.createObject(_this.elements[i], i);\n      }, 0);\n    })(this, i);\n  }\n};\n\nfabric.ElementsParser.prototype.createObject = function(el, index) {\n  var klass = fabric[fabric.util.string.capitalize(el.tagName)];\n  if (klass && klass.fromElement) {\n    try {\n      this._createObject(klass, el, index);\n    }\n    catch (err) {\n      fabric.log(err);\n    }\n  }\n  else {\n    this.checkIfDone();\n  }\n};\n\nfabric.ElementsParser.prototype._createObject = function(klass, el, index) {\n  if (klass.async) {\n    klass.fromElement(el, this.createCallback(index, el), this.options);\n  }\n  else {\n    var obj = klass.fromElement(el, this.options);\n    this.resolveGradient(obj, 'fill');\n    this.resolveGradient(obj, 'stroke');\n    this.reviver && this.reviver(el, obj);\n    this.instances[index] = obj;\n    this.checkIfDone();\n  }\n};\n\nfabric.ElementsParser.prototype.createCallback = function(index, el) {\n  var _this = this;\n  return function(obj) {\n    _this.resolveGradient(obj, 'fill');\n    _this.resolveGradient(obj, 'stroke');\n    _this.reviver && _this.reviver(el, obj);\n    _this.instances[index] = obj;\n    _this.checkIfDone();\n  };\n};\n\nfabric.ElementsParser.prototype.resolveGradient = function(obj, property) {\n\n  var instanceFillValue = obj.get(property);\n  if (!(/^url\\(/).test(instanceFillValue)) {\n    return;\n  }\n  var gradientId = instanceFillValue.slice(5, instanceFillValue.length - 1);\n  if (fabric.gradientDefs[this.svgUid][gradientId]) {\n    obj.set(property,\n      fabric.Gradient.fromElement(fabric.gradientDefs[this.svgUid][gradientId], obj));\n  }\n};\n\nfabric.ElementsParser.prototype.checkIfDone = function() {\n  if (--this.numElements === 0) {\n    this.instances = this.instances.filter(function(el) {\n      return el != null;\n    });\n    this.callback(this.instances);\n  }\n};\n\n\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Point) {\n    fabric.warn('fabric.Point is already defined');\n    return;\n  }\n\n  fabric.Point = Point;\n\n  /**\n   * Point class\n   * @class fabric.Point\n   * @memberOf fabric\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @return {fabric.Point} thisArg\n   */\n  function Point(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  Point.prototype = /** @lends fabric.Point.prototype */ {\n\n    constructor: Point,\n\n    /**\n     * Adds another point to this one and returns another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point instance with added values\n     */\n    add: function (that) {\n      return new Point(this.x + that.x, this.y + that.y);\n    },\n\n    /**\n     * Adds another point to this one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     */\n    addEquals: function (that) {\n      this.x += that.x;\n      this.y += that.y;\n      return this;\n    },\n\n    /**\n     * Adds value to this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point} new Point with added value\n     */\n    scalarAdd: function (scalar) {\n      return new Point(this.x + scalar, this.y + scalar);\n    },\n\n    /**\n     * Adds value to this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     */\n    scalarAddEquals: function (scalar) {\n      this.x += scalar;\n      this.y += scalar;\n      return this;\n    },\n\n    /**\n     * Subtracts another point from this point and returns a new one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point object with subtracted values\n     */\n    subtract: function (that) {\n      return new Point(this.x - that.x, this.y - that.y);\n    },\n\n    /**\n     * Subtracts another point from this point\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     */\n    subtractEquals: function (that) {\n      this.x -= that.x;\n      this.y -= that.y;\n      return this;\n    },\n\n    /**\n     * Subtracts value from this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    scalarSubtract: function (scalar) {\n      return new Point(this.x - scalar, this.y - scalar);\n    },\n\n    /**\n     * Subtracts value from this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     */\n    scalarSubtractEquals: function (scalar) {\n      this.x -= scalar;\n      this.y -= scalar;\n      return this;\n    },\n\n    /**\n     * Miltiplies this point by a value and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    multiply: function (scalar) {\n      return new Point(this.x * scalar, this.y * scalar);\n    },\n\n    /**\n     * Miltiplies this point by a value\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     */\n    multiplyEquals: function (scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      return this;\n    },\n\n    /**\n     * Divides this point by a value and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    divide: function (scalar) {\n      return new Point(this.x / scalar, this.y / scalar);\n    },\n\n    /**\n     * Divides this point by a value\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     */\n    divideEquals: function (scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      return this;\n    },\n\n    /**\n     * Returns true if this point is equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    eq: function (that) {\n      return (this.x === that.x && this.y === that.y);\n    },\n\n    /**\n     * Returns true if this point is less than another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lt: function (that) {\n      return (this.x < that.x && this.y < that.y);\n    },\n\n    /**\n     * Returns true if this point is less than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lte: function (that) {\n      return (this.x <= that.x && this.y <= that.y);\n    },\n\n    /**\n\n     * Returns true if this point is greater another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gt: function (that) {\n      return (this.x > that.x && this.y > that.y);\n    },\n\n    /**\n     * Returns true if this point is greater than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gte: function (that) {\n      return (this.x >= that.x && this.y >= that.y);\n    },\n\n    /**\n     * Returns new point which is the result of linear interpolation with this one and another one\n     * @param {fabric.Point} that\n     * @param {Number} t\n     * @return {fabric.Point}\n     */\n    lerp: function (that, t) {\n      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n    },\n\n    /**\n     * Returns distance from this point and another one\n     * @param {fabric.Point} that\n     * @return {Number}\n     */\n    distanceFrom: function (that) {\n      var dx = this.x - that.x,\n          dy = this.y - that.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /**\n     * Returns the point between this point and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    midPointFrom: function (that) {\n      return new Point(this.x + (that.x - this.x)/2, this.y + (that.y - this.y)/2);\n    },\n\n    /**\n     * Returns a new point which is the min of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    min: function (that) {\n      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n    },\n\n    /**\n     * Returns a new point which is the max of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    max: function (that) {\n      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n    },\n\n    /**\n     * Returns string representation of this point\n     * @return {String}\n     */\n    toString: function () {\n      return this.x + ',' + this.y;\n    },\n\n    /**\n     * Sets x/y of this point\n     * @param {Number} x\n     * @param {Number} y\n     */\n    setXY: function (x, y) {\n      this.x = x;\n      this.y = y;\n    },\n\n    /**\n     * Sets x/y of this point from another point\n     * @param {fabric.Point} that\n     */\n    setFromPoint: function (that) {\n      this.x = that.x;\n      this.y = that.y;\n    },\n\n    /**\n     * Swaps x/y of this point and another point\n     * @param {fabric.Point} that\n     */\n    swap: function (that) {\n      var x = this.x,\n          y = this.y;\n      this.x = that.x;\n      this.y = that.y;\n      that.x = x;\n      that.y = y;\n    }\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Intersection) {\n    fabric.warn('fabric.Intersection is already defined');\n    return;\n  }\n\n  /**\n   * Intersection class\n   * @class fabric.Intersection\n   * @memberOf fabric\n   * @constructor\n   */\n  function Intersection(status) {\n    this.status = status;\n    this.points = [];\n  }\n\n  fabric.Intersection = Intersection;\n\n  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n\n    /**\n     * Appends a point to intersection\n     * @param {fabric.Point} point\n     */\n    appendPoint: function (point) {\n      this.points.push(point);\n    },\n\n    /**\n     * Appends points to intersection\n     * @param {Array} points\n     */\n    appendPoints: function (points) {\n      this.points = this.points.concat(points);\n    }\n  };\n\n  /**\n   * Checks if one line intersects another\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {fabric.Point} b1\n   * @param {fabric.Point} b2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\n    var result,\n        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n    if (uB !== 0) {\n      var ua = uaT / uB,\n          ub = ubT / uB;\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n        result = new Intersection('Intersection');\n        result.points.push(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n      }\n      else {\n        result = new Intersection();\n      }\n    }\n    else {\n      if (uaT === 0 || ubT === 0) {\n        result = new Intersection('Coincident');\n      }\n      else {\n        result = new Intersection('Parallel');\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Checks if line intersects polygon\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {Array} points\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n    var result = new Intersection(),\n        length = points.length;\n\n    for (var i = 0; i < length; i++) {\n      var b1 = points[i],\n          b2 = points[(i + 1) % length],\n          inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects another polygon\n   * @static\n   * @param {Array} points1\n   * @param {Array} points2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\n    var result = new Intersection(),\n        length = points1.length;\n\n    for (var i = 0; i < length; i++) {\n      var a1 = points1[i],\n          a2 = points1[(i + 1) % length],\n          inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @param {Array} points\n   * @param {Number} r1\n   * @param {Number} r2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\n    var min = r1.min(r2),\n        max = r1.max(r2),\n        topRight = new fabric.Point(max.x, min.y),\n        bottomLeft = new fabric.Point(min.x, max.y),\n        inter1 = Intersection.intersectLinePolygon(min, topRight, points),\n        inter2 = Intersection.intersectLinePolygon(topRight, max, points),\n        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\n        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\n        result = new Intersection();\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Color) {\n    fabric.warn('fabric.Color is already defined.');\n    return;\n  }\n\n  /**\n   * Color class\n   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n   *\n   * @class fabric.Color\n   * @param {String} color optional in hex or rgb(a) format\n   * @return {fabric.Color} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n   */\n  function Color(color) {\n    if (!color) {\n      this.setSource([0, 0, 0, 1]);\n    }\n    else {\n      this._tryParsingColor(color);\n    }\n  }\n\n  fabric.Color = Color;\n\n  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n\n    /**\n     * @private\n     * @param {String|Array} color Color value to parse\n     */\n    _tryParsingColor: function(color) {\n      var source;\n\n      if (color in Color.colorNameMap) {\n        color = Color.colorNameMap[color];\n      }\n\n      if (color === 'transparent') {\n        this.setSource([255, 255, 255, 0]);\n        return;\n      }\n\n      source = Color.sourceFromHex(color);\n\n      if (!source) {\n        source = Color.sourceFromRgb(color);\n      }\n      if (!source) {\n        source = Color.sourceFromHsl(color);\n      }\n      if (source) {\n        this.setSource(source);\n      }\n    },\n\n    /**\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n     * @private\n     * @param {Number} r Red color value\n     * @param {Number} g Green color value\n     * @param {Number} b Blue color value\n     * @return {Array} Hsl color\n     */\n    _rgbToHsl: function(r, g, b) {\n      r /= 255, g /= 255, b /= 255;\n\n      var h, s, l,\n          max = fabric.util.array.max([r, g, b]),\n          min = fabric.util.array.min([r, g, b]);\n\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0; // achromatic\n      }\n      else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n            break;\n        }\n        h /= 6;\n      }\n\n      return [\n        Math.round(h * 360),\n        Math.round(s * 100),\n        Math.round(l * 100)\n      ];\n    },\n\n    /**\n     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @return {Array}\n     */\n    getSource: function() {\n      return this._source;\n    },\n\n    /**\n     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @param {Array} source\n     */\n    setSource: function(source) {\n      this._source = source;\n    },\n\n    /**\n     * Returns color represenation in RGB format\n     * @return {String} ex: rgb(0-255,0-255,0-255)\n     */\n    toRgb: function() {\n      var source = this.getSource();\n      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\n    },\n\n    /**\n     * Returns color represenation in RGBA format\n     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n     */\n    toRgba: function() {\n      var source = this.getSource();\n      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\n    },\n\n    /**\n     * Returns color represenation in HSL format\n     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n     */\n    toHsl: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\n    },\n\n    /**\n     * Returns color represenation in HSLA format\n     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n     */\n    toHsla: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\n    },\n\n    /**\n     * Returns color represenation in HEX format\n     * @return {String} ex: FF5555\n     */\n    toHex: function() {\n      var source = this.getSource(), r, g, b;\n\n      r = source[0].toString(16);\n      r = (r.length === 1) ? ('0' + r) : r;\n\n      g = source[1].toString(16);\n      g = (g.length === 1) ? ('0' + g) : g;\n\n      b = source[2].toString(16);\n      b = (b.length === 1) ? ('0' + b) : b;\n\n      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n    },\n\n    /**\n     * Gets value of alpha channel for this color\n     * @return {Number} 0-1\n     */\n    getAlpha: function() {\n      return this.getSource()[3];\n    },\n\n    /**\n     * Sets value of alpha channel for this color\n     * @param {Number} alpha Alpha value 0-1\n     * @return {fabric.Color} thisArg\n     */\n    setAlpha: function(alpha) {\n      var source = this.getSource();\n      source[3] = alpha;\n      this.setSource(source);\n      return this;\n    },\n\n    /**\n     * Transforms color to its grayscale representation\n     * @return {fabric.Color} thisArg\n     */\n    toGrayscale: function() {\n      var source = this.getSource(),\n          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\n          currentAlpha = source[3];\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Transforms color to its black and white representation\n     * @param {Number} threshold\n     * @return {fabric.Color} thisArg\n     */\n    toBlackWhite: function(threshold) {\n      var source = this.getSource(),\n          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\n          currentAlpha = source[3];\n\n      threshold = threshold || 127;\n\n      average = (Number(average) < Number(threshold)) ? 0 : 255;\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Overlays color with another color\n     * @param {String|fabric.Color} otherColor\n     * @return {fabric.Color} thisArg\n     */\n    overlayWith: function(otherColor) {\n      if (!(otherColor instanceof Color)) {\n        otherColor = new Color(otherColor);\n      }\n\n      var result = [],\n          alpha = this.getAlpha(),\n          otherAlpha = 0.5,\n          source = this.getSource(),\n          otherSource = otherColor.getSource();\n\n      for (var i = 0; i < 3; i++) {\n        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\n      }\n\n      result[3] = alpha;\n      this.setSource(result);\n      return this;\n    }\n  };\n\n  /**\n   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/;\n\n  /**\n   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/;\n\n  /**\n   * Regex matching color in HEX format (ex: #FF5555, 010155, aff)\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHex = /^#?([0-9a-f]{6}|[0-9a-f]{3})$/i;\n\n  /**\n   * Map of the 17 basic color names with HEX code\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   * @see: http://www.w3.org/TR/CSS2/syndata.html#color-units\n   */\n  fabric.Color.colorNameMap = {\n    aqua:    '#00FFFF',\n    black:   '#000000',\n    blue:    '#0000FF',\n    fuchsia: '#FF00FF',\n    gray:    '#808080',\n    green:   '#008000',\n    lime:    '#00FF00',\n    maroon:  '#800000',\n    navy:    '#000080',\n    olive:   '#808000',\n    orange:  '#FFA500',\n    purple:  '#800080',\n    red:     '#FF0000',\n    silver:  '#C0C0C0',\n    teal:    '#008080',\n    white:   '#FFFFFF',\n    yellow:  '#FFFF00'\n  };\n\n  /**\n   * @private\n   * @param {Number} p\n   * @param {Number} q\n   * @param {Number} t\n   * @return {Number}\n   */\n  function hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1/6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1/2) {\n      return q;\n    }\n    if (t < 2/3) {\n      return p + (q - p) * (2/3 - t) * 6;\n    }\n    return p;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgb = function(color) {\n    return Color.fromSource(Color.sourceFromRgb(color));\n  };\n\n  /**\n   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromRgb = function(color) {\n    var match = color.match(Color.reRGBa);\n    if (match) {\n      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\n          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\n          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n\n      return [\n        parseInt(r, 10),\n        parseInt(g, 10),\n        parseInt(b, 10),\n        match[4] ? parseFloat(match[4]) : 1\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgba = Color.fromRgb;\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf fabric.Color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsl = function(color) {\n    return Color.fromSource(Color.sourceFromHsl(color));\n  };\n\n  /**\n   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {Array} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  fabric.Color.sourceFromHsl = function(color) {\n    var match = color.match(Color.reHSLa);\n    if (!match) {\n      return;\n    }\n\n    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\n        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\n        r, g, b;\n\n    if (s === 0) {\n      r = g = b = l;\n    }\n    else {\n      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n          p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1/3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      match[4] ? parseFloat(match[4]) : 1\n    ];\n  };\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsla = Color.fromHsl;\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: FF5555\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHex = function(color) {\n    return Color.fromSource(Color.sourceFromHex(color));\n  };\n\n  /**\n   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color ex: FF5555\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromHex = function(color) {\n    if (color.match(Color.reHex)) {\n      var value = color.slice(color.indexOf('#') + 1),\n          isShortNotation = (value.length === 3),\n          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\n          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\n          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6);\n\n      return [\n        parseInt(r, 16),\n        parseInt(g, 16),\n        parseInt(b, 16),\n        1\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n   * @static\n   * @memberOf fabric.Color\n   * @param {Array} source\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromSource = function(source) {\n    var oColor = new Color();\n    oColor.setSource(source);\n    return oColor;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  /* _FROM_SVG_START_ */\n  function getColorStop(el) {\n    var style = el.getAttribute('style'),\n        offset = el.getAttribute('offset'),\n        color, colorAlpha, opacity;\n\n    // convert percents to absolute values\n    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\n    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\n    if (style) {\n      var keyValuePairs = style.split(/\\s*;\\s*/);\n\n      if (keyValuePairs[keyValuePairs.length - 1] === '') {\n        keyValuePairs.pop();\n      }\n\n      for (var i = keyValuePairs.length; i--; ) {\n\n        var split = keyValuePairs[i].split(/\\s*:\\s*/),\n            key = split[0].trim(),\n            value = split[1].trim();\n\n        if (key === 'stop-color') {\n          color = value;\n        }\n        else if (key === 'stop-opacity') {\n          opacity = value;\n        }\n      }\n    }\n\n    if (!color) {\n      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\n    }\n    if (!opacity) {\n      opacity = el.getAttribute('stop-opacity');\n    }\n\n    color = new fabric.Color(color);\n    colorAlpha = color.getAlpha();\n    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\n    opacity *= colorAlpha;\n\n    return {\n      offset: offset,\n      color: color.toRgb(),\n      opacity: opacity\n    };\n  }\n\n  function getLinearCoords(el) {\n    return {\n      x1: el.getAttribute('x1') || 0,\n      y1: el.getAttribute('y1') || 0,\n      x2: el.getAttribute('x2') || '100%',\n      y2: el.getAttribute('y2') || 0\n    };\n  }\n\n  function getRadialCoords(el) {\n    return {\n      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\n      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\n      r1: 0,\n      x2: el.getAttribute('cx') || '50%',\n      y2: el.getAttribute('cy') || '50%',\n      r2: el.getAttribute('r') || '50%'\n    };\n  }\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Gradient class\n   * @class fabric.Gradient\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#gradients}\n   * @see {@link fabric.Gradient#initialize} for constructor definition\n   */\n  fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\n\n    /**\n     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n     * @type Number\n     * @default 0\n     */\n    offsetX: 0,\n\n    /**\n     * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n     * @type Number\n     * @default 0\n     */\n    offsetY: 0,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops\n     * @return {fabric.Gradient} thisArg\n     */\n    initialize: function(options) {\n      options || (options = { });\n\n      var coords = { };\n\n      this.id = fabric.Object.__uid++;\n      this.type = options.type || 'linear';\n\n      coords = {\n        x1: options.coords.x1 || 0,\n        y1: options.coords.y1 || 0,\n        x2: options.coords.x2 || 0,\n        y2: options.coords.y2 || 0\n      };\n\n      if (this.type === 'radial') {\n        coords.r1 = options.coords.r1 || 0;\n        coords.r2 = options.coords.r2 || 0;\n      }\n      this.coords = coords;\n      this.colorStops = options.colorStops.slice();\n      if (options.gradientTransform) {\n        this.gradientTransform = options.gradientTransform;\n      }\n      this.offsetX = options.offsetX || this.offsetX;\n      this.offsetY = options.offsetY || this.offsetY;\n    },\n\n    /**\n     * Adds another colorStop\n     * @param {Object} colorStop Object with offset and color\n     * @return {fabric.Gradient} thisArg\n     */\n    addColorStop: function(colorStop) {\n      for (var position in colorStop) {\n        var color = new fabric.Color(colorStop[position]);\n        this.colorStops.push({\n          offset: position,\n          color: color.toRgb(),\n          opacity: color.getAlpha()\n        });\n      }\n      return this;\n    },\n\n    /**\n     * Returns object representation of a gradient\n     * @return {Object}\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        coords: this.coords,\n        colorStops: this.colorStops,\n        offsetX: this.offsetX,\n        offsetY: this.offsetY\n      };\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an gradient\n     * @param {Object} object Object to create a gradient for\n     * @param {Boolean} normalize Whether coords should be normalized\n     * @return {String} SVG representation of an gradient (linear/radial)\n     */\n    toSVG: function(object) {\n      var coords = fabric.util.object.clone(this.coords),\n          markup, commonAttributes;\n\n      // colorStops must be sorted ascending\n      this.colorStops.sort(function(a, b) {\n        return a.offset - b.offset;\n      });\n\n      if (!(object.group && object.group.type === 'path-group')) {\n        for (var prop in coords) {\n          if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n            coords[prop] += this.offsetX - object.width / 2;\n          }\n          else if (prop === 'y1' || prop === 'y2') {\n            coords[prop] += this.offsetY - object.height / 2;\n          }\n        }\n      }\n\n      commonAttributes = 'id=\"SVGID_' + this.id +\n                     '\" gradientUnits=\"userSpaceOnUse\"';\n      if (this.gradientTransform) {\n        commonAttributes += ' gradientTransform=\"matrix(' + this.gradientTransform.join(' ') + ')\" ';\n      }\n      if (this.type === 'linear') {\n        markup = [\n          //jscs:disable validateIndentation\n          '<linearGradient ',\n            commonAttributes,\n            ' x1=\"', coords.x1,\n            '\" y1=\"', coords.y1,\n            '\" x2=\"', coords.x2,\n            '\" y2=\"', coords.y2,\n          '\">\\n'\n          //jscs:enable validateIndentation\n        ];\n      }\n      else if (this.type === 'radial') {\n        markup = [\n          //jscs:disable validateIndentation\n          '<radialGradient ',\n            commonAttributes,\n            ' cx=\"', coords.x2,\n            '\" cy=\"', coords.y2,\n            '\" r=\"', coords.r2,\n            '\" fx=\"', coords.x1,\n            '\" fy=\"', coords.y1,\n          '\">\\n'\n          //jscs:enable validateIndentation\n        ];\n      }\n\n      for (var i = 0; i < this.colorStops.length; i++) {\n        markup.push(\n          //jscs:disable validateIndentation\n          '<stop ',\n            'offset=\"', (this.colorStops[i].offset * 100) + '%',\n            '\" style=\"stop-color:', this.colorStops[i].color,\n            (this.colorStops[i].opacity != null ? ';stop-opacity: ' + this.colorStops[i].opacity : ';'),\n          '\"/>\\n'\n          //jscs:enable validateIndentation\n        );\n      }\n\n      markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\n\n      return markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns an instance of CanvasGradient\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {CanvasGradient}\n     */\n    toLive: function(ctx, object) {\n      var gradient, prop, coords = fabric.util.object.clone(this.coords);\n\n      if (!this.type) {\n        return;\n      }\n\n      if (object.group && object.group.type === 'path-group') {\n        for (prop in coords) {\n          if (prop === 'x1' || prop === 'x2') {\n            coords[prop] += -this.offsetX + object.width / 2;\n          }\n          else if (prop === 'y1' || prop === 'y2') {\n            coords[prop] += -this.offsetY + object.height / 2;\n          }\n        }\n      }\n\n      if (this.type === 'linear') {\n        gradient = ctx.createLinearGradient(\n          coords.x1, coords.y1, coords.x2, coords.y2);\n      }\n      else if (this.type === 'radial') {\n        gradient = ctx.createRadialGradient(\n          coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);\n      }\n\n      for (var i = 0, len = this.colorStops.length; i < len; i++) {\n        var color = this.colorStops[i].color,\n            opacity = this.colorStops[i].opacity,\n            offset = this.colorStops[i].offset;\n\n        if (typeof opacity !== 'undefined') {\n          color = new fabric.Color(color).setAlpha(opacity).toRgba();\n        }\n        gradient.addColorStop(parseFloat(offset), color);\n      }\n\n      return gradient;\n    }\n  });\n\n  fabric.util.object.extend(fabric.Gradient, {\n\n    /* _FROM_SVG_START_ */\n    /**\n     * Returns {@link fabric.Gradient} instance from an SVG element\n     * @static\n     * @memberOf fabric.Gradient\n     * @param {SVGGradientElement} el SVG gradient element\n     * @param {fabric.Object} instance\n     * @return {fabric.Gradient} Gradient instance\n     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n     */\n    fromElement: function(el, instance) {\n\n      /**\n       *  @example:\n       *\n       *  <linearGradient id=\"linearGrad1\">\n       *    <stop offset=\"0%\" stop-color=\"white\"/>\n       *    <stop offset=\"100%\" stop-color=\"black\"/>\n       *  </linearGradient>\n       *\n       *  OR\n       *\n       *  <linearGradient id=\"linearGrad2\">\n       *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n       *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n       *  </linearGradient>\n       *\n       *  OR\n       *\n       *  <radialGradient id=\"radialGrad1\">\n       *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n       *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n       *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n       *  </radialGradient>\n       *\n       *  OR\n       *\n       *  <radialGradient id=\"radialGrad2\">\n       *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n       *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n       *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n       *  </radialGradient>\n       *\n       */\n\n      var colorStopEls = el.getElementsByTagName('stop'),\n          type = (el.nodeName === 'linearGradient' ? 'linear' : 'radial'),\n          gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',\n          gradientTransform = el.getAttribute('gradientTransform'),\n          colorStops = [],\n          coords = { }, ellipseMatrix;\n\n      if (type === 'linear') {\n        coords = getLinearCoords(el);\n      }\n      else if (type === 'radial') {\n        coords = getRadialCoords(el);\n      }\n\n      for (var i = colorStopEls.length; i--; ) {\n        colorStops.push(getColorStop(colorStopEls[i]));\n      }\n\n      ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);\n\n      var gradient = new fabric.Gradient({\n        type: type,\n        coords: coords,\n        colorStops: colorStops,\n        offsetX: -instance.left,\n        offsetY: -instance.top\n      });\n\n      if (gradientTransform || ellipseMatrix !== '') {\n        gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);\n      }\n      return gradient;\n    },\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns {@link fabric.Gradient} instance from its object representation\n     * @static\n     * @memberOf fabric.Gradient\n     * @param {Object} obj\n     * @param {Object} [options] Options object\n     */\n    forObject: function(obj, options) {\n      options || (options = { });\n      _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');\n      return new fabric.Gradient(options);\n    }\n  });\n\n  /**\n   * @private\n   */\n  function _convertPercentUnitsToValues(object, options, gradientUnits) {\n    var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';\n    for (var prop in options) {\n      propValue = parseFloat(options[prop], 10);\n      if (typeof options[prop] === 'string' && /^\\d+%$/.test(options[prop])) {\n        multFactor = 0.01;\n      }\n      else {\n        multFactor = 1;\n      }\n      if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n        multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;\n        addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;\n      }\n      else if (prop === 'y1' || prop === 'y2') {\n        multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;\n        addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;\n      }\n      options[prop] = propValue * multFactor + addFactor;\n    }\n    if (object.type === 'ellipse' &&\n        options.r2 !== null &&\n        gradientUnits === 'objectBoundingBox' &&\n        object.rx !== object.ry) {\n\n      var scaleFactor = object.ry/object.rx;\n      ellipseMatrix = ' scale(1, ' + scaleFactor + ')';\n      if (options.y1) {\n        options.y1 /= scaleFactor;\n      }\n      if (options.y2) {\n        options.y2 /= scaleFactor;\n      }\n    }\n    return ellipseMatrix;\n  }\n})();\n\n\n/**\n * Pattern class\n * @class fabric.Pattern\n * @see {@link http://fabricjs.com/patterns/|Pattern demo}\n * @see {@link http://fabricjs.com/dynamic-patterns/|DynamicPattern demo}\n * @see {@link fabric.Pattern#initialize} for constructor definition\n */\nfabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\n\n  /**\n   * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n   * @type String\n   * @default\n   */\n  repeat: 'repeat',\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX: 0,\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY: 0,\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @return {fabric.Pattern} thisArg\n   */\n  initialize: function(options) {\n    options || (options = { });\n\n    this.id = fabric.Object.__uid++;\n\n    if (options.source) {\n      if (typeof options.source === 'string') {\n        // function string\n        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\n          this.source = new Function(fabric.util.getFunctionBody(options.source));\n        }\n        else {\n          // img src string\n          var _this = this;\n          this.source = fabric.util.createImage();\n          fabric.util.loadImage(options.source, function(img) {\n            _this.source = img;\n          });\n        }\n      }\n      else {\n        // img element\n        this.source = options.source;\n      }\n    }\n    if (options.repeat) {\n      this.repeat = options.repeat;\n    }\n    if (options.offsetX) {\n      this.offsetX = options.offsetX;\n    }\n    if (options.offsetY) {\n      this.offsetY = options.offsetY;\n    }\n  },\n\n  /**\n   * Returns object representation of a pattern\n   * @return {Object} Object representation of a pattern instance\n   */\n  toObject: function() {\n\n    var source;\n\n    // callback\n    if (typeof this.source === 'function') {\n      source = String(this.source);\n    }\n    // <img> element\n    else if (typeof this.source.src === 'string') {\n      source = this.source.src;\n    }\n    // <canvas> element\n    else if (typeof this.source === 'object' && this.source.toDataURL) {\n      source = this.source.toDataURL();\n    }\n\n    return {\n      source: source,\n      repeat: this.repeat,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY\n    };\n  },\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   * @param {fabric.Object} object\n   * @return {String} SVG representation of a pattern\n   */\n  toSVG: function(object) {\n    var patternSource = typeof this.source === 'function' ? this.source() : this.source,\n        patternWidth = patternSource.width / object.getWidth(),\n        patternHeight = patternSource.height / object.getHeight(),\n        patternOffsetX = this.offsetX / object.getWidth(),\n        patternOffsetY = this.offsetY / object.getHeight(),\n        patternImgSrc = '';\n    if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\n      patternHeight = 1;\n    }\n    if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\n      patternWidth = 1;\n    }\n    if (patternSource.src) {\n      patternImgSrc = patternSource.src;\n    }\n    else if (patternSource.toDataURL) {\n      patternImgSrc = patternSource.toDataURL();\n    }\n\n    return '<pattern id=\"SVGID_' + this.id +\n                  '\" x=\"' + patternOffsetX +\n                  '\" y=\"' + patternOffsetY +\n                  '\" width=\"' + patternWidth +\n                  '\" height=\"' + patternHeight + '\">\\n' +\n             '<image x=\"0\" y=\"0\"' +\n                    ' width=\"' + patternSource.width +\n                    '\" height=\"' + patternSource.height +\n                    '\" xlink:href=\"' + patternImgSrc +\n             '\"></image>\\n' +\n           '</pattern>\\n';\n  },\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive: function(ctx) {\n    var source = typeof this.source === 'function'\n      ? this.source()\n      : this.source;\n\n    // if the image failed to load, return, and allow rest to continue loading\n    if (!source) {\n      return '';\n    }\n\n    // if an image\n    if (typeof source.src !== 'undefined') {\n      if (!source.complete) {\n        return '';\n      }\n      if (source.naturalWidth === 0 || source.naturalHeight === 0) {\n        return '';\n      }\n    }\n    return ctx.createPattern(source, this.repeat);\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Shadow) {\n    fabric.warn('fabric.Shadow is already defined.');\n    return;\n  }\n\n  /**\n   * Shadow class\n   * @class fabric.Shadow\n   * @see {@link http://fabricjs.com/shadows/|Shadow demo}\n   * @see {@link fabric.Shadow#initialize} for constructor definition\n   */\n  fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\n\n    /**\n     * Shadow color\n     * @type String\n     * @default\n     */\n    color: 'rgb(0,0,0)',\n\n    /**\n     * Shadow blur\n     * @type Number\n     */\n    blur: 0,\n\n    /**\n     * Shadow horizontal offset\n     * @type Number\n     * @default\n     */\n    offsetX: 0,\n\n    /**\n     * Shadow vertical offset\n     * @type Number\n     * @default\n     */\n    offsetY: 0,\n\n    /**\n     * Whether the shadow should affect stroke operations\n     * @type Boolean\n     * @default\n     */\n    affectStroke: false,\n\n    /**\n     * Indicates whether toObject should include default values\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Constructor\n     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetX properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px, \"2px 2px 10px rgba(0,0,0,0.2)\")\n     * @return {fabric.Shadow} thisArg\n     */\n    initialize: function(options) {\n\n      if (typeof options === 'string') {\n        options = this._parseShadow(options);\n      }\n\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n\n      this.id = fabric.Object.__uid++;\n    },\n\n    /**\n     * @private\n     * @param {String} shadow Shadow value to parse\n     * @return {Object} Shadow object with color, offsetX, offsetY and blur\n     */\n    _parseShadow: function(shadow) {\n      var shadowStr = shadow.trim(),\n          offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [ ],\n          color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\n\n      return {\n        color: color.trim(),\n        offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n        offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\n        blur: parseInt(offsetsAndBlur[3], 10) || 0\n      };\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n     * @return {String} Returns CSS3 text-shadow declaration\n     */\n    toString: function() {\n      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of a shadow\n     * @param {fabric.Object} object\n     * @return {String} SVG representation of a shadow\n     */\n    toSVG: function(object) {\n      var fBoxX = 40, fBoxY = 40;\n\n      if (object.width && object.height) {\n        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n        // we add some extra space to filter box to contain the blur ( 20 )\n        fBoxX = toFixed((Math.abs(this.offsetX) + this.blur) / object.width, 2) * 100 + 20;\n        fBoxY = toFixed((Math.abs(this.offsetY) + this.blur) / object.height, 2) * 100 + 20;\n      }\n\n      return (\n        '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\n          'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\n          '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\n            toFixed(this.blur ? this.blur / 2 : 0, 3) + '\"></feGaussianBlur>\\n' +\n          '\\t<feOffset dx=\"' + this.offsetX + '\" dy=\"' + this.offsetY + '\" result=\"oBlur\" ></feOffset>\\n' +\n          '\\t<feFlood flood-color=\"' + this.color + '\"/>\\n' +\n          '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\n          '\\t<feMerge>\\n' +\n            '\\t\\t<feMergeNode></feMergeNode>\\n' +\n            '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\n          '\\t</feMerge>\\n' +\n        '</filter>\\n');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns object representation of a shadow\n     * @return {Object} Object representation of a shadow instance\n     */\n    toObject: function() {\n      if (this.includeDefaultValues) {\n        return {\n          color: this.color,\n          blur: this.blur,\n          offsetX: this.offsetX,\n          offsetY: this.offsetY\n        };\n      }\n      var obj = { }, proto = fabric.Shadow.prototype;\n      if (this.color !== proto.color) {\n        obj.color = this.color;\n      }\n      if (this.blur !== proto.blur) {\n        obj.blur = this.blur;\n      }\n      if (this.offsetX !== proto.offsetX) {\n        obj.offsetX = this.offsetX;\n      }\n      if (this.offsetY !== proto.offsetY) {\n        obj.offsetY = this.offsetY;\n      }\n      return obj;\n    }\n  });\n\n  /**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * @static\n   * @field\n   * @memberOf fabric.Shadow\n   */\n  fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function () {\n\n  'use strict';\n\n  if (fabric.StaticCanvas) {\n    fabric.warn('fabric.StaticCanvas is already defined.');\n    return;\n  }\n\n  // aliases for faster resolution\n  var extend = fabric.util.object.extend,\n      getElementOffset = fabric.util.getElementOffset,\n      removeFromArray = fabric.util.removeFromArray,\n\n      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\n\n  /**\n   * Static canvas class\n   * @class fabric.StaticCanvas\n   * @mixes fabric.Collection\n   * @mixes fabric.Observable\n   * @see {@link http://fabricjs.com/static_canvas/|StaticCanvas demo}\n   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n   * @fires before:render\n   * @fires after:render\n   * @fires canvas:cleared\n   * @fires object:added\n   * @fires object:removed\n   */\n  fabric.StaticCanvas = fabric.util.createClass(/** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n\n      this._initStatic(el, options);\n      fabric.StaticCanvas.activeInstance = this;\n    },\n\n    /**\n     * Background color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    backgroundColor: '',\n\n    /**\n     * Background image of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\n     * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\n     * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\n     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\n     * @type fabric.Image\n     * @default\n     */\n    backgroundImage: null,\n\n    /**\n     * Overlay color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n     * @since 1.3.9\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    overlayColor: '',\n\n    /**\n     * Overlay image of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\n     * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\n     * and \"overlayImageTop\" properties are deprecated since 1.3.9.\n     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\n     * @type fabric.Image\n     * @default\n     */\n    overlayImage: null,\n\n    /**\n     * Indicates whether toObject/toDatalessObject should include default values\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Indicates whether objects' state should be saved\n     * @type Boolean\n     * @default\n     */\n    stateful: true,\n\n    /**\n     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove} should also re-render canvas.\n     * Disabling this option could give a great performance boost when adding/removing a lot of objects to/from canvas at once\n     * (followed by a manual rendering after addition/deletion)\n     * @type Boolean\n     * @default\n     */\n    renderOnAddRemove: true,\n\n    /**\n     * Function that determines clipping of entire canvas area\n     * Being passed context as first argument. See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\n     * @type Function\n     * @default\n     */\n    clipTo: null,\n\n    /**\n     * Indicates whether object controls (borders/controls) are rendered above overlay image\n     * @type Boolean\n     * @default\n     */\n    controlsAboveOverlay: false,\n\n    /**\n     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n     * @type Boolean\n     * @default\n     */\n    allowTouchScrolling: false,\n\n    /**\n     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n     * @type Boolean\n     * @default\n     */\n    imageSmoothingEnabled: true,\n\n    /**\n     * Indicates whether objects should remain in current stack position when selected. When false objects are brought to top and rendered as part of the selection group\n     * @type Boolean\n     * @default\n     */\n    preserveObjectStacking: false,\n\n    /**\n     * The transformation (in the format of Canvas transform) which focuses the viewport\n     * @type Array\n     * @default\n     */\n    viewportTransform: [1, 0, 0, 1, 0, 0],\n\n    /**\n     * Callback; invoked right before object is about to be scaled/rotated\n     */\n    onBeforeScaleRotate: function () {\n      /* NOOP */\n    },\n\n    /**\n     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n     */\n    enableRetinaScaling: true,\n\n    /**\n     * @private\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     */\n    _initStatic: function(el, options) {\n      this._objects = [];\n\n      this._createLowerCanvas(el);\n      this._initOptions(options);\n      this._setImageSmoothing();\n\n      // only initialize retina scaling once\n      if (!this.interactive) {\n        this._initRetinaScaling();\n      }\n\n      if (options.overlayImage) {\n        this.setOverlayImage(options.overlayImage, this.renderAll.bind(this));\n      }\n      if (options.backgroundImage) {\n        this.setBackgroundImage(options.backgroundImage, this.renderAll.bind(this));\n      }\n      if (options.backgroundColor) {\n        this.setBackgroundColor(options.backgroundColor, this.renderAll.bind(this));\n      }\n      if (options.overlayColor) {\n        this.setOverlayColor(options.overlayColor, this.renderAll.bind(this));\n      }\n      this.calcOffset();\n    },\n\n    /**\n     * @private\n     */\n    _initRetinaScaling: function() {\n      if (fabric.devicePixelRatio === 1 || !this.enableRetinaScaling) {\n        return;\n      }\n\n      this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);\n      this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);\n\n      this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);\n    },\n\n    /**\n     * Calculates canvas element offset relative to the document\n     * This method is also attached as \"resize\" event handler of window\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    calcOffset: function () {\n      this._offset = getElementOffset(this.lowerCanvasEl);\n      return this;\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n     * @example <caption>Normal overlayImage with left/top = 0</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage with different properties</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage loaded from cross-origin</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    setOverlayImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('overlayImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/YH9yD/|jsFiddle demo}\n     * @example <caption>Normal backgroundImage with left/top = 0</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage with different properties</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage loaded from cross-origin</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    setBackgroundImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('backgroundImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayColor|background color} for this canvas\n     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set background color to\n     * @param {Function} callback Callback to invoke when background color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n     * @example <caption>Normal overlayColor - color value</caption>\n     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setOverlayColor: function(overlayColor, callback) {\n      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n     * @param {Function} callback Callback to invoke when background color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n     * @example <caption>Normal backgroundColor - color value</caption>\n     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setBackgroundColor: function(backgroundColor, callback) {\n      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\n    },\n\n    /**\n     * @private\n     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\n     */\n    _setImageSmoothing: function() {\n      var ctx = this.getContext();\n\n      if (typeof ctx.imageSmoothingEnabled !== 'undefined') {\n        ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n        return;\n      }\n      ctx.webkitImageSmoothingEnabled = this.imageSmoothingEnabled;\n      ctx.mozImageSmoothingEnabled    = this.imageSmoothingEnabled;\n      ctx.msImageSmoothingEnabled     = this.imageSmoothingEnabled;\n      ctx.oImageSmoothingEnabled      = this.imageSmoothingEnabled;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n     */\n    __setBgOverlayImage: function(property, image, callback, options) {\n      if (typeof image === 'string') {\n        fabric.util.loadImage(image, function(img) {\n          this[property] = new fabric.Image(img, options);\n          callback && callback();\n        }, this, options && options.crossOrigin);\n      }\n      else {\n        options && image.setOptions(options);\n        this[property] = image;\n        callback && callback();\n      }\n\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n     * @param {(Object|String|null)} color Object with pattern information, color value or null\n     * @param {Function} [callback] Callback is invoked when color is set\n     */\n    __setBgOverlayColor: function(property, color, callback) {\n      if (color && color.source) {\n        var _this = this;\n        fabric.util.loadImage(color.source, function(img) {\n          _this[property] = new fabric.Pattern({\n            source: img,\n            repeat: color.repeat,\n            offsetX: color.offsetX,\n            offsetY: color.offsetY\n          });\n          callback && callback();\n        });\n      }\n      else {\n        this[property] = color;\n        callback && callback();\n      }\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _createCanvasElement: function() {\n      var element = fabric.document.createElement('canvas');\n      if (!element.style) {\n        element.style = { };\n      }\n      if (!element) {\n        throw CANVAS_INIT_ERROR;\n      }\n      this._initCanvasElement(element);\n      return element;\n    },\n\n    /**\n     * @private\n     * @param {HTMLElement} element\n     */\n    _initCanvasElement: function(element) {\n      fabric.util.createCanvasElement(element);\n\n      if (typeof element.getContext === 'undefined') {\n        throw CANVAS_INIT_ERROR;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initOptions: function (options) {\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n\n      this.width = this.width || parseInt(this.lowerCanvasEl.width, 10) || 0;\n      this.height = this.height || parseInt(this.lowerCanvasEl.height, 10) || 0;\n\n      if (!this.lowerCanvasEl.style) {\n        return;\n      }\n\n      this.lowerCanvasEl.width = this.width;\n      this.lowerCanvasEl.height = this.height;\n\n      this.lowerCanvasEl.style.width = this.width + 'px';\n      this.lowerCanvasEl.style.height = this.height + 'px';\n\n      this.viewportTransform = this.viewportTransform.slice();\n    },\n\n    /**\n     * Creates a bottom canvas\n     * @private\n     * @param {HTMLElement} [canvasEl]\n     */\n    _createLowerCanvas: function (canvasEl) {\n      this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n      this._initCanvasElement(this.lowerCanvasEl);\n\n      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\n\n      if (this.interactive) {\n        this._applyCanvasStyle(this.lowerCanvasEl);\n      }\n\n      this.contextContainer = this.lowerCanvasEl.getContext('2d');\n    },\n\n    /**\n     * Returns canvas width (in px)\n     * @return {Number}\n     */\n    getWidth: function () {\n      return this.width;\n    },\n\n    /**\n     * Returns canvas height (in px)\n     * @return {Number}\n     */\n    getHeight: function () {\n      return this.height;\n    },\n\n    /**\n     * Sets width of this canvas instance\n     * @param {Number|String} value                         Value to set width to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setWidth: function (value, options) {\n      return this.setDimensions({ width: value }, options);\n    },\n\n    /**\n     * Sets height of this canvas instance\n     * @param {Number|String} value                         Value to set height to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setHeight: function (value, options) {\n      return this.setDimensions({ height: value }, options);\n    },\n\n    /**\n     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n     * @param {Object}        dimensions                    Object with width/height properties\n     * @param {Number|String} [dimensions.width]            Width of canvas element\n     * @param {Number|String} [dimensions.height]           Height of canvas element\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setDimensions: function (dimensions, options) {\n      var cssValue;\n\n      options = options || {};\n\n      for (var prop in dimensions) {\n        cssValue = dimensions[prop];\n\n        if (!options.cssOnly) {\n          this._setBackstoreDimension(prop, dimensions[prop]);\n          cssValue += 'px';\n        }\n\n        if (!options.backstoreOnly) {\n          this._setCssDimension(prop, cssValue);\n        }\n      }\n\n      this._setImageSmoothing();\n      this.calcOffset();\n\n      if (!options.cssOnly) {\n        this.renderAll();\n      }\n\n      return this;\n    },\n\n    /**\n     * Helper for setting width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {Number} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setBackstoreDimension: function (prop, value) {\n      this.lowerCanvasEl[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl[prop] = value;\n      }\n\n      if (this.cacheCanvasEl) {\n        this.cacheCanvasEl[prop] = value;\n      }\n\n      this[prop] = value;\n\n      return this;\n    },\n\n    /**\n     * Helper for setting css width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {String} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setCssDimension: function (prop, value) {\n      this.lowerCanvasEl.style[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl.style[prop] = value;\n      }\n\n      if (this.wrapperEl) {\n        this.wrapperEl.style[prop] = value;\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns canvas zoom level\n     * @return {Number}\n     */\n    getZoom: function () {\n      return Math.sqrt(this.viewportTransform[0] * this.viewportTransform[3]);\n    },\n\n    /**\n     * Sets viewport transform of this canvas instance\n     * @param {Array} vpt the transform in the form of context.transform\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setViewportTransform: function (vpt) {\n      var activeGroup = this.getActiveGroup();\n      this.viewportTransform = vpt;\n      this.renderAll();\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].setCoords();\n      }\n      if (activeGroup) {\n        activeGroup.setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Sets zoom level of this canvas instance, zoom centered around point\n     * @param {fabric.Point} point to zoom with respect to\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    zoomToPoint: function (point, value) {\n      // TODO: just change the scale, preserve other transformations\n      var before = point;\n      point = fabric.util.transformPoint(point, fabric.util.invertTransform(this.viewportTransform));\n      this.viewportTransform[0] = value;\n      this.viewportTransform[3] = value;\n      var after = fabric.util.transformPoint(point, this.viewportTransform);\n      this.viewportTransform[4] += before.x - after.x;\n      this.viewportTransform[5] += before.y - after.y;\n      this.renderAll();\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Sets zoom level of this canvas instance\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setZoom: function (value) {\n      this.zoomToPoint(new fabric.Point(0, 0), value);\n      return this;\n    },\n\n    /**\n     * Pan viewport so as to place point at top left corner of canvas\n     * @param {fabric.Point} point to move to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    absolutePan: function (point) {\n      this.viewportTransform[4] = -point.x;\n      this.viewportTransform[5] = -point.y;\n      this.renderAll();\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Pans viewpoint relatively\n     * @param {fabric.Point} point (position vector) to move by\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    relativePan: function (point) {\n      return this.absolutePan(new fabric.Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5]\n      ));\n    },\n\n    /**\n     * Returns &lt;canvas> element corresponding to this instance\n     * @return {HTMLCanvasElement}\n     */\n    getElement: function () {\n      return this.lowerCanvasEl;\n    },\n\n    /**\n     * Returns currently selected object, if any\n     * @return {fabric.Object}\n     */\n    getActiveObject: function() {\n      return null;\n    },\n\n    /**\n     * Returns currently selected group of object, if any\n     * @return {fabric.Group}\n     */\n    getActiveGroup: function() {\n      return null;\n    },\n\n    /**\n     * Given a context, renders an object on that context\n     * @param {CanvasRenderingContext2D} ctx Context to render object on\n     * @param {fabric.Object} object Object to render\n     * @private\n     */\n    _draw: function (ctx, object) {\n      if (!object) {\n        return;\n      }\n\n      ctx.save();\n      var v = this.viewportTransform;\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      if (this._shouldRenderObject(object)) {\n        object.render(ctx);\n      }\n      ctx.restore();\n      if (!this.controlsAboveOverlay) {\n        object._renderControls(ctx);\n      }\n    },\n\n    _shouldRenderObject: function(object) {\n      if (!object) {\n        return false;\n      }\n      return (object !== this.getActiveGroup() || !this.preserveObjectStacking);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was added\n     */\n    _onObjectAdded: function(obj) {\n      this.stateful && obj.setupState();\n      obj._set('canvas', this);\n      obj.setCoords();\n      this.fire('object:added', { target: obj });\n      obj.fire('added');\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */\n    _onObjectRemoved: function(obj) {\n      // removing active object should fire \"selection:cleared\" events\n      if (this.getActiveObject() === obj) {\n        this.fire('before:selection:cleared', { target: obj });\n        this._discardActiveObject();\n        this.fire('selection:cleared');\n      }\n\n      this.fire('object:removed', { target: obj });\n      obj.fire('removed');\n    },\n\n    /**\n     * Clears specified context of canvas element\n     * @param {CanvasRenderingContext2D} ctx Context to clear\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clearContext: function(ctx) {\n      ctx.clearRect(0, 0, this.width, this.height);\n      return this;\n    },\n\n    /**\n     * Returns context of canvas where objects are drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getContext: function () {\n      return this.contextContainer;\n    },\n\n    /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clear: function () {\n      this._objects.length = 0;\n      if (this.discardActiveGroup) {\n        this.discardActiveGroup();\n      }\n      if (this.discardActiveObject) {\n        this.discardActiveObject();\n      }\n      this.clearContext(this.contextContainer);\n      if (this.contextTop) {\n        this.clearContext(this.contextTop);\n      }\n      this.fire('canvas:cleared');\n      this.renderAll();\n      return this;\n    },\n\n    /**\n     * Renders both the top canvas and the secondary container canvas.\n     * @param {Boolean} [allOnTop] Whether we want to force all images to be rendered on the top canvas\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAll: function (allOnTop) {\n      var canvasToDrawOn = this[(allOnTop === true && this.interactive) ? 'contextTop' : 'contextContainer'],\n          activeGroup = this.getActiveGroup();\n\n      if (this.contextTop && this.selection && !this._groupSelector) {\n        this.clearContext(this.contextTop);\n      }\n\n      if (!allOnTop) {\n        this.clearContext(canvasToDrawOn);\n      }\n\n      this.fire('before:render');\n\n      if (this.clipTo) {\n        fabric.util.clipContext(this, canvasToDrawOn);\n      }\n\n      this._renderBackground(canvasToDrawOn);\n      this._renderObjects(canvasToDrawOn, activeGroup);\n      this._renderActiveGroup(canvasToDrawOn, activeGroup);\n\n      if (this.clipTo) {\n        canvasToDrawOn.restore();\n      }\n\n      this._renderOverlay(canvasToDrawOn);\n\n      if (this.controlsAboveOverlay && this.interactive) {\n        this.drawControls(canvasToDrawOn);\n      }\n\n      this.fire('after:render');\n\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {fabric.Group} activeGroup\n     */\n    _renderObjects: function(ctx, activeGroup) {\n      var i, length;\n\n      // fast path\n      if (!activeGroup || this.preserveObjectStacking) {\n        for (i = 0, length = this._objects.length; i < length; ++i) {\n          this._draw(ctx, this._objects[i]);\n        }\n      }\n      else {\n        for (i = 0, length = this._objects.length; i < length; ++i) {\n          if (this._objects[i] && !activeGroup.contains(this._objects[i])) {\n            this._draw(ctx, this._objects[i]);\n          }\n        }\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {fabric.Group} activeGroup\n     */\n    _renderActiveGroup: function(ctx, activeGroup) {\n\n      // delegate rendering to group selection (if one exists)\n      if (activeGroup) {\n\n        //Store objects in group preserving order, then replace\n        var sortedObjects = [];\n        this.forEachObject(function (object) {\n          if (activeGroup.contains(object)) {\n            sortedObjects.push(object);\n          }\n        });\n        // forEachObject reverses the object, so we reverse again\n        activeGroup._set('_objects', sortedObjects.reverse());\n        this._draw(ctx, activeGroup);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderBackground: function(ctx) {\n      if (this.backgroundColor) {\n        ctx.fillStyle = this.backgroundColor.toLive\n          ? this.backgroundColor.toLive(ctx)\n          : this.backgroundColor;\n\n        ctx.fillRect(\n          this.backgroundColor.offsetX || 0,\n          this.backgroundColor.offsetY || 0,\n          this.width,\n          this.height);\n      }\n      if (this.backgroundImage) {\n        this._draw(ctx, this.backgroundImage);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderOverlay: function(ctx) {\n      if (this.overlayColor) {\n        ctx.fillStyle = this.overlayColor.toLive\n          ? this.overlayColor.toLive(ctx)\n          : this.overlayColor;\n\n        ctx.fillRect(\n          this.overlayColor.offsetX || 0,\n          this.overlayColor.offsetY || 0,\n          this.width,\n          this.height);\n      }\n      if (this.overlayImage) {\n        this._draw(ctx, this.overlayImage);\n      }\n    },\n\n    /**\n     * Method to render only the top canvas.\n     * Also used to render the group selection box.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    renderTop: function () {\n      var ctx = this.contextTop || this.contextContainer;\n      this.clearContext(ctx);\n\n      // we render the top context - last object\n      if (this.selection && this._groupSelector) {\n        this._drawSelection();\n      }\n\n      // delegate rendering to group selection if one exists\n      // used for drawing selection borders/controls\n      var activeGroup = this.getActiveGroup();\n      if (activeGroup) {\n        activeGroup.render(ctx);\n      }\n\n      this._renderOverlay(ctx);\n\n      this.fire('after:render');\n\n      return this;\n    },\n\n    /**\n     * Returns coordinates of a center of canvas.\n     * Returned value is an object with top and left properties\n     * @return {Object} object with \"top\" and \"left\" number values\n     */\n    getCenter: function () {\n      return {\n        top: this.getHeight() / 2,\n        left: this.getWidth() / 2\n      };\n    },\n\n    /**\n     * Centers object horizontally.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @param {fabric.Object} object Object to center horizontally\n     * @return {fabric.Canvas} thisArg\n     */\n    centerObjectH: function (object) {\n      this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\n      this.renderAll();\n      return this;\n    },\n\n    /**\n     * Centers object vertically.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @param {fabric.Object} object Object to center vertically\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObjectV: function (object) {\n      this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\n      this.renderAll();\n      return this;\n    },\n\n    /**\n     * Centers object vertically and horizontally.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObject: function(object) {\n      var center = this.getCenter();\n\n      this._centerObject(object, new fabric.Point(center.left, center.top));\n      this.renderAll();\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} object Object to center\n     * @param {fabric.Point} center Center point\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    _centerObject: function(object, center) {\n      object.setPositionByOrigin(center, 'center', 'center');\n      return this;\n    },\n\n    /**\n     * Returs dataless JSON representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {String} json string\n     */\n    toDatalessJSON: function (propertiesToInclude) {\n      return this.toDatalessObject(propertiesToInclude);\n    },\n\n    /**\n     * Returns object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toObject', propertiesToInclude);\n    },\n\n    /**\n     * Returns dataless object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n    },\n\n    /**\n     * @private\n     */\n    _toObjectMethod: function (methodName, propertiesToInclude) {\n\n      var data = {\n        objects: this._toObjects(methodName, propertiesToInclude)\n      };\n\n      extend(data, this.__serializeBgOverlay());\n\n      fabric.util.populateWithProperties(this, data, propertiesToInclude);\n\n      return data;\n    },\n\n    /**\n     * @private\n     */\n    _toObjects: function(methodName, propertiesToInclude) {\n      return this.getObjects().map(function(instance) {\n        return this._toObject(instance, methodName, propertiesToInclude);\n      }, this);\n    },\n\n    /**\n     * @private\n     */\n    _toObject: function(instance, methodName, propertiesToInclude) {\n      var originalValue;\n\n      if (!this.includeDefaultValues) {\n        originalValue = instance.includeDefaultValues;\n        instance.includeDefaultValues = false;\n      }\n\n      //If the object is part of the current selection group, it should\n      //be transformed appropriately\n      //i.e. it should be serialised as it would appear if the selection group\n      //were to be destroyed.\n      var originalProperties = this._realizeGroupTransformOnObject(instance),\n          object = instance[methodName](propertiesToInclude);\n      if (!this.includeDefaultValues) {\n        instance.includeDefaultValues = originalValue;\n      }\n\n      //Undo the damage we did by changing all of its properties\n      this._unwindGroupTransformOnObject(instance, originalProperties);\n\n      return object;\n    },\n\n    /**\n     * Realises an object's group transformation on it\n     * @private\n     * @param {fabric.Object} [instance] the object to transform (gets mutated)\n     * @returns the original values of instance which were changed\n     */\n    _realizeGroupTransformOnObject: function(instance) {\n      var layoutProps = ['angle', 'flipX', 'flipY', 'height', 'left', 'scaleX', 'scaleY', 'top', 'width'];\n      if (instance.group && instance.group === this.getActiveGroup()) {\n        //Copy all the positionally relevant properties across now\n        var originalValues = {};\n        layoutProps.forEach(function(prop) {\n          originalValues[prop] = instance[prop];\n        });\n        this.getActiveGroup().realizeTransform(instance);\n        return originalValues;\n      }\n      else {\n        return null;\n      }\n    },\n\n    /**\n     * Restores the changed properties of instance\n     * @private\n     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n     */\n    _unwindGroupTransformOnObject: function(instance, originalValues) {\n      if (originalValues) {\n        instance.set(originalValues);\n      }\n    },\n\n    /**\n     * @private\n     */\n    __serializeBgOverlay: function() {\n      var data = {\n        background: (this.backgroundColor && this.backgroundColor.toObject)\n          ? this.backgroundColor.toObject()\n          : this.backgroundColor\n      };\n\n      if (this.overlayColor) {\n        data.overlay = this.overlayColor.toObject\n          ? this.overlayColor.toObject()\n          : this.overlayColor;\n      }\n      if (this.backgroundImage) {\n        data.backgroundImage = this.backgroundImage.toObject();\n      }\n      if (this.overlayImage) {\n        data.overlayImage = this.overlayImage.toObject();\n      }\n\n      return data;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n     * a zoomed canvas will then produce zoomed SVG output.\n     * @type Boolean\n     * @default\n     */\n    svgViewportTransformation: true,\n\n    /**\n     * Returns SVG representation of canvas\n     * @function\n     * @param {Object} [options] Options object for SVG output\n     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n     * @param {Object} [options.viewBox] SVG viewbox object\n     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\n     * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n     * @param {Number} [options.viewBox.width] Width of viewbox\n     * @param {Number} [options.viewBox.height] Height of viewbox\n     * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n     * @return {String} SVG string\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#serialization}\n     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n     * @example <caption>Normal SVG output</caption>\n     * var svg = canvas.toSVG();\n     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n     * var svg = canvas.toSVG({suppressPreamble: true});\n     * @example <caption>SVG output with viewBox attribute</caption>\n     * var svg = canvas.toSVG({\n     *   viewBox: {\n     *     x: 100,\n     *     y: 100,\n     *     width: 200,\n     *     height: 300\n     *   }\n     * });\n     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n     * @example <caption>Modify SVG output with reviver function</caption>\n     * var svg = canvas.toSVG(null, function(svg) {\n     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n     * });\n     */\n    toSVG: function(options, reviver) {\n      options || (options = { });\n\n      var markup = [];\n\n      this._setSVGPreamble(markup, options);\n      this._setSVGHeader(markup, options);\n\n      this._setSVGBgOverlayColor(markup, 'backgroundColor');\n      this._setSVGBgOverlayImage(markup, 'backgroundImage');\n\n      this._setSVGObjects(markup, reviver);\n\n      this._setSVGBgOverlayColor(markup, 'overlayColor');\n      this._setSVGBgOverlayImage(markup, 'overlayImage');\n\n      markup.push('</svg>');\n\n      return markup.join('');\n    },\n\n    /**\n     * @private\n     */\n    _setSVGPreamble: function(markup, options) {\n      if (!options.suppressPreamble) {\n        markup.push(\n          '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>',\n            '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n              '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\n        );\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGHeader: function(markup, options) {\n      var width, height, vpt;\n\n      if (options.viewBox) {\n        width = options.viewBox.width;\n        height = options.viewBox.height;\n      }\n      else {\n        width = this.width;\n        height = this.height;\n        if (!this.svgViewportTransformation) {\n          vpt = this.viewportTransform;\n          width /= vpt[0];\n          height /= vpt[3];\n        }\n      }\n\n      markup.push(\n        '<svg ',\n          'xmlns=\"http://www.w3.org/2000/svg\" ',\n          'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n          'version=\"1.1\" ',\n          'width=\"', width, '\" ',\n          'height=\"', height, '\" ',\n          (this.backgroundColor && !this.backgroundColor.toLive\n            ? 'style=\"background-color: ' + this.backgroundColor + '\" '\n            : null),\n          (options.viewBox\n              ? 'viewBox=\"' +\n                options.viewBox.x + ' ' +\n                options.viewBox.y + ' ' +\n                options.viewBox.width + ' ' +\n                options.viewBox.height + '\" '\n              : null),\n          'xml:space=\"preserve\">',\n        '<desc>Created with Fabric.js ', fabric.version, '</desc>',\n        '<defs>',\n          fabric.createSVGFontFacesMarkup(this.getObjects()),\n          fabric.createSVGRefElementsMarkup(this),\n        '</defs>'\n      );\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObjects: function(markup, reviver) {\n      for (var i = 0, objects = this.getObjects(), len = objects.length; i < len; i++) {\n        var instance = objects[i],\n            //If the object is in a selection group, simulate what would happen to that\n            //object when the group is deselected\n            originalProperties = this._realizeGroupTransformOnObject(instance);\n        markup.push(instance.toSVG(reviver));\n        this._unwindGroupTransformOnObject(instance, originalProperties);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGBgOverlayImage: function(markup, property) {\n      if (this[property] && this[property].toSVG) {\n        markup.push(this[property].toSVG());\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGBgOverlayColor: function(markup, property) {\n      if (this[property] && this[property].source) {\n        markup.push(\n          '<rect x=\"', this[property].offsetX, '\" y=\"', this[property].offsetY, '\" ',\n            'width=\"',\n              (this[property].repeat === 'repeat-y' || this[property].repeat === 'no-repeat'\n                ? this[property].source.width\n                : this.width),\n            '\" height=\"',\n              (this[property].repeat === 'repeat-x' || this[property].repeat === 'no-repeat'\n                ? this[property].source.height\n                : this.height),\n            '\" fill=\"url(#' + property + 'Pattern)\"',\n          '></rect>'\n        );\n      }\n      else if (this[property] && property === 'overlayColor') {\n        markup.push(\n          '<rect x=\"0\" y=\"0\" ',\n            'width=\"', this.width,\n            '\" height=\"', this.height,\n            '\" fill=\"', this[property], '\"',\n          '></rect>'\n        );\n      }\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Moves an object to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendToBack: function (object) {\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      return this.renderAll && this.renderAll();\n    },\n\n    /**\n     * Moves an object to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringToFront: function (object) {\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      return this.renderAll && this.renderAll();\n    },\n\n    /**\n     * Moves an object down in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendBackwards: function (object, intersecting) {\n      var idx = this._objects.indexOf(object);\n\n      // if object is not on the bottom of stack\n      if (idx !== 0) {\n        var newIdx = this._findNewLowerIndex(object, idx, intersecting);\n\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this.renderAll && this.renderAll();\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewLowerIndex: function(object, idx, intersecting) {\n      var newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse down the stack looking for the nearest intersecting object\n        for (var i = idx - 1; i >= 0; --i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object up in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringForward: function (object, intersecting) {\n      var idx = this._objects.indexOf(object);\n\n      // if object is not on top of stack (last item in an array)\n      if (idx !== this._objects.length - 1) {\n        var newIdx = this._findNewUpperIndex(object, idx, intersecting);\n\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this.renderAll && this.renderAll();\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewUpperIndex: function(object, idx, intersecting) {\n      var newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse up the stack looking for the nearest intersecting object\n        for (var i = idx + 1; i < this._objects.length; ++i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Number} index Position to move to\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    moveTo: function (object, index) {\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      return this.renderAll && this.renderAll();\n    },\n\n    /**\n     * Clears a canvas element and removes all event listeners\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    dispose: function () {\n      this.clear();\n      this.interactive && this.removeListeners();\n      return this;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function () {\n      return '#<fabric.Canvas (' + this.complexity() + '): ' +\n               '{ objects: ' + this.getObjects().length + ' }>';\n    }\n  });\n\n  extend(fabric.StaticCanvas.prototype, fabric.Observable);\n  extend(fabric.StaticCanvas.prototype, fabric.Collection);\n  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n\n  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n\n    /**\n     * @static\n     * @type String\n     * @default\n     */\n    EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n\n    /**\n     * Provides a way to check support of some of the canvas methods\n     * (either those of HTMLCanvasElement itself, or rendering context)\n     *\n     * @param {String} methodName Method to check support for;\n     *                            Could be one of \"getImageData\", \"toDataURL\", \"toDataURLWithQuality\" or \"setLineDash\"\n     * @return {Boolean | null} `true` if method is supported (or at least exists),\n     *                          `null` if canvas element or context can not be initialized\n     */\n    supports: function (methodName) {\n      var el = fabric.util.createCanvasElement();\n\n      if (!el || !el.getContext) {\n        return null;\n      }\n\n      var ctx = el.getContext('2d');\n      if (!ctx) {\n        return null;\n      }\n\n      switch (methodName) {\n\n        case 'getImageData':\n          return typeof ctx.getImageData !== 'undefined';\n\n        case 'setLineDash':\n          return typeof ctx.setLineDash !== 'undefined';\n\n        case 'toDataURL':\n          return typeof el.toDataURL !== 'undefined';\n\n        case 'toDataURLWithQuality':\n          try {\n            el.toDataURL('image/jpeg', 0);\n            return true;\n          }\n          catch (e) { }\n          return false;\n\n        default:\n          return null;\n      }\n    }\n  });\n\n  /**\n   * Returns JSON representation of canvas\n   * @function\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} JSON string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\n   * @example <caption>JSON without default values</caption>\n   * canvas.includeDefaultValues = false;\n   * var json = canvas.toJSON();\n   */\n  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n\n})();\n\n\n/**\n * BaseBrush class\n * @class fabric.BaseBrush\n * @see {@link http://fabricjs.com/freedrawing/|Freedrawing demo}\n */\nfabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color:            'rgb(0, 0, 0)',\n\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width:            1,\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type fabric.Shadow\n   * @default\n   */\n  shadow:           null,\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap:    'round',\n\n  /**\n   * Corner style of a brush (one of \"bevil\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin:   'round',\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray:  null,\n\n  /**\n   * Sets shadow of an object\n   * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  setShadow: function(options) {\n    this.shadow = new fabric.Shadow(options);\n    return this;\n  },\n\n  /**\n   * Sets brush styles\n   * @private\n   */\n  _setBrushStyles: function() {\n    var ctx = this.canvas.contextTop;\n\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineJoin = this.strokeLineJoin;\n    if (this.strokeDashArray && fabric.StaticCanvas.supports('setLineDash')) {\n      ctx.setLineDash(this.strokeDashArray);\n    }\n  },\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  _setShadow: function() {\n    if (!this.shadow) {\n      return;\n    }\n\n    var ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = this.shadow.color;\n    ctx.shadowBlur = this.shadow.blur;\n    ctx.shadowOffsetX = this.shadow.offsetX;\n    ctx.shadowOffsetY = this.shadow.offsetY;\n  },\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  _resetShadow: function() {\n    var ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n});\n\n\n(function() {\n\n  /**\n   * PencilBrush class\n   * @class fabric.PencilBrush\n   * @extends fabric.BaseBrush\n   */\n  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n\n    /**\n     * Constructor\n     * @param {fabric.Canvas} canvas\n     * @return {fabric.PencilBrush} Instance of a pencil brush\n     */\n    initialize: function(canvas) {\n      this.canvas = canvas;\n      this._points = [ ];\n    },\n\n    /**\n     * Inovoked on mouse down\n     * @param {Object} pointer\n     */\n    onMouseDown: function(pointer) {\n      this._prepareForDrawing(pointer);\n      // capture coordinates immediately\n      // this allows to draw dots (when movement never occurs)\n      this._captureDrawingPath(pointer);\n      this._render();\n    },\n\n    /**\n     * Inovoked on mouse move\n     * @param {Object} pointer\n     */\n    onMouseMove: function(pointer) {\n      this._captureDrawingPath(pointer);\n      // redraw curve\n      // clear top canvas\n      this.canvas.clearContext(this.canvas.contextTop);\n      this._render();\n    },\n\n    /**\n     * Invoked on mouse up\n     */\n    onMouseUp: function() {\n      this._finalizeAndAddPath();\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _prepareForDrawing: function(pointer) {\n\n      var p = new fabric.Point(pointer.x, pointer.y);\n\n      this._reset();\n      this._addPoint(p);\n\n      this.canvas.contextTop.moveTo(p.x, p.y);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Point} point Point to be added to points array\n     */\n    _addPoint: function(point) {\n      this._points.push(point);\n    },\n\n    /**\n     * Clear points array and set contextTop canvas style.\n     * @private\n     */\n    _reset: function() {\n      this._points.length = 0;\n\n      this._setBrushStyles();\n      this._setShadow();\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _captureDrawingPath: function(pointer) {\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n      this._addPoint(pointerPoint);\n    },\n\n    /**\n     * Draw a smooth path on the topCanvas using quadraticCurveTo\n     * @private\n     */\n    _render: function() {\n      var ctx  = this.canvas.contextTop,\n          v = this.canvas.viewportTransform,\n          p1 = this._points[0],\n          p2 = this._points[1];\n\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      ctx.beginPath();\n\n      //if we only have 2 points in the path and they are the same\n      //it means that the user only clicked the canvas without moving the mouse\n      //then we should be drawing a dot. A path isn't drawn between two identical dots\n      //that's why we set them apart a bit\n      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n        p1.x -= 0.5;\n        p2.x += 0.5;\n      }\n      ctx.moveTo(p1.x, p1.y);\n\n      for (var i = 1, len = this._points.length; i < len; i++) {\n        // we pick the point between pi + 1 & pi + 2 as the\n        // end point and p1 as our control point.\n        var midPoint = p1.midPointFrom(p2);\n        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n\n        p1 = this._points[i];\n        p2 = this._points[i + 1];\n      }\n      // Draw last line as a straight line while\n      // we wait for the next point to be able to calculate\n      // the bezier control point\n      ctx.lineTo(p1.x, p1.y);\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * Converts points to SVG path\n     * @param {Array} points Array of points\n     * @param {Number} minX\n     * @param {Number} minY\n     * @return {String} SVG path\n     */\n    convertPointsToSVGPath: function(points) {\n      var path = [],\n          p1 = new fabric.Point(points[0].x, points[0].y),\n          p2 = new fabric.Point(points[1].x, points[1].y);\n\n      path.push('M ', points[0].x, ' ', points[0].y, ' ');\n      for (var i = 1, len = points.length; i < len; i++) {\n        var midPoint = p1.midPointFrom(p2);\n        // p1 is our bezier control point\n        // midpoint is our endpoint\n        // start point is p(i-1) value.\n        path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\n        p1 = new fabric.Point(points[i].x, points[i].y);\n        if ((i + 1) < points.length) {\n          p2 = new fabric.Point(points[i + 1].x, points[i + 1].y);\n        }\n      }\n      path.push('L ', p1.x, ' ', p1.y, ' ');\n      return path;\n    },\n\n    /**\n     * Creates fabric.Path object to add on canvas\n     * @param {String} pathData Path data\n     * @return {fabric.Path} Path to add on canvas\n     */\n    createPath: function(pathData) {\n      var path = new fabric.Path(pathData, {\n                   fill: null,\n                   stroke: this.color,\n                   strokeWidth: this.width,\n                   strokeLineCap: this.strokeLineCap,\n                   strokeLineJoin: this.strokeLineJoin,\n                   strokeDashArray: this.strokeDashArray,\n                   originX: 'center',\n                   originY: 'center'\n                 });\n\n      if (this.shadow) {\n        this.shadow.affectStroke = true;\n        path.setShadow(this.shadow);\n      }\n\n      return path;\n    },\n\n    /**\n     * On mouseup after drawing the path on contextTop canvas\n     * we use the points captured to create an new fabric path object\n     * and add it to the fabric canvas.\n     */\n    _finalizeAndAddPath: function() {\n      var ctx = this.canvas.contextTop;\n      ctx.closePath();\n\n      var pathData = this.convertPointsToSVGPath(this._points).join('');\n      if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\n        // do not create 0 width/height paths, as they are\n        // rendered inconsistently across browsers\n        // Firefox 4, for example, renders a dot,\n        // whereas Chrome 10 renders nothing\n        this.canvas.renderAll();\n        return;\n      }\n\n      var path = this.createPath(pathData);\n\n      this.canvas.add(path);\n      path.setCoords();\n\n      this.canvas.clearContext(this.canvas.contextTop);\n      this._resetShadow();\n      this.canvas.renderAll();\n\n      // fire event 'path' created\n      this.canvas.fire('path:created', { path: path });\n    }\n  });\n})();\n\n\n/**\n * CircleBrush class\n * @class fabric.CircleBrush\n */\nfabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width: 10,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.CircleBrush} Instance of a circle brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.points = [ ];\n  },\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Object} pointer\n   */\n  drawDot: function(pointer) {\n    var point = this.addPoint(pointer),\n        ctx = this.canvas.contextTop,\n        v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.restore();\n  },\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown: function(pointer) {\n    this.points.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    var circles = [ ];\n\n    for (var i = 0, len = this.points.length; i < len; i++) {\n      var point = this.points[i],\n          circle = new fabric.Circle({\n            radius: point.radius,\n            left: point.x,\n            top: point.y,\n            originX: 'center',\n            originY: 'center',\n            fill: point.fill\n          });\n\n      this.shadow && circle.setShadow(this.shadow);\n\n      circles.push(circle);\n    }\n    var group = new fabric.Group(circles, { originX: 'center', originY: 'center' });\n    group.canvas = this.canvas;\n\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.renderAll();\n  },\n\n  /**\n   * @param {Object} pointer\n   * @return {fabric.Point} Just added pointer point\n   */\n  addPoint: function(pointer) {\n    var pointerPoint = new fabric.Point(pointer.x, pointer.y),\n\n        circleRadius = fabric.util.getRandomInt(\n                        Math.max(0, this.width - 20), this.width + 20) / 2,\n\n        circleColor = new fabric.Color(this.color)\n                        .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\n                        .toRgba();\n\n    pointerPoint.radius = circleRadius;\n    pointerPoint.fill = circleColor;\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n});\n\n\n/**\n * SprayBrush class\n * @class fabric.SprayBrush\n */\nfabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width:              10,\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density:            20,\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth:           1,\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance:   1,\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity:        false,\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping:  true,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.SprayBrush} Instance of a spray brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.sprayChunks = [ ];\n  },\n\n  /**\n   * Invoked on mouse down\n   * @param {Object} pointer\n   */\n  onMouseDown: function(pointer) {\n    this.sprayChunks.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.render();\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    this.addSprayChunk(pointer);\n    this.render();\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    var rects = [ ];\n\n    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n      var sprayChunk = this.sprayChunks[i];\n\n      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\n\n        var rect = new fabric.Rect({\n          width: sprayChunk[j].width,\n          height: sprayChunk[j].width,\n          left: sprayChunk[j].x + 1,\n          top: sprayChunk[j].y + 1,\n          originX: 'center',\n          originY: 'center',\n          fill: this.color\n        });\n\n        this.shadow && rect.setShadow(this.shadow);\n        rects.push(rect);\n      }\n    }\n\n    if (this.optimizeOverlapping) {\n      rects = this._getOptimizedRects(rects);\n    }\n\n    var group = new fabric.Group(rects, { originX: 'center', originY: 'center' });\n    group.canvas = this.canvas;\n\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.renderAll();\n  },\n\n  /**\n   * @private\n   * @param {Array} rects\n   */\n  _getOptimizedRects: function(rects) {\n\n    // avoid creating duplicate rects at the same coordinates\n    var uniqueRects = { }, key;\n\n    for (var i = 0, len = rects.length; i < len; i++) {\n      key = rects[i].left + '' + rects[i].top;\n      if (!uniqueRects[key]) {\n        uniqueRects[key] = rects[i];\n      }\n    }\n    var uniqueRectsArray = [ ];\n    for (key in uniqueRects) {\n      uniqueRectsArray.push(uniqueRects[key]);\n    }\n\n    return uniqueRectsArray;\n  },\n\n  /**\n   * Renders brush\n   */\n  render: function() {\n    var ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    var v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n\n    for (var i = 0, len = this.sprayChunkPoints.length; i < len; i++) {\n      var point = this.sprayChunkPoints[i];\n      if (typeof point.opacity !== 'undefined') {\n        ctx.globalAlpha = point.opacity;\n      }\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * @param {Object} pointer\n   */\n  addSprayChunk: function(pointer) {\n    this.sprayChunkPoints = [ ];\n\n    var x, y, width, radius = this.width / 2;\n\n    for (var i = 0; i < this.density; i++) {\n\n      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n\n      if (this.dotWidthVariance) {\n        width = fabric.util.getRandomInt(\n          // bottom clamp width to 1\n          Math.max(1, this.dotWidth - this.dotWidthVariance),\n          this.dotWidth + this.dotWidthVariance);\n      }\n      else {\n        width = this.dotWidth;\n      }\n\n      var point = new fabric.Point(x, y);\n      point.width = width;\n\n      if (this.randomOpacity) {\n        point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n      }\n\n      this.sprayChunkPoints.push(point);\n    }\n\n    this.sprayChunks.push(this.sprayChunkPoints);\n  }\n});\n\n\n/**\n * PatternBrush class\n * @class fabric.PatternBrush\n * @extends fabric.BaseBrush\n */\nfabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n\n  getPatternSrc: function() {\n\n    var dotWidth = 20,\n        dotDistance = 5,\n        patternCanvas = fabric.document.createElement('canvas'),\n        patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n\n    patternCtx.fillStyle = this.color;\n    patternCtx.beginPath();\n    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n    patternCtx.closePath();\n    patternCtx.fill();\n\n    return patternCanvas;\n  },\n\n  getPatternSrcFunction: function() {\n    return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\n  },\n\n  /**\n   * Creates \"pattern\" instance property\n   */\n  getPattern: function() {\n    return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  },\n\n  /**\n   * Sets brush styles\n   */\n  _setBrushStyles: function() {\n    this.callSuper('_setBrushStyles');\n    this.canvas.contextTop.strokeStyle = this.getPattern();\n  },\n\n  /**\n   * Creates path\n   */\n  createPath: function(pathData) {\n    var path = this.callSuper('createPath', pathData);\n    path.stroke = new fabric.Pattern({\n      source: this.source || this.getPatternSrcFunction()\n    });\n    return path;\n  }\n});\n\n\n(function() {\n\n  var getPointer = fabric.util.getPointer,\n      degreesToRadians = fabric.util.degreesToRadians,\n      radiansToDegrees = fabric.util.radiansToDegrees,\n      atan2 = Math.atan2,\n      abs = Math.abs,\n\n      STROKE_OFFSET = 0.5;\n\n  /**\n   * Canvas class\n   * @class fabric.Canvas\n   * @extends fabric.StaticCanvas\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#canvas}\n   * @see {@link fabric.Canvas#initialize} for constructor definition\n   *\n   * @fires object:modified\n   * @fires object:rotating\n   * @fires object:scaling\n   * @fires object:moving\n   * @fires object:selected\n   *\n   * @fires before:selection:cleared\n   * @fires selection:cleared\n   * @fires selection:created\n   *\n   * @fires path:created\n   * @fires mouse:down\n   * @fires mouse:move\n   * @fires mouse:up\n   * @fires mouse:over\n   * @fires mouse:out\n   *\n   */\n  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n\n      this._initStatic(el, options);\n      this._initInteractive();\n      this._createCacheCanvas();\n\n      fabric.Canvas.activeInstance = this;\n    },\n\n    /**\n     * When true, objects can be transformed by one side (unproportionally)\n     * @type Boolean\n     * @default\n     */\n    uniScaleTransform:      false,\n\n    /**\n     * When true, objects use center point as the origin of scale transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:        false,\n\n    /**\n     * When true, objects use center point as the origin of rotate transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:       false,\n\n    /**\n     * Indicates that canvas is interactive. This property should not be changed.\n     * @type Boolean\n     * @default\n     */\n    interactive:            true,\n\n    /**\n     * Indicates whether group selection should be enabled\n     * @type Boolean\n     * @default\n     */\n    selection:              true,\n\n    /**\n     * Color of selection\n     * @type String\n     * @default\n     */\n    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\n\n    /**\n     * Default dash array pattern\n     * If not empty the selection border is dashed\n     * @type Array\n     */\n    selectionDashArray:     [ ],\n\n    /**\n     * Color of the border of selection (usually slightly darker than color of selection itself)\n     * @type String\n     * @default\n     */\n    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\n\n    /**\n     * Width of a line used in object/group selection\n     * @type Number\n     * @default\n     */\n    selectionLineWidth:     1,\n\n    /**\n     * Default cursor value used when hovering over an object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:            'move',\n\n    /**\n     * Default cursor value used when moving an object on canvas\n     * @type String\n     * @default\n     */\n    moveCursor:             'move',\n\n    /**\n     * Default cursor value used for the entire canvas\n     * @type String\n     * @default\n     */\n    defaultCursor:          'default',\n\n    /**\n     * Cursor value used during free drawing\n     * @type String\n     * @default\n     */\n    freeDrawingCursor:      'crosshair',\n\n    /**\n     * Cursor value used for rotation point\n     * @type String\n     * @default\n     */\n    rotationCursor:         'crosshair',\n\n    /**\n     * Default element class that's given to wrapper (div) element of canvas\n     * @type String\n     * @default\n     */\n    containerClass:         'canvas-container',\n\n    /**\n     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:     false,\n\n    /**\n     * Number of pixels around target pixel to tolerate (consider active) during object detection\n     * @type Number\n     * @default\n     */\n    targetFindTolerance:    0,\n\n    /**\n     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\n     * @type Boolean\n     * @default\n     */\n    skipTargetFind:         false,\n\n    /**\n     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n     * After mousedown, mousemove creates a shape,\n     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4/#free_drawing}\n     * @type Boolean\n     * @default\n     */\n    isDrawingMode:          false,\n\n    /**\n     * @private\n     */\n    _initInteractive: function() {\n      this._currentTransform = null;\n      this._groupSelector = null;\n      this._initWrapperElement();\n      this._createUpperCanvas();\n      this._initEventListeners();\n\n      this._initRetinaScaling();\n\n      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n\n      this.calcOffset();\n    },\n\n    /**\n     * Resets the current transform to its original values and chooses the type of resizing based on the event\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _resetCurrentTransform: function(e) {\n      var t = this._currentTransform;\n\n      t.target.set({\n        scaleX: t.original.scaleX,\n        scaleY: t.original.scaleY,\n        left: t.original.left,\n        top: t.original.top\n      });\n\n      if (this._shouldCenterTransform(e, t.target)) {\n        if (t.action === 'rotate') {\n          this._setOriginToCenter(t.target);\n        }\n        else {\n          if (t.originX !== 'center') {\n            if (t.originX === 'right') {\n              t.mouseXSign = -1;\n            }\n            else {\n              t.mouseXSign = 1;\n            }\n          }\n          if (t.originY !== 'center') {\n            if (t.originY === 'bottom') {\n              t.mouseYSign = -1;\n            }\n            else {\n              t.mouseYSign = 1;\n            }\n          }\n\n          t.originX = 'center';\n          t.originY = 'center';\n        }\n      }\n      else {\n        t.originX = t.original.originX;\n        t.originY = t.original.originY;\n      }\n    },\n\n    /**\n     * Checks if point is contained within an area of given object\n     * @param {Event} e Event object\n     * @param {fabric.Object} target Object to test against\n     * @return {Boolean} true if point is contained within an area of given object\n     */\n    containsPoint: function (e, target) {\n      var pointer = this.getPointer(e, true),\n          xy = this._normalizePointer(target, pointer);\n\n      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n      return (target.containsPoint(xy) || target._findTargetCorner(pointer));\n    },\n\n    /**\n     * @private\n     */\n    _normalizePointer: function (object, pointer) {\n      var activeGroup = this.getActiveGroup(),\n          x = pointer.x,\n          y = pointer.y,\n          isObjectInGroup = (\n            activeGroup &&\n            object.type !== 'group' &&\n            activeGroup.contains(object)),\n          lt;\n\n      if (isObjectInGroup) {\n        lt = fabric.util.transformPoint(activeGroup.getCenterPoint(), this.viewportTransform, true);\n        x -= lt.x;\n        y -= lt.y;\n        x /= activeGroup.scaleX;\n        y /= activeGroup.scaleY;\n      }\n      return { x: x, y: y };\n    },\n\n    /**\n     * Returns true if object is transparent at a certain location\n     * @param {fabric.Object} target Object to check\n     * @param {Number} x Left coordinate\n     * @param {Number} y Top coordinate\n     * @return {Boolean}\n     */\n    isTargetTransparent: function (target, x, y) {\n      var hasBorders = target.hasBorders,\n          transparentCorners = target.transparentCorners;\n\n      target.hasBorders = target.transparentCorners = false;\n\n      this._draw(this.contextCache, target);\n\n      target.hasBorders = hasBorders;\n      target.transparentCorners = transparentCorners;\n\n      var isTransparent = fabric.util.isTransparent(\n        this.contextCache, x, y, this.targetFindTolerance);\n\n      this.clearContext(this.contextCache);\n\n      return isTransparent;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _shouldClearSelection: function (e, target) {\n      var activeGroup = this.getActiveGroup(),\n          activeObject = this.getActiveObject();\n\n      return (\n        !target\n        ||\n        (target &&\n          activeGroup &&\n          !activeGroup.contains(target) &&\n          activeGroup !== target &&\n          !e.shiftKey)\n        ||\n        (target && !target.evented)\n        ||\n        (target &&\n          !target.selectable &&\n          activeObject &&\n          activeObject !== target)\n      );\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _shouldCenterTransform: function (e, target) {\n      if (!target) {\n        return;\n      }\n\n      var t = this._currentTransform,\n          centerTransform;\n\n      if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\n        centerTransform = this.centeredScaling || target.centeredScaling;\n      }\n      else if (t.action === 'rotate') {\n        centerTransform = this.centeredRotation || target.centeredRotation;\n      }\n\n      return centerTransform ? !e.altKey : e.altKey;\n    },\n\n    /**\n     * @private\n     */\n    _getOriginFromCorner: function(target, corner) {\n      var origin = {\n        x: target.originX,\n        y: target.originY\n      };\n\n      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\n        origin.x = 'right';\n      }\n      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\n        origin.x = 'left';\n      }\n\n      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\n        origin.y = 'bottom';\n      }\n      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\n        origin.y = 'top';\n      }\n\n      return origin;\n    },\n\n    /**\n     * @private\n     */\n    _getActionFromCorner: function(target, corner) {\n      var action = 'drag';\n      if (corner) {\n        action = (corner === 'ml' || corner === 'mr')\n          ? 'scaleX'\n          : (corner === 'mt' || corner === 'mb')\n            ? 'scaleY'\n            : corner === 'mtr'\n              ? 'rotate'\n              : 'scale';\n      }\n      return action;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _setupCurrentTransform: function (e, target) {\n      if (!target) {\n        return;\n      }\n\n      var pointer = this.getPointer(e),\n          corner = target._findTargetCorner(this.getPointer(e, true)),\n          action = this._getActionFromCorner(target, corner),\n          origin = this._getOriginFromCorner(target, corner);\n\n      this._currentTransform = {\n        target: target,\n        action: action,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        left: target.left,\n        top: target.top,\n        theta: degreesToRadians(target.angle),\n        width: target.width * target.scaleX,\n        mouseXSign: 1,\n        mouseYSign: 1\n      };\n\n      this._currentTransform.original = {\n        left: target.left,\n        top: target.top,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        originX: origin.x,\n        originY: origin.y\n      };\n\n      this._resetCurrentTransform(e);\n    },\n\n    /**\n     * Translates object by \"setting\" its left/top\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     */\n    _translateObject: function (x, y) {\n      var target = this._currentTransform.target;\n\n      if (!target.get('lockMovementX')) {\n        target.set('left', x - this._currentTransform.offsetX);\n      }\n      if (!target.get('lockMovementY')) {\n        target.set('top', y - this._currentTransform.offsetY);\n      }\n    },\n\n    /**\n     * Scales object by invoking its scaleX/scaleY methods\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\n     *                    When not provided, an object is scaled by both dimensions equally\n     */\n    _scaleObject: function (x, y, by) {\n      var t = this._currentTransform,\n          target = t.target,\n          lockScalingX = target.get('lockScalingX'),\n          lockScalingY = target.get('lockScalingY'),\n          lockScalingFlip = target.get('lockScalingFlip');\n\n      if (lockScalingX && lockScalingY) {\n        return;\n      }\n\n      // Get the constraint point\n      var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\n          localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY);\n\n      this._setLocalMouse(localMouse, t);\n\n      // Actually scale the object\n      this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip);\n\n      // Make sure the constraints apply\n      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n    },\n\n    /**\n     * @private\n     */\n    _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip) {\n      var target = transform.target, forbidScalingX = false, forbidScalingY = false,\n          dim = target._getNonTransformedDimensions();\n\n      transform.newScaleX = localMouse.x / dim.x;\n      transform.newScaleY = localMouse.y / dim.y;\n\n      if (lockScalingFlip && transform.newScaleX <= 0 && transform.newScaleX < target.scaleX) {\n        forbidScalingX = true;\n      }\n\n      if (lockScalingFlip && transform.newScaleY <= 0 && transform.newScaleY < target.scaleY) {\n        forbidScalingY = true;\n      }\n\n      if (by === 'equally' && !lockScalingX && !lockScalingY) {\n        forbidScalingX || forbidScalingY || this._scaleObjectEqually(localMouse, target, transform);\n      }\n      else if (!by) {\n        forbidScalingX || lockScalingX || target.set('scaleX', transform.newScaleX);\n        forbidScalingY || lockScalingY || target.set('scaleY', transform.newScaleY);\n      }\n      else if (by === 'x' && !target.get('lockUniScaling')) {\n        forbidScalingX || lockScalingX || target.set('scaleX', transform.newScaleX);\n      }\n      else if (by === 'y' && !target.get('lockUniScaling')) {\n        forbidScalingY || lockScalingY || target.set('scaleY', transform.newScaleY);\n      }\n\n      forbidScalingX || forbidScalingY || this._flipObject(transform, by);\n\n    },\n\n    /**\n     * @private\n     */\n    _scaleObjectEqually: function(localMouse, target, transform) {\n\n      var dist = localMouse.y + localMouse.x,\n          dim = target._getNonTransformedDimensions(),\n          lastDist = dim.y * transform.original.scaleY +\n                     dim.x * transform.original.scaleX;\n\n      // We use transform.scaleX/Y instead of target.scaleX/Y\n      // because the object may have a min scale and we'll loose the proportions\n      transform.newScaleX = transform.original.scaleX * dist / lastDist;\n      transform.newScaleY = transform.original.scaleY * dist / lastDist;\n\n      target.set('scaleX', transform.newScaleX);\n      target.set('scaleY', transform.newScaleY);\n    },\n\n    /**\n     * @private\n     */\n    _flipObject: function(transform, by) {\n      if (transform.newScaleX < 0 && by !== 'y') {\n        if (transform.originX === 'left') {\n          transform.originX = 'right';\n        }\n        else if (transform.originX === 'right') {\n          transform.originX = 'left';\n        }\n      }\n\n      if (transform.newScaleY < 0 && by !== 'x') {\n        if (transform.originY === 'top') {\n          transform.originY = 'bottom';\n        }\n        else if (transform.originY === 'bottom') {\n          transform.originY = 'top';\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setLocalMouse: function(localMouse, t) {\n      var target = t.target;\n\n      if (t.originX === 'right') {\n        localMouse.x *= -1;\n      }\n      else if (t.originX === 'center') {\n        localMouse.x *= t.mouseXSign * 2;\n\n        if (localMouse.x < 0) {\n          t.mouseXSign = -t.mouseXSign;\n        }\n      }\n\n      if (t.originY === 'bottom') {\n        localMouse.y *= -1;\n      }\n      else if (t.originY === 'center') {\n        localMouse.y *= t.mouseYSign * 2;\n\n        if (localMouse.y < 0) {\n          t.mouseYSign = -t.mouseYSign;\n        }\n      }\n\n      // adjust the mouse coordinates when dealing with padding\n      if (abs(localMouse.x) > target.padding) {\n        if (localMouse.x < 0) {\n          localMouse.x += target.padding;\n        }\n        else {\n          localMouse.x -= target.padding;\n        }\n      }\n      else { // mouse is within the padding, set to 0\n        localMouse.x = 0;\n      }\n\n      if (abs(localMouse.y) > target.padding) {\n        if (localMouse.y < 0) {\n          localMouse.y += target.padding;\n        }\n        else {\n          localMouse.y -= target.padding;\n        }\n      }\n      else {\n        localMouse.y = 0;\n      }\n    },\n\n    /**\n     * Rotates object by invoking its rotate method\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     */\n    _rotateObject: function (x, y) {\n\n      var t = this._currentTransform;\n\n      if (t.target.get('lockRotation')) {\n        return;\n      }\n\n      var lastAngle = atan2(t.ey - t.top, t.ex - t.left),\n          curAngle = atan2(y - t.top, x - t.left),\n          angle = radiansToDegrees(curAngle - lastAngle + t.theta);\n\n      // normalize angle to positive value\n      if (angle < 0) {\n        angle = 360 + angle;\n      }\n\n      t.target.angle = angle % 360;\n    },\n\n    /**\n     * Set the cursor type of the canvas element\n     * @param {String} value Cursor type of the canvas element.\n     * @see http://www.w3.org/TR/css3-ui/#cursor\n     */\n    setCursor: function (value) {\n      this.upperCanvasEl.style.cursor = value;\n    },\n\n    /**\n     * @private\n     */\n    _resetObjectTransform: function (target) {\n      target.scaleX = 1;\n      target.scaleY = 1;\n      target.setAngle(0);\n    },\n\n    /**\n     * @private\n     */\n    _drawSelection: function () {\n      var ctx = this.contextTop,\n          groupSelector = this._groupSelector,\n          left = groupSelector.left,\n          top = groupSelector.top,\n          aleft = abs(left),\n          atop = abs(top);\n\n      ctx.fillStyle = this.selectionColor;\n\n      ctx.fillRect(\n        groupSelector.ex - ((left > 0) ? 0 : -left),\n        groupSelector.ey - ((top > 0) ? 0 : -top),\n        aleft,\n        atop\n      );\n\n      ctx.lineWidth = this.selectionLineWidth;\n      ctx.strokeStyle = this.selectionBorderColor;\n\n      // selection border\n      if (this.selectionDashArray.length > 1) {\n\n        var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0: aleft),\n            py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0: atop);\n\n        ctx.beginPath();\n\n        fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\n\n        ctx.closePath();\n        ctx.stroke();\n      }\n      else {\n        ctx.strokeRect(\n          groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n          groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\n          aleft,\n          atop\n        );\n      }\n    },\n\n    /**\n     * @private\n     */\n    _isLastRenderedObject: function(e) {\n      return (\n        this.controlsAboveOverlay &&\n        this.lastRenderedObjectWithControlsAboveOverlay &&\n        this.lastRenderedObjectWithControlsAboveOverlay.visible &&\n        this.containsPoint(e, this.lastRenderedObjectWithControlsAboveOverlay) &&\n        this.lastRenderedObjectWithControlsAboveOverlay._findTargetCorner(this.getPointer(e, true)));\n    },\n\n    /**\n     * Method that determines what object we are clicking on\n     * @param {Event} e mouse event\n     * @param {Boolean} skipGroup when true, group is skipped and only objects are traversed through\n     */\n    findTarget: function (e, skipGroup) {\n      if (this.skipTargetFind) {\n        return;\n      }\n\n      if (this._isLastRenderedObject(e)) {\n        return this.lastRenderedObjectWithControlsAboveOverlay;\n      }\n\n      // first check current group (if one exists)\n      var activeGroup = this.getActiveGroup();\n      if (activeGroup && !skipGroup && this.containsPoint(e, activeGroup)) {\n        return activeGroup;\n      }\n\n      var target = this._searchPossibleTargets(e, skipGroup);\n      this._fireOverOutEvents(target, e);\n\n      return target;\n    },\n\n    /**\n     * @private\n     */\n    _fireOverOutEvents: function(target, e) {\n      if (target) {\n        if (this._hoveredTarget !== target) {\n          if (this._hoveredTarget) {\n            this.fire('mouse:out', { target: this._hoveredTarget, e: e });\n            this._hoveredTarget.fire('mouseout');\n          }\n          this.fire('mouse:over', { target: target, e: e });\n          target.fire('mouseover');\n          this._hoveredTarget = target;\n        }\n      }\n      else if (this._hoveredTarget) {\n        this.fire('mouse:out', { target: this._hoveredTarget, e: e });\n        this._hoveredTarget.fire('mouseout');\n        this._hoveredTarget = null;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _checkTarget: function(e, obj, pointer) {\n      if (obj &&\n          obj.visible &&\n          obj.evented &&\n          this.containsPoint(e, obj)){\n        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n          var isTransparent = this.isTargetTransparent(obj, pointer.x, pointer.y);\n          if (!isTransparent) {\n            return true;\n          }\n        }\n        else {\n          return true;\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _searchPossibleTargets: function(e, skipGroup) {\n\n      // Cache all targets where their bounding box contains point.\n      var target,\n          pointer = this.getPointer(e, true),\n          i = this._objects.length;\n      // Do not check for currently grouped objects, since we check the parent group itself.\n      // untill we call this function specifically to search inside the activeGroup\n      while (i--) {\n        if ((!this._objects[i].group || skipGroup) && this._checkTarget(e, this._objects[i], pointer)){\n          this.relatedTarget = this._objects[i];\n          target = this._objects[i];\n          break;\n        }\n      }\n\n      return target;\n    },\n\n    /**\n     * Returns pointer coordinates relative to canvas.\n     * @param {Event} e\n     * @return {Object} object with \"x\" and \"y\" number values\n     */\n    getPointer: function (e, ignoreZoom, upperCanvasEl) {\n      if (!upperCanvasEl) {\n        upperCanvasEl = this.upperCanvasEl;\n      }\n      var pointer = getPointer(e),\n          bounds = upperCanvasEl.getBoundingClientRect(),\n          boundsWidth = bounds.width || 0,\n          boundsHeight = bounds.height || 0,\n          cssScale;\n\n      if (!boundsWidth || !boundsHeight ) {\n        if ('top' in bounds && 'bottom' in bounds) {\n          boundsHeight = Math.abs( bounds.top - bounds.bottom );\n        }\n        if ('right' in bounds && 'left' in bounds) {\n          boundsWidth = Math.abs( bounds.right - bounds.left );\n        }\n      }\n\n      this.calcOffset();\n\n      pointer.x = pointer.x - this._offset.left;\n      pointer.y = pointer.y - this._offset.top;\n      if (!ignoreZoom) {\n        pointer = fabric.util.transformPoint(\n          pointer,\n          fabric.util.invertTransform(this.viewportTransform)\n        );\n      }\n\n      if (boundsWidth === 0 || boundsHeight === 0) {\n        // If bounds are not available (i.e. not visible), do not apply scale.\n        cssScale = { width: 1, height: 1 };\n      }\n      else {\n        cssScale = {\n          width: upperCanvasEl.width / boundsWidth,\n          height: upperCanvasEl.height / boundsHeight\n        };\n      }\n\n      return {\n        x: pointer.x * cssScale.width,\n        y: pointer.y * cssScale.height\n      };\n    },\n\n    /**\n     * @private\n     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n     */\n    _createUpperCanvas: function () {\n      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, '');\n\n      this.upperCanvasEl = this._createCanvasElement();\n      fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\n\n      this.wrapperEl.appendChild(this.upperCanvasEl);\n\n      this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);\n      this._applyCanvasStyle(this.upperCanvasEl);\n      this.contextTop = this.upperCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _createCacheCanvas: function () {\n      this.cacheCanvasEl = this._createCanvasElement();\n      this.cacheCanvasEl.setAttribute('width', this.width);\n      this.cacheCanvasEl.setAttribute('height', this.height);\n      this.contextCache = this.cacheCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _initWrapperElement: function () {\n      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\n        'class': this.containerClass\n      });\n      fabric.util.setStyle(this.wrapperEl, {\n        width: this.getWidth() + 'px',\n        height: this.getHeight() + 'px',\n        position: 'relative'\n      });\n      fabric.util.makeElementUnselectable(this.wrapperEl);\n    },\n\n    /**\n     * @private\n     * @param {HTMLElement} element canvas element to apply styles on\n     */\n    _applyCanvasStyle: function (element) {\n      var width = this.getWidth() || element.width,\n          height = this.getHeight() || element.height;\n\n      fabric.util.setStyle(element, {\n        position: 'absolute',\n        width: width + 'px',\n        height: height + 'px',\n        left: 0,\n        top: 0\n      });\n      element.width = width;\n      element.height = height;\n      fabric.util.makeElementUnselectable(element);\n    },\n\n    /**\n     * Copys the the entire inline style from one element (fromEl) to another (toEl)\n     * @private\n     * @param {Element} fromEl Element style is copied from\n     * @param {Element} toEl Element copied style is applied to\n     */\n    _copyCanvasStyle: function (fromEl, toEl) {\n      toEl.style.cssText = fromEl.style.cssText;\n    },\n\n    /**\n     * Returns context of canvas where object selection is drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getSelectionContext: function() {\n      return this.contextTop;\n    },\n\n    /**\n     * Returns &lt;canvas> element on which object selection is drawn\n     * @return {HTMLCanvasElement}\n     */\n    getSelectionElement: function () {\n      return this.upperCanvasEl;\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     */\n    _setActiveObject: function(object) {\n      if (this._activeObject) {\n        this._activeObject.set('active', false);\n      }\n      this._activeObject = object;\n      object.set('active', true);\n    },\n\n    /**\n     * Sets given object as the only active object on canvas\n     * @param {fabric.Object} object Object to set as an active one\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setActiveObject: function (object, e) {\n      this._setActiveObject(object);\n      this.renderAll();\n      this.fire('object:selected', { target: object, e: e });\n      object.fire('selected', { e: e });\n      return this;\n    },\n\n    /**\n     * Returns currently active object\n     * @return {fabric.Object} active object\n     */\n    getActiveObject: function () {\n      return this._activeObject;\n    },\n\n    /**\n     * @private\n     */\n    _discardActiveObject: function() {\n      if (this._activeObject) {\n        this._activeObject.set('active', false);\n      }\n      this._activeObject = null;\n    },\n\n    /**\n     * Discards currently active object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    discardActiveObject: function (e) {\n      this._discardActiveObject();\n      this.renderAll();\n      this.fire('selection:cleared', { e: e });\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {fabric.Group} group\n     */\n    _setActiveGroup: function(group) {\n      this._activeGroup = group;\n      if (group) {\n        group.set('active', true);\n      }\n    },\n\n    /**\n     * Sets active group to a speicified one\n     * @param {fabric.Group} group Group to set as a current one\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setActiveGroup: function (group, e) {\n      this._setActiveGroup(group);\n      if (group) {\n        this.fire('object:selected', { target: group, e: e });\n        group.fire('selected', { e: e });\n      }\n      return this;\n    },\n\n    /**\n     * Returns currently active group\n     * @return {fabric.Group} Current group\n     */\n    getActiveGroup: function () {\n      return this._activeGroup;\n    },\n\n    /**\n     * @private\n     */\n    _discardActiveGroup: function() {\n      var g = this.getActiveGroup();\n      if (g) {\n        g.destroy();\n      }\n      this.setActiveGroup(null);\n    },\n\n    /**\n     * Discards currently active group\n     * @return {fabric.Canvas} thisArg\n     */\n    discardActiveGroup: function (e) {\n      this._discardActiveGroup();\n      this.fire('selection:cleared', { e: e });\n      return this;\n    },\n\n    /**\n     * Deactivates all objects on canvas, removing any active group or object\n     * @return {fabric.Canvas} thisArg\n     */\n    deactivateAll: function () {\n      var allObjects = this.getObjects(),\n          i = 0,\n          len = allObjects.length;\n      for ( ; i < len; i++) {\n        allObjects[i].set('active', false);\n      }\n      this._discardActiveGroup();\n      this._discardActiveObject();\n      return this;\n    },\n\n    /**\n     * Deactivates all objects and dispatches appropriate events\n     * @return {fabric.Canvas} thisArg\n     */\n    deactivateAllWithDispatch: function (e) {\n      var activeObject = this.getActiveGroup() || this.getActiveObject();\n      if (activeObject) {\n        this.fire('before:selection:cleared', { target: activeObject, e: e });\n      }\n      this.deactivateAll();\n      if (activeObject) {\n        this.fire('selection:cleared', { e: e });\n      }\n      return this;\n    },\n\n    /**\n     * Draws objects' controls (borders/controls)\n     * @param {CanvasRenderingContext2D} ctx Context to render controls on\n     */\n    drawControls: function(ctx) {\n      var activeGroup = this.getActiveGroup();\n      if (activeGroup) {\n        this._drawGroupControls(ctx, activeGroup);\n      }\n      else {\n        this._drawObjectsControls(ctx);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _drawGroupControls: function(ctx, activeGroup) {\n      activeGroup._renderControls(ctx);\n    },\n\n    /**\n     * @private\n     */\n    _drawObjectsControls: function(ctx) {\n      for (var i = 0, len = this._objects.length; i < len; ++i) {\n        if (!this._objects[i] || !this._objects[i].active) {\n          continue;\n        }\n        this._objects[i]._renderControls(ctx);\n        this.lastRenderedObjectWithControlsAboveOverlay = this._objects[i];\n      }\n    }\n  });\n\n  // copying static properties manually to work around Opera's bug,\n  // where \"prototype\" property is enumerable and overrides existing prototype\n  for (var prop in fabric.StaticCanvas) {\n    if (prop !== 'prototype') {\n      fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n    }\n  }\n\n  if (fabric.isTouchSupported) {\n    /** @ignore */\n    fabric.Canvas.prototype._setCursorFromEvent = function() { };\n  }\n\n  /**\n   * @class fabric.Element\n   * @alias fabric.Canvas\n   * @deprecated Use {@link fabric.Canvas} instead.\n   * @constructor\n   */\n  fabric.Element = fabric.Canvas;\n})();\n\n\n(function() {\n\n  var cursorOffset = {\n    mt: 0, // n\n    tr: 1, // ne\n    mr: 2, // e\n    br: 3, // se\n    mb: 4, // s\n    bl: 5, // sw\n    ml: 6, // w\n    tl: 7 // nw\n  },\n  addListener = fabric.util.addListener,\n  removeListener = fabric.util.removeListener;\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Map of cursor style values for each of the object controls\n     * @private\n     */\n    cursorMap: [\n      'n-resize',\n      'ne-resize',\n      'e-resize',\n      'se-resize',\n      's-resize',\n      'sw-resize',\n      'w-resize',\n      'nw-resize'\n    ],\n\n    /**\n     * Adds mouse listeners to canvas\n     * @private\n     */\n    _initEventListeners: function () {\n\n      this._bindEvents();\n\n      addListener(fabric.window, 'resize', this._onResize);\n\n      // mouse events\n      addListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n      addListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);\n\n      // touch events\n      addListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);\n      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\n      if (typeof eventjs !== 'undefined' && 'add' in eventjs) {\n        eventjs.add(this.upperCanvasEl, 'gesture', this._onGesture);\n        eventjs.add(this.upperCanvasEl, 'drag', this._onDrag);\n        eventjs.add(this.upperCanvasEl, 'orientation', this._onOrientationChange);\n        eventjs.add(this.upperCanvasEl, 'shake', this._onShake);\n        eventjs.add(this.upperCanvasEl, 'longpress', this._onLongPress);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _bindEvents: function() {\n      this._onMouseDown = this._onMouseDown.bind(this);\n      this._onMouseMove = this._onMouseMove.bind(this);\n      this._onMouseUp = this._onMouseUp.bind(this);\n      this._onResize = this._onResize.bind(this);\n      this._onGesture = this._onGesture.bind(this);\n      this._onDrag = this._onDrag.bind(this);\n      this._onShake = this._onShake.bind(this);\n      this._onLongPress = this._onLongPress.bind(this);\n      this._onOrientationChange = this._onOrientationChange.bind(this);\n      this._onMouseWheel = this._onMouseWheel.bind(this);\n    },\n\n    /**\n     * Removes all event listeners\n     */\n    removeListeners: function() {\n      removeListener(fabric.window, 'resize', this._onResize);\n\n      removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n      removeListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);\n\n      removeListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);\n      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\n      if (typeof eventjs !== 'undefined' && 'remove' in eventjs) {\n        eventjs.remove(this.upperCanvasEl, 'gesture', this._onGesture);\n        eventjs.remove(this.upperCanvasEl, 'drag', this._onDrag);\n        eventjs.remove(this.upperCanvasEl, 'orientation', this._onOrientationChange);\n        eventjs.remove(this.upperCanvasEl, 'shake', this._onShake);\n        eventjs.remove(this.upperCanvasEl, 'longpress', this._onLongPress);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js gesture\n     * @param {Event} [self] Inner Event object\n     */\n    _onGesture: function(e, self) {\n      this.__onTransformGesture && this.__onTransformGesture(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js drag\n     * @param {Event} [self] Inner Event object\n     */\n    _onDrag: function(e, self) {\n      this.__onDrag && this.__onDrag(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js wheel event\n     * @param {Event} [self] Inner Event object\n     */\n    _onMouseWheel: function(e, self) {\n      this.__onMouseWheel && this.__onMouseWheel(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js orientation change\n     * @param {Event} [self] Inner Event object\n     */\n    _onOrientationChange: function(e, self) {\n      this.__onOrientationChange && this.__onOrientationChange(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onShake: function(e, self) {\n      this.__onShake && this.__onShake(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onLongPress: function(e, self) {\n      this.__onLongPress && this.__onLongPress(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDown: function (e) {\n      this.__onMouseDown(e);\n\n      addListener(fabric.document, 'touchend', this._onMouseUp);\n      addListener(fabric.document, 'touchmove', this._onMouseMove);\n\n      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\n      if (e.type === 'touchstart') {\n        // Unbind mousedown to prevent double triggers from touch devices\n        removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      }\n      else {\n        addListener(fabric.document, 'mouseup', this._onMouseUp);\n        addListener(fabric.document, 'mousemove', this._onMouseMove);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUp: function (e) {\n      this.__onMouseUp(e);\n\n      removeListener(fabric.document, 'mouseup', this._onMouseUp);\n      removeListener(fabric.document, 'touchend', this._onMouseUp);\n\n      removeListener(fabric.document, 'mousemove', this._onMouseMove);\n      removeListener(fabric.document, 'touchmove', this._onMouseMove);\n\n      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);\n      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);\n\n      if (e.type === 'touchend') {\n        // Wait 400ms before rebinding mousedown to prevent double triggers\n        // from touch devices\n        var _this = this;\n        setTimeout(function() {\n          addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);\n        }, 400);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMove: function (e) {\n      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n      this.__onMouseMove(e);\n    },\n\n    /**\n     * @private\n     */\n    _onResize: function () {\n      this.calcOffset();\n    },\n\n    /**\n     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n     * @private\n     * @param {Object} target\n     * @param {Object} pointer\n     */\n    _shouldRender: function(target, pointer) {\n      var activeObject = this.getActiveGroup() || this.getActiveObject();\n\n      return !!(\n        (target && (\n          target.isMoving ||\n          target !== activeObject))\n        ||\n        (!target && !!activeObject)\n        ||\n        (!target && !activeObject && !this._groupSelector)\n        ||\n        (pointer &&\n          this._previousPointer &&\n          this.selection && (\n          pointer.x !== this._previousPointer.x ||\n          pointer.y !== this._previousPointer.y))\n      );\n    },\n\n    /**\n     * Method that defines the actions when mouse is released on canvas.\n     * The method resets the currentTransform parameters, store the image corner\n     * position in the image object and render the canvas on top.\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    __onMouseUp: function (e) {\n      var target;\n\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n        this._onMouseUpInDrawingMode(e);\n        return;\n      }\n\n      if (this._currentTransform) {\n        this._finalizeCurrentTransform();\n        target = this._currentTransform.target;\n      }\n      else {\n        target = this.findTarget(e, true);\n      }\n\n      var shouldRender = this._shouldRender(target, this.getPointer(e));\n\n      this._maybeGroupObjects(e);\n\n      if (target) {\n        target.isMoving = false;\n      }\n\n      shouldRender && this.renderAll();\n\n      this._handleCursorAndEvent(e, target);\n    },\n\n    _handleCursorAndEvent: function(e, target) {\n      this._setCursorFromEvent(e, target);\n\n      // TODO: why are we doing this?\n      var _this = this;\n      setTimeout(function () {\n        _this._setCursorFromEvent(e, target);\n      }, 50);\n\n      this.fire('mouse:up', { target: target, e: e });\n      target && target.fire('mouseup', { e: e });\n    },\n\n    /**\n     * @private\n     */\n    _finalizeCurrentTransform: function() {\n\n      var transform = this._currentTransform,\n          target = transform.target;\n\n      if (target._scaling) {\n        target._scaling = false;\n      }\n\n      target.setCoords();\n\n      // only fire :modified event if target coordinates were changed during mousedown-mouseup\n      if (this.stateful && target.hasStateChanged()) {\n        this.fire('object:modified', { target: target });\n        target.fire('modified');\n      }\n\n      this._restoreOriginXY(target);\n    },\n\n    /**\n     * @private\n     * @param {Object} target Object to restore\n     */\n    _restoreOriginXY: function(target) {\n      if (this._previousOriginX && this._previousOriginY) {\n\n        var originPoint = target.translateToOriginPoint(\n          target.getCenterPoint(),\n          this._previousOriginX,\n          this._previousOriginY);\n\n        target.originX = this._previousOriginX;\n        target.originY = this._previousOriginY;\n\n        target.left = originPoint.x;\n        target.top = originPoint.y;\n\n        this._previousOriginX = null;\n        this._previousOriginY = null;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDownInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = true;\n      this.discardActiveObject(e).renderAll();\n      if (this.clipTo) {\n        fabric.util.clipContext(this, this.contextTop);\n      }\n      var ivt = fabric.util.invertTransform(this.viewportTransform),\n          pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);\n      this.freeDrawingBrush.onMouseDown(pointer);\n      this.fire('mouse:down', { e: e });\n\n      var target = this.findTarget(e);\n      if (typeof target !== 'undefined') {\n        target.fire('mousedown', { e: e, target: target });\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMoveInDrawingMode: function(e) {\n      if (this._isCurrentlyDrawing) {\n        var ivt = fabric.util.invertTransform(this.viewportTransform),\n            pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);\n        this.freeDrawingBrush.onMouseMove(pointer);\n      }\n      this.setCursor(this.freeDrawingCursor);\n      this.fire('mouse:move', { e: e });\n\n      var target = this.findTarget(e);\n      if (typeof target !== 'undefined') {\n        target.fire('mousemove', { e: e, target: target });\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUpInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = false;\n      if (this.clipTo) {\n        this.contextTop.restore();\n      }\n      this.freeDrawingBrush.onMouseUp();\n      this.fire('mouse:up', { e: e });\n\n      var target = this.findTarget(e);\n      if (typeof target !== 'undefined') {\n        target.fire('mouseup', { e: e, target: target });\n      }\n    },\n\n    /**\n     * Method that defines the actions when mouse is clic ked on canvas.\n     * The method inits the currentTransform parameters and renders all the\n     * canvas so the current image can be placed on the top canvas and the rest\n     * in on the container one.\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    __onMouseDown: function (e) {\n\n      // accept only left clicks\n      var isLeftClick  = 'which' in e ? e.which === 1 : e.button === 1;\n      if (!isLeftClick && !fabric.isTouchSupported) {\n        return;\n      }\n\n      if (this.isDrawingMode) {\n        this._onMouseDownInDrawingMode(e);\n        return;\n      }\n\n      // ignore if some object is being transformed at this moment\n      if (this._currentTransform) {\n        return;\n      }\n\n      var target = this.findTarget(e),\n          pointer = this.getPointer(e, true);\n\n      // save pointer for check in __onMouseUp event\n      this._previousPointer = pointer;\n\n      var shouldRender = this._shouldRender(target, pointer),\n          shouldGroup = this._shouldGroup(e, target);\n\n      if (this._shouldClearSelection(e, target)) {\n        this._clearSelection(e, target, pointer);\n      }\n      else if (shouldGroup) {\n        this._handleGrouping(e, target);\n        target = this.getActiveGroup();\n      }\n\n      if (target && target.selectable && !shouldGroup) {\n        this._beforeTransform(e, target);\n        this._setupCurrentTransform(e, target);\n      }\n      // we must renderAll so that active image is placed on the top canvas\n      shouldRender && this.renderAll();\n\n      this.fire('mouse:down', { target: target, e: e });\n      target && target.fire('mousedown', { e: e });\n    },\n\n    /**\n     * @private\n     */\n    _beforeTransform: function(e, target) {\n      this.stateful && target.saveState();\n\n      // determine if it's a drag or rotate case\n      if (target._findTargetCorner(this.getPointer(e))) {\n        this.onBeforeScaleRotate(target);\n      }\n\n      if (target !== this.getActiveGroup() && target !== this.getActiveObject()) {\n        this.deactivateAll();\n        this.setActiveObject(target, e);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _clearSelection: function(e, target, pointer) {\n      this.deactivateAllWithDispatch(e);\n\n      if (target && target.selectable) {\n        this.setActiveObject(target, e);\n      }\n      else if (this.selection) {\n        this._groupSelector = {\n          ex: pointer.x,\n          ey: pointer.y,\n          top: 0,\n          left: 0\n        };\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} target Object for that origin is set to center\n     */\n    _setOriginToCenter: function(target) {\n      this._previousOriginX = this._currentTransform.target.originX;\n      this._previousOriginY = this._currentTransform.target.originY;\n\n      var center = target.getCenterPoint();\n\n      target.originX = 'center';\n      target.originY = 'center';\n\n      target.left = center.x;\n      target.top = center.y;\n\n      this._currentTransform.left = target.left;\n      this._currentTransform.top = target.top;\n    },\n\n    /**\n     * @private\n     * @param {Object} target Object for that center is set to origin\n     */\n    _setCenterToOrigin: function(target) {\n      var originPoint = target.translateToOriginPoint(\n        target.getCenterPoint(),\n        this._previousOriginX,\n        this._previousOriginY);\n\n      target.originX = this._previousOriginX;\n      target.originY = this._previousOriginY;\n\n      target.left = originPoint.x;\n      target.top = originPoint.y;\n\n      this._previousOriginX = null;\n      this._previousOriginY = null;\n    },\n\n    /**\n     * Method that defines the actions when mouse is hovering the canvas.\n     * The currentTransform parameter will definde whether the user is rotating/scaling/translating\n     * an image or neither of them (only hovering). A group selection is also possible and would cancel\n     * all any other type of action.\n     * In case of an image transformation only the top canvas will be rendered.\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    __onMouseMove: function (e) {\n\n      var target, pointer;\n\n      if (this.isDrawingMode) {\n        this._onMouseMoveInDrawingMode(e);\n        return;\n      }\n      if (typeof e.touches !== 'undefined' && e.touches.length > 1) {\n        return;\n      }\n\n      var groupSelector = this._groupSelector;\n\n      // We initially clicked in an empty area, so we draw a box for multiple selection\n      if (groupSelector) {\n        pointer = this.getPointer(e, true);\n\n        groupSelector.left = pointer.x - groupSelector.ex;\n        groupSelector.top = pointer.y - groupSelector.ey;\n\n        this.renderTop();\n      }\n      else if (!this._currentTransform) {\n\n        target = this.findTarget(e);\n\n        if (!target || target && !target.selectable) {\n          this.setCursor(this.defaultCursor);\n        }\n        else {\n          this._setCursorFromEvent(e, target);\n        }\n      }\n      else {\n        this._transformObject(e);\n      }\n\n      this.fire('mouse:move', { target: target, e: e });\n      target && target.fire('mousemove', { e: e });\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event fired on mousemove\n     */\n    _transformObject: function(e) {\n      var pointer = this.getPointer(e),\n          transform = this._currentTransform;\n\n      transform.reset = false,\n      transform.target.isMoving = true;\n\n      this._beforeScaleTransform(e, transform);\n      this._performTransformAction(e, transform, pointer);\n\n      this.renderAll();\n    },\n\n    /**\n     * @private\n     */\n    _performTransformAction: function(e, transform, pointer) {\n      var x = pointer.x,\n          y = pointer.y,\n          target = transform.target,\n          action = transform.action;\n\n      if (action === 'rotate') {\n        this._rotateObject(x, y);\n        this._fire('rotating', target, e);\n      }\n      else if (action === 'scale') {\n        this._onScale(e, transform, x, y);\n        this._fire('scaling', target, e);\n      }\n      else if (action === 'scaleX') {\n        this._scaleObject(x, y, 'x');\n        this._fire('scaling', target, e);\n      }\n      else if (action === 'scaleY') {\n        this._scaleObject(x, y, 'y');\n        this._fire('scaling', target, e);\n      }\n      else {\n        this._translateObject(x, y);\n        this._fire('moving', target, e);\n        this.setCursor(this.moveCursor);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _fire: function(eventName, target, e) {\n      this.fire('object:' + eventName, { target: target, e: e });\n      target.fire(eventName, { e: e });\n    },\n\n    /**\n     * @private\n     */\n    _beforeScaleTransform: function(e, transform) {\n      if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\n        var centerTransform = this._shouldCenterTransform(e, transform.target);\n\n        // Switch from a normal resize to center-based\n        if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\n           // Switch from center-based resize to normal one\n           (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\n        ) {\n          this._resetCurrentTransform(e);\n          transform.reset = true;\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _onScale: function(e, transform, x, y) {\n      // rotate object only if shift key is not pressed\n      // and if it is not a group we are transforming\n      if ((e.shiftKey || this.uniScaleTransform) && !transform.target.get('lockUniScaling')) {\n        transform.currentAction = 'scale';\n        this._scaleObject(x, y);\n      }\n      else {\n        // Switch from a normal resize to proportional\n        if (!transform.reset && transform.currentAction === 'scale') {\n          this._resetCurrentTransform(e, transform.target);\n        }\n\n        transform.currentAction = 'scaleEqually';\n        this._scaleObject(x, y, 'equally');\n      }\n    },\n\n    /**\n     * Sets the cursor depending on where the canvas is being hovered.\n     * Note: very buggy in Opera\n     * @param {Event} e Event object\n     * @param {Object} target Object that the mouse is hovering, if so.\n     */\n    _setCursorFromEvent: function (e, target) {\n      if (!target || !target.selectable) {\n        this.setCursor(this.defaultCursor);\n        return false;\n      }\n      else {\n        var activeGroup = this.getActiveGroup(),\n            // only show proper corner when group selection is not active\n            corner = target._findTargetCorner\n                      && (!activeGroup || !activeGroup.contains(target))\n                      && target._findTargetCorner(this.getPointer(e, true));\n\n        if (!corner) {\n          this.setCursor(target.hoverCursor || this.hoverCursor);\n        }\n        else {\n          this._setCornerCursor(corner, target);\n        }\n      }\n      return true;\n    },\n\n    /**\n     * @private\n     */\n    _setCornerCursor: function(corner, target) {\n      if (corner in cursorOffset) {\n        this.setCursor(this._getRotatedCornerCursor(corner, target));\n      }\n      else if (corner === 'mtr' && target.hasRotatingPoint) {\n        this.setCursor(this.rotationCursor);\n      }\n      else {\n        this.setCursor(this.defaultCursor);\n        return false;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getRotatedCornerCursor: function(corner, target) {\n      var n = Math.round((target.getAngle() % 360) / 45);\n\n      if (n < 0) {\n        n += 8; // full circle ahead\n      }\n      n += cursorOffset[corner];\n      // normalize n to be from 0 to 7\n      n %= 8;\n\n      return this.cursorMap[n];\n    }\n  });\n})();\n\n\n(function() {\n\n  var min = Math.min,\n      max = Math.max;\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     * @return {Boolean}\n     */\n    _shouldGroup: function(e, target) {\n      var activeObject = this.getActiveObject();\n      return e.shiftKey &&\n            (this.getActiveGroup() || (activeObject && activeObject !== target))\n            && this.selection;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _handleGrouping: function (e, target) {\n\n      if (target === this.getActiveGroup()) {\n\n        // if it's a group, find target again, this time skipping group\n        target = this.findTarget(e, true);\n\n        // if even object is not found, bail out\n        if (!target || target.isType('group')) {\n          return;\n        }\n      }\n      if (this.getActiveGroup()) {\n        this._updateActiveGroup(target, e);\n      }\n      else {\n        this._createActiveGroup(target, e);\n      }\n\n      if (this._activeGroup) {\n        this._activeGroup.saveCoords();\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateActiveGroup: function(target, e) {\n      var activeGroup = this.getActiveGroup();\n\n      if (activeGroup.contains(target)) {\n\n        activeGroup.removeWithUpdate(target);\n        this._resetObjectTransform(activeGroup);\n        target.set('active', false);\n\n        if (activeGroup.size() === 1) {\n          // remove group alltogether if after removal it only contains 1 object\n          this.discardActiveGroup(e);\n          // activate last remaining object\n          this.setActiveObject(activeGroup.item(0));\n          return;\n        }\n      }\n      else {\n        activeGroup.addWithUpdate(target);\n        this._resetObjectTransform(activeGroup);\n      }\n      this.fire('selection:created', { target: activeGroup, e: e });\n      activeGroup.set('active', true);\n    },\n\n    /**\n     * @private\n     */\n    _createActiveGroup: function(target, e) {\n\n      if (this._activeObject && target !== this._activeObject) {\n\n        var group = this._createGroup(target);\n        group.addWithUpdate();\n\n        this.setActiveGroup(group);\n        this._activeObject = null;\n\n        this.fire('selection:created', { target: group, e: e });\n      }\n\n      target.set('active', true);\n    },\n\n    /**\n     * @private\n     * @param {Object} target\n     */\n    _createGroup: function(target) {\n\n      var objects = this.getObjects(),\n          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\n          groupObjects = isActiveLower\n            ? [ this._activeObject, target ]\n            : [ target, this._activeObject ];\n\n      return new fabric.Group(groupObjects, {\n        canvas: this\n      });\n    },\n\n    /**\n     * @private\n     * @param {Event} e mouse event\n     */\n    _groupSelectedObjects: function (e) {\n\n      var group = this._collectObjects();\n\n      // do not create group for 1 element only\n      if (group.length === 1) {\n        this.setActiveObject(group[0], e);\n      }\n      else if (group.length > 1) {\n        group = new fabric.Group(group.reverse(), {\n          canvas: this\n        });\n        group.addWithUpdate();\n        this.setActiveGroup(group, e);\n        group.saveCoords();\n        this.fire('selection:created', { target: group });\n        this.renderAll();\n      }\n    },\n\n    /**\n     * @private\n     */\n    _collectObjects: function() {\n      var group = [ ],\n          currentObject,\n          x1 = this._groupSelector.ex,\n          y1 = this._groupSelector.ey,\n          x2 = x1 + this._groupSelector.left,\n          y2 = y1 + this._groupSelector.top,\n          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\n          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\n          isClick = x1 === x2 && y1 === y2;\n\n      for (var i = this._objects.length; i--; ) {\n        currentObject = this._objects[i];\n\n        if (!currentObject || !currentObject.selectable || !currentObject.visible) {\n          continue;\n        }\n\n        if (currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2) ||\n            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\n            currentObject.containsPoint(selectionX1Y1) ||\n            currentObject.containsPoint(selectionX2Y2)\n        ) {\n          currentObject.set('active', true);\n          group.push(currentObject);\n\n          // only add one object if it's a click\n          if (isClick) {\n            break;\n          }\n        }\n      }\n\n      return group;\n    },\n\n    /**\n     * @private\n     */\n    _maybeGroupObjects: function(e) {\n      if (this.selection && this._groupSelector) {\n        this._groupSelectedObjects(e);\n      }\n\n      var activeGroup = this.getActiveGroup();\n      if (activeGroup) {\n        activeGroup.setObjectsCoords().setCoords();\n        activeGroup.isMoving = false;\n        this.setCursor(this.defaultCursor);\n      }\n\n      // clear selection and current transformation\n      this._groupSelector = null;\n      this._currentTransform = null;\n    }\n  });\n\n})();\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   */\n  toDataURL: function (options) {\n    options || (options = { });\n\n    var format = options.format || 'png',\n        quality = options.quality || 1,\n        multiplier = options.multiplier || 1,\n        cropping = {\n          left: options.left,\n          top: options.top,\n          width: options.width,\n          height: options.height\n        };\n\n    if (multiplier !== 1) {\n      return this.__toDataURLWithMultiplier(format, quality, cropping, multiplier);\n    }\n    else {\n      return this.__toDataURL(format, quality, cropping);\n    }\n  },\n\n  /**\n   * @private\n   */\n  __toDataURL: function(format, quality, cropping) {\n\n    this.renderAll(true);\n\n    var canvasEl = this.upperCanvasEl || this.lowerCanvasEl,\n        croppedCanvasEl = this.__getCroppedCanvas(canvasEl, cropping);\n\n    // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n    if (format === 'jpg') {\n      format = 'jpeg';\n    }\n\n    var data = (fabric.StaticCanvas.supports('toDataURLWithQuality'))\n              ? (croppedCanvasEl || canvasEl).toDataURL('image/' + format, quality)\n              : (croppedCanvasEl || canvasEl).toDataURL('image/' + format);\n\n    this.contextTop && this.clearContext(this.contextTop);\n    this.renderAll();\n\n    if (croppedCanvasEl) {\n      croppedCanvasEl = null;\n    }\n\n    return data;\n  },\n\n  /**\n   * @private\n   */\n  __getCroppedCanvas: function(canvasEl, cropping) {\n\n    var croppedCanvasEl,\n        croppedCtx,\n        shouldCrop = 'left' in cropping ||\n                     'top' in cropping ||\n                     'width' in cropping ||\n                     'height' in cropping;\n\n    if (shouldCrop) {\n\n      croppedCanvasEl = fabric.util.createCanvasElement();\n      croppedCtx = croppedCanvasEl.getContext('2d');\n\n      croppedCanvasEl.width = cropping.width || this.width;\n      croppedCanvasEl.height = cropping.height || this.height;\n\n      croppedCtx.drawImage(canvasEl, -cropping.left || 0, -cropping.top || 0);\n    }\n\n    return croppedCanvasEl;\n  },\n\n  /**\n   * @private\n   */\n  __toDataURLWithMultiplier: function(format, quality, cropping, multiplier) {\n\n    var origWidth = this.getWidth(),\n        origHeight = this.getHeight(),\n        scaledWidth = origWidth * multiplier,\n        scaledHeight = origHeight * multiplier,\n        activeObject = this.getActiveObject(),\n        activeGroup = this.getActiveGroup(),\n\n        ctx = this.contextTop || this.contextContainer;\n\n    if (multiplier > 1) {\n      this.setWidth(scaledWidth).setHeight(scaledHeight);\n    }\n    ctx.scale(multiplier, multiplier);\n\n    if (cropping.left) {\n      cropping.left *= multiplier;\n    }\n    if (cropping.top) {\n      cropping.top *= multiplier;\n    }\n    if (cropping.width) {\n      cropping.width *= multiplier;\n    }\n    else if (multiplier < 1) {\n      cropping.width = scaledWidth;\n    }\n    if (cropping.height) {\n      cropping.height *= multiplier;\n    }\n    else if (multiplier < 1) {\n      cropping.height = scaledHeight;\n    }\n\n    if (activeGroup) {\n      // not removing group due to complications with restoring it with correct state afterwords\n      this._tempRemoveBordersControlsFromGroup(activeGroup);\n    }\n    else if (activeObject && this.deactivateAll) {\n      this.deactivateAll();\n    }\n\n    this.renderAll(true);\n\n    var data = this.__toDataURL(format, quality, cropping);\n\n    // restoring width, height for `renderAll` to draw\n    // background properly (while context is scaled)\n    this.width = origWidth;\n    this.height = origHeight;\n\n    ctx.scale(1 / multiplier,  1 / multiplier);\n    this.setWidth(origWidth).setHeight(origHeight);\n\n    if (activeGroup) {\n      this._restoreBordersControlsOnGroup(activeGroup);\n    }\n    else if (activeObject && this.setActiveObject) {\n      this.setActiveObject(activeObject);\n    }\n\n    this.contextTop && this.clearContext(this.contextTop);\n    this.renderAll();\n\n    return data;\n  },\n\n  /**\n   * Exports canvas element to a dataurl image (allowing to change image size via multiplier).\n   * @deprecated since 1.0.13\n   * @param {String} format (png|jpeg)\n   * @param {Number} multiplier\n   * @param {Number} quality (0..1)\n   * @return {String}\n   */\n  toDataURLWithMultiplier: function (format, multiplier, quality) {\n    return this.toDataURL({\n      format: format,\n      multiplier: multiplier,\n      quality: quality\n    });\n  },\n\n  /**\n   * @private\n   */\n  _tempRemoveBordersControlsFromGroup: function(group) {\n    group.origHasControls = group.hasControls;\n    group.origBorderColor = group.borderColor;\n\n    group.hasControls = true;\n    group.borderColor = 'rgba(0,0,0,0)';\n\n    group.forEachObject(function(o) {\n      o.origBorderColor = o.borderColor;\n      o.borderColor = 'rgba(0,0,0,0)';\n    });\n  },\n\n  /**\n   * @private\n   */\n  _restoreBordersControlsOnGroup: function(group) {\n    group.hideControls = group.origHideControls;\n    group.borderColor = group.origBorderColor;\n\n    group.forEachObject(function(o) {\n      o.borderColor = o.origBorderColor;\n      delete o.origBorderColor;\n    });\n  }\n});\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Populates canvas with data from the specified dataless JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\n   * @deprecated since 1.2.2\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#deserialization}\n   */\n  loadFromDatalessJSON: function (json, callback, reviver) {\n    return this.loadFromJSON(json, callback, reviver);\n  },\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * });\n   */\n  loadFromJSON: function (json, callback, reviver) {\n    if (!json) {\n      return;\n    }\n\n    // serialize if it wasn't already\n    var serialized = (typeof json === 'string')\n      ? JSON.parse(json)\n      : json;\n\n    this.clear();\n\n    var _this = this;\n    this._enlivenObjects(serialized.objects, function () {\n      _this._setBgOverlay(serialized, callback);\n    }, reviver);\n\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {Object} serialized Object with background and overlay information\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n   */\n  _setBgOverlay: function(serialized, callback) {\n    var _this = this,\n        loaded = {\n          backgroundColor: false,\n          overlayColor: false,\n          backgroundImage: false,\n          overlayImage: false\n        };\n\n    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n      callback && callback();\n      return;\n    }\n\n    var cbIfLoaded = function () {\n      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n        _this.renderAll();\n        callback && callback();\n      }\n    };\n\n    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\n\n    cbIfLoaded();\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n   * @param {(Object|String)} value Value to set\n   * @param {Object} loaded Set loaded property to true if property is set\n   * @param {Object} callback Callback function to invoke after property is set\n   */\n  __setBgOverlay: function(property, value, loaded, callback) {\n    var _this = this;\n\n    if (!value) {\n      loaded[property] = true;\n      return;\n    }\n\n    if (property === 'backgroundImage' || property === 'overlayImage') {\n      fabric.Image.fromObject(value, function(img) {\n        _this[property] = img;\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n    else {\n      this['set' + fabric.util.string.capitalize(property, true)](value, function() {\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n  },\n\n  /**\n   * @private\n   * @param {Array} objects\n   * @param {Function} callback\n   * @param {Function} [reviver]\n   */\n  _enlivenObjects: function (objects, callback, reviver) {\n    var _this = this;\n\n    if (!objects || objects.length === 0) {\n      callback && callback();\n      return;\n    }\n\n    var renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n      enlivenedObjects.forEach(function(obj, index) {\n        _this.insertAt(obj, index, true);\n      });\n\n      _this.renderOnAddRemove = renderOnAddRemove;\n      callback && callback();\n    }, null, reviver);\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Function} callback\n   */\n  _toDataURL: function (format, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURL(format));\n    });\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Number} multiplier\n   * @param {Function} callback\n   */\n  _toDataURLWithMultiplier: function (format, multiplier, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURLWithMultiplier(format, multiplier));\n    });\n  },\n\n  /**\n   * Clones canvas instance\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone: function (callback, properties) {\n    var data = JSON.stringify(this.toJSON(properties));\n    this.cloneWithoutData(function(clone) {\n      clone.loadFromJSON(data, function() {\n        callback && callback(clone);\n      });\n    });\n  },\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions, clipping properties, etc.\n   * but leaves data empty (so that you can populate it with your own)\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   */\n  cloneWithoutData: function(callback) {\n    var el = fabric.document.createElement('canvas');\n\n    el.width = this.getWidth();\n    el.height = this.getHeight();\n\n    var clone = new fabric.Canvas(el);\n    clone.clipTo = this.clipTo;\n    if (this.backgroundImage) {\n      clone.setBackgroundImage(this.backgroundImage.src, function() {\n        clone.renderAll();\n        callback && callback(clone);\n      });\n      clone.backgroundImageOpacity = this.backgroundImageOpacity;\n      clone.backgroundImageStretch = this.backgroundImageStretch;\n    }\n    else {\n      callback && callback(clone);\n    }\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      toFixed = fabric.util.toFixed,\n      capitalize = fabric.util.string.capitalize,\n      degreesToRadians = fabric.util.degreesToRadians,\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\n  if (fabric.Object) {\n    return;\n  }\n\n  /**\n   * Root object class from which all 2d shape classes inherit from\n   * @class fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#objects}\n   * @see {@link fabric.Object#initialize} for constructor definition\n   *\n   * @fires added\n   * @fires removed\n   *\n   * @fires selected\n   * @fires modified\n   * @fires rotating\n   * @fires scaling\n   * @fires moving\n   *\n   * @fires mousedown\n   * @fires mouseup\n   */\n  fabric.Object = fabric.util.createClass(/** @lends fabric.Object.prototype */ {\n\n    /**\n     * Retrieves object's {@link fabric.Object#clipTo|clipping function}\n     * @method getClipTo\n     * @memberOf fabric.Object.prototype\n     * @return {Function}\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#clipTo|clipping function}\n     * @method setClipTo\n     * @memberOf fabric.Object.prototype\n     * @param {Function} clipTo Clipping function\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#transformMatrix|transformMatrix}\n     * @method getTransformMatrix\n     * @memberOf fabric.Object.prototype\n     * @return {Array} transformMatrix\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#transformMatrix|transformMatrix}\n     * @method setTransformMatrix\n     * @memberOf fabric.Object.prototype\n     * @param {Array} transformMatrix\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#visible|visible} state\n     * @method getVisible\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean} True if visible\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#visible|visible} state\n     * @method setVisible\n     * @memberOf fabric.Object.prototype\n     * @param {Boolean} value visible value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#shadow|shadow}\n     * @method getShadow\n     * @memberOf fabric.Object.prototype\n     * @return {Object} Shadow instance\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#stroke|stroke}\n     * @method getStroke\n     * @memberOf fabric.Object.prototype\n     * @return {String} stroke value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#stroke|stroke}\n     * @method setStroke\n     * @memberOf fabric.Object.prototype\n     * @param {String} value stroke value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#strokeWidth|strokeWidth}\n     * @method getStrokeWidth\n     * @memberOf fabric.Object.prototype\n     * @return {Number} strokeWidth value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#strokeWidth|strokeWidth}\n     * @method setStrokeWidth\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value strokeWidth value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#originX|originX}\n     * @method getOriginX\n     * @memberOf fabric.Object.prototype\n     * @return {String} originX value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#originX|originX}\n     * @method setOriginX\n     * @memberOf fabric.Object.prototype\n     * @param {String} value originX value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#originY|originY}\n     * @method getOriginY\n     * @memberOf fabric.Object.prototype\n     * @return {String} originY value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#originY|originY}\n     * @method setOriginY\n     * @memberOf fabric.Object.prototype\n     * @param {String} value originY value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#fill|fill}\n     * @method getFill\n     * @memberOf fabric.Object.prototype\n     * @return {String} Fill value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#fill|fill}\n     * @method setFill\n     * @memberOf fabric.Object.prototype\n     * @param {String} value Fill value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#opacity|opacity}\n     * @method getOpacity\n     * @memberOf fabric.Object.prototype\n     * @return {Number} Opacity value (0-1)\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#opacity|opacity}\n     * @method setOpacity\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value Opacity value (0-1)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#angle|angle} (in degrees)\n     * @method getAngle\n     * @memberOf fabric.Object.prototype\n     * @return {Number}\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#top|top position}\n     * @method getTop\n     * @memberOf fabric.Object.prototype\n     * @return {Number} Top value (in pixels)\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#top|top position}\n     * @method setTop\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value Top value (in pixels)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#left|left position}\n     * @method getLeft\n     * @memberOf fabric.Object.prototype\n     * @return {Number} Left value (in pixels)\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#left|left position}\n     * @method setLeft\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value Left value (in pixels)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#scaleX|scaleX} value\n     * @method getScaleX\n     * @memberOf fabric.Object.prototype\n     * @return {Number} scaleX value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#scaleX|scaleX} value\n     * @method setScaleX\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value scaleX value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#scaleY|scaleY} value\n     * @method getScaleY\n     * @memberOf fabric.Object.prototype\n     * @return {Number} scaleY value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#scaleY|scaleY} value\n     * @method setScaleY\n     * @memberOf fabric.Object.prototype\n     * @param {Number} value scaleY value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#flipX|flipX} value\n     * @method getFlipX\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean} flipX value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#flipX|flipX} value\n     * @method setFlipX\n     * @memberOf fabric.Object.prototype\n     * @param {Boolean} value flipX value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's {@link fabric.Object#flipY|flipY} value\n     * @method getFlipY\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean} flipY value\n     */\n\n    /**\n     * Sets object's {@link fabric.Object#flipY|flipY} value\n     * @method setFlipY\n     * @memberOf fabric.Object.prototype\n     * @param {Boolean} value flipY value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n\n    /**\n     * Type of an object (rect, circle, path, etc.).\n     * Note that this property is meant to be read-only and not meant to be modified.\n     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n     * @type String\n     * @default\n     */\n    type:                     'object',\n\n    /**\n     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originX:                  'left',\n\n    /**\n     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originY:                  'top',\n\n    /**\n     * Top position of an object. Note that by default it's relative to object center. You can change this by setting originY={top/center/bottom}\n     * @type Number\n     * @default\n     */\n    top:                      0,\n\n    /**\n     * Left position of an object. Note that by default it's relative to object center. You can change this by setting originX={left/center/right}\n     * @type Number\n     * @default\n     */\n    left:                     0,\n\n    /**\n     * Object width\n     * @type Number\n     * @default\n     */\n    width:                    0,\n\n    /**\n     * Object height\n     * @type Number\n     * @default\n     */\n    height:                   0,\n\n    /**\n     * Object scale factor (horizontal)\n     * @type Number\n     * @default\n     */\n    scaleX:                   1,\n\n    /**\n     * Object scale factor (vertical)\n     * @type Number\n     * @default\n     */\n    scaleY:                   1,\n\n    /**\n     * When true, an object is rendered as flipped horizontally\n     * @type Boolean\n     * @default\n     */\n    flipX:                    false,\n\n    /**\n     * When true, an object is rendered as flipped vertically\n     * @type Boolean\n     * @default\n     */\n    flipY:                    false,\n\n    /**\n     * Opacity of an object\n     * @type Number\n     * @default\n     */\n    opacity:                  1,\n\n    /**\n     * Angle of rotation of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    angle:                    0,\n\n    /**\n     * Size of object's controlling corners (in pixels)\n     * @type Number\n     * @default\n     */\n    cornerSize:               12,\n\n    /**\n     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n     * @type Boolean\n     * @default\n     */\n    transparentCorners:       true,\n\n    /**\n     * Default cursor value used when hovering over this object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:              null,\n\n    /**\n     * Padding between object and its controlling borders (in pixels)\n     * @type Number\n     * @default\n     */\n    padding:                  0,\n\n    /**\n     * Color of controlling borders of an object (when it's active)\n     * @type String\n     * @default\n     */\n    borderColor:              'rgba(102,153,255,0.75)',\n\n    /**\n     * Color of controlling corners of an object (when it's active)\n     * @type String\n     * @default\n     */\n    cornerColor:              'rgba(102,153,255,0.5)',\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being scaled via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:          false,\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being rotated via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:         true,\n\n    /**\n     * Color of object's fill\n     * @type String\n     * @default\n     */\n    fill:                     'rgb(0,0,0)',\n\n    /**\n     * Fill rule used to fill an object\n     * accepted values are nonzero, evenodd\n     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n     * @type String\n     * @default\n     */\n    fillRule:                 'nonzero',\n\n    /**\n     * Composite rule used for canvas globalCompositeOperation\n     * @type String\n     * @default\n     */\n    globalCompositeOperation: 'source-over',\n\n    /**\n     * Background color of an object. Only works with text objects at the moment.\n     * @type String\n     * @default\n     */\n    backgroundColor:          '',\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color\n     * @type String\n     * @default\n     */\n    stroke:                   null,\n\n    /**\n     * Width of a stroke used to render this object\n     * @type Number\n     * @default\n     */\n    strokeWidth:              1,\n\n    /**\n     * Array specifying dash pattern of an object's stroke (stroke must be defined)\n     * @type Array\n     */\n    strokeDashArray:          null,\n\n    /**\n     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n     * @type String\n     * @default\n     */\n    strokeLineCap:            'butt',\n\n    /**\n     * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\n     * @type String\n     * @default\n     */\n    strokeLineJoin:           'miter',\n\n    /**\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n     * @type Number\n     * @default\n     */\n    strokeMiterLimit:         10,\n\n    /**\n     * Shadow object representing shadow of this shape\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:                   null,\n\n    /**\n     * Opacity of object's controlling borders when object is active and moving\n     * @type Number\n     * @default\n     */\n    borderOpacityWhenMoving:  0.4,\n\n    /**\n     * Scale factor of object's controlling borders\n     * @type Number\n     * @default\n     */\n    borderScaleFactor:        1,\n\n    /**\n     * Transform matrix (similar to SVG's transform matrix)\n     * @type Array\n     */\n    transformMatrix:          null,\n\n    /**\n     * Minimum allowed scale value of an object\n     * @type Number\n     * @default\n     */\n    minScaleLimit:            0.01,\n\n    /**\n     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n     * But events still fire on it.\n     * @type Boolean\n     * @default\n     */\n    selectable:               true,\n\n    /**\n     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n     * @type Boolean\n     * @default\n     */\n    evented:                  true,\n\n    /**\n     * When set to `false`, an object is not rendered on canvas\n     * @type Boolean\n     * @default\n     */\n    visible:                  true,\n\n    /**\n     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n     * @type Boolean\n     * @default\n     */\n    hasControls:              true,\n\n    /**\n     * When set to `false`, object's controlling borders are not rendered\n     * @type Boolean\n     * @default\n     */\n    hasBorders:               true,\n\n    /**\n     * When set to `false`, object's controlling rotating point will not be visible or selectable\n     * @type Boolean\n     * @default\n     */\n    hasRotatingPoint:         true,\n\n    /**\n     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\n     * @type Number\n     * @default\n     */\n    rotatingPointOffset:      40,\n\n    /**\n     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:       false,\n\n    /**\n     * When `false`, default object's values are not included in its serialization\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues:     true,\n\n    /**\n     * Function that determines clipping of an object (context is passed as a first argument)\n     * Note that context origin is at the object's center point (not left/top corner)\n     * @type Function\n     */\n    clipTo:                   null,\n\n    /**\n     * When `true`, object horizontal movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementX:            false,\n\n    /**\n     * When `true`, object vertical movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementY:            false,\n\n    /**\n     * When `true`, object rotation is locked\n     * @type Boolean\n     * @default\n     */\n    lockRotation:             false,\n\n    /**\n     * When `true`, object horizontal scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingX:             false,\n\n    /**\n     * When `true`, object vertical scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingY:             false,\n\n    /**\n     * When `true`, object non-uniform scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockUniScaling:           false,\n\n    /**\n     * When `true`, object cannot be flipped by scaling into negative values\n     * @type Boolean\n     * @default\n     */\n\n    lockScalingFlip:          false,\n    /**\n     * List of properties to consider when checking if state\n     * of an object is changed (fabric.Object#hasStateChanged)\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties:  (\n      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\n      'stroke strokeWidth strokeDashArray strokeLineCap strokeLineJoin strokeMiterLimit ' +\n      'angle opacity fill fillRule globalCompositeOperation shadow clipTo visible backgroundColor ' +\n      'alignX alignY meetOrSlice'\n    ).split(' '),\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      if (options) {\n        this.setOptions(options);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initGradient: function(options) {\n      if (options.fill && options.fill.colorStops && !(options.fill instanceof fabric.Gradient)) {\n        this.set('fill', new fabric.Gradient(options.fill));\n      }\n      if (options.stroke && options.stroke.colorStops && !(options.stroke instanceof fabric.Gradient)) {\n        this.set('stroke', new fabric.Gradient(options.stroke));\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initPattern: function(options) {\n      if (options.fill && options.fill.source && !(options.fill instanceof fabric.Pattern)) {\n        this.set('fill', new fabric.Pattern(options.fill));\n      }\n      if (options.stroke && options.stroke.source && !(options.stroke instanceof fabric.Pattern)) {\n        this.set('stroke', new fabric.Pattern(options.stroke));\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initClipping: function(options) {\n      if (!options.clipTo || typeof options.clipTo !== 'string') {\n        return;\n      }\n\n      var functionBody = fabric.util.getFunctionBody(options.clipTo);\n      if (typeof functionBody !== 'undefined') {\n        this.clipTo = new Function('ctx', functionBody);\n      }\n    },\n\n    /**\n     * Sets object's properties from options\n     * @param {Object} [options] Options object\n     */\n    setOptions: function(options) {\n      for (var prop in options) {\n        this.set(prop, options[prop]);\n      }\n      this._initGradient(options);\n      this._initPattern(options);\n      this._initClipping(options);\n    },\n\n    /**\n     * Transforms context when rendering an object\n     * @param {CanvasRenderingContext2D} ctx Context\n     * @param {Boolean} fromLeft When true, context is transformed to object's top/left corner. This is used when rendering text on Node\n     */\n    transform: function(ctx, fromLeft) {\n      if (this.group && this.canvas.preserveObjectStacking && this.group === this.canvas._activeGroup) {\n        this.group.transform(ctx);\n      }\n      var center = fromLeft ? this._getLeftTopCoords() : this.getCenterPoint();\n      ctx.translate(center.x, center.y);\n      ctx.rotate(degreesToRadians(this.angle));\n      ctx.scale(\n        this.scaleX * (this.flipX ? -1 : 1),\n        this.scaleY * (this.flipY ? -1 : 1)\n      );\n    },\n\n    /**\n     * Returns an object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n          object = {\n            type:                     this.type,\n            originX:                  this.originX,\n            originY:                  this.originY,\n            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\n            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\n            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\n            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\n            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\n            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\n            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n            strokeDashArray:          this.strokeDashArray,\n            strokeLineCap:            this.strokeLineCap,\n            strokeLineJoin:           this.strokeLineJoin,\n            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n            angle:                    toFixed(this.getAngle(), NUM_FRACTION_DIGITS),\n            flipX:                    this.flipX,\n            flipY:                    this.flipY,\n            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\n            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\n            visible:                  this.visible,\n            clipTo:                   this.clipTo && String(this.clipTo),\n            backgroundColor:          this.backgroundColor,\n            fillRule:                 this.fillRule,\n            globalCompositeOperation: this.globalCompositeOperation,\n            transformMatrix:          this.transformMatrix\n          };\n\n      if (!this.includeDefaultValues) {\n        object = this._removeDefaultValues(object);\n      }\n\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\n      return object;\n    },\n\n    /**\n     * Returns (dataless) object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      // will be overwritten by subclasses\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     */\n    _removeDefaultValues: function(object) {\n      var prototype = fabric.util.getKlass(object.type).prototype,\n          stateProperties = prototype.stateProperties;\n\n      stateProperties.forEach(function(prop) {\n        if (object[prop] === prototype[prop]) {\n          delete object[prop];\n        }\n        var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\n                      Object.prototype.toString.call(prototype[prop]) === '[object Array]';\n\n        // basically a check for [] === []\n        if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\n          delete object[prop];\n        }\n      });\n\n      return object;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.' + capitalize(this.type) + '>';\n    },\n\n    /**\n     * Basic getter\n     * @param {String} property Property name\n     * @return {Any} value of a property\n     */\n    get: function(property) {\n      return this[property];\n    },\n\n    /**\n     * @private\n     */\n    _setObject: function(obj) {\n      for (var prop in obj) {\n        this._set(prop, obj[prop]);\n      }\n    },\n\n    /**\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    set: function(key, value) {\n      if (typeof key === 'object') {\n        this._setObject(key);\n      }\n      else {\n        if (typeof value === 'function' && key !== 'clipTo') {\n          this._set(key, value(this.get(key)));\n        }\n        else {\n          this._set(key, value);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {Any} value\n     * @return {fabric.Object} thisArg\n     */\n    _set: function(key, value) {\n      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY');\n\n      if (shouldConstrainValue) {\n        value = this._constrainScale(value);\n      }\n      if (key === 'scaleX' && value < 0) {\n        this.flipX = !this.flipX;\n        value *= -1;\n      }\n      else if (key === 'scaleY' && value < 0) {\n        this.flipY = !this.flipY;\n        value *= -1;\n      }\n      else if (key === 'width' || key === 'height') {\n        this.minScaleLimit = toFixed(Math.min(0.1, 1/Math.max(this.width, this.height)), 2);\n      }\n      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\n        value = new fabric.Shadow(value);\n      }\n\n      this[key] = value;\n\n      return this;\n    },\n\n    /**\n     * This callback function is called by the parent group of an object every\n     * time a non-delegated property changes on the group. It is passed the key\n     * and value as parameters. Not adding in this function's signature to avoid\n     * Travis build error about unused variables.\n     */\n    setOnGroup: function() {\n      // implemented by sub-classes, as needed.\n    },\n\n    /**\n     * Toggles specified property from `true` to `false` or from `false` to `true`\n     * @param {String} property Property to toggle\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    toggle: function(property) {\n      var value = this.get(property);\n      if (typeof value === 'boolean') {\n        this.set(property, !value);\n      }\n      return this;\n    },\n\n    /**\n     * Sets sourcePath of an object\n     * @param {String} value Value to set sourcePath to\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setSourcePath: function(value) {\n      this.sourcePath = value;\n      return this;\n    },\n\n    /**\n     * Retrieves viewportTransform from Object's canvas if possible\n     * @method getViewportTransform\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean} flipY value // TODO\n     */\n    getViewportTransform: function() {\n      if (this.canvas && this.canvas.viewportTransform) {\n        return this.canvas.viewportTransform;\n      }\n      return [1, 0, 0, 1, 0, 0];\n    },\n\n    /**\n     * Renders an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    render: function(ctx, noTransform) {\n      // do not render if width/height are zeros or object is not visible\n      if ((this.width === 0 && this.height === 0) || !this.visible) {\n        return;\n      }\n\n      ctx.save();\n\n      //setup fill rule for current object\n      this._setupCompositeOperation(ctx);\n      if (!noTransform) {\n        this.transform(ctx);\n      }\n      this._setStrokeStyles(ctx);\n      this._setFillStyles(ctx);\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      this._setOpacity(ctx);\n      this._setShadow(ctx);\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      this._render(ctx, noTransform);\n      this.clipTo && ctx.restore();\n\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setOpacity: function(ctx) {\n      if (this.group) {\n        this.group._setOpacity(ctx);\n      }\n      ctx.globalAlpha *= this.opacity;\n    },\n\n    _setStrokeStyles: function(ctx) {\n      if (this.stroke) {\n        ctx.lineWidth = this.strokeWidth;\n        ctx.lineCap = this.strokeLineCap;\n        ctx.lineJoin = this.strokeLineJoin;\n        ctx.miterLimit = this.strokeMiterLimit;\n        ctx.strokeStyle = this.stroke.toLive\n          ? this.stroke.toLive(ctx, this)\n          : this.stroke;\n      }\n    },\n\n    _setFillStyles: function(ctx) {\n      if (this.fill) {\n        ctx.fillStyle = this.fill.toLive\n          ? this.fill.toLive(ctx, this)\n          : this.fill;\n      }\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    _renderControls: function(ctx, noTransform) {\n      if (!this.active || noTransform) {\n        return;\n      }\n      var vpt = this.getViewportTransform();\n      ctx.save();\n      var center;\n      if (this.group) {\n        center = fabric.util.transformPoint(this.group.getCenterPoint(), vpt);\n        ctx.translate(center.x, center.y);\n        ctx.rotate(degreesToRadians(this.group.angle));\n      }\n      center = fabric.util.transformPoint(this.getCenterPoint(), vpt, null != this.group);\n      if (this.group) {\n        center.x *= this.group.scaleX;\n        center.y *= this.group.scaleY;\n      }\n      ctx.translate(center.x, center.y);\n      ctx.rotate(degreesToRadians(this.angle));\n      this.drawBorders(ctx);\n      this.drawControls(ctx);\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      var multX = (this.canvas && this.canvas.viewportTransform[0]) || 1,\n          multY = (this.canvas && this.canvas.viewportTransform[3]) || 1;\n\n      ctx.shadowColor = this.shadow.color;\n      ctx.shadowBlur = this.shadow.blur * (multX + multY) * (this.scaleX + this.scaleY) / 4;\n      ctx.shadowOffsetX = this.shadow.offsetX * multX * this.scaleX;\n      ctx.shadowOffsetY = this.shadow.offsetY * multY * this.scaleY;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _removeShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      ctx.shadowColor = '';\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderFill: function(ctx) {\n      if (!this.fill) {\n        return;\n      }\n\n      ctx.save();\n      if (this.fill.gradientTransform) {\n        var g = this.fill.gradientTransform;\n        ctx.transform.apply(ctx, g);\n      }\n      if (this.fill.toLive) {\n        ctx.translate(\n          -this.width / 2 + this.fill.offsetX || 0,\n          -this.height / 2 + this.fill.offsetY || 0);\n      }\n      if (this.fillRule === 'evenodd') {\n        ctx.fill('evenodd');\n      }\n      else {\n        ctx.fill();\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderStroke: function(ctx) {\n      if (!this.stroke || this.strokeWidth === 0) {\n        return;\n      }\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n\n      if (this.strokeDashArray) {\n        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n        if (1 & this.strokeDashArray.length) {\n          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);\n        }\n        if (supportsLineDash) {\n          ctx.setLineDash(this.strokeDashArray);\n          this._stroke && this._stroke(ctx);\n        }\n        else {\n          this._renderDashedStroke && this._renderDashedStroke(ctx);\n        }\n        ctx.stroke();\n      }\n      else {\n        if (this.stroke.gradientTransform) {\n          var g = this.stroke.gradientTransform;\n          ctx.transform.apply(ctx, g);\n        }\n        this._stroke ? this._stroke(ctx) : ctx.stroke();\n      }\n      ctx.restore();\n    },\n\n    /**\n     * Clones an instance\n     * @param {Function} callback Callback is invoked with a clone as a first argument\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {fabric.Object} clone of an instance\n     */\n    clone: function(callback, propertiesToInclude) {\n      if (this.constructor.fromObject) {\n        return this.constructor.fromObject(this.toObject(propertiesToInclude), callback);\n      }\n      return new fabric.Object(this.toObject(propertiesToInclude));\n    },\n\n    /**\n     * Creates an instance of fabric.Image out of an object\n     * @param {Function} callback callback, invoked with an instance as a first argument\n     * @return {fabric.Object} thisArg\n     */\n    cloneAsImage: function(callback) {\n      var dataUrl = this.toDataURL();\n      fabric.util.loadImage(dataUrl, function(img) {\n        if (callback) {\n          callback(new fabric.Image(img));\n        }\n      });\n      return this;\n    },\n\n    /**\n     * Converts an object into a data-url-like string\n     * @param {Object} options Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     */\n    toDataURL: function(options) {\n      options || (options = { });\n\n      var el = fabric.util.createCanvasElement(),\n          boundingRect = this.getBoundingRect();\n\n      el.width = boundingRect.width;\n      el.height = boundingRect.height;\n\n      fabric.util.wrapElement(el, 'div');\n      var canvas = new fabric.StaticCanvas(el);\n\n      // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n      if (options.format === 'jpg') {\n        options.format = 'jpeg';\n      }\n\n      if (options.format === 'jpeg') {\n        canvas.backgroundColor = '#fff';\n      }\n\n      var origParams = {\n        active: this.get('active'),\n        left: this.getLeft(),\n        top: this.getTop()\n      };\n\n      this.set('active', false);\n      this.setPositionByOrigin(new fabric.Point(el.width / 2, el.height / 2), 'center', 'center');\n\n      var originalCanvas = this.canvas;\n      canvas.add(this);\n      var data = canvas.toDataURL(options);\n\n      this.set(origParams).setCoords();\n      this.canvas = originalCanvas;\n\n      canvas.dispose();\n      canvas = null;\n\n      return data;\n    },\n\n    /**\n     * Returns true if specified type is identical to the type of an instance\n     * @param {String} type Type to check against\n     * @return {Boolean}\n     */\n    isType: function(type) {\n      return this.type === type;\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return 0;\n    },\n\n    /**\n     * Returns a JSON representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} JSON\n     */\n    toJSON: function(propertiesToInclude) {\n      // delegate, not alias\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * Sets gradient (fill or stroke) of an object\n     * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\n     * @param {String} property Property name 'stroke' or 'fill'\n     * @param {Object} [options] Options object\n     * @param {String} [options.type] Type of gradient 'radial' or 'linear'\n     * @param {Number} [options.x1=0] x-coordinate of start point\n     * @param {Number} [options.y1=0] y-coordinate of start point\n     * @param {Number} [options.x2=0] x-coordinate of end point\n     * @param {Number} [options.y2=0] y-coordinate of end point\n     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\n     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\n     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\n     * @example <caption>Set linear gradient</caption>\n     * object.setGradient('fill', {\n     *   type: 'linear',\n     *   x1: -object.width / 2,\n     *   y1: 0,\n     *   x2: object.width / 2,\n     *   y2: 0,\n     *   colorStops: {\n     *     0: 'red',\n     *     0.5: '#005555',\n     *     1: 'rgba(0,0,255,0.5)'\n     *   }\n     * });\n     * canvas.renderAll();\n     * @example <caption>Set radial gradient</caption>\n     * object.setGradient('fill', {\n     *   type: 'radial',\n     *   x1: 0,\n     *   y1: 0,\n     *   x2: 0,\n     *   y2: 0,\n     *   r1: object.width / 2,\n     *   r2: 10,\n     *   colorStops: {\n     *     0: 'red',\n     *     0.5: '#005555',\n     *     1: 'rgba(0,0,255,0.5)'\n     *   }\n     * });\n     * canvas.renderAll();\n     */\n    setGradient: function(property, options) {\n      options || (options = { });\n\n      var gradient = { colorStops: [] };\n\n      gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\n      gradient.coords = {\n        x1: options.x1,\n        y1: options.y1,\n        x2: options.x2,\n        y2: options.y2\n      };\n\n      if (options.r1 || options.r2) {\n        gradient.coords.r1 = options.r1;\n        gradient.coords.r2 = options.r2;\n      }\n\n      for (var position in options.colorStops) {\n        var color = new fabric.Color(options.colorStops[position]);\n        gradient.colorStops.push({\n          offset: position,\n          color: color.toRgb(),\n          opacity: color.getAlpha()\n        });\n      }\n\n      return this.set(property, fabric.Gradient.forObject(this, gradient));\n    },\n\n    /**\n     * Sets pattern fill of an object\n     * @param {Object} options Options object\n     * @param {(String|HTMLImageElement)} options.source Pattern source\n     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\n     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\n     * @example <caption>Set pattern</caption>\n     * fabric.util.loadImage('http://fabricjs.com/assets/escheresque_ste.png', function(img) {\n     *   object.setPatternFill({\n     *     source: img,\n     *     repeat: 'repeat'\n     *   });\n     *   canvas.renderAll();\n     * });\n     */\n    setPatternFill: function(options) {\n      return this.set('fill', new fabric.Pattern(options));\n    },\n\n    /**\n     * Sets {@link fabric.Object#shadow|shadow} of an object\n     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n     * @param {String} [options.color=rgb(0,0,0)] Shadow color\n     * @param {Number} [options.blur=0] Shadow blur\n     * @param {Number} [options.offsetX=0] Shadow horizontal offset\n     * @param {Number} [options.offsetY=0] Shadow vertical offset\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\n     * @example <caption>Set shadow with string notation</caption>\n     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\n     * canvas.renderAll();\n     * @example <caption>Set shadow with object notation</caption>\n     * object.setShadow({\n     *   color: 'red',\n     *   blur: 10,\n     *   offsetX: 20,\n     *   offsetY: 20\n     * });\n     * canvas.renderAll();\n     */\n    setShadow: function(options) {\n      return this.set('shadow', options ? new fabric.Shadow(options) : null);\n    },\n\n    /**\n     * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\n     * @param {String} color Color value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setColor: function(color) {\n      this.set('fill', color);\n      return this;\n    },\n\n    /**\n     * Sets \"angle\" of an instance\n     * @param {Number} angle Angle value (in degrees)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setAngle: function(angle) {\n      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\n\n      if (shouldCenterOrigin) {\n        this._setOriginToCenter();\n      }\n\n      this.set('angle', angle);\n\n      if (shouldCenterOrigin) {\n        this._resetOrigin();\n      }\n\n      return this;\n    },\n\n    /**\n     * Centers object horizontally on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerH: function () {\n      this.canvas.centerObjectH(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerV: function () {\n      this.canvas.centerObjectV(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically and horizontally on canvas to which is was added last\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    center: function () {\n      this.canvas.centerObject(this);\n      return this;\n    },\n\n    /**\n     * Removes object from canvas to which it was added last\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    remove: function() {\n      this.canvas.remove(this);\n      return this;\n    },\n\n    /**\n     * Returns coordinates of a pointer relative to an object\n     * @param {Event} e Event to operate upon\n     * @param {Object} [pointer] Pointer to operate upon (instead of event)\n     * @return {Object} Coordinates of a pointer (x, y)\n     */\n    getLocalPointer: function(e, pointer) {\n      pointer = pointer || this.canvas.getPointer(e);\n      var pClicked = new fabric.Point(pointer.x, pointer.y),\n          objectLeftTop = this._getLeftTopCoords();\n      if (this.angle) {\n        pClicked = fabric.util.rotatePoint(\n          pClicked, objectLeftTop, fabric.util.degreesToRadians(-this.angle));\n      }\n      return {\n        x: pClicked.x - objectLeftTop.x,\n        y: pClicked.y - objectLeftTop.y\n      };\n    },\n\n    /**\n     * Sets canvas globalCompositeOperation for specific object\n     * custom composition operation for the particular object can be specifed using globalCompositeOperation property\n     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n     */\n    _setupCompositeOperation: function (ctx) {\n      if (this.globalCompositeOperation) {\n        ctx.globalCompositeOperation = this.globalCompositeOperation;\n      }\n    }\n  });\n\n  fabric.util.createAccessors(fabric.Object);\n\n  /**\n   * Alias for {@link fabric.Object.prototype.setAngle}\n   * @alias rotate -> setAngle\n   * @memberOf fabric.Object\n   */\n  fabric.Object.prototype.rotate = fabric.Object.prototype.setAngle;\n\n  extend(fabric.Object.prototype, fabric.Observable);\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   * @static\n   * @memberOf fabric.Object\n   * @constant\n   * @type Number\n   */\n  fabric.Object.NUM_FRACTION_DIGITS = 2;\n\n  /**\n   * Unique id used internally when creating SVG elements\n   * @static\n   * @memberOf fabric.Object\n   * @type Number\n   */\n  fabric.Object.__uid = 0;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      originXOffset = {\n        left: -0.5,\n        center: 0,\n        right: 0.5\n      },\n      originYOffset = {\n        top: -0.5,\n        center: 0,\n        bottom: 0.5\n      };\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n      var x = point.x,\n          y = point.y,\n          offsetX = originXOffset[toOriginX] - originXOffset[fromOriginX],\n          offsetY = originYOffset[toOriginY] - originYOffset[fromOriginY],\n          dim;\n      if (offsetX || offsetY) {\n        dim = this._getTransformedDimensions();\n        x = point.x + offsetX * dim.x;\n        y = point.y + offsetY * dim.y;\n      }\n      return new fabric.Point(x, y);\n    },\n\n    /**\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToCenterPoint: function(point, originX, originY) {\n      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n     * @param {fabric.Point} center The point which corresponds to center of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToOriginPoint: function(center, originX, originY) {\n      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Returns the real center coordinates of the object\n     * @return {fabric.Point}\n     */\n    getCenterPoint: function() {\n      var leftTop = new fabric.Point(this.left, this.top);\n      return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n    },\n\n    /**\n     * Returns the coordinates of the object based on center coordinates\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @return {fabric.Point}\n     */\n    // getOriginPoint: function(center) {\n    //   return this.translateToOriginPoint(center, this.originX, this.originY);\n    // },\n\n    /**\n     * Returns the coordinates of the object as if it has a different origin\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    getPointByOrigin: function(originX, originY) {\n      var center = this.getCenterPoint();\n      return this.translateToOriginPoint(center, originX, originY);\n    },\n\n    /**\n     * Returns the point in local coordinates\n     * @param {fabric.Point} point The point relative to the global coordinate system\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    toLocalPoint: function(point, originX, originY) {\n      var center = this.getCenterPoint(),\n          p, p2;\n\n      if (originX && originY) {\n        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      }\n      else {\n        p = new fabric.Point(this.left, this.top);\n      }\n\n      p2 = new fabric.Point(point.x, point.y);\n      if (this.angle) {\n        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n      }\n      return p2.subtractEquals(p);\n    },\n\n    /**\n     * Returns the point in global coordinates\n     * @param {fabric.Point} The point relative to the local coordinate system\n     * @return {fabric.Point}\n     */\n    // toGlobalPoint: function(point) {\n    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n    // },\n\n    /**\n     * Sets the position of the object taking into consideration the object's origin\n     * @param {fabric.Point} pos The new position of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {void}\n     */\n    setPositionByOrigin: function(pos, originX, originY) {\n      var center = this.translateToCenterPoint(pos, originX, originY),\n          position = this.translateToOriginPoint(center, this.originX, this.originY);\n\n      this.set('left', position.x);\n      this.set('top', position.y);\n    },\n\n    /**\n     * @param {String} to One of 'left', 'center', 'right'\n     */\n    adjustPosition: function(to) {\n      var angle = degreesToRadians(this.angle),\n          hypotFull = this.getWidth(),\n          xFull = Math.cos(angle) * hypotFull,\n          yFull = Math.sin(angle) * hypotFull;\n\n      //TODO: this function does not consider mixed situation like top, center.\n      this.left += xFull * (originXOffset[to] - originXOffset[this.originX]);\n      this.top += yFull * (originXOffset[to] - originXOffset[this.originX]);\n\n      this.setCoords();\n      this.originX = to;\n    },\n\n    /**\n     * Sets the origin/position of the object to it's center point\n     * @private\n     * @return {void}\n     */\n    _setOriginToCenter: function() {\n      this._originalOriginX = this.originX;\n      this._originalOriginY = this.originY;\n\n      var center = this.getCenterPoint();\n\n      this.originX = 'center';\n      this.originY = 'center';\n\n      this.left = center.x;\n      this.top = center.y;\n    },\n\n    /**\n     * Resets the origin/position of the object to it's original origin\n     * @private\n     * @return {void}\n     */\n    _resetOrigin: function() {\n      var originPoint = this.translateToOriginPoint(\n        this.getCenterPoint(),\n        this._originalOriginX,\n        this._originalOriginY);\n\n      this.originX = this._originalOriginX;\n      this.originY = this._originalOriginY;\n\n      this.left = originPoint.x;\n      this.top = originPoint.y;\n\n      this._originalOriginX = null;\n      this._originalOriginY = null;\n    },\n\n    /**\n     * @private\n     */\n    _getLeftTopCoords: function() {\n      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\n    }\n  });\n\n})();\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Object containing coordinates of object's controls\n     * @type Object\n     * @default\n     */\n    oCoords: null,\n\n    /**\n     * Checks if object intersects with an area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @return {Boolean} true if object intersects with an area formed by 2 points\n     */\n    intersectsWithRect: function(pointTL, pointBR) {\n      var oCoords = this.oCoords,\n          tl = new fabric.Point(oCoords.tl.x, oCoords.tl.y),\n          tr = new fabric.Point(oCoords.tr.x, oCoords.tr.y),\n          bl = new fabric.Point(oCoords.bl.x, oCoords.bl.y),\n          br = new fabric.Point(oCoords.br.x, oCoords.br.y),\n          intersection = fabric.Intersection.intersectPolygonRectangle(\n            [tl, tr, br, bl],\n            pointTL,\n            pointBR\n          );\n      return intersection.status === 'Intersection';\n    },\n\n    /**\n     * Checks if object intersects with another object\n     * @param {Object} other Object to test\n     * @return {Boolean} true if object intersects with another object\n     */\n    intersectsWithObject: function(other) {\n      // extracts coords\n      function getCoords(oCoords) {\n        return {\n          tl: new fabric.Point(oCoords.tl.x, oCoords.tl.y),\n          tr: new fabric.Point(oCoords.tr.x, oCoords.tr.y),\n          bl: new fabric.Point(oCoords.bl.x, oCoords.bl.y),\n          br: new fabric.Point(oCoords.br.x, oCoords.br.y)\n        };\n      }\n      var thisCoords = getCoords(this.oCoords),\n          otherCoords = getCoords(other.oCoords),\n          intersection = fabric.Intersection.intersectPolygonPolygon(\n            [thisCoords.tl, thisCoords.tr, thisCoords.br, thisCoords.bl],\n            [otherCoords.tl, otherCoords.tr, otherCoords.br, otherCoords.bl]\n          );\n\n      return intersection.status === 'Intersection';\n    },\n\n    /**\n     * Checks if object is fully contained within area of another object\n     * @param {Object} other Object to test\n     * @return {Boolean} true if object is fully contained within area of another object\n     */\n    isContainedWithinObject: function(other) {\n      var boundingRect = other.getBoundingRect(),\n          point1 = new fabric.Point(boundingRect.left, boundingRect.top),\n          point2 = new fabric.Point(boundingRect.left + boundingRect.width, boundingRect.top + boundingRect.height);\n\n      return this.isContainedWithinRect(point1, point2);\n    },\n\n    /**\n     * Checks if object is fully contained within area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @return {Boolean} true if object is fully contained within area formed by 2 points\n     */\n    isContainedWithinRect: function(pointTL, pointBR) {\n      var boundingRect = this.getBoundingRect();\n\n      return (\n        boundingRect.left >= pointTL.x &&\n        boundingRect.left + boundingRect.width <= pointBR.x &&\n        boundingRect.top >= pointTL.y &&\n        boundingRect.top + boundingRect.height <= pointBR.y\n      );\n    },\n\n    /**\n     * Checks if point is inside the object\n     * @param {fabric.Point} point Point to check against\n     * @return {Boolean} true if point is inside the object\n     */\n    containsPoint: function(point) {\n      var lines = this._getImageLines(this.oCoords),\n          xPoints = this._findCrossPoints(point, lines);\n\n      // if xPoints is odd then point is inside the object\n      return (xPoints !== 0 && xPoints % 2 === 1);\n    },\n\n    /**\n     * Method that returns an object with the object edges in it, given the coordinates of the corners\n     * @private\n     * @param {Object} oCoords Coordinates of the object corners\n     */\n    _getImageLines: function(oCoords) {\n      return {\n        topline: {\n          o: oCoords.tl,\n          d: oCoords.tr\n        },\n        rightline: {\n          o: oCoords.tr,\n          d: oCoords.br\n        },\n        bottomline: {\n          o: oCoords.br,\n          d: oCoords.bl\n        },\n        leftline: {\n          o: oCoords.bl,\n          d: oCoords.tl\n        }\n      };\n    },\n\n    /**\n     * Helper method to determine how many cross points are between the 4 object edges\n     * and the horizontal line determined by a point on canvas\n     * @private\n     * @param {fabric.Point} point Point to check\n     * @param {Object} oCoords Coordinates of the object being evaluated\n     */\n    _findCrossPoints: function(point, oCoords) {\n      var b1, b2, a1, a2, xi, yi,\n          xcount = 0,\n          iLine;\n\n      for (var lineKey in oCoords) {\n        iLine = oCoords[lineKey];\n        // optimisation 1: line below point. no cross\n        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\n          continue;\n        }\n        // optimisation 2: line above point. no cross\n        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\n          continue;\n        }\n        // optimisation 3: vertical line case\n        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\n          xi = iLine.o.x;\n          yi = point.y;\n        }\n        // calculate the intersection point\n        else {\n          b1 = 0;\n          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n          a1 = point.y - b1 * point.x;\n          a2 = iLine.o.y - b2 * iLine.o.x;\n\n          xi = - (a1 - a2) / (b1 - b2);\n          yi = a1 + b1 * xi;\n        }\n        // dont count xi < point.x cases\n        if (xi >= point.x) {\n          xcount += 1;\n        }\n        // optimisation 4: specific for square images\n        if (xcount === 2) {\n          break;\n        }\n      }\n      return xcount;\n    },\n\n    /**\n     * Returns width of an object's bounding rectangle\n     * @deprecated since 1.0.4\n     * @return {Number} width value\n     */\n    getBoundingRectWidth: function() {\n      return this.getBoundingRect().width;\n    },\n\n    /**\n     * Returns height of an object's bounding rectangle\n     * @deprecated since 1.0.4\n     * @return {Number} height value\n     */\n    getBoundingRectHeight: function() {\n      return this.getBoundingRect().height;\n    },\n\n    /**\n     * Returns coordinates of object's bounding rectangle (left, top, width, height)\n     * @return {Object} Object with left, top, width, height properties\n     */\n    getBoundingRect: function() {\n      this.oCoords || this.setCoords();\n\n      var xCoords = [this.oCoords.tl.x, this.oCoords.tr.x, this.oCoords.br.x, this.oCoords.bl.x],\n          minX = fabric.util.array.min(xCoords),\n          maxX = fabric.util.array.max(xCoords),\n          width = Math.abs(minX - maxX),\n\n          yCoords = [this.oCoords.tl.y, this.oCoords.tr.y, this.oCoords.br.y, this.oCoords.bl.y],\n          minY = fabric.util.array.min(yCoords),\n          maxY = fabric.util.array.max(yCoords),\n          height = Math.abs(minY - maxY);\n\n      return {\n        left: minX,\n        top: minY,\n        width: width,\n        height: height\n      };\n    },\n\n    /**\n     * Returns width of an object\n     * @return {Number} width value\n     */\n    getWidth: function() {\n      return this.width * this.scaleX;\n    },\n\n    /**\n     * Returns height of an object\n     * @return {Number} height value\n     */\n    getHeight: function() {\n      return this.height * this.scaleY;\n    },\n\n    /**\n     * Makes sure the scale is valid and modifies it if necessary\n     * @private\n     * @param {Number} value\n     * @return {Number}\n     */\n    _constrainScale: function(value) {\n      if (Math.abs(value) < this.minScaleLimit) {\n        if (value < 0) {\n          return -this.minScaleLimit;\n        }\n        else {\n          return this.minScaleLimit;\n        }\n      }\n      return value;\n    },\n\n    /**\n     * Scales an object (equally by x and y)\n     * @param {Number} value Scale factor\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scale: function(value) {\n      value = this._constrainScale(value);\n\n      if (value < 0) {\n        this.flipX = !this.flipX;\n        this.flipY = !this.flipY;\n        value *= -1;\n      }\n\n      this.scaleX = value;\n      this.scaleY = value;\n      this.setCoords();\n      return this;\n    },\n\n    /**\n     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New width value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToWidth: function(value) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRectWidth() / this.getWidth();\n      return this.scale(value / this.width / boundingRectFactor);\n    },\n\n    /**\n     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New height value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToHeight: function(value) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRectHeight() / this.getHeight();\n      return this.scale(value / this.height / boundingRectFactor);\n    },\n\n    /**\n     * Sets corner position coordinates based on current angle, width and height\n     * See https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setCoords: function() {\n      var theta = degreesToRadians(this.angle),\n          vpt = this.getViewportTransform(),\n          dim = this._calculateCurrentDimensions(true),\n          currentWidth = dim.x, currentHeight = dim.y;\n\n      // If width is negative, make postive. Fixes path selection issue\n      if (currentWidth < 0) {\n        currentWidth = Math.abs(currentWidth);\n      }\n\n      var sinTh = Math.sin(theta),\n          cosTh = Math.cos(theta),\n          _angle = currentWidth > 0 ? Math.atan(currentHeight / currentWidth) : 0,\n          _hypotenuse = (currentWidth / Math.cos(_angle)) / 2,\n          offsetX = Math.cos(_angle + theta) * _hypotenuse,\n          offsetY = Math.sin(_angle + theta) * _hypotenuse,\n\n          // offset added for rotate and scale actions\n          coords = fabric.util.transformPoint(this.getCenterPoint(), vpt),\n          tl  = new fabric.Point(coords.x - offsetX, coords.y - offsetY),\n          tr  = new fabric.Point(tl.x + (currentWidth * cosTh), tl.y + (currentWidth * sinTh)),\n          bl  = new fabric.Point(tl.x - (currentHeight * sinTh), tl.y + (currentHeight * cosTh)),\n          br  = new fabric.Point(coords.x + offsetX, coords.y + offsetY),\n          ml  = new fabric.Point((tl.x + bl.x)/2, (tl.y + bl.y)/2),\n          mt  = new fabric.Point((tr.x + tl.x)/2, (tr.y + tl.y)/2),\n          mr  = new fabric.Point((br.x + tr.x)/2, (br.y + tr.y)/2),\n          mb  = new fabric.Point((br.x + bl.x)/2, (br.y + bl.y)/2),\n          mtr = new fabric.Point(mt.x + sinTh * this.rotatingPointOffset, mt.y - cosTh * this.rotatingPointOffset);\n      // debugging\n\n      /* setTimeout(function() {\n         canvas.contextTop.fillStyle = 'green';\n         canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\n         canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\n         canvas.contextTop.fillRect(br.x, br.y, 3, 3);\n         canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\n         canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\n         canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\n         canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\n         canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\n         canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\n       }, 50); */\n\n      this.oCoords = {\n        // corners\n        tl: tl, tr: tr, br: br, bl: bl,\n        // middle\n        ml: ml, mt: mt, mr: mr, mb: mb,\n        // rotating point\n        mtr: mtr\n      };\n\n      // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n      this._setCornerCoords && this._setCornerCoords();\n\n      return this;\n    },\n\n    _calcDimensionsTransformMatrix: function() {\n      // introduce skew matrix here later\n      return [this.scaleX, 0, 0, this.scaleY, 0, 0];\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Moves an object to the bottom of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendToBack: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n    }\n    else {\n      this.canvas.sendToBack(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to the top of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringToFront: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n    }\n    else {\n      this.canvas.bringToFront(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object down in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendBackwards: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n    }\n    else {\n      this.canvas.sendBackwards(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object up in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringForward: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n    }\n    else {\n      this.canvas.bringForward(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to specified level in stack of drawn objects\n   * @param {Number} index New position of object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  moveTo: function(index) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n    }\n    else {\n      this.canvas.moveTo(this, index);\n    }\n    return this;\n  }\n});\n\n\n/* _TO_SVG_START_ */\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Returns styles-string for svg-export\n   * @return {String}\n   */\n  getSvgStyles: function() {\n\n    var fill = this.fill\n          ? (this.fill.toLive ? 'url(#SVGID_' + this.fill.id + ')' : this.fill)\n          : 'none',\n        fillRule = this.fillRule,\n        stroke = this.stroke\n          ? (this.stroke.toLive ? 'url(#SVGID_' + this.stroke.id + ')' : this.stroke)\n          : 'none',\n\n        strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n        strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\n        strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n        strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n        strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n        opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n\n        visibility = this.visible ? '' : ' visibility: hidden;',\n        filter = this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\n\n    return [\n      'stroke: ', stroke, '; ',\n      'stroke-width: ', strokeWidth, '; ',\n      'stroke-dasharray: ', strokeDashArray, '; ',\n      'stroke-linecap: ', strokeLineCap, '; ',\n      'stroke-linejoin: ', strokeLineJoin, '; ',\n      'stroke-miterlimit: ', strokeMiterLimit, '; ',\n      'fill: ', fill, '; ',\n      'fill-rule: ', fillRule, '; ',\n      'opacity: ', opacity, ';',\n      filter,\n      visibility\n    ].join('');\n  },\n\n  /**\n   * Returns transform-string for svg-export\n   * @return {String}\n   */\n  getSvgTransform: function() {\n    if (this.group && this.group.type === 'path-group') {\n      return '';\n    }\n    var toFixed = fabric.util.toFixed,\n        angle = this.getAngle(),\n        vpt = !this.canvas || this.canvas.svgViewportTransformation ? this.getViewportTransform() : [1, 0, 0, 1, 0, 0],\n        center = fabric.util.transformPoint(this.getCenterPoint(), vpt),\n\n        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n        translatePart = this.type === 'path-group' ? '' : 'translate(' +\n                          toFixed(center.x, NUM_FRACTION_DIGITS) +\n                          ' ' +\n                          toFixed(center.y, NUM_FRACTION_DIGITS) +\n                        ')',\n\n        anglePart = angle !== 0\n          ? (' rotate(' + toFixed(angle, NUM_FRACTION_DIGITS) + ')')\n          : '',\n\n        scalePart = (this.scaleX === 1 && this.scaleY === 1 && vpt[0] === 1 && vpt[3] === 1)\n          ? '' :\n          (' scale(' +\n            toFixed(this.scaleX * vpt[0], NUM_FRACTION_DIGITS) +\n            ' ' +\n            toFixed(this.scaleY * vpt[3], NUM_FRACTION_DIGITS) +\n          ')'),\n\n        addTranslateX = this.type === 'path-group' ? this.width * vpt[0] : 0,\n\n        flipXPart = this.flipX ? ' matrix(-1 0 0 1 ' + addTranslateX + ' 0) ' : '',\n\n        addTranslateY = this.type === 'path-group' ? this.height * vpt[3] : 0,\n\n        flipYPart = this.flipY ? ' matrix(1 0 0 -1 0 ' + addTranslateY + ')' : '';\n\n    return [\n      translatePart, anglePart, scalePart, flipXPart, flipYPart\n    ].join('');\n  },\n\n  /**\n   * Returns transform-string for svg-export from the transform matrix of single elements\n   * @return {String}\n   */\n  getSvgTransformMatrix: function() {\n    return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ') ' : '';\n  },\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup: function() {\n    var markup = [ ];\n\n    if (this.fill && this.fill.toLive) {\n      markup.push(this.fill.toSVG(this, false));\n    }\n    if (this.stroke && this.stroke.toLive) {\n      markup.push(this.stroke.toSVG(this, false));\n    }\n    if (this.shadow) {\n      markup.push(this.shadow.toSVG(this));\n    }\n    return markup;\n  }\n});\n/* _TO_SVG_END_ */\n\n\n/*\n  Depends on `stateProperties`\n*/\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Returns true if object state (one of its state properties) was changed\n   * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n   */\n  hasStateChanged: function() {\n    return this.stateProperties.some(function(prop) {\n      return this.get(prop) !== this.originalState[prop];\n    }, this);\n  },\n\n  /**\n   * Saves state of an object\n   * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n   * @return {fabric.Object} thisArg\n   */\n  saveState: function(options) {\n    this.stateProperties.forEach(function(prop) {\n      this.originalState[prop] = this.get(prop);\n    }, this);\n\n    if (options && options.stateProperties) {\n      options.stateProperties.forEach(function(prop) {\n        this.originalState[prop] = this.get(prop);\n      }, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Setups state of an object\n   * @return {fabric.Object} thisArg\n   */\n  setupState: function() {\n    this.originalState = { };\n    this.saveState();\n\n    return this;\n  }\n});\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n      isVML = function() { return typeof G_vmlCanvasManager !== 'undefined'; };\n  //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * The object interactivity controls.\n     * @private\n     */\n    _controlsVisibility: null,\n\n    /**\n     * Determines which corner has been clicked\n     * @private\n     * @param {Object} pointer The pointer indicating the mouse position\n     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n     */\n    _findTargetCorner: function(pointer) {\n      if (!this.hasControls || !this.active) {\n        return false;\n      }\n\n      var ex = pointer.x,\n          ey = pointer.y,\n          xPoints,\n          lines;\n\n      for (var i in this.oCoords) {\n\n        if (!this.isControlVisible(i)) {\n          continue;\n        }\n\n        if (i === 'mtr' && !this.hasRotatingPoint) {\n          continue;\n        }\n\n        if (this.get('lockUniScaling') &&\n           (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\n          continue;\n        }\n\n        lines = this._getImageLines(this.oCoords[i].corner);\n\n        // debugging\n\n        // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n\n        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\n        if (xPoints !== 0 && xPoints % 2 === 1) {\n          this.__corner = i;\n          return i;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Sets the coordinates of the draggable boxes in the corners of\n     * the image used to scale/rotate it.\n     * @private\n     */\n    _setCornerCoords: function() {\n      var coords = this.oCoords,\n          newTheta = degreesToRadians(45 - this.angle),\n          /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\n          /* 0.707106 stands for sqrt(2)/2 */\n          cornerHypotenuse = this.cornerSize * 0.707106,\n          cosHalfOffset = cornerHypotenuse * Math.cos(newTheta),\n          sinHalfOffset = cornerHypotenuse * Math.sin(newTheta),\n          x, y;\n\n      for (var point in coords) {\n        x = coords[point].x;\n        y = coords[point].y;\n        coords[point].corner = {\n          tl: {\n            x: x - sinHalfOffset,\n            y: y - cosHalfOffset\n          },\n          tr: {\n            x: x + cosHalfOffset,\n            y: y - sinHalfOffset\n          },\n          bl: {\n            x: x - cosHalfOffset,\n            y: y + sinHalfOffset\n          },\n          br: {\n            x: x + sinHalfOffset,\n            y: y + cosHalfOffset\n          }\n        };\n      }\n    },\n\n    /*\n     * Calculate object dimensions from its properties\n     * @private\n     */\n    _getNonTransformedDimensions: function() {\n      var strokeWidth = this.strokeWidth,\n          w = this.width,\n          h = this.height,\n          capped = this.strokeLineCap === 'round' || this.strokeLineCap === 'square',\n          vLine = this.type === 'line' && this.width === 0,\n          hLine = this.type === 'line' && this.height === 0,\n          sLine = vLine || hLine,\n          strokeW = (capped && hLine) || !sLine,\n          strokeH = (capped && vLine) || !sLine;\n\n      if (vLine) {\n        w = strokeWidth;\n      }\n      else if (hLine) {\n        h = strokeWidth;\n      }\n      if (strokeW) {\n        w += (w < 0 ? -strokeWidth : strokeWidth);\n      }\n      if (strokeH) {\n        h += (h < 0 ? -strokeWidth : strokeWidth);\n      }\n      return { x: w, y: h };\n    },\n\n    /*\n     * @private\n     */\n    _getTransformedDimensions: function(dimensions) {\n      if (!dimensions) {\n        dimensions = this._getNonTransformedDimensions();\n      }\n      var transformMatrix = this._calcDimensionsTransformMatrix();\n      return fabric.util.transformPoint(dimensions, transformMatrix, true);\n    },\n\n    /*\n     * private\n     */\n    _calculateCurrentDimensions: function(shouldTransform)  {\n      var vpt = this.getViewportTransform(),\n          dim = this._getTransformedDimensions(),\n          w = dim.x, h = dim.y;\n\n      w += 2 * this.padding;\n      h += 2 * this.padding;\n\n      if (shouldTransform) {\n        return fabric.util.transformPoint(new fabric.Point(w, h), vpt, true);\n      }\n      return { x: w, y: h };\n    },\n\n    /**\n     * Draws borders of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawBorders: function(ctx) {\n      if (!this.hasBorders) {\n        return this;\n      }\n\n      ctx.save();\n\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      ctx.strokeStyle = this.borderColor;\n      ctx.lineWidth = 1 / this.borderScaleFactor;\n\n      var wh = this._calculateCurrentDimensions(true),\n          width = wh.x,\n          height = wh.y;\n      if (this.group) {\n        width = width * this.group.scaleX;\n        height = height * this.group.scaleY;\n      }\n\n      ctx.strokeRect(\n        ~~(-(width / 2)) - 0.5, // offset needed to make lines look sharper\n        ~~(-(height / 2)) - 0.5,\n        ~~(width) + 1, // double offset needed to make lines look sharper\n        ~~(height) + 1\n      );\n\n      if (this.hasRotatingPoint && this.isControlVisible('mtr') && !this.get('lockRotation') && this.hasControls) {\n\n        var rotateHeight = -height / 2;\n\n        ctx.beginPath();\n        ctx.moveTo(0, rotateHeight);\n        ctx.lineTo(0, rotateHeight - this.rotatingPointOffset);\n        ctx.closePath();\n        ctx.stroke();\n      }\n\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws corners of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: cornerSize, padding\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawControls: function(ctx) {\n      if (!this.hasControls) {\n        return this;\n      }\n\n      var wh = this._calculateCurrentDimensions(true),\n          width = wh.x,\n          height = wh.y,\n          left = -(width / 2),\n          top = -(height / 2),\n          scaleOffset = this.cornerSize / 2,\n          methodName = this.transparentCorners ? 'strokeRect' : 'fillRect';\n\n      ctx.save();\n\n      ctx.lineWidth = 1;\n\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      ctx.strokeStyle = ctx.fillStyle = this.cornerColor;\n\n      // top-left\n      this._drawControl('tl', ctx, methodName,\n        left - scaleOffset,\n        top - scaleOffset);\n\n      // top-right\n      this._drawControl('tr', ctx, methodName,\n        left + width - scaleOffset,\n        top - scaleOffset);\n\n      // bottom-left\n      this._drawControl('bl', ctx, methodName,\n        left - scaleOffset,\n        top + height - scaleOffset);\n\n      // bottom-right\n      this._drawControl('br', ctx, methodName,\n        left + width - scaleOffset,\n        top + height - scaleOffset);\n\n      if (!this.get('lockUniScaling')) {\n\n        // middle-top\n        this._drawControl('mt', ctx, methodName,\n          left + width/2 - scaleOffset,\n          top - scaleOffset);\n\n        // middle-bottom\n        this._drawControl('mb', ctx, methodName,\n          left + width/2 - scaleOffset,\n          top + height - scaleOffset);\n\n        // middle-right\n        this._drawControl('mr', ctx, methodName,\n          left + width - scaleOffset,\n          top + height/2 - scaleOffset);\n\n        // middle-left\n        this._drawControl('ml', ctx, methodName,\n          left - scaleOffset,\n          top + height/2 - scaleOffset);\n      }\n\n      // middle-top-rotate\n      if (this.hasRotatingPoint) {\n        this._drawControl('mtr', ctx, methodName,\n          left + width/2 - scaleOffset,\n          top - this.rotatingPointOffset - scaleOffset);\n      }\n\n      ctx.restore();\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _drawControl: function(control, ctx, methodName, left, top) {\n      if (!this.isControlVisible(control)) {\n        return;\n      }\n      var size = this.cornerSize;\n      isVML() || this.transparentCorners || ctx.clearRect(left, top, size, size);\n      ctx[methodName](left, top, size, size);\n    },\n\n    /**\n     * Returns true if the specified control is visible, false otherwise.\n     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @returns {Boolean} true if the specified control is visible, false otherwise\n     */\n    isControlVisible: function(controlName) {\n      return this._getControlsVisibility()[controlName];\n    },\n\n    /**\n     * Sets the visibility of the specified control.\n     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @param {Boolean} visible true to set the specified control visible, false otherwise\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlVisible: function(controlName, visible) {\n      this._getControlsVisibility()[controlName] = visible;\n      return this;\n    },\n\n    /**\n     * Sets the visibility state of object controls.\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlsVisibility: function(options) {\n      options || (options = { });\n\n      for (var p in options) {\n        this.setControlVisible(p, options[p]);\n      }\n      return this;\n    },\n\n    /**\n     * Returns the instance of the control visibility set for this object.\n     * @private\n     * @returns {Object}\n     */\n    _getControlsVisibility: function() {\n      if (!this._controlsVisibility) {\n        this._controlsVisibility = {\n          tl: true,\n          tr: true,\n          br: true,\n          bl: true,\n          ml: true,\n          mt: true,\n          mr: true,\n          mb: true,\n          mtr: true\n        };\n      }\n      return this._controlsVisibility;\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Animation duration (in ms) for fx* methods\n   * @type Number\n   * @default\n   */\n  FX_DURATION: 500,\n\n  /**\n   * Centers object horizontally with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxCenterObjectH: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.get('left'),\n      endValue: this.getCenter().left,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('left', value);\n        _this.renderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Centers object vertically with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxCenterObjectV: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.get('top'),\n      endValue: this.getCenter().top,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('top', value);\n        _this.renderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Same as `fabric.Canvas#remove` but animated\n   * @param {fabric.Object} object Object to remove\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxRemove: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.get('opacity'),\n      endValue: 0,\n      duration: this.FX_DURATION,\n      onStart: function() {\n        object.set('active', false);\n      },\n      onChange: function(value) {\n        object.set('opacity', value);\n        _this.renderAll();\n        onChange();\n      },\n      onComplete: function () {\n        _this.remove(object);\n        onComplete();\n      }\n    });\n\n    return this;\n  }\n});\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n  /**\n   * Animates object's properties\n   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n   * @return {fabric.Object} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#animation}\n   * @chainable\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   *\n   * As string — one property\n   *\n   * object.animate('left', ...);\n   * object.animate('left', { duration: ... });\n   *\n   */\n  animate: function() {\n    if (arguments[0] && typeof arguments[0] === 'object') {\n      var propsToAnimate = [ ], prop, skipCallbacks;\n      for (prop in arguments[0]) {\n        propsToAnimate.push(prop);\n      }\n      for (var i = 0, len = propsToAnimate.length; i < len; i++) {\n        prop = propsToAnimate[i];\n        skipCallbacks = i !== len - 1;\n        this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\n      }\n    }\n    else {\n      this._animate.apply(this, arguments);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n   */\n  _animate: function(property, to, options, skipCallbacks) {\n    var _this = this, propPair;\n\n    to = to.toString();\n\n    if (!options) {\n      options = { };\n    }\n    else {\n      options = fabric.util.object.clone(options);\n    }\n\n    if (~property.indexOf('.')) {\n      propPair = property.split('.');\n    }\n\n    var currentValue = propPair\n      ? this.get(propPair[0])[propPair[1]]\n      : this.get(property);\n\n    if (!('from' in options)) {\n      options.from = currentValue;\n    }\n\n    if (~to.indexOf('=')) {\n      to = currentValue + parseFloat(to.replace('=', ''));\n    }\n    else {\n      to = parseFloat(to);\n    }\n\n    fabric.util.animate({\n      startValue: options.from,\n      endValue: to,\n      byValue: options.by,\n      easing: options.easing,\n      duration: options.duration,\n      abort: options.abort && function() {\n        return options.abort.call(_this);\n      },\n      onChange: function(value) {\n        if (propPair) {\n          _this[propPair[0]][propPair[1]] = value;\n        }\n        else {\n          _this.set(property, value);\n        }\n        if (skipCallbacks) {\n          return;\n        }\n        options.onChange && options.onChange();\n      },\n      onComplete: function() {\n        if (skipCallbacks) {\n          return;\n        }\n\n        _this.setCoords();\n        options.onComplete && options.onComplete();\n      }\n    });\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\n  if (fabric.Line) {\n    fabric.warn('fabric.Line is already defined');\n    return;\n  }\n\n  /**\n   * Line class\n   * @class fabric.Line\n   * @extends fabric.Object\n   * @see {@link fabric.Line#initialize} for constructor definition\n   */\n  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'line',\n\n    /**\n     * x value or first line edge\n     * @type Number\n     * @default\n     */\n    x1: 0,\n\n    /**\n     * y value or first line edge\n     * @type Number\n     * @default\n     */\n    y1: 0,\n\n    /**\n     * x value or second line edge\n     * @type Number\n     * @default\n     */\n    x2: 0,\n\n    /**\n     * y value or second line edge\n     * @type Number\n     * @default\n     */\n    y2: 0,\n\n    /**\n     * Constructor\n     * @param {Array} [points] Array of points\n     * @param {Object} [options] Options object\n     * @return {fabric.Line} thisArg\n     */\n    initialize: function(points, options) {\n      options = options || { };\n\n      if (!points) {\n        points = [0, 0, 0, 0];\n      }\n\n      this.callSuper('initialize', options);\n\n      this.set('x1', points[0]);\n      this.set('y1', points[1]);\n      this.set('x2', points[2]);\n      this.set('y2', points[3]);\n\n      this._setWidthHeight(options);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options\n     */\n    _setWidthHeight: function(options) {\n      options || (options = { });\n\n      this.width = Math.abs(this.x2 - this.x1);\n      this.height = Math.abs(this.y2 - this.y1);\n\n      this.left = 'left' in options\n        ? options.left\n        : this._getLeftToOriginX();\n\n      this.top = 'top' in options\n        ? options.top\n        : this._getTopToOriginY();\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {Any} value\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n      if (typeof coordProps[key] !== 'undefined') {\n        this._setWidthHeight();\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\n     */\n    _getLeftToOriginX: makeEdgeToOriginGetter(\n      { // property names\n        origin: 'originX',\n        axis1: 'x1',\n        axis2: 'x2',\n        dimension: 'width'\n      },\n      { // possible values of origin\n        nearest: 'left',\n        center: 'center',\n        farthest: 'right'\n      }\n    ),\n\n    /**\n     * @private\n     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\n     */\n    _getTopToOriginY: makeEdgeToOriginGetter(\n      { // property names\n        origin: 'originY',\n        axis1: 'y1',\n        axis2: 'y2',\n        dimension: 'height'\n      },\n      { // possible values of origin\n        nearest: 'top',\n        center: 'center',\n        farthest: 'bottom'\n      }\n    ),\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx, noTransform) {\n      ctx.beginPath();\n\n      if (noTransform) {\n        //  Line coords are distances from left-top of canvas to origin of line.\n        //  To render line in a path-group, we need to translate them to\n        //  distances from center of path-group to center of line.\n        var cp = this.getCenterPoint();\n        ctx.translate(\n          cp.x - this.strokeWidth / 2,\n          cp.y - this.strokeWidth / 2\n        );\n      }\n\n      if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\n        // move from center (of virtual box) to its left/top corner\n        // we can't assume x1, y1 is top left and x2, y2 is bottom right\n        var p = this.calcLinePoints();\n        ctx.moveTo(p.x1, p.y1);\n        ctx.lineTo(p.x2, p.y2);\n      }\n\n      ctx.lineWidth = this.strokeWidth;\n\n      // TODO: test this\n      // make sure setting \"fill\" changes color of a line\n      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n      var origStrokeStyle = ctx.strokeStyle;\n      ctx.strokeStyle = this.stroke || ctx.fillStyle;\n      this.stroke && this._renderStroke(ctx);\n      ctx.strokeStyle = origStrokeStyle;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var p = this.calcLinePoints();\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @methd toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\n    },\n\n    /**\n     * Recalculates line points given width and height\n     * @private\n     */\n    calcLinePoints: function() {\n      var xMult = this.x1 <= this.x2 ? -1 : 1,\n          yMult = this.y1 <= this.y2 ? -1 : 1,\n          x1 = (xMult * this.width * 0.5),\n          y1 = (yMult * this.height * 0.5),\n          x2 = (xMult * this.width * -0.5),\n          y2 = (yMult * this.height * -0.5);\n\n      return {\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2\n      };\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(),\n          p = { x1: this.x1, x2: this.x2, y1: this.y1, y2: this.y2 };\n\n      if (!(this.group && this.group.type === 'path-group')) {\n        p = this.calcLinePoints();\n      }\n      markup.push(\n        '<line ',\n          'x1=\"', p.x1,\n          '\" y1=\"', p.y1,\n          '\" x2=\"', p.x2,\n          '\" y2=\"', p.y2,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(),\n        '\"/>\\n'\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\n   * @static\n   * @memberOf fabric.Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\n\n  /**\n   * Returns fabric.Line instance from an SVG element\n   * @static\n   * @memberOf fabric.Line\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Line} instance of fabric.Line\n   */\n  fabric.Line.fromElement = function(element, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\n        points = [\n          parsedAttributes.x1 || 0,\n          parsedAttributes.y1 || 0,\n          parsedAttributes.x2 || 0,\n          parsedAttributes.y2 || 0\n        ];\n    return new fabric.Line(points, extend(parsedAttributes, options));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Line instance from an object representation\n   * @static\n   * @memberOf fabric.Line\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Line} instance of fabric.Line\n   */\n  fabric.Line.fromObject = function(object) {\n    var points = [object.x1, object.y1, object.x2, object.y2];\n    return new fabric.Line(points, object);\n  };\n\n  /**\n   * Produces a function that calculates distance from canvas edge to Line origin.\n   */\n  function makeEdgeToOriginGetter(propertyNames, originValues) {\n    var origin = propertyNames.origin,\n        axis1 = propertyNames.axis1,\n        axis2 = propertyNames.axis2,\n        dimension = propertyNames.dimension,\n        nearest = originValues.nearest,\n        center = originValues.center,\n        farthest = originValues.farthest;\n\n    return function() {\n      switch (this.get(origin)) {\n      case nearest:\n        return Math.min(this.get(axis1), this.get(axis2));\n      case center:\n        return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\n      case farthest:\n        return Math.max(this.get(axis1), this.get(axis2));\n      }\n    };\n\n  }\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      pi = Math.PI,\n      extend = fabric.util.object.extend;\n\n  if (fabric.Circle) {\n    fabric.warn('fabric.Circle is already defined.');\n    return;\n  }\n\n  /**\n   * Circle class\n   * @class fabric.Circle\n   * @extends fabric.Object\n   * @see {@link fabric.Circle#initialize} for constructor definition\n   */\n  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'circle',\n\n    /**\n     * Radius of this circle\n     * @type Number\n     * @default\n     */\n    radius: 0,\n\n    /**\n     * Start angle of the circle, moving clockwise\n     * @type Number\n     * @default 0\n     */\n    startAngle: 0,\n\n    /**\n     * End angle of the circle\n     * @type Number\n     * @default 2Pi\n     */\n    endAngle: pi * 2,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {fabric.Circle} thisArg\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.callSuper('initialize', options);\n      this.set('radius', options.radius || 0);\n\n      this.startAngle = options.startAngle || this.startAngle;\n      this.endAngle = options.endAngle || this.endAngle;\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {Any} value\n     * @return {fabric.Circle} thisArg\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n\n      if (key === 'radius') {\n        this.setRadius(value);\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        radius: this.get('radius'),\n        startAngle: this.startAngle,\n        endAngle: this.endAngle\n      });\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(), x = 0, y = 0,\n      angle = (this.endAngle - this.startAngle) % ( 2 * pi);\n\n      if (angle === 0) {\n        if (this.group && this.group.type === 'path-group') {\n          x = this.left + this.radius;\n          y = this.top + this.radius;\n        }\n        markup.push(\n          '<circle ',\n            'cx=\"' + x + '\" cy=\"' + y + '\" ',\n            'r=\"', this.radius,\n            '\" style=\"', this.getSvgStyles(),\n            '\" transform=\"', this.getSvgTransform(),\n            ' ', this.getSvgTransformMatrix(),\n          '\"/>\\n'\n        );\n      }\n      else {\n        var startX = Math.cos(this.startAngle) * this.radius,\n            startY = Math.sin(this.startAngle) * this.radius,\n            endX = Math.cos(this.endAngle) * this.radius,\n            endY = Math.sin(this.endAngle) * this.radius,\n            largeFlag = angle > pi ? '1' : '0';\n\n        markup.push(\n          '<path d=\"M ' + startX + ' ' + startY,\n          ' A ' + this.radius + ' ' + this.radius,\n          ' 0 ', + largeFlag + ' 1', ' ' + endX + ' ' + endY,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          ' ', this.getSvgTransformMatrix(),\n          '\"/>\\n'\n        );\n      }\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    _render: function(ctx, noTransform) {\n      ctx.beginPath();\n      ctx.arc(noTransform ? this.left + this.radius : 0,\n              noTransform ? this.top + this.radius : 0,\n              this.radius,\n              this.startAngle,\n              this.endAngle, false);\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * Returns horizontal radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRadiusX: function() {\n      return this.get('radius') * this.get('scaleX');\n    },\n\n    /**\n     * Returns vertical radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRadiusY: function() {\n      return this.get('radius') * this.get('scaleY');\n    },\n\n    /**\n     * Sets radius of an object (and updates width accordingly)\n     * @return {fabric.Circle} thisArg\n     */\n    setRadius: function(value) {\n      this.radius = value;\n      return this.set('width', value * 2).set('height', value * 2);\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\n   * @static\n   * @memberOf fabric.Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\n\n  /**\n   * Returns {@link fabric.Circle} instance from an SVG element\n   * @static\n   * @memberOf fabric.Circle\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   * @return {fabric.Circle} Instance of fabric.Circle\n   */\n  fabric.Circle.fromElement = function(element, options) {\n    options || (options = { });\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\n\n    if (!isValidRadius(parsedAttributes)) {\n      throw new Error('value of `r` attribute is required and can not be negative');\n    }\n\n    parsedAttributes.left = parsedAttributes.left || 0;\n    parsedAttributes.top = parsedAttributes.top || 0;\n\n    var obj = new fabric.Circle(extend(parsedAttributes, options));\n\n    obj.left -= obj.radius;\n    obj.top -= obj.radius;\n    return obj;\n  };\n\n  /**\n   * @private\n   */\n  function isValidRadius(attributes) {\n    return (('radius' in attributes) && (attributes.radius >= 0));\n  }\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Circle} instance from an object representation\n   * @static\n   * @memberOf fabric.Circle\n   * @param {Object} object Object to create an instance from\n   * @return {Object} Instance of fabric.Circle\n   */\n  fabric.Circle.fromObject = function(object) {\n    return new fabric.Circle(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Triangle) {\n    fabric.warn('fabric.Triangle is already defined');\n    return;\n  }\n\n  /**\n   * Triangle class\n   * @class fabric.Triangle\n   * @extends fabric.Object\n   * @return {fabric.Triangle} thisArg\n   * @see {@link fabric.Triangle#initialize} for constructor definition\n   */\n  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'triangle',\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.callSuper('initialize', options);\n\n      this.set('width', options.width || 100)\n          .set('height', options.height || 100);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2;\n\n      ctx.beginPath();\n      ctx.moveTo(-widthBy2, heightBy2);\n      ctx.lineTo(0, -heightBy2);\n      ctx.lineTo(widthBy2, heightBy2);\n      ctx.closePath();\n\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2;\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(),\n          widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2,\n          points = [\n            -widthBy2 + ' ' + heightBy2,\n            '0 ' + -heightBy2,\n            widthBy2 + ' ' + heightBy2\n          ]\n          .join(',');\n\n      markup.push(\n        '<polygon ',\n          'points=\"', points,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n        '\"/>'\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /**\n   * Returns fabric.Triangle instance from an object representation\n   * @static\n   * @memberOf fabric.Triangle\n   * @param {Object} object Object to create an instance from\n   * @return {Object} instance of Canvas.Triangle\n   */\n  fabric.Triangle.fromObject = function(object) {\n    return new fabric.Triangle(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      piBy2   = Math.PI * 2,\n      extend = fabric.util.object.extend;\n\n  if (fabric.Ellipse) {\n    fabric.warn('fabric.Ellipse is already defined.');\n    return;\n  }\n\n  /**\n   * Ellipse class\n   * @class fabric.Ellipse\n   * @extends fabric.Object\n   * @return {fabric.Ellipse} thisArg\n   * @see {@link fabric.Ellipse#initialize} for constructor definition\n   */\n  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'ellipse',\n\n    /**\n     * Horizontal radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {fabric.Ellipse} thisArg\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.callSuper('initialize', options);\n\n      this.set('rx', options.rx || 0);\n      this.set('ry', options.ry || 0);\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {Any} value\n     * @return {fabric.Ellipse} thisArg\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n      switch (key) {\n\n        case 'rx':\n          this.rx = value;\n          this.set('width', value * 2);\n          break;\n\n        case 'ry':\n          this.ry = value;\n          this.set('height', value * 2);\n          break;\n\n      }\n      return this;\n    },\n\n    /**\n     * Returns horizontal radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRx: function() {\n      return this.get('rx') * this.get('scaleX');\n    },\n\n    /**\n     * Returns Vertical radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRy: function() {\n      return this.get('ry') * this.get('scaleY');\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        rx: this.get('rx'),\n        ry: this.get('ry')\n      });\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(), x = 0, y = 0;\n      if (this.group && this.group.type === 'path-group') {\n        x = this.left + this.rx;\n        y = this.top + this.ry;\n      }\n      markup.push(\n        '<ellipse ',\n          'cx=\"', x, '\" cy=\"', y, '\" ',\n          'rx=\"', this.rx,\n          '\" ry=\"', this.ry,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(),\n        '\"/>\\n'\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    _render: function(ctx, noTransform) {\n      ctx.beginPath();\n      ctx.save();\n      ctx.transform(1, 0, 0, this.ry/this.rx, 0, 0);\n      ctx.arc(\n        noTransform ? this.left + this.rx : 0,\n        noTransform ? (this.top + this.ry) * this.rx/this.ry : 0,\n        this.rx,\n        0,\n        piBy2,\n        false);\n      ctx.restore();\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\n   * @static\n   * @memberOf fabric.Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\n\n  /**\n   * Returns {@link fabric.Ellipse} instance from an SVG element\n   * @static\n   * @memberOf fabric.Ellipse\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Ellipse}\n   */\n  fabric.Ellipse.fromElement = function(element, options) {\n    options || (options = { });\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\n\n    parsedAttributes.left = parsedAttributes.left || 0;\n    parsedAttributes.top = parsedAttributes.top || 0;\n\n    var ellipse = new fabric.Ellipse(extend(parsedAttributes, options));\n\n    ellipse.top -= ellipse.ry;\n    ellipse.left -= ellipse.rx;\n    return ellipse;\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Ellipse} instance from an object representation\n   * @static\n   * @memberOf fabric.Ellipse\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Ellipse}\n   */\n  fabric.Ellipse.fromObject = function(object) {\n    return new fabric.Ellipse(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  if (fabric.Rect) {\n    fabric.warn('fabric.Rect is already defined');\n    return;\n  }\n\n  var stateProperties = fabric.Object.prototype.stateProperties.concat();\n  stateProperties.push('rx', 'ry', 'x', 'y');\n\n  /**\n   * Rectangle class\n   * @class fabric.Rect\n   * @extends fabric.Object\n   * @return {fabric.Rect} thisArg\n   * @see {@link fabric.Rect#initialize} for constructor definition\n   */\n  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n\n    /**\n     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: stateProperties,\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'rect',\n\n    /**\n     * Horizontal border radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical border radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    /**\n     * Used to specify dash pattern for stroke on this object\n     * @type Array\n     */\n    strokeDashArray: null,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.callSuper('initialize', options);\n      this._initRxRy();\n\n    },\n\n    /**\n     * Initializes rx/ry attributes\n     * @private\n     */\n    _initRxRy: function() {\n      if (this.rx && !this.ry) {\n        this.ry = this.rx;\n      }\n      else if (this.ry && !this.rx) {\n        this.rx = this.ry;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx, noTransform) {\n\n      // optimize 1x1 case (used in spray brush)\n      if (this.width === 1 && this.height === 1) {\n        ctx.fillRect(0, 0, 1, 1);\n        return;\n      }\n\n      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\n          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\n          w = this.width,\n          h = this.height,\n          x = noTransform ? this.left : -this.width / 2,\n          y = noTransform ? this.top : -this.height / 2,\n          isRounded = rx !== 0 || ry !== 0,\n          k = 1 - 0.5522847498 /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */;\n\n      ctx.beginPath();\n\n      ctx.moveTo(x + rx, y);\n\n      ctx.lineTo(x + w - rx, y);\n      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n\n      ctx.lineTo(x + w, y + h - ry);\n      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n\n      ctx.lineTo(x + rx, y + h);\n      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n\n      ctx.lineTo(x, y + ry);\n      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n\n      ctx.closePath();\n\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var x = -this.width / 2,\n          y = -this.height / 2,\n          w = this.width,\n          h = this.height;\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n        rx: this.get('rx') || 0,\n        ry: this.get('ry') || 0\n      });\n      if (!this.includeDefaultValues) {\n        this._removeDefaultValues(object);\n      }\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(), x = this.left, y = this.top;\n      if (!(this.group && this.group.type === 'path-group')) {\n        x = -this.width / 2;\n        y = -this.height / 2;\n      }\n      markup.push(\n        '<rect ',\n          'x=\"', x, '\" y=\"', y,\n          '\" rx=\"', this.get('rx'), '\" ry=\"', this.get('ry'),\n          '\" width=\"', this.width, '\" height=\"', this.height,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(),\n        '\"/>\\n');\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\n   * @static\n   * @memberOf fabric.Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\n\n  /**\n   * Returns {@link fabric.Rect} instance from an SVG element\n   * @static\n   * @memberOf fabric.Rect\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Rect} Instance of fabric.Rect\n   */\n  fabric.Rect.fromElement = function(element, options) {\n    if (!element) {\n      return null;\n    }\n    options = options || { };\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\n\n    parsedAttributes.left = parsedAttributes.left || 0;\n    parsedAttributes.top  = parsedAttributes.top  || 0;\n    var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n    rect.visible = rect.width > 0 && rect.height > 0;\n    return rect;\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Rect} instance from an object representation\n   * @static\n   * @memberOf fabric.Rect\n   * @param {Object} object Object to create an instance from\n   * @return {Object} instance of fabric.Rect\n   */\n  fabric.Rect.fromObject = function(object) {\n    return new fabric.Rect(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Polyline) {\n    fabric.warn('fabric.Polyline is already defined');\n    return;\n  }\n\n  /**\n   * Polyline class\n   * @class fabric.Polyline\n   * @extends fabric.Object\n   * @see {@link fabric.Polyline#initialize} for constructor definition\n   */\n  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polyline',\n\n    /**\n     * Points array\n     * @type Array\n     * @default\n     */\n    points: null,\n\n    /**\n     * Minimum X from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minX: 0,\n\n    /**\n     * Minimum Y from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minY: 0,\n\n    /**\n     * Constructor\n     * @param {Array} points Array of points (where each point is an object with x and y)\n     * @param {Object} [options] Options object\n     * @param {Boolean} [skipOffset] Whether points offsetting should be skipped\n     * @return {fabric.Polyline} thisArg\n     * @example\n     * var poly = new fabric.Polyline([\n     *     { x: 10, y: 10 },\n     *     { x: 50, y: 30 },\n     *     { x: 40, y: 70 },\n     *     { x: 60, y: 50 },\n     *     { x: 100, y: 150 },\n     *     { x: 40, y: 100 }\n     *   ], {\n     *   stroke: 'red',\n     *   left: 100,\n     *   top: 100\n     * });\n     */\n    initialize: function(points, options) {\n      return fabric.Polygon.prototype.initialize.call(this, points, options);\n    },\n\n    /**\n     * @private\n     */\n    _calcDimensions: function() {\n      return fabric.Polygon.prototype._calcDimensions.call(this);\n    },\n\n    /**\n     * @private\n     */\n    _applyPointOffset: function() {\n      return fabric.Polygon.prototype._applyPointOffset.call(this);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return fabric.Polygon.prototype.toObject.call(this, propertiesToInclude);\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      return fabric.Polygon.prototype.toSVG.call(this, reviver);\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!fabric.Polygon.prototype.commonRender.call(this, ctx)) {\n        return;\n      }\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var p1, p2;\n\n      ctx.beginPath();\n      for (var i = 0, len = this.points.length; i < len; i++) {\n        p1 = this.points[i];\n        p2 = this.points[i + 1] || p1;\n        fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\n      }\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.get('points').length;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\n   * @static\n   * @memberOf fabric.Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n  /**\n   * Returns fabric.Polyline instance from an SVG element\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Polyline} Instance of fabric.Polyline\n   */\n  fabric.Polyline.fromElement = function(element, options) {\n    if (!element) {\n      return null;\n    }\n    options || (options = { });\n\n    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n        parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);\n\n    return new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Polyline instance from an object representation\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Polyline} Instance of fabric.Polyline\n   */\n  fabric.Polyline.fromObject = function(object) {\n    var points = object.points;\n    return new fabric.Polyline(points, object, true);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Polygon) {\n    fabric.warn('fabric.Polygon is already defined');\n    return;\n  }\n\n  /**\n   * Polygon class\n   * @class fabric.Polygon\n   * @extends fabric.Object\n   * @see {@link fabric.Polygon#initialize} for constructor definition\n   */\n  fabric.Polygon = fabric.util.createClass(fabric.Object, /** @lends fabric.Polygon.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polygon',\n\n    /**\n     * Points array\n     * @type Array\n     * @default\n     */\n    points: null,\n\n    /**\n     * Minimum X from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minX: 0,\n\n    /**\n     * Minimum Y from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minY: 0,\n\n    /**\n     * Constructor\n     * @param {Array} points Array of points\n     * @param {Object} [options] Options object\n     * @return {fabric.Polygon} thisArg\n     */\n    initialize: function(points, options) {\n      options = options || { };\n      this.points = points || [ ];\n      this.callSuper('initialize', options);\n      this._calcDimensions();\n      if (!('top' in options)) {\n        this.top = this.minY;\n      }\n      if (!('left' in options)) {\n        this.left = this.minX;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _calcDimensions: function() {\n\n      var points = this.points,\n          minX = min(points, 'x'),\n          minY = min(points, 'y'),\n          maxX = max(points, 'x'),\n          maxY = max(points, 'y');\n\n      this.width = (maxX - minX) || 0;\n      this.height = (maxY - minY) || 0;\n\n      this.minX = minX || 0,\n      this.minY = minY || 0;\n    },\n\n    /**\n     * @private\n     */\n    _applyPointOffset: function() {\n      // change points to offset polygon into a bounding box\n      // executed one time\n      this.points.forEach(function(p) {\n        p.x -= (this.minX + this.width / 2);\n        p.y -= (this.minY + this.height / 2);\n      }, this);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        points: this.points.concat()\n      });\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var points = [],\n          markup = this._createBaseSVGMarkup();\n\n      for (var i = 0, len = this.points.length; i < len; i++) {\n        points.push(toFixed(this.points[i].x, 2), ',', toFixed(this.points[i].y, 2), ' ');\n      }\n\n      markup.push(\n        '<', this.type, ' ',\n          'points=\"', points.join(''),\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          ' ', this.getSvgTransformMatrix(),\n        '\"/>\\n'\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!this.commonRender(ctx)) {\n        return;\n      }\n      this._renderFill(ctx);\n      if (this.stroke || this.strokeDashArray) {\n        ctx.closePath();\n        this._renderStroke(ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    commonRender: function(ctx) {\n      var point, len = this.points.length;\n\n      if (!len || isNaN(this.points[len - 1].y)) {\n        // do not draw if no points or odd points\n        // NaN comes from parseFloat of a empty string in parser\n        return false;\n      }\n\n      ctx.beginPath();\n\n      if (this._applyPointOffset) {\n        if (!(this.group && this.group.type === 'path-group')) {\n          this._applyPointOffset();\n        }\n        this._applyPointOffset = null;\n      }\n\n      ctx.moveTo(this.points[0].x, this.points[0].y);\n      for (var i = 0; i < len; i++) {\n        point = this.points[i];\n        ctx.lineTo(point.x, point.y);\n      }\n      return true;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      fabric.Polyline.prototype._renderDashedStroke.call(this, ctx);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.points.length;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\n   * @static\n   * @memberOf fabric.Polygon\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\n   */\n  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n  /**\n   * Returns {@link fabric.Polygon} instance from an SVG element\n   * @static\n   * @memberOf fabric.Polygon\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Polygon} Instance of fabric.Polygon\n   */\n  fabric.Polygon.fromElement = function(element, options) {\n    if (!element) {\n      return null;\n    }\n\n    options || (options = { });\n\n    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n        parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);\n\n    return new fabric.Polygon(points, extend(parsedAttributes, options));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Polygon instance from an object representation\n   * @static\n   * @memberOf fabric.Polygon\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Polygon} Instance of fabric.Polygon\n   */\n  fabric.Polygon.fromObject = function(object) {\n    return new fabric.Polygon(object.points, object, true);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      extend = fabric.util.object.extend,\n      _toString = Object.prototype.toString,\n      drawArc = fabric.util.drawArc,\n      commandLengths = {\n        m: 2,\n        l: 2,\n        h: 1,\n        v: 1,\n        c: 6,\n        s: 4,\n        q: 4,\n        t: 2,\n        a: 7\n      },\n      repeatedCommands = {\n        m: 'l',\n        M: 'L'\n      };\n\n  if (fabric.Path) {\n    fabric.warn('fabric.Path is already defined');\n    return;\n  }\n\n  /**\n   * Path class\n   * @class fabric.Path\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#path_and_pathgroup}\n   * @see {@link fabric.Path#initialize} for constructor definition\n   */\n  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'path',\n\n    /**\n     * Array of path points\n     * @type Array\n     * @default\n     */\n    path: null,\n\n    /**\n     * Minimum X from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minX: 0,\n\n    /**\n     * Minimum Y from points values, necessary to offset points\n     * @type Number\n     * @default\n     */\n    minY: 0,\n\n    /**\n     * Constructor\n     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n     * @param {Object} [options] Options object\n     * @return {fabric.Path} thisArg\n     */\n    initialize: function(path, options) {\n      options = options || { };\n\n      this.setOptions(options);\n\n      if (!path) {\n        path = [ ];\n      }\n\n      var fromArray = _toString.call(path) === '[object Array]';\n\n      this.path = fromArray\n        ? path\n        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n        : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n\n      if (!this.path) {\n        return;\n      }\n\n      if (!fromArray) {\n        this.path = this._parsePath();\n      }\n\n      this._setPositionDimensions(options);\n\n      if (options.sourcePath) {\n        this.setSourcePath(options.sourcePath);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} options Options object\n     */\n    _setPositionDimensions: function(options) {\n      var calcDim = this._parseDimensions();\n\n      this.minX = calcDim.left;\n      this.minY = calcDim.top;\n      this.width = calcDim.width;\n      this.height = calcDim.height;\n\n      if (typeof options.left === 'undefined') {\n        this.left = calcDim.left + (this.originX === 'center'\n          ? this.width / 2\n          : this.originX === 'right'\n            ? this.width\n            : 0);\n      }\n\n      if (typeof options.top === 'undefined') {\n        this.top = calcDim.top + (this.originY === 'center'\n          ? this.height / 2\n          : this.originY === 'bottom'\n            ? this.height\n            : 0);\n      }\n\n      this.pathOffset = this.pathOffset || {\n        x: this.minX + this.width / 2,\n        y: this.minY + this.height / 2\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */\n    _render: function(ctx) {\n      var current, // current instruction\n          previous = null,\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          tempX,\n          tempY,\n          l = -this.pathOffset.x,\n          t = -this.pathOffset.y;\n\n      if (this.group && this.group.type === 'path-group') {\n        l = 0;\n        t = 0;\n      }\n\n      ctx.beginPath();\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'l': // lineto, relative\n            x += current[1];\n            y += current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'h': // horizontal lineto, relative\n            x += current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'H': // horizontal lineto, absolute\n            x = current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'v': // vertical lineto, relative\n            y += current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'V': // verical lineto, absolute\n            y = current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'm': // moveTo, relative\n            x += current[1];\n            y += current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'c': // bezierCurveTo, relative\n            tempX = x + current[5];\n            tempY = y + current[6];\n            controlX = x + current[3];\n            controlY = y + current[4];\n            ctx.bezierCurveTo(\n              x + current[1] + l, // x1\n              y + current[2] + t, // y1\n              controlX + l, // x2\n              controlY + t, // y2\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            x = current[5];\n            y = current[6];\n            controlX = current[3];\n            controlY = current[4];\n            ctx.bezierCurveTo(\n              current[1] + l,\n              current[2] + t,\n              controlX + l,\n              controlY + t,\n              x + l,\n              y + t\n            );\n            break;\n\n          case 's': // shorthand cubic bezierCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            ctx.bezierCurveTo(\n              controlX + l,\n              controlY + t,\n              x + current[1] + l,\n              y + current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = x + current[1];\n            controlY = y + current[2];\n\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'S': // shorthand cubic bezierCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            ctx.bezierCurveTo(\n              controlX + l,\n              controlY + t,\n              current[1] + l,\n              current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = current[1];\n            controlY = current[2];\n\n            break;\n\n          case 'q': // quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            controlX = x + current[1];\n            controlY = y + current[2];\n\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n\n            ctx.quadraticCurveTo(\n              current[1] + l,\n              current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 't': // shorthand quadraticCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[1];\n            tempY = y + current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n\n            break;\n\n          case 'T':\n            tempX = current[1];\n            tempY = current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'a':\n            // TODO: optimize this\n            drawArc(ctx, x + l, y + t, [\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + x + l,\n              current[7] + y + t\n            ]);\n            x += current[6];\n            y += current[7];\n            break;\n\n          case 'A':\n            // TODO: optimize this\n            drawArc(ctx, x + l, y + t, [\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + l,\n              current[7] + t\n            ]);\n            x = current[6];\n            y = current[7];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            ctx.closePath();\n            break;\n        }\n        previous = current;\n      }\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Path (' + this.complexity() +\n        '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var o = extend(this.callSuper('toObject', propertiesToInclude), {\n        path: this.path.map(function(item) { return item.slice() }),\n        pathOffset: this.pathOffset\n      });\n      if (this.sourcePath) {\n        o.sourcePath = this.sourcePath;\n      }\n      if (this.transformMatrix) {\n        o.transformMatrix = this.transformMatrix;\n      }\n      return o;\n    },\n\n    /**\n     * Returns dataless object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var o = this.toObject(propertiesToInclude);\n      if (this.sourcePath) {\n        o.path = this.sourcePath;\n      }\n      delete o.sourcePath;\n      return o;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var chunks = [],\n          markup = this._createBaseSVGMarkup(), addTransform = '';\n\n      for (var i = 0, len = this.path.length; i < len; i++) {\n        chunks.push(this.path[i].join(' '));\n      }\n      var path = chunks.join(' ');\n      if (!(this.group && this.group.type === 'path-group')) {\n        addTransform = ' translate(' + (-this.pathOffset.x) + ', ' + (-this.pathOffset.y) + ') ';\n      }\n      markup.push(\n        //jscs:disable validateIndentation\n        '<path ',\n          'd=\"', path,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(), addTransform,\n          this.getSvgTransformMatrix(), '\" stroke-linecap=\"round\" ',\n        '/>\\n'\n        //jscs:enable validateIndentation\n      );\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns number representation of an instance complexity\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.path.length;\n    },\n\n    /**\n     * @private\n     */\n    _parsePath: function() {\n      var result = [ ],\n          coords = [ ],\n          currentPath,\n          parsed,\n          re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/ig,\n          match,\n          coordsStr;\n\n      for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\n        currentPath = this.path[i];\n\n        coordsStr = currentPath.slice(1).trim();\n        coords.length = 0;\n\n        while ((match = re.exec(coordsStr))) {\n          coords.push(match[0]);\n        }\n\n        coordsParsed = [ currentPath.charAt(0) ];\n\n        for (var j = 0, jlen = coords.length; j < jlen; j++) {\n          parsed = parseFloat(coords[j]);\n          if (!isNaN(parsed)) {\n            coordsParsed.push(parsed);\n          }\n        }\n\n        var command = coordsParsed[0],\n            commandLength = commandLengths[command.toLowerCase()],\n            repeatedCommand = repeatedCommands[command] || command;\n\n        if (coordsParsed.length - 1 > commandLength) {\n          for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\n            result.push([ command ].concat(coordsParsed.slice(k, k + commandLength)));\n            command = repeatedCommand;\n          }\n        }\n        else {\n          result.push(coordsParsed);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _parseDimensions: function() {\n\n      var aX = [],\n          aY = [],\n          current, // current instruction\n          previous = null,\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          tempX,\n          tempY,\n          bounds;\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'l': // lineto, relative\n            x += current[1];\n            y += current[2];\n            bounds = [ ];\n            break;\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            bounds = [ ];\n            break;\n\n          case 'h': // horizontal lineto, relative\n            x += current[1];\n            bounds = [ ];\n            break;\n\n          case 'H': // horizontal lineto, absolute\n            x = current[1];\n            bounds = [ ];\n            break;\n\n          case 'v': // vertical lineto, relative\n            y += current[1];\n            bounds = [ ];\n            break;\n\n          case 'V': // verical lineto, absolute\n            y = current[1];\n            bounds = [ ];\n            break;\n\n          case 'm': // moveTo, relative\n            x += current[1];\n            y += current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [ ];\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [ ];\n            break;\n\n          case 'c': // bezierCurveTo, relative\n            tempX = x + current[5];\n            tempY = y + current[6];\n            controlX = x + current[3];\n            controlY = y + current[4];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              x + current[1], // x1\n              y + current[2], // y1\n              controlX, // x2\n              controlY, // y2\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            x = current[5];\n            y = current[6];\n            controlX = current[3];\n            controlY = current[4];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              current[1],\n              current[2],\n              controlX,\n              controlY,\n              x,\n              y\n            );\n            break;\n\n          case 's': // shorthand cubic bezierCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              x + current[1],\n              y + current[2],\n              tempX,\n              tempY\n            );\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = x + current[1];\n            controlY = y + current[2];\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'S': // shorthand cubic bezierCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              current[1],\n              current[2],\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 'q': // quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n            controlX = x + current[1];\n            controlY = y + current[2];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            controlX = current[1];\n            controlY = current[2];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              current[3],\n              current[4]\n            );\n            x = current[3];\n            y = current[4];\n            break;\n\n          case 't': // shorthand quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[1];\n            tempY = y + current[2];\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n\n            break;\n\n          case 'T':\n            tempX = current[1];\n            tempY = current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'a':\n            // TODO: optimize this\n            bounds = fabric.util.getBoundsOfArc(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + x,\n              current[7] + y\n            );\n            x += current[6];\n            y += current[7];\n            break;\n\n          case 'A':\n            // TODO: optimize this\n            bounds = fabric.util.getBoundsOfArc(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6],\n              current[7]\n            );\n            x = current[6];\n            y = current[7];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            break;\n        }\n        previous = current;\n        bounds.forEach(function (point) {\n          aX.push(point.x);\n          aY.push(point.y);\n        });\n        aX.push(x);\n        aY.push(y);\n      }\n\n      var minX = min(aX) || 0,\n          minY = min(aY) || 0,\n          maxX = max(aX) || 0,\n          maxY = max(aY) || 0,\n          deltaX = maxX - minX,\n          deltaY = maxY - minY,\n\n          o = {\n            left: minX,\n            top: minY,\n            width: deltaX,\n            height: deltaY\n          };\n\n      return o;\n    }\n  });\n\n  /**\n   * Creates an instance of fabric.Path from an object\n   * @static\n   * @memberOf fabric.Path\n   * @param {Object} object\n   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Path.fromObject = function(object, callback) {\n    if (typeof object.path === 'string') {\n      fabric.loadSVGFromURL(object.path, function (elements) {\n        var path = elements[0],\n            pathUrl = object.path;\n\n        delete object.path;\n\n        fabric.util.object.extend(path, object);\n        path.setSourcePath(pathUrl);\n\n        callback(path);\n      });\n    }\n    else {\n      callback(new fabric.Path(object.path, object));\n    }\n  };\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\n   * @static\n   * @memberOf fabric.Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\n\n  /**\n   * Creates an instance of fabric.Path from an SVG <path> element\n   * @static\n   * @memberOf fabric.Path\n   * @param {SVGElement} element to parse\n   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n   * @param {Object} [options] Options object\n   */\n  fabric.Path.fromElement = function(element, callback, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\n    callback && callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @memberOf fabric.Path\n   * @type Boolean\n   * @default\n   */\n  fabric.Path.async = true;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      invoke = fabric.util.array.invoke,\n      parentToObject = fabric.Object.prototype.toObject;\n\n  if (fabric.PathGroup) {\n    fabric.warn('fabric.PathGroup is already defined');\n    return;\n  }\n\n  /**\n   * Path group class\n   * @class fabric.PathGroup\n   * @extends fabric.Path\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#path_and_pathgroup}\n   * @see {@link fabric.PathGroup#initialize} for constructor definition\n   */\n  fabric.PathGroup = fabric.util.createClass(fabric.Path, /** @lends fabric.PathGroup.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'path-group',\n\n    /**\n     * Fill value\n     * @type String\n     * @default\n     */\n    fill: '',\n\n    /**\n     * Constructor\n     * @param {Array} paths\n     * @param {Object} [options] Options object\n     * @return {fabric.PathGroup} thisArg\n     */\n    initialize: function(paths, options) {\n\n      options = options || { };\n      this.paths = paths || [ ];\n\n      for (var i = this.paths.length; i--;) {\n        this.paths[i].group = this;\n      }\n\n      if (options.toBeParsed) {\n        this.parseDimensionsFromPaths(options);\n        delete options.toBeParsed;\n      }\n      this.setOptions(options);\n      this.setCoords();\n\n      if (options.sourcePath) {\n        this.setSourcePath(options.sourcePath);\n      }\n    },\n\n    /**\n     * Calculate width and height based on paths contained\n     */\n    parseDimensionsFromPaths: function(options) {\n      var points, p, xC = [ ], yC = [ ], path, height, width,\n          m;\n      for (var j = this.paths.length; j--;) {\n        path = this.paths[j];\n        height = path.height + path.strokeWidth;\n        width = path.width + path.strokeWidth;\n        points = [\n          { x: path.left, y: path.top },\n          { x: path.left + width, y: path.top },\n          { x: path.left, y: path.top + height },\n          { x: path.left + width, y: path.top + height }\n        ];\n        m = this.paths[j].transformMatrix;\n        for (var i = 0; i < points.length; i++) {\n          p = points[i];\n          if (m) {\n            p = fabric.util.transformPoint(p, m, false);\n          }\n          xC.push(p.x);\n          yC.push(p.y);\n        }\n      }\n      options.width = Math.max.apply(null, xC);\n      options.height = Math.max.apply(null, yC);\n    },\n\n    /**\n     * Renders this group on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render this instance on\n     */\n    render: function(ctx) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n\n      ctx.save();\n\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      this.transform(ctx);\n\n      this._setShadow(ctx);\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      ctx.translate(-this.width/2, -this.height/2);\n      for (var i = 0, l = this.paths.length; i < l; ++i) {\n        this.paths[i].render(ctx, true);\n      }\n      this.clipTo && ctx.restore();\n      ctx.restore();\n    },\n\n    /**\n     * Sets certain property to a certain value\n     * @param {String} prop\n     * @param {Any} value\n     * @return {fabric.PathGroup} thisArg\n     */\n    _set: function(prop, value) {\n\n      if (prop === 'fill' && value && this.isSameColor()) {\n        var i = this.paths.length;\n        while (i--) {\n          this.paths[i]._set(prop, value);\n        }\n      }\n\n      return this.callSuper('_set', prop, value);\n    },\n\n    /**\n     * Returns object representation of this path group\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var o = extend(parentToObject.call(this, propertiesToInclude), {\n        paths: invoke(this.getObjects(), 'toObject', propertiesToInclude)\n      });\n      if (this.sourcePath) {\n        o.sourcePath = this.sourcePath;\n      }\n      return o;\n    },\n\n    /**\n     * Returns dataless object representation of this path group\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} dataless object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var o = this.toObject(propertiesToInclude);\n      if (this.sourcePath) {\n        o.paths = this.sourcePath;\n      }\n      return o;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var objects = this.getObjects(),\n          p = this.getPointByOrigin('left', 'top'),\n          translatePart = 'translate(' + p.x + ' ' + p.y + ')',\n          markup = [\n            //jscs:disable validateIndentation\n            '<g ',\n              'style=\"', this.getSvgStyles(), '\" ',\n              'transform=\"', this.getSvgTransformMatrix(), translatePart, this.getSvgTransform(), '\" ',\n            '>\\n'\n            //jscs:enable validateIndentation\n          ];\n\n      for (var i = 0, len = objects.length; i < len; i++) {\n        markup.push(objects[i].toSVG(reviver));\n      }\n      markup.push('</g>\\n');\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns a string representation of this path group\n     * @return {String} string representation of an object\n     */\n    toString: function() {\n      return '#<fabric.PathGroup (' + this.complexity() +\n        '): { top: ' + this.top + ', left: ' + this.left + ' }>';\n    },\n\n    /**\n     * Returns true if all paths in this group are of same color\n     * @return {Boolean} true if all paths are of the same color (`fill`)\n     */\n    isSameColor: function() {\n      var firstPathFill = (this.getObjects()[0].get('fill') || '').toLowerCase();\n      return this.getObjects().every(function(path) {\n        return (path.get('fill') || '').toLowerCase() === firstPathFill;\n      });\n    },\n\n    /**\n     * Returns number representation of object's complexity\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return this.paths.reduce(function(total, path) {\n        return total + ((path && path.complexity) ? path.complexity() : 0);\n      }, 0);\n    },\n\n    /**\n     * Returns all paths in this path group\n     * @return {Array} array of path objects included in this path group\n     */\n    getObjects: function() {\n      return this.paths;\n    }\n  });\n\n  /**\n   * Creates fabric.PathGroup instance from an object representation\n   * @static\n   * @memberOf fabric.PathGroup\n   * @param {Object} object Object to create an instance from\n   * @param {Function} callback Callback to invoke when an fabric.PathGroup instance is created\n   */\n  fabric.PathGroup.fromObject = function(object, callback) {\n    if (typeof object.paths === 'string') {\n      fabric.loadSVGFromURL(object.paths, function (elements) {\n\n        var pathUrl = object.paths;\n        delete object.paths;\n\n        var pathGroup = fabric.util.groupSVGElements(elements, object, pathUrl);\n\n        callback(pathGroup);\n      });\n    }\n    else {\n      fabric.util.enlivenObjects(object.paths, function(enlivenedObjects) {\n        delete object.paths;\n        callback(new fabric.PathGroup(enlivenedObjects, object));\n      });\n    }\n  };\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @memberOf fabric.PathGroup\n   * @type Boolean\n   * @default\n   */\n  fabric.PathGroup.async = true;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      invoke = fabric.util.array.invoke;\n\n  if (fabric.Group) {\n    return;\n  }\n\n  // lock-related properties, for use in fabric.Group#get\n  // to enable locking behavior on group\n  // when one of its objects has lock-related properties set\n  var _lockProperties = {\n    lockMovementX:  true,\n    lockMovementY:  true,\n    lockRotation:   true,\n    lockScalingX:   true,\n    lockScalingY:   true,\n    lockUniScaling: true\n  };\n\n  /**\n   * Group class\n   * @class fabric.Group\n   * @extends fabric.Object\n   * @mixes fabric.Collection\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3/#groups}\n   * @see {@link fabric.Group#initialize} for constructor definition\n   */\n  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'group',\n\n    /**\n     * Width of stroke\n     * @type Number\n     * @default\n     */\n    strokeWidth: 0,\n\n    /**\n     * Constructor\n     * @param {Object} objects Group objects\n     * @param {Object} [options] Options object\n     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n     * @return {Object} thisArg\n     */\n    initialize: function(objects, options, isAlreadyGrouped) {\n      options = options || { };\n\n      this._objects = [];\n      // if objects enclosed in a group have been grouped already,\n      // we cannot change properties of objects.\n      // Thus we need to set options to group without objects,\n      // because delegatedProperties propagate to objects.\n      isAlreadyGrouped && this.callSuper('initialize', options);\n\n      this._objects = objects || [];\n      for (var i = this._objects.length; i--; ) {\n        this._objects[i].group = this;\n      }\n\n      this.originalState = { };\n\n      if (options.originX) {\n        this.originX = options.originX;\n      }\n      if (options.originY) {\n        this.originY = options.originY;\n      }\n\n      if (isAlreadyGrouped) {\n        // do not change coordinate of objects enclosed in a group,\n        // because objects coordinate system have been group coodinate system already.\n        this._updateObjectsCoords(true);\n      }\n      else {\n        this._calcBounds();\n        this._updateObjectsCoords();\n        this.callSuper('initialize', options);\n      }\n\n      this.setCoords();\n      this.saveCoords();\n    },\n\n    /**\n     * @private\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n     */\n    _updateObjectsCoords: function(skipCoordsChange) {\n      for (var i = this._objects.length; i--; ){\n        this._updateObjectCoords(this._objects[i], skipCoordsChange);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of object dose not change\n     */\n    _updateObjectCoords: function(object, skipCoordsChange) {\n      // do not display corners of objects enclosed in a group\n      object.__origHasControls = object.hasControls;\n      object.hasControls = false;\n\n      if (skipCoordsChange) {\n        return;\n      }\n\n      var objectLeft = object.getLeft(),\n          objectTop = object.getTop(),\n          center = this.getCenterPoint();\n\n      object.set({\n        originalLeft: objectLeft,\n        originalTop: objectTop,\n        left: objectLeft - center.x,\n        top: objectTop - center.y\n      });\n      object.setCoords();\n    },\n\n    /**\n     * Returns string represenation of a group\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.Group: (' + this.complexity() + ')>';\n    },\n\n    /**\n     * Adds an object to a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    addWithUpdate: function(object) {\n      this._restoreObjectsState();\n      if (object) {\n        this._objects.push(object);\n        object.group = this;\n        object._set('canvas', this.canvas);\n      }\n      // since _restoreObjectsState set objects inactive\n      this.forEachObject(this._setObjectActive, this);\n      this._calcBounds();\n      this._updateObjectsCoords();\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _setObjectActive: function(object) {\n      object.set('active', true);\n      object.group = this;\n    },\n\n    /**\n     * Removes an object from a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    removeWithUpdate: function(object) {\n      this._moveFlippedObject(object);\n      this._restoreObjectsState();\n\n      // since _restoreObjectsState set objects inactive\n      this.forEachObject(this._setObjectActive, this);\n\n      this.remove(object);\n      this._calcBounds();\n      this._updateObjectsCoords();\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _onObjectAdded: function(object) {\n      object.group = this;\n      object._set('canvas', this.canvas);\n    },\n\n    /**\n     * @private\n     */\n    _onObjectRemoved: function(object) {\n      delete object.group;\n      object.set('active', false);\n    },\n\n    /**\n     * Properties that are delegated to group objects when reading/writing\n     * @param {Object} delegatedProperties\n     */\n    delegatedProperties: {\n      fill:             true,\n      opacity:          true,\n      fontFamily:       true,\n      fontWeight:       true,\n      fontSize:         true,\n      fontStyle:        true,\n      lineHeight:       true,\n      textDecoration:   true,\n      textAlign:        true,\n      backgroundColor:  true\n    },\n\n    /**\n     * @private\n     */\n    _set: function(key, value) {\n      var i = this._objects.length;\n\n      if (this.delegatedProperties[key] || key === 'canvas') {\n        while (i--) {\n          this._objects[i].set(key, value);\n        }\n      }\n      else {\n        while (i--) {\n          this._objects[i].setOnGroup(key, value);\n        }\n      }\n\n      this.callSuper('_set', key, value);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        objects: invoke(this._objects, 'toObject', propertiesToInclude)\n      });\n    },\n\n    /**\n     * Renders instance on a given context\n     * @param {CanvasRenderingContext2D} ctx context to render instance on\n     */\n    render: function(ctx) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n\n      ctx.save();\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      this.transform(ctx);\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      // the array is now sorted in order of highest first, so start from end\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._renderObject(this._objects[i], ctx);\n      }\n\n      this.clipTo && ctx.restore();\n\n      ctx.restore();\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Boolean} [noTransform] When true, context is not transformed\n     */\n    _renderControls: function(ctx, noTransform) {\n      this.callSuper('_renderControls', ctx, noTransform);\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i]._renderControls(ctx);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _renderObject: function(object, ctx) {\n      // do not render if object is not visible\n      if (!object.visible) {\n        return;\n      }\n\n      var originalHasRotatingPoint = object.hasRotatingPoint;\n      object.hasRotatingPoint = false;\n      object.render(ctx);\n      object.hasRotatingPoint = originalHasRotatingPoint;\n    },\n\n    /**\n     * Retores original state of each of group objects (original state is that which was before group was created).\n     * @private\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    _restoreObjectsState: function() {\n      this._objects.forEach(this._restoreObjectState, this);\n      return this;\n    },\n\n    /**\n     * Realises the transform from this group onto the supplied object\n     * i.e. it tells you what would happen if the supplied object was in\n     * the group, and then the group was destroyed. It mutates the supplied\n     * object.\n     * @param {fabric.Object} object\n     * @return {fabric.Object} transformedObject\n     */\n    realizeTransform: function(object) {\n      this._moveFlippedObject(object);\n      this._setObjectPosition(object);\n      return object;\n    },\n\n    /**\n     * Moves a flipped object to the position where it's displayed\n     * @private\n     * @param {fabric.Object} object\n     * @return {fabric.Group} thisArg\n     */\n    _moveFlippedObject: function(object) {\n      var oldOriginX = object.get('originX'),\n          oldOriginY = object.get('originY'),\n          center = object.getCenterPoint();\n\n      object.set({\n        originX: 'center',\n        originY: 'center',\n        left: center.x,\n        top: center.y\n      });\n\n      this._toggleFlipping(object);\n\n      var newOrigin = object.getPointByOrigin(oldOriginX, oldOriginY);\n\n      object.set({\n        originX: oldOriginX,\n        originY: oldOriginY,\n        left: newOrigin.x,\n        top: newOrigin.y\n      });\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _toggleFlipping: function(object) {\n      if (this.flipX) {\n        object.toggle('flipX');\n        object.set('left', -object.get('left'));\n        object.setAngle(-object.getAngle());\n      }\n      if (this.flipY) {\n        object.toggle('flipY');\n        object.set('top', -object.get('top'));\n        object.setAngle(-object.getAngle());\n      }\n    },\n\n    /**\n     * Restores original state of a specified object in group\n     * @private\n     * @param {fabric.Object} object\n     * @return {fabric.Group} thisArg\n     */\n    _restoreObjectState: function(object) {\n      this._setObjectPosition(object);\n\n      object.setCoords();\n      object.hasControls = object.__origHasControls;\n      delete object.__origHasControls;\n      object.set('active', false);\n      object.setCoords();\n      delete object.group;\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _setObjectPosition: function(object) {\n      var center = this.getCenterPoint(),\n          rotated = this._getRotatedLeftTop(object);\n\n      object.set({\n        angle: object.getAngle() + this.getAngle(),\n        left: center.x + rotated.left,\n        top: center.y + rotated.top,\n        scaleX: object.get('scaleX') * this.get('scaleX'),\n        scaleY: object.get('scaleY') * this.get('scaleY')\n      });\n    },\n\n    /**\n     * @private\n     */\n    _getRotatedLeftTop: function(object) {\n      var groupAngle = this.getAngle() * (Math.PI / 180);\n      return {\n        left: (-Math.sin(groupAngle) * object.getTop() * this.get('scaleY') +\n                Math.cos(groupAngle) * object.getLeft() * this.get('scaleX')),\n\n        top:  (Math.cos(groupAngle) * object.getTop() * this.get('scaleY') +\n               Math.sin(groupAngle) * object.getLeft() * this.get('scaleX'))\n      };\n    },\n\n    /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    destroy: function() {\n      this._objects.forEach(this._moveFlippedObject, this);\n      return this._restoreObjectsState();\n    },\n\n    /**\n     * Saves coordinates of this instance (to be used together with `hasMoved`)\n     * @saveCoords\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    saveCoords: function() {\n      this._originalLeft = this.get('left');\n      this._originalTop = this.get('top');\n      return this;\n    },\n\n    /**\n     * Checks whether this group was moved (since `saveCoords` was called last)\n     * @return {Boolean} true if an object was moved (since fabric.Group#saveCoords was called)\n     */\n    hasMoved: function() {\n      return this._originalLeft !== this.get('left') ||\n             this._originalTop !== this.get('top');\n    },\n\n    /**\n     * Sets coordinates of all group objects\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    setObjectsCoords: function() {\n      this.forEachObject(function(object) {\n        object.setCoords();\n      });\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _calcBounds: function(onlyWidthHeight) {\n      var aX = [],\n          aY = [],\n          o, prop,\n          props = ['tr', 'br', 'bl', 'tl'],\n          i = 0, iLen = this._objects.length,\n          j, jLen = props.length;\n\n      for ( ; i < iLen; ++i) {\n        o = this._objects[i];\n        o.setCoords();\n        for (j = 0; j < jLen; j++) {\n          prop = props[j];\n          aX.push(o.oCoords[prop].x);\n          aY.push(o.oCoords[prop].y);\n        }\n      }\n\n      this.set(this._getBounds(aX, aY, onlyWidthHeight));\n    },\n\n    /**\n     * @private\n     */\n    _getBounds: function(aX, aY, onlyWidthHeight) {\n      var ivt = fabric.util.invertTransform(this.getViewportTransform()),\n          minXY = fabric.util.transformPoint(new fabric.Point(min(aX), min(aY)), ivt),\n          maxXY = fabric.util.transformPoint(new fabric.Point(max(aX), max(aY)), ivt),\n          obj = {\n            width: (maxXY.x - minXY.x) || 0,\n            height: (maxXY.y - minXY.y) || 0\n          };\n\n      if (!onlyWidthHeight) {\n        obj.left = minXY.x || 0;\n        obj.top = minXY.y || 0;\n        if (this.originX === 'center') {\n          obj.left += obj.width / 2;\n        }\n        if (this.originX === 'right') {\n          obj.left += obj.width;\n        }\n        if (this.originY === 'center') {\n          obj.top += obj.height / 2;\n        }\n        if (this.originY === 'bottom') {\n          obj.top += obj.height;\n        }\n      }\n      return obj;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = [\n        //jscs:disable validateIndentation\n        '<g ',\n          'transform=\"', this.getSvgTransform(),\n        '\">\\n'\n        //jscs:enable validateIndentation\n      ];\n\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        markup.push(this._objects[i].toSVG(reviver));\n      }\n\n      markup.push('</g>\\n');\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns requested property\n     * @param {String} prop Property to get\n     * @return {Any}\n     */\n    get: function(prop) {\n      if (prop in _lockProperties) {\n        if (this[prop]) {\n          return this[prop];\n        }\n        else {\n          for (var i = 0, len = this._objects.length; i < len; i++) {\n            if (this._objects[i][prop]) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n      else {\n        if (prop in this.delegatedProperties) {\n          return this._objects[0] && this._objects[0].get(prop);\n        }\n        return this[prop];\n      }\n    }\n  });\n\n  /**\n   * Returns {@link fabric.Group} instance from an object representation\n   * @static\n   * @memberOf fabric.Group\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an group instance is created\n   * @return {fabric.Group} An instance of fabric.Group\n   */\n  fabric.Group.fromObject = function(object, callback) {\n    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n      delete object.objects;\n      callback && callback(new fabric.Group(enlivenedObjects, object, true));\n    });\n  };\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @memberOf fabric.Group\n   * @type Boolean\n   * @default\n   */\n  fabric.Group.async = true;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var extend = fabric.util.object.extend;\n\n  if (!global.fabric) {\n    global.fabric = { };\n  }\n\n  if (global.fabric.Image) {\n    fabric.warn('fabric.Image is already defined.');\n    return;\n  }\n\n  /**\n   * Image class\n   * @class fabric.Image\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1/#images}\n   * @see {@link fabric.Image#initialize} for constructor definition\n   */\n  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'image',\n\n    /**\n     * crossOrigin value (one of \"\", \"anonymous\", \"allow-credentials\")\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n     * @type String\n     * @default\n     */\n    crossOrigin: '',\n\n    /**\n     * AlignX value, part of preserveAspectRatio (one of \"none\", \"mid\", \"min\", \"max\")\n     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n     * This parameter defines how the picture is aligned to its viewport when image element width differs from image width.\n     * @type String\n     * @default\n     */\n    alignX: 'none',\n\n    /**\n     * AlignY value, part of preserveAspectRatio (one of \"none\", \"mid\", \"min\", \"max\")\n     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n     * This parameter defines how the picture is aligned to its viewport when image element height differs from image height.\n     * @type String\n     * @default\n     */\n    alignY: 'none',\n\n    /**\n     * meetOrSlice value, part of preserveAspectRatio  (one of \"meet\", \"slice\").\n     * if meet the image is always fully visibile, if slice the viewport is always filled with image.\n     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n     * @type String\n     * @default\n     */\n    meetOrSlice: 'meet',\n\n    /**\n     * private\n     * contains last value of scaleX to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleX: 1,\n\n    /**\n     * private\n     * contains last value of scaleY to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleY: 1,\n\n    /**\n     * Constructor\n     * @param {HTMLImageElement | String} element Image element\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     */\n    initialize: function(element, options) {\n      options || (options = { });\n      this.filters = [ ];\n      this.resizeFilters = [ ];\n      this.callSuper('initialize', options);\n      this._initElement(element, options);\n    },\n\n    /**\n     * Returns image element which this instance if based on\n     * @return {HTMLImageElement} Image element\n     */\n    getElement: function() {\n      return this._element;\n    },\n\n    /**\n     * Sets image element for this instance to a specified one.\n     * If filters defined they are applied to new image.\n     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n     * @param {HTMLImageElement} element\n     * @param {Function} [callback] Callback is invoked when all filters have been applied and new image is generated\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setElement: function(element, callback, options) {\n      this._element = element;\n      this._originalElement = element;\n      this._initConfig(options);\n\n      if (this.filters.length !== 0) {\n        this.applyFilters(callback);\n      }\n      else if (callback) {\n        callback();\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets crossOrigin value (on an instance and corresponding image element)\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setCrossOrigin: function(value) {\n      this.crossOrigin = value;\n      this._element.crossOrigin = value;\n\n      return this;\n    },\n\n    /**\n     * Returns original size of an image\n     * @return {Object} Object with \"width\" and \"height\" properties\n     */\n    getOriginalSize: function() {\n      var element = this.getElement();\n      return {\n        width: element.width,\n        height: element.height\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _stroke: function(ctx) {\n      ctx.save();\n      this._setStrokeStyles(ctx);\n      ctx.beginPath();\n      ctx.strokeRect(-this.width / 2, -this.height / 2, this.width, this.height);\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var x = -this.width / 2,\n          y = -this.height / 2,\n          w = this.width,\n          h = this.height;\n\n      ctx.save();\n      this._setStrokeStyles(ctx);\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var filters = [ ];\n      this.filters.forEach(function(filterObj) {\n        if (filterObj) {\n          filters.push(filterObj.toObject());\n        }\n      });\n      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n        src: this._originalElement.src || this._originalElement._src,\n        filters: filters,\n        crossOrigin: this.crossOrigin,\n        alignX: this.alignX,\n        alignY: this.alignY,\n        meetOrSlice: this.meetOrSlice\n      });\n\n      if (this.resizeFilters.length > 0) {\n        object.resizeFilters = this.resizeFilters.map(function(filterObj) {\n          return filterObj && filterObj.toObject();\n        });\n      }\n\n      if (!this.includeDefaultValues) {\n        this._removeDefaultValues(object);\n      }\n\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = [], x = -this.width / 2, y = -this.height / 2,\n          preserveAspectRatio = 'none';\n      if (this.group && this.group.type === 'path-group') {\n        x = this.left;\n        y = this.top;\n      }\n      if (this.alignX !== 'none' && this.alignY !== 'none') {\n        preserveAspectRatio = 'x' + this.alignX + 'Y' + this.alignY + ' ' + this.meetOrSlice;\n      }\n      markup.push(\n        '<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n',\n          '<image xlink:href=\"', this.getSvgSrc(),\n            '\" x=\"', x, '\" y=\"', y,\n            '\" style=\"', this.getSvgStyles(),\n            // we're essentially moving origin of transformation from top/left corner to the center of the shape\n            // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n            // so that object's center aligns with container's left/top\n            '\" width=\"', this.width,\n            '\" height=\"', this.height,\n            '\" preserveAspectRatio=\"', preserveAspectRatio, '\"',\n          '></image>\\n'\n      );\n\n      if (this.stroke || this.strokeDashArray) {\n        var origFill = this.fill;\n        this.fill = null;\n        markup.push(\n          '<rect ',\n            'x=\"', x, '\" y=\"', y,\n            '\" width=\"', this.width, '\" height=\"', this.height,\n            '\" style=\"', this.getSvgStyles(),\n          '\"/>\\n'\n        );\n        this.fill = origFill;\n      }\n\n      markup.push('</g>\\n');\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns source of an image\n     * @return {String} Source of an image\n     */\n    getSrc: function() {\n      if (this.getElement()) {\n        return this.getElement().src || this.getElement()._src;\n      }\n    },\n\n    /**\n     * Sets source of an image\n     * @param {String} src Source string (URL)\n     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setSrc: function(src, callback, options) {\n      fabric.util.loadImage(src, function(img) {\n        return this.setElement(img, callback, options);\n      }, this, options && options.crossOrigin);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n    },\n\n    /**\n     * Returns a clone of an instance\n     * @param {Function} callback Callback is invoked with a clone as a first argument\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     */\n    clone: function(callback, propertiesToInclude) {\n      this.constructor.fromObject(this.toObject(propertiesToInclude), callback);\n    },\n\n    /**\n     * Applies filters assigned to this image (from \"filters\" array)\n     * @method applyFilters\n     * @param {Function} callback Callback is invoked when all filters have been applied and new image is generated\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    applyFilters: function(callback, filters, imgElement, forResizing) {\n\n      filters = filters || this.filters;\n      imgElement = imgElement || this._originalElement;\n\n      if (!imgElement) {\n        return;\n      }\n\n      var imgEl = imgElement,\n          canvasEl = fabric.util.createCanvasElement(),\n          replacement = fabric.util.createImage(),\n          _this = this;\n\n      canvasEl.width = imgEl.width;\n      canvasEl.height = imgEl.height;\n      canvasEl.getContext('2d').drawImage(imgEl, 0, 0, imgEl.width, imgEl.height);\n\n      if (filters.length === 0) {\n        this._element = imgElement;\n        callback && callback();\n        return canvasEl;\n      }\n      filters.forEach(function(filter) {\n        filter && filter.applyTo(canvasEl, filter.scaleX || _this.scaleX, filter.scaleY || _this.scaleY);\n        if (!forResizing && filter && filter.type === 'Resize') {\n          _this.width *= filter.scaleX;\n          _this.height *= filter.scaleY;\n        }\n      });\n\n      /** @ignore */\n      replacement.width = canvasEl.width;\n      replacement.height = canvasEl.height;\n\n      if (fabric.isLikelyNode) {\n        replacement.src = canvasEl.toBuffer(undefined, fabric.Image.pngCompression);\n        // onload doesn't fire in some node versions, so we invoke callback manually\n        _this._element = replacement;\n        !forResizing && (_this._filteredEl = replacement);\n        callback && callback();\n      }\n      else {\n        replacement.onload = function() {\n          _this._element = replacement;\n          !forResizing && (_this._filteredEl = replacement);\n          callback && callback();\n          replacement.onload = canvasEl = imgEl = null;\n        };\n        replacement.src = canvasEl.toDataURL('image/png');\n      }\n      return canvasEl;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx, noTransform) {\n      var x, y, imageMargins = this._findMargins(), elementToDraw;\n\n      x = (noTransform ? this.left : -this.width / 2);\n      y = (noTransform ? this.top : -this.height / 2);\n\n      if (this.meetOrSlice === 'slice') {\n        ctx.beginPath();\n        ctx.rect(x, y, this.width, this.height);\n        ctx.clip();\n      }\n\n      if (this.isMoving === false && this.resizeFilters.length && this._needsResize()) {\n        this._lastScaleX = this.scaleX;\n        this._lastScaleY = this.scaleY;\n        elementToDraw = this.applyFilters(null, this.resizeFilters, this._filteredEl || this._originalElement, true);\n      }\n      else {\n        elementToDraw = this._element;\n      }\n      elementToDraw && ctx.drawImage(elementToDraw,\n                                     x + imageMargins.marginX,\n                                     y + imageMargins.marginY,\n                                     imageMargins.width,\n                                     imageMargins.height\n                                    );\n\n      this._renderStroke(ctx);\n    },\n\n    /**\n     * @private, needed to check if image needs resize\n     */\n    _needsResize: function() {\n      return (this.scaleX !== this._lastScaleX || this.scaleY !== this._lastScaleY);\n    },\n\n    /**\n     * @private\n     */\n    _findMargins: function() {\n      var width = this.width, height = this.height, scales,\n          scale, marginX = 0, marginY = 0;\n\n      if (this.alignX !== 'none' || this.alignY !== 'none') {\n        scales = [this.width / this._element.width, this.height / this._element.height];\n        scale = this.meetOrSlice === 'meet'\n                ? Math.min.apply(null, scales) : Math.max.apply(null, scales);\n        width = this._element.width * scale;\n        height = this._element.height * scale;\n        if (this.alignX === 'Mid') {\n          marginX = (this.width - width) / 2;\n        }\n        if (this.alignX === 'Max') {\n          marginX = this.width - width;\n        }\n        if (this.alignY === 'Mid') {\n          marginY = (this.height - height) / 2;\n        }\n        if (this.alignY === 'Max') {\n          marginY = this.height - height;\n        }\n      }\n      return {\n        width:  width,\n        height: height,\n        marginX: marginX,\n        marginY: marginY\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resetWidthHeight: function() {\n      var element = this.getElement();\n\n      this.set('width', element.width);\n      this.set('height', element.height);\n    },\n\n    /**\n     * The Image class's initialization method. This method is automatically\n     * called by the constructor.\n     * @private\n     * @param {HTMLImageElement|String} element The element representing the image\n     * @param {Object} [options] Options object\n     */\n    _initElement: function(element, options) {\n      this.setElement(fabric.util.getById(element), null, options);\n      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initConfig: function(options) {\n      options || (options = { });\n      this.setOptions(options);\n      this._setWidthHeight(options);\n      if (this._element && this.crossOrigin) {\n        this._element.crossOrigin = this.crossOrigin;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Array} filters to be initialized\n     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n     */\n    _initFilters: function(filters, callback) {\n      if (filters && filters.length) {\n        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n          callback && callback(enlivenedObjects);\n        }, 'fabric.Image.filters');\n      }\n      else {\n        callback && callback();\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Object with width/height properties\n     */\n    _setWidthHeight: function(options) {\n      this.width = 'width' in options\n        ? options.width\n        : (this.getElement()\n            ? this.getElement().width || 0\n            : 0);\n\n      this.height = 'height' in options\n        ? options.height\n        : (this.getElement()\n            ? this.getElement().height || 0\n            : 0);\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /**\n   * Default CSS class name for canvas\n   * @static\n   * @type String\n   * @default\n   */\n  fabric.Image.CSS_CANVAS = 'canvas-img';\n\n  /**\n   * Alias for getSrc\n   * @static\n   */\n  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n\n  /**\n   * Creates an instance of fabric.Image from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an image instance is created\n   */\n  fabric.Image.fromObject = function(object, callback) {\n    fabric.util.loadImage(object.src, function(img) {\n      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n        object.filters = filters || [ ];\n        fabric.Image.prototype._initFilters.call(object, object.resizeFilters, function(resizeFilters) {\n          object.resizeFilters = resizeFilters || [ ];\n          var instance = new fabric.Image(img, object);\n          callback && callback(instance);\n        });\n      });\n    }, null, object.crossOrigin);\n  };\n\n  /**\n   * Creates an instance of fabric.Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\n   * @param {Object} [imgOptions] Options object\n   */\n  fabric.Image.fromURL = function(url, callback, imgOptions) {\n    fabric.util.loadImage(url, function(img) {\n      callback && callback(new fabric.Image(img, imgOptions));\n    }, null, imgOptions && imgOptions.crossOrigin);\n  };\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  fabric.Image.ATTRIBUTE_NAMES =\n    fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href'.split(' '));\n\n  /**\n   * Returns {@link fabric.Image} instance from an SVG element\n   * @static\n   * @param {SVGElement} element Element to parse\n   * @param {Function} callback Callback to execute when fabric.Image object is created\n   * @param {Object} [options] Options object\n   * @return {fabric.Image} Instance of fabric.Image\n   */\n  fabric.Image.fromElement = function(element, callback, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES),\n        align = 'xMidYMid', meetOrSlice = 'meet', alignX, alignY, aspectRatioAttrs;\n\n    if (parsedAttributes.preserveAspectRatio) {\n      aspectRatioAttrs = parsedAttributes.preserveAspectRatio.split(' ');\n    }\n\n    if (aspectRatioAttrs && aspectRatioAttrs.length) {\n      meetOrSlice = aspectRatioAttrs.pop();\n      if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\n        align = meetOrSlice;\n        meetOrSlice = 'meet';\n      }\n      else if (aspectRatioAttrs.length) {\n        align = aspectRatioAttrs.pop();\n      }\n    }\n    //divide align in alignX and alignY\n    alignX = align !== 'none' ? align.slice(1, 4) : 'none';\n    alignY = align !== 'none' ? align.slice(5, 8) : 'none';\n    parsedAttributes.alignX = alignX;\n    parsedAttributes.alignY = alignY;\n    parsedAttributes.meetOrSlice = meetOrSlice;\n    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\n      extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @type Boolean\n   * @default\n   */\n  fabric.Image.async = true;\n\n  /**\n   * Indicates compression level used when generating PNG under Node (in applyFilters). Any of 0-9\n   * @static\n   * @type Number\n   * @default\n   */\n  fabric.Image.pngCompression = 1;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * @private\n   * @return {Number} angle value\n   */\n  _getAngleValueForStraighten: function() {\n    var angle = this.getAngle() % 360;\n    if (angle > 0) {\n      return Math.round((angle - 1) / 90) * 90;\n    }\n    return Math.round(angle / 90) * 90;\n  },\n\n  /**\n   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  straighten: function() {\n    this.setAngle(this._getAngleValueForStraighten());\n    return this;\n  },\n\n  /**\n   * Same as {@link fabric.Object.prototype.straighten} but with animation\n   * @param {Object} callbacks Object with callback functions\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  fxStraighten: function(callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: this.get('angle'),\n      endValue: this._getAngleValueForStraighten(),\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        _this.setAngle(value);\n        onChange();\n      },\n      onComplete: function() {\n        _this.setCoords();\n        onComplete();\n      },\n      onStart: function() {\n        _this.set('active', false);\n      }\n    });\n\n    return this;\n  }\n});\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Straightens object, then rerenders canvas\n   * @param {fabric.Object} object Object to straighten\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  straightenObject: function (object) {\n    object.straighten();\n    this.renderAll();\n    return this;\n  },\n\n  /**\n   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\n   * @param {fabric.Object} object Object to straighten\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxStraightenObject: function (object) {\n    object.fxStraighten({\n      onChange: this.renderAll.bind(this)\n    });\n    return this;\n  }\n});\n\n\n/**\n * @namespace fabric.Image.filters\n * @memberOf fabric.Image\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#image_filters}\n * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n */\nfabric.Image.filters = fabric.Image.filters || { };\n\n/**\n * Root filter class from which all filter classes inherit from\n * @class fabric.Image.filters.BaseFilter\n * @memberOf fabric.Image.filters\n */\nfabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  type: 'BaseFilter',\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  initialize: function(options) {\n    if (options) {\n      this.setOptions(options);\n    }\n  },\n\n  /**\n   * Sets filter's properties from options\n   * @param {Object} [options] Options object\n   */\n  setOptions: function(options) {\n    for (var prop in options) {\n      this[prop] = options[prop];\n    }\n  },\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject: function() {\n    return { type: this.type };\n  },\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON: function() {\n    // delegate, not alias\n    return this.toObject();\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Brightness filter class\n   * @class fabric.Image.filters.Brightness\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Brightness({\n   *   brightness: 200\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Brightness = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Brightness',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Brightness.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.brightness=0] Value to brighten the image up (0..255)\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.brightness = options.brightness || 0;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          brightness = this.brightness;\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n        data[i] += brightness;\n        data[i + 1] += brightness;\n        data[i + 2] += brightness;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        brightness: this.brightness\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n   */\n  fabric.Image.filters.Brightness.fromObject = function(object) {\n    return new fabric.Image.filters.Brightness(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n   * @class fabric.Image.filters.Convolute\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example <caption>Sharpen filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 0, -1,  0,\n   *            -1,  5, -1,\n   *             0, -1,  0 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Blur filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Emboss filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Emboss filter with opaqueness</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   opaque: true,\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Convolute = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Convolute',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Convolute.prototype\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n     * @param {Array} [options.matrix] Filter matrix\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.opaque = options.opaque;\n      this.matrix = options.matrix || [\n        0, 0, 0,\n        0, 1, 0,\n        0, 0, 0\n      ];\n\n      var canvasEl = fabric.util.createCanvasElement();\n      this.tmpCtx = canvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _createImageData: function(w, h) {\n      return this.tmpCtx.createImageData(w, h);\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n\n      var weights = this.matrix,\n          context = canvasEl.getContext('2d'),\n          pixels = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n\n          side = Math.round(Math.sqrt(weights.length)),\n          halfSide = Math.floor(side/2),\n          src = pixels.data,\n          sw = pixels.width,\n          sh = pixels.height,\n\n          // pad output by the convolution matrix\n          w = sw,\n          h = sh,\n          output = this._createImageData(w, h),\n\n          dst = output.data,\n\n          // go through the destination image pixels\n          alphaFac = this.opaque ? 1 : 0;\n\n      for (var y = 0; y < h; y++) {\n        for (var x = 0; x < w; x++) {\n          var sy = y,\n              sx = x,\n              dstOff = (y * w + x) * 4,\n              // calculate the weighed sum of the source image pixels that\n              // fall under the convolution matrix\n              r = 0, g = 0, b = 0, a = 0;\n\n          for (var cy = 0; cy < side; cy++) {\n            for (var cx = 0; cx < side; cx++) {\n\n              var scy = sy + cy - halfSide,\n                  scx = sx + cx - halfSide;\n\n              /* jshint maxdepth:5 */\n              if (scy < 0 || scy > sh || scx < 0 || scx > sw) {\n                continue;\n              }\n\n              var srcOff = (scy * sw + scx) * 4,\n                  wt = weights[cy * side + cx];\n\n              r += src[srcOff] * wt;\n              g += src[srcOff + 1] * wt;\n              b += src[srcOff + 2] * wt;\n              a += src[srcOff + 3] * wt;\n            }\n          }\n          dst[dstOff] = r;\n          dst[dstOff + 1] = g;\n          dst[dstOff + 2] = b;\n          dst[dstOff + 3] = a + alphaFac * (255 - a);\n        }\n      }\n\n      context.putImageData(output, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        opaque: this.opaque,\n        matrix: this.matrix\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n   */\n  fabric.Image.filters.Convolute.fromObject = function(object) {\n    return new fabric.Image.filters.Convolute(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * GradientTransparency filter class\n   * @class fabric.Image.filters.GradientTransparency\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.GradientTransparency#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.GradientTransparency({\n   *   threshold: 200\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.GradientTransparency = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.GradientTransparency.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'GradientTransparency',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.GradientTransparency.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.threshold=100] Threshold value\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.threshold = options.threshold || 100;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          threshold = this.threshold,\n          total = data.length;\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n        data[i + 3] = threshold + 255 * (total - i) / total;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        threshold: this.threshold\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.GradientTransparency} Instance of fabric.Image.filters.GradientTransparency\n   */\n  fabric.Image.filters.GradientTransparency.fromObject = function(object) {\n    return new fabric.Image.filters.GradientTransparency(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { });\n\n  /**\n   * Grayscale image filter class\n   * @class fabric.Image.filters.Grayscale\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Grayscale();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Grayscale = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Grayscale',\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Grayscale.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          len = imageData.width * imageData.height * 4,\n          index = 0,\n          average;\n\n      while (index < len) {\n        average = (data[index] + data[index + 1] + data[index + 2]) / 3;\n        data[index]     = average;\n        data[index + 1] = average;\n        data[index + 2] = average;\n        index += 4;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n   */\n  fabric.Image.filters.Grayscale.fromObject = function() {\n    return new fabric.Image.filters.Grayscale();\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { });\n\n  /**\n   * Invert filter class\n   * @class fabric.Image.filters.Invert\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Invert();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Invert = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Invert',\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Invert.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i;\n\n      for (i = 0; i < iLen; i+=4) {\n        data[i] = 255 - data[i];\n        data[i + 1] = 255 - data[i + 1];\n        data[i + 2] = 255 - data[i + 2];\n      }\n\n      context.putImageData(imageData, 0, 0);\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n   */\n  fabric.Image.filters.Invert.fromObject = function() {\n    return new fabric.Image.filters.Invert();\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Mask filter class\n   * See http://resources.aleph-1.com/mask/\n   * @class fabric.Image.filters.Mask\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Mask#initialize} for constructor definition\n   */\n  fabric.Image.filters.Mask = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Mask.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Mask',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Mask.prototype\n     * @param {Object} [options] Options object\n     * @param {fabric.Image} [options.mask] Mask image object\n     * @param {Number} [options.channel=0] Rgb channel (0, 1, 2 or 3)\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.mask = options.mask;\n      this.channel = [ 0, 1, 2, 3 ].indexOf(options.channel) > -1 ? options.channel : 0;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      if (!this.mask) {\n        return;\n      }\n\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          maskEl = this.mask.getElement(),\n          maskCanvasEl = fabric.util.createCanvasElement(),\n          channel = this.channel,\n          i,\n          iLen = imageData.width * imageData.height * 4;\n\n      maskCanvasEl.width = maskEl.width;\n      maskCanvasEl.height = maskEl.height;\n\n      maskCanvasEl.getContext('2d').drawImage(maskEl, 0, 0, maskEl.width, maskEl.height);\n\n      var maskImageData = maskCanvasEl.getContext('2d').getImageData(0, 0, maskEl.width, maskEl.height),\n          maskData = maskImageData.data;\n\n      for (i = 0; i < iLen; i += 4) {\n        data[i + 3] = maskData[i + channel];\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        mask: this.mask.toObject(),\n        channel: this.channel\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when a mask filter instance is created\n   */\n  fabric.Image.filters.Mask.fromObject = function(object, callback) {\n    fabric.util.loadImage(object.mask.src, function(img) {\n      object.mask = new fabric.Image(img, object.mask);\n      callback && callback(new fabric.Image.filters.Mask(object));\n    });\n  };\n\n  /**\n   * Indicates that instances of this type are async\n   * @static\n   * @type Boolean\n   * @default\n   */\n  fabric.Image.filters.Mask.async = true;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Noise filter class\n   * @class fabric.Image.filters.Noise\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Noise({\n   *   noise: 700\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Noise = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Noise',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Noise.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.noise=0] Noise value\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.noise = options.noise || 0;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          noise = this.noise, rand;\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n\n        rand = (0.5 - Math.random()) * noise;\n\n        data[i] += rand;\n        data[i + 1] += rand;\n        data[i + 2] += rand;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        noise: this.noise\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n   */\n  fabric.Image.filters.Noise.fromObject = function(object) {\n    return new fabric.Image.filters.Noise(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Pixelate filter class\n   * @class fabric.Image.filters.Pixelate\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Pixelate({\n   *   blocksize: 8\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Pixelate = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Pixelate',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Pixelate.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.blocksize=4] Blocksize for pixelate\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.blocksize = options.blocksize || 4;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = imageData.height,\n          jLen = imageData.width,\n          index, i, j, r, g, b, a;\n\n      for (i = 0; i < iLen; i += this.blocksize) {\n        for (j = 0; j < jLen; j += this.blocksize) {\n\n          index = (i * 4) * jLen + (j * 4);\n\n          r = data[index];\n          g = data[index + 1];\n          b = data[index + 2];\n          a = data[index + 3];\n\n          /*\n           blocksize: 4\n\n           [1,x,x,x,1]\n           [x,x,x,x,1]\n           [x,x,x,x,1]\n           [x,x,x,x,1]\n           [1,1,1,1,1]\n           */\n\n          for (var _i = i, _ilen = i + this.blocksize; _i < _ilen; _i++) {\n            for (var _j = j, _jlen = j + this.blocksize; _j < _jlen; _j++) {\n              index = (_i * 4) * jLen + (_j * 4);\n              data[index] = r;\n              data[index + 1] = g;\n              data[index + 2] = b;\n              data[index + 3] = a;\n            }\n          }\n        }\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        blocksize: this.blocksize\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n   */\n  fabric.Image.filters.Pixelate.fromObject = function(object) {\n    return new fabric.Image.filters.Pixelate(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Remove white filter class\n   * @class fabric.Image.filters.RemoveWhite\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.RemoveWhite#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.RemoveWhite({\n   *   threshold: 40,\n   *   distance: 140\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.RemoveWhite = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.RemoveWhite.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'RemoveWhite',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.RemoveWhite.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.threshold=30] Threshold value\n     * @param {Number} [options.distance=20] Distance value\n     */\n    initialize: function(options) {\n      options = options || { };\n      this.threshold = options.threshold || 30;\n      this.distance = options.distance || 20;\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          threshold = this.threshold,\n          distance = this.distance,\n          limit = 255 - threshold,\n          abs = Math.abs,\n          r, g, b;\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        if (r > limit &&\n            g > limit &&\n            b > limit &&\n            abs(r - g) < distance &&\n            abs(r - b) < distance &&\n            abs(g - b) < distance\n        ) {\n          data[i + 3] = 1;\n        }\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        threshold: this.threshold,\n        distance: this.distance\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.RemoveWhite} Instance of fabric.Image.filters.RemoveWhite\n   */\n  fabric.Image.filters.RemoveWhite.fromObject = function(object) {\n    return new fabric.Image.filters.RemoveWhite(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { });\n\n  /**\n   * Sepia filter class\n   * @class fabric.Image.filters.Sepia\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Sepia();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Sepia = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Sepia',\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Sepia.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i, avg;\n\n      for (i = 0; i < iLen; i+=4) {\n        avg = 0.3  * data[i] + 0.59 * data[i + 1] + 0.11 * data[i + 2];\n        data[i] = avg + 100;\n        data[i + 1] = avg + 50;\n        data[i + 2] = avg + 255;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Sepia} Instance of fabric.Image.filters.Sepia\n   */\n  fabric.Image.filters.Sepia.fromObject = function() {\n    return new fabric.Image.filters.Sepia();\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { });\n\n  /**\n   * Sepia2 filter class\n   * @class fabric.Image.filters.Sepia2\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Sepia2();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Sepia2 = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia2.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Sepia2',\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Sepia.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i, r, g, b;\n\n      for (i = 0; i < iLen; i+=4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        data[i] = (r * 0.393 + g * 0.769 + b * 0.189 ) / 1.351;\n        data[i + 1] = (r * 0.349 + g * 0.686 + b * 0.168 ) / 1.203;\n        data[i + 2] = (r * 0.272 + g * 0.534 + b * 0.131 ) / 2.140;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Sepia2} Instance of fabric.Image.filters.Sepia2\n   */\n  fabric.Image.filters.Sepia2.fromObject = function() {\n    return new fabric.Image.filters.Sepia2();\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Tint filter class\n   * Adapted from <a href=\"https://github.com/mezzoblue/PaintbrushJS\">https://github.com/mezzoblue/PaintbrushJS</a>\n   * @class fabric.Image.filters.Tint\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Tint#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example <caption>Tint filter with hex color and opacity</caption>\n   * var filter = new fabric.Image.filters.Tint({\n   *   color: '#3513B0',\n   *   opacity: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Tint filter with rgba color</caption>\n   * var filter = new fabric.Image.filters.Tint({\n   *   color: 'rgba(53, 21, 176, 0.5)'\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Tint = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Tint.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Tint',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Tint.prototype\n     * @param {Object} [options] Options object\n     * @param {String} [options.color=#000000] Color to tint the image with\n     * @param {Number} [options.opacity] Opacity value that controls the tint effect's transparency (0..1)\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.color = options.color || '#000000';\n      this.opacity = typeof options.opacity !== 'undefined'\n                      ? options.opacity\n                      : new fabric.Color(this.color).getAlpha();\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i,\n          tintR, tintG, tintB,\n          r, g, b, alpha1,\n          source;\n\n      source = new fabric.Color(this.color).getSource();\n\n      tintR = source[0] * this.opacity;\n      tintG = source[1] * this.opacity;\n      tintB = source[2] * this.opacity;\n\n      alpha1 = 1 - this.opacity;\n\n      for (i = 0; i < iLen; i+=4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        // alpha compositing\n        data[i] = tintR + r * alpha1;\n        data[i + 1] = tintG + g * alpha1;\n        data[i + 2] = tintB + b * alpha1;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        color: this.color,\n        opacity: this.opacity\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Tint} Instance of fabric.Image.filters.Tint\n   */\n  fabric.Image.filters.Tint.fromObject = function(object) {\n    return new fabric.Image.filters.Tint(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  /**\n   * Multiply filter class\n   * Adapted from <a href=\"http://www.laurenscorijn.com/articles/colormath-basics\">http://www.laurenscorijn.com/articles/colormath-basics</a>\n   * @class fabric.Image.filters.Multiply\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example <caption>Multiply filter with hex color</caption>\n   * var filter = new fabric.Image.filters.Multiply({\n   *   color: '#F0F'\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   * @example <caption>Multiply filter with rgb color</caption>\n   * var filter = new fabric.Image.filters.Multiply({\n   *   color: 'rgb(53, 21, 176)'\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Multiply = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Multiply.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Multiply',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Multiply.prototype\n     * @param {Object} [options] Options object\n     * @param {String} [options.color=#000000] Color to multiply the image pixels with\n     */\n    initialize: function(options) {\n      options = options || { };\n\n      this.color = options.color || '#000000';\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          iLen = data.length, i,\n          source;\n\n      source = new fabric.Color(this.color).getSource();\n\n      for (i = 0; i < iLen; i+=4) {\n        data[i] *= source[0] / 255;\n        data[i + 1] *= source[1] / 255;\n        data[i + 2] *= source[2] / 255;\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        color: this.color\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Image.filters.Multiply} Instance of fabric.Image.filters.Multiply\n   */\n  fabric.Image.filters.Multiply.fromObject = function(object) {\n    return new fabric.Image.filters.Multiply(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n  'use strict';\n\n  var fabric = global.fabric;\n\n  /**\n   * Color Blend filter class\n   * @class fabric.Image.filter.Blend\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.Blend({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.Blend({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Blend = fabric.util.createClass({\n    type: 'Blend',\n\n    initialize: function(options) {\n      options = options || {};\n      this.color = options.color || '#000';\n      this.image = options.image || false;\n      this.mode = options.mode || 'multiply';\n      this.alpha = options.alpha || 1;\n    },\n\n    applyTo: function(canvasEl) {\n      var context = canvasEl.getContext('2d'),\n          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),\n          data = imageData.data,\n          tr, tg, tb,\n          r, g, b,\n          _r, _g, _b,\n          source,\n          isImage = false;\n\n      if (this.image) {\n        // Blend images\n        isImage = true;\n\n        var _el = fabric.util.createCanvasElement();\n        _el.width = this.image.width;\n        _el.height = this.image.height;\n\n        var tmpCanvas = new fabric.StaticCanvas(_el);\n        tmpCanvas.add(this.image);\n        var context2 =  tmpCanvas.getContext('2d');\n        source = context2.getImageData(0, 0, tmpCanvas.width, tmpCanvas.height).data;\n      }\n      else {\n        // Blend color\n        source = new fabric.Color(this.color).getSource();\n\n        tr = source[0] * this.alpha;\n        tg = source[1] * this.alpha;\n        tb = source[2] * this.alpha;\n      }\n\n      for (var i = 0, len = data.length; i < len; i += 4) {\n\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        if (isImage) {\n          tr = source[i] * this.alpha;\n          tg = source[i + 1] * this.alpha;\n          tb = source[i + 2] * this.alpha;\n        }\n\n        switch (this.mode) {\n          case 'multiply':\n            data[i] = r * tr / 255;\n            data[i + 1] = g * tg / 255;\n            data[i + 2] = b * tb / 255;\n            break;\n          case 'screen':\n            data[i] = 1 - (1 - r) * (1 - tr);\n            data[i + 1] = 1 - (1 - g) * (1 - tg);\n            data[i + 2] = 1 - (1 - b) * (1 - tb);\n            break;\n          case 'add':\n            data[i] = Math.min(255, r + tr);\n            data[i + 1] = Math.min(255, g + tg);\n            data[i + 2] = Math.min(255, b + tb);\n            break;\n          case 'diff':\n          case 'difference':\n            data[i] = Math.abs(r - tr);\n            data[i + 1] = Math.abs(g - tg);\n            data[i + 2] = Math.abs(b - tb);\n            break;\n          case 'subtract':\n            _r = r - tr;\n            _g = g - tg;\n            _b = b - tb;\n\n            data[i] = (_r < 0) ? 0 : _r;\n            data[i + 1] = (_g < 0) ? 0 : _g;\n            data[i + 2] = (_b < 0) ? 0 : _b;\n            break;\n          case 'darken':\n            data[i] = Math.min(r, tr);\n            data[i + 1] = Math.min(g, tg);\n            data[i + 2] = Math.min(b, tb);\n            break;\n          case 'lighten':\n            data[i] = Math.max(r, tr);\n            data[i + 1] = Math.max(g, tg);\n            data[i + 2] = Math.max(b, tb);\n            break;\n        }\n      }\n\n      context.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        color: this.color,\n        image: this.image,\n        mode: this.mode,\n        alpha: this.alpha\n      };\n    }\n  });\n\n  fabric.Image.filters.Blend.fromObject = function(object) {\n    return new fabric.Image.filters.Blend(object);\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\n      sqrt = Math.sqrt, abs = Math.abs, max = Math.max, round = Math.round, sin = Math.sin,\n      ceil = Math.ceil;\n\n  /**\n   * Resize image filter class\n   * @class fabric.Image.filters.Resize\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters/|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Resize();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  fabric.Image.filters.Resize = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Resize',\n\n    /**\n     * Resize type\n     * @param {String} resizeType\n     * @default\n     */\n    resizeType: 'hermite',\n\n    /**\n     * Scale factor for resizing, x axis\n     * @param {Number} scaleX\n     * @default\n     */\n    scaleX: 0,\n\n    /**\n     * Scale factor for resizing, y axis\n     * @param {Number} scaleY\n     * @default\n     */\n    scaleY: 0,\n\n    /**\n     * LanczosLobes parameter for lanczos filter\n     * @param {Number} lanczosLobes\n     * @default\n     */\n    lanczosLobes: 3,\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Resize.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo: function(canvasEl, scaleX, scaleY) {\n\n      this.rcpScaleX = 1 / scaleX;\n      this.rcpScaleY = 1 / scaleY;\n\n      var oW = canvasEl.width, oH = canvasEl.height,\n          dW = round(oW * scaleX), dH = round(oH * scaleY),\n          imageData;\n\n      if (this.resizeType === 'sliceHack') {\n        imageData = this.sliceByTwo(canvasEl, oW, oH, dW, dH);\n      }\n      if (this.resizeType === 'hermite') {\n        imageData = this.hermiteFastResize(canvasEl, oW, oH, dW, dH);\n      }\n      if (this.resizeType === 'bilinear') {\n        imageData = this.bilinearFiltering(canvasEl, oW, oH, dW, dH);\n      }\n      if (this.resizeType === 'lanczos') {\n        imageData = this.lanczosResize(canvasEl, oW, oH, dW, dH);\n      }\n      canvasEl.width = dW;\n      canvasEl.height = dH;\n      canvasEl.getContext('2d').putImageData(imageData, 0, 0);\n    },\n\n    sliceByTwo: function(canvasEl, width, height, newWidth, newHeight) {\n      var context = canvasEl.getContext('2d'), imageData,\n          multW = 0.5, multH = 0.5, signW = 1, signH = 1,\n          doneW = false, doneH = false, stepW = width, stepH = height,\n          tmpCanvas = fabric.util.createCanvasElement(),\n          tmpCtx = tmpCanvas.getContext('2d');\n      newWidth = floor(newWidth);\n      newHeight = floor(newHeight);\n      tmpCanvas.width = max(newWidth, width);\n      tmpCanvas.height = max(newHeight, height);\n\n      if (newWidth > width) {\n        multW = 2;\n        signW = -1;\n      }\n      if (newHeight > height) {\n        multH = 2;\n        signH = -1;\n      }\n      imageData = context.getImageData(0, 0, width, height);\n      canvasEl.width = max(newWidth, width);\n      canvasEl.height = max(newHeight, height);\n      context.putImageData(imageData, 0, 0);\n\n      while (!doneW || !doneH) {\n        width = stepW;\n        height = stepH;\n        if (newWidth * signW < floor(stepW * multW * signW)) {\n          stepW = floor(stepW * multW);\n        }\n        else {\n          stepW = newWidth;\n          doneW = true;\n        }\n        if (newHeight * signH < floor(stepH * multH * signH)) {\n          stepH = floor(stepH * multH);\n        }\n        else {\n          stepH = newHeight;\n          doneH = true;\n        }\n        imageData = context.getImageData(0, 0, width, height);\n        tmpCtx.putImageData(imageData, 0, 0);\n        context.clearRect(0, 0, stepW, stepH);\n        context.drawImage(tmpCanvas, 0, 0, width, height, 0, 0, stepW, stepH);\n      }\n      return context.getImageData(0, 0, newWidth, newHeight);\n    },\n\n    lanczosResize: function(canvasEl, oW, oH, dW, dH) {\n\n      function lanczosCreate(lobes) {\n        return function(x) {\n          if (x > lobes) {\n            return 0;\n          }\n          x *= Math.PI;\n          if (abs(x) < 1e-16) {\n            return 1;\n          }\n          var xx = x / lobes;\n          return sin(x) * sin(xx) / x / xx;\n        };\n      }\n\n      function process(u) {\n        var v, i, weight, idx, a, red, green,\n            blue, alpha, fX, fY;\n        center.x = (u + 0.5) * ratioX;\n        icenter.x = floor(center.x);\n        for (v = 0; v < dH; v++) {\n          center.y = (v + 0.5) * ratioY;\n          icenter.y = floor(center.y);\n          a = 0, red = 0, green = 0, blue = 0, alpha = 0;\n          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n            if (i < 0 || i >= oW) {\n              continue;\n            }\n            fX = floor(1000 * abs(i - center.x));\n            if (!cacheLanc[fX]) {\n              cacheLanc[fX] = { };\n            }\n            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n              if (j < 0 || j >= oH) {\n                continue;\n              }\n              fY = floor(1000 * abs(j - center.y));\n              if (!cacheLanc[fX][fY]) {\n                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n              }\n              weight = cacheLanc[fX][fY];\n              if (weight > 0) {\n                idx = (j * oW + i) * 4;\n                a += weight;\n                red += weight * srcData[idx];\n                green += weight * srcData[idx + 1];\n                blue += weight * srcData[idx + 2];\n                alpha += weight * srcData[idx + 3];\n              }\n            }\n          }\n          idx = (v * dW + u) * 4;\n          destData[idx] = red / a;\n          destData[idx + 1] = green / a;\n          destData[idx + 2] = blue / a;\n          destData[idx + 3] = alpha / a;\n        }\n\n        if (++u < dW) {\n          return process(u);\n        }\n        else {\n          return destImg;\n        }\n      }\n\n      var context = canvasEl.getContext('2d'),\n          srcImg = context.getImageData(0, 0, oW, oH),\n          destImg = context.getImageData(0, 0, dW, dH),\n          srcData = srcImg.data, destData = destImg.data,\n          lanczos = lanczosCreate(this.lanczosLobes),\n          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\n          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\n          range2X = ceil(ratioX * this.lanczosLobes / 2),\n          range2Y = ceil(ratioY * this.lanczosLobes / 2),\n          cacheLanc = { }, center = { }, icenter = { };\n\n      return process(0);\n    },\n\n    bilinearFiltering: function(canvasEl, w, h, w2, h2) {\n      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\n          color, offset = 0, origPix, ratioX = this.rcpScaleX,\n          ratioY = this.rcpScaleY, context = canvasEl.getContext('2d'),\n          w4 = 4 * (w - 1), img = context.getImageData(0, 0, w, h),\n          pixels = img.data, destImage = context.getImageData(0, 0, w2, h2),\n          destPixels = destImage.data;\n      for (i = 0; i < h2; i++) {\n        for (j = 0; j < w2; j++) {\n          x = floor(ratioX * j);\n          y = floor(ratioY * i);\n          xDiff = ratioX * j - x;\n          yDiff = ratioY * i - y;\n          origPix = 4 * (y * w + x);\n\n          for (chnl = 0; chnl < 4; chnl++) {\n            a = pixels[origPix + chnl];\n            b = pixels[origPix + 4 + chnl];\n            c = pixels[origPix + w4 + chnl];\n            d = pixels[origPix + w4 + 4 + chnl];\n            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\n                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n            destPixels[offset++] = color;\n          }\n        }\n      }\n      return destImage;\n    },\n\n    hermiteFastResize: function(canvasEl, oW, oH, dW, dH) {\n      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\n          ratioWHalf = ceil(ratioW / 2),\n          ratioHHalf = ceil(ratioH / 2),\n          context = canvasEl.getContext('2d'),\n          img = context.getImageData(0, 0, oW, oH), data = img.data,\n          img2 = context.getImageData(0, 0, dW, dH), data2 = img2.data;\n      for (var j = 0; j < dH; j++) {\n        for (var i = 0; i < dW; i++) {\n          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\n              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\n                centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\n                  w = sqrt(w0 + dx * dx);\n              /*jshint maxdepth:5 */\n              if (w > 1 && w < -1) {\n                continue;\n              }\n              //hermite filter\n              weight = 2 * w * w * w - 3 * w * w + 1;\n              if (weight > 0) {\n                dx = 4 * (xx + yy * oW);\n                //alpha\n                gxA += weight * data[dx + 3];\n                weightsAlpha += weight;\n                //colors\n                /*jshint maxdepth:6 */\n                if (data[dx + 3] < 255) {\n                  weight = weight * data[dx + 3] / 250;\n                }\n                /*jshint maxdepth:5 */\n                gxR += weight * data[dx];\n                gxG += weight * data[dx + 1];\n                gxB += weight * data[dx + 2];\n                weights += weight;\n              }\n              /*jshint maxdepth:4 */\n            }\n          }\n          data2[x2] = gxR / weights;\n          data2[x2 + 1] = gxG / weights;\n          data2[x2 + 2] = gxB / weights;\n          data2[x2 + 3] = gxA / weightsAlpha;\n        }\n      }\n      return img2;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        resizeType: this.resizeType,\n        lanczosLobes: this.lanczosLobes\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n   */\n  fabric.Image.filters.Resize.fromObject = function(object) {\n    return new fabric.Image.filters.Resize(object);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\n      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n  if (fabric.Text) {\n    fabric.warn('fabric.Text is already defined');\n    return;\n  }\n\n  var stateProperties = fabric.Object.prototype.stateProperties.concat();\n  stateProperties.push(\n    'fontFamily',\n    'fontWeight',\n    'fontSize',\n    'text',\n    'textDecoration',\n    'textAlign',\n    'fontStyle',\n    'lineHeight',\n    'textBackgroundColor'\n  );\n\n  /**\n   * Text class\n   * @class fabric.Text\n   * @extends fabric.Object\n   * @return {fabric.Text} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#text}\n   * @see {@link fabric.Text#initialize} for constructor definition\n   */\n  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n\n    /**\n     * Properties which when set cause object to change dimensions\n     * @type Object\n     * @private\n     */\n    _dimensionAffectingProps: {\n      fontSize: true,\n      fontWeight: true,\n      fontFamily: true,\n      fontStyle: true,\n      lineHeight: true,\n      stroke: true,\n      strokeWidth: true,\n      text: true,\n      textAlign: true\n    },\n\n    /**\n     * @private\n     */\n    _reNewline: /\\r?\\n/,\n\n    /**\n     * Use this regular expression to filter for whitespace that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reSpacesAndTabs: /[ \\t\\r]+/g,\n\n    /**\n     * Retrieves object's fontSize\n     * @method getFontSize\n     * @memberOf fabric.Text.prototype\n     * @return {String} Font size (in pixels)\n     */\n\n    /**\n     * Sets object's fontSize\n     * @method setFontSize\n     * @memberOf fabric.Text.prototype\n     * @param {Number} fontSize Font size (in pixels)\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's fontWeight\n     * @method getFontWeight\n     * @memberOf fabric.Text.prototype\n     * @return {(String|Number)} Font weight\n     */\n\n    /**\n     * Sets object's fontWeight\n     * @method setFontWeight\n     * @memberOf fabric.Text.prototype\n     * @param {(Number|String)} fontWeight Font weight\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's fontFamily\n     * @method getFontFamily\n     * @memberOf fabric.Text.prototype\n     * @return {String} Font family\n     */\n\n    /**\n     * Sets object's fontFamily\n     * @method setFontFamily\n     * @memberOf fabric.Text.prototype\n     * @param {String} fontFamily Font family\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's text\n     * @method getText\n     * @memberOf fabric.Text.prototype\n     * @return {String} text\n     */\n\n    /**\n     * Sets object's text\n     * @method setText\n     * @memberOf fabric.Text.prototype\n     * @param {String} text Text\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's textDecoration\n     * @method getTextDecoration\n     * @memberOf fabric.Text.prototype\n     * @return {String} Text decoration\n     */\n\n    /**\n     * Sets object's textDecoration\n     * @method setTextDecoration\n     * @memberOf fabric.Text.prototype\n     * @param {String} textDecoration Text decoration\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's fontStyle\n     * @method getFontStyle\n     * @memberOf fabric.Text.prototype\n     * @return {String} Font style\n     */\n\n    /**\n     * Sets object's fontStyle\n     * @method setFontStyle\n     * @memberOf fabric.Text.prototype\n     * @param {String} fontStyle Font style\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's lineHeight\n     * @method getLineHeight\n     * @memberOf fabric.Text.prototype\n     * @return {Number} Line height\n     */\n\n    /**\n     * Sets object's lineHeight\n     * @method setLineHeight\n     * @memberOf fabric.Text.prototype\n     * @param {Number} lineHeight Line height\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's textAlign\n     * @method getTextAlign\n     * @memberOf fabric.Text.prototype\n     * @return {String} Text alignment\n     */\n\n    /**\n     * Sets object's textAlign\n     * @method setTextAlign\n     * @memberOf fabric.Text.prototype\n     * @param {String} textAlign Text alignment\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Retrieves object's textBackgroundColor\n     * @method getTextBackgroundColor\n     * @memberOf fabric.Text.prototype\n     * @return {String} Text background color\n     */\n\n    /**\n     * Sets object's textBackgroundColor\n     * @method setTextBackgroundColor\n     * @memberOf fabric.Text.prototype\n     * @param {String} textBackgroundColor Text background color\n     * @return {fabric.Text}\n     * @chainable\n     */\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type:                 'text',\n\n    /**\n     * Font size (in pixels)\n     * @type Number\n     * @default\n     */\n    fontSize:             40,\n\n    /**\n     * Font weight (e.g. bold, normal, 400, 600, 800)\n     * @type {(Number|String)}\n     * @default\n     */\n    fontWeight:           'normal',\n\n    /**\n     * Font family\n     * @type String\n     * @default\n     */\n    fontFamily:           'Times New Roman',\n\n    /**\n     * Text decoration Possible values: \"\", \"underline\", \"overline\" or \"line-through\".\n     * @type String\n     * @default\n     */\n    textDecoration:       '',\n\n    /**\n     * Text alignment. Possible values: \"left\", \"center\", or \"right\".\n     * @type String\n     * @default\n     */\n    textAlign:            'left',\n\n    /**\n     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n     * @type String\n     * @default\n     */\n    fontStyle:            '',\n\n    /**\n     * Line height\n     * @type Number\n     * @default\n     */\n    lineHeight:           1.16,\n\n    /**\n     * Background color of text lines\n     * @type String\n     * @default\n     */\n    textBackgroundColor:  '',\n\n    /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties:      stateProperties,\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color.\n     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n     * @type String\n     * @default\n     */\n    stroke:               null,\n\n    /**\n     * Shadow object representing shadow of this shape.\n     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:               null,\n\n    /**\n     * @private\n     */\n    _fontSizeFraction: 0.25,\n\n    /**\n     * Text Line proportion to font Size (in pixels)\n     * @type Number\n     * @default\n     */\n    _fontSizeMult:             1.13,\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */\n    initialize: function(text, options) {\n      options = options || { };\n      this.text = text;\n      this.__skipDimension = true;\n      this.setOptions(options);\n      this.__skipDimension = false;\n      this._initDimensions();\n    },\n\n    /**\n     * Renders text object on offscreen canvas, so that it would get dimensions\n     * @private\n     */\n    _initDimensions: function(ctx) {\n      if (this.__skipDimension) {\n        return;\n      }\n      if (!ctx) {\n        ctx = fabric.util.createCanvasElement().getContext('2d');\n        this._setTextStyles(ctx);\n      }\n      this._textLines = this._splitTextIntoLines();\n      this._clearCache();\n      //if textAlign is 'justify' i have to disable caching\n      //when calculating width of text and widths of line.\n      this._cacheLinesWidth = (this.textAlign !== 'justify');\n      this.width = this._getTextWidth(ctx);\n      this._cacheLinesWidth = true;\n      this.height = this._getTextHeight(ctx);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of text object\n     */\n    toString: function() {\n      return '#<fabric.Text (' + this.complexity() +\n        '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      this._setOpacity(ctx);\n      this._setShadow(ctx);\n      this._setupCompositeOperation(ctx);\n      this._renderTextBackground(ctx);\n      this._setStrokeStyles(ctx);\n      this._setFillStyles(ctx);\n      this._renderText(ctx);\n      this._renderTextDecoration(ctx);\n      this.clipTo && ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderText: function(ctx) {\n\n      this._translateForTextAlign(ctx);\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n      this._translateForTextAlign(ctx, true);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Boolean} back Indicates if translate back or forward\n     */\n    _translateForTextAlign: function(ctx, back) {\n      if (this.textAlign !== 'left' && this.textAlign !== 'justify') {\n        var sign = back ? -1 : 1;\n        ctx.translate(this.textAlign === 'center' ? (sign * this.width / 2) : sign * this.width, 0);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setTextStyles: function(ctx) {\n      ctx.textBaseline = 'alphabetic';\n      if (!this.skipTextAlign) {\n        ctx.textAlign = this.textAlign;\n      }\n      ctx.font = this._getFontDeclaration();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {Number} Height of fabric.Text object\n     */\n    _getTextHeight: function() {\n      return this._textLines.length * this._getHeightOfLine();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {Number} Maximum width of fabric.Text object\n     */\n    _getTextWidth: function(ctx) {\n      var maxWidth = this._getLineWidth(ctx, 0);\n\n      for (var i = 1, len = this._textLines.length; i < len; i++) {\n        var currentLineWidth = this._getLineWidth(ctx, i);\n        if (currentLineWidth > maxWidth) {\n          maxWidth = currentLineWidth;\n        }\n      }\n      return maxWidth;\n    },\n\n    /**\n     * @private\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} chars Chars to render\n     * @param {Number} left Left position of text\n     * @param {Number} top Top position of text\n     */\n    _renderChars: function(method, ctx, chars, left, top) {\n      // remove Text word from method var\n      var shortM = method.slice(0, -4);\n      if (this[shortM].toLive) {\n        var offsetX = -this.width / 2 + this[shortM].offsetX || 0,\n            offsetY = -this.height / 2 + this[shortM].offsetY || 0;\n        ctx.save();\n        ctx.translate(offsetX, offsetY);\n        left -= offsetX;\n        top -= offsetY;\n      }\n      ctx[method](chars, left, top);\n      this[shortM].toLive && ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Text to render\n     * @param {Number} left Left position of text\n     * @param {Number} top Top position of text\n     * @param {Number} lineIndex Index of a line in a text\n     */\n    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n      // lift the line by quarter of fontSize\n      top -= this.fontSize * this._fontSizeFraction;\n\n      // short-circuit\n      if (this.textAlign !== 'justify') {\n        this._renderChars(method, ctx, line, left, top, lineIndex);\n        return;\n      }\n\n      var lineWidth = this._getLineWidth(ctx, lineIndex),\n          totalWidth = this.width;\n      if (totalWidth >= lineWidth) {\n        // stretch the line\n        var words = line.split(/\\s+/),\n            wordsWidth = this._getWidthOfWords(ctx, line, lineIndex),\n            widthDiff = totalWidth - wordsWidth,\n            numSpaces = words.length - 1,\n            spaceWidth = widthDiff / numSpaces,\n            leftOffset = 0;\n\n        for (var i = 0, len = words.length; i < len; i++) {\n          this._renderChars(method, ctx, words[i], left + leftOffset, top, lineIndex);\n          leftOffset += ctx.measureText(words[i]).width + spaceWidth;\n        }\n      }\n      else {\n        this._renderChars(method, ctx, line, left, top, lineIndex);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} line\n     */\n    _getWidthOfWords: function (ctx, line) {\n      return ctx.measureText(line.replace(/\\s+/g, '')).width;\n    },\n\n    /**\n     * @private\n     * @return {Number} Left offset\n     */\n    _getLeftOffset: function() {\n      return -this.width / 2;\n    },\n\n    /**\n     * @private\n     * @return {Number} Top offset\n     */\n    _getTopOffset: function() {\n      return -this.height / 2;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextFill: function(ctx) {\n      if (!this.fill && !this._skipFillStrokeCheck) {\n        return;\n      }\n\n      var lineHeights = 0;\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        var heightOfLine = this._getHeightOfLine(ctx, i),\n            maxHeight = heightOfLine / this.lineHeight;\n\n        this._renderTextLine(\n          'fillText',\n          ctx,\n          this._textLines[i],\n          this._getLeftOffset(),\n          this._getTopOffset() + lineHeights + maxHeight,\n          i\n        );\n        lineHeights += heightOfLine;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextStroke: function(ctx) {\n      if ((!this.stroke || this.strokeWidth === 0) && !this._skipFillStrokeCheck) {\n        return;\n      }\n\n      var lineHeights = 0;\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n\n      if (this.strokeDashArray) {\n        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n        if (1 & this.strokeDashArray.length) {\n          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);\n        }\n        supportsLineDash && ctx.setLineDash(this.strokeDashArray);\n      }\n\n      ctx.beginPath();\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        var heightOfLine = this._getHeightOfLine(ctx, i),\n            maxHeight = heightOfLine / this.lineHeight;\n\n        this._renderTextLine(\n          'strokeText',\n          ctx,\n          this._textLines[i],\n          this._getLeftOffset(),\n          this._getTopOffset() + lineHeights + maxHeight,\n          i\n        );\n        lineHeights += heightOfLine;\n      }\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    _getHeightOfLine: function() {\n      return this.fontSize * this._fontSizeMult * this.lineHeight;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Array} textLines Array of all text lines\n     */\n    _renderTextBackground: function(ctx) {\n      this._renderTextBoxBackground(ctx);\n      this._renderTextLinesBackground(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextBoxBackground: function(ctx) {\n      if (!this.backgroundColor) {\n        return;\n      }\n\n      ctx.fillStyle = this.backgroundColor;\n\n      ctx.fillRect(\n        this._getLeftOffset(),\n        this._getTopOffset(),\n        this.width,\n        this.height\n      );\n\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextLinesBackground: function(ctx) {\n      if (!this.textBackgroundColor) {\n        return;\n      }\n      var lineTopOffset = 0, heightOfLine = this._getHeightOfLine(),\n          lineWidth, lineLeftOffset;\n\n      ctx.fillStyle = this.textBackgroundColor;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        if (this._textLines[i] !== '') {\n          lineWidth = this._getLineWidth(ctx, i);\n          lineLeftOffset = this._getLineLeftOffset(lineWidth);\n          ctx.fillRect(\n            this._getLeftOffset() + lineLeftOffset,\n            this._getTopOffset() + lineTopOffset,\n            lineWidth,\n            this.fontSize * this._fontSizeMult\n          );\n        }\n        lineTopOffset += heightOfLine;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Number} lineWidth Width of text line\n     * @return {Number} Line left offset\n     */\n    _getLineLeftOffset: function(lineWidth) {\n      if (this.textAlign === 'center') {\n        return (this.width - lineWidth) / 2;\n      }\n      if (this.textAlign === 'right') {\n        return this.width - lineWidth;\n      }\n      return 0;\n    },\n\n    /**\n     * @private\n     */\n    _clearCache: function() {\n      this.__lineWidths = [ ];\n      this.__lineHeights = [ ];\n      this.__lineOffsets = [ ];\n    },\n\n    /**\n     * @private\n     */\n    _shouldClearCache: function() {\n      var shouldClear = false;\n      if (this._forceClearCache) {\n        this._forceClearCache = false;\n        return true;\n      }\n      for (var prop in this._dimensionAffectingProps) {\n        if (this['__' + prop] !== this[prop]) {\n          this['__' + prop] = this[prop];\n          shouldClear = true;\n        }\n      }\n      return shouldClear;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */\n    _getLineWidth: function(ctx, lineIndex) {\n      if (this.__lineWidths[lineIndex]) {\n        return this.__lineWidths[lineIndex];\n      }\n      var width, wordCount, line = this._textLines[lineIndex];\n      if (line === '') {\n        width = 0;\n      }\n      else if (this.textAlign === 'justify' && this._cacheLinesWidth) {\n        wordCount = line.split(' ');\n        //consider not justify last line, not for now.\n        if (wordCount.length > 1) {\n          width = this.width;\n        }\n        else {\n          width = ctx.measureText(line).width;\n        }\n      }\n      else {\n        width = ctx.measureText(line).width;\n      }\n      this._cacheLinesWidth && (this.__lineWidths[lineIndex] = width);\n      return width;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextDecoration: function(ctx) {\n      if (!this.textDecoration) {\n        return;\n      }\n\n      var halfOfVerticalBox = this.height / 2,\n          _this = this, offsets = [];\n\n      /** @ignore */\n      function renderLinesAtOffset(offsets) {\n        var i, lineHeight = 0, len, j, oLen, lineWidth,\n            lineLeftOffset, heightOfLine;\n\n        for (i = 0, len = _this._textLines.length; i < len; i++) {\n\n          lineWidth = _this._getLineWidth(ctx, i),\n          lineLeftOffset = _this._getLineLeftOffset(lineWidth),\n          heightOfLine = _this._getHeightOfLine(ctx, i);\n\n          for (j = 0, oLen = offsets.length; j < oLen; j++) {\n            ctx.fillRect(\n              _this._getLeftOffset() + lineLeftOffset,\n              lineHeight + (_this._fontSizeMult - 1 + offsets[j] ) * _this.fontSize - halfOfVerticalBox,\n              lineWidth,\n              _this.fontSize / 15);\n          }\n          lineHeight += heightOfLine;\n        }\n      }\n\n      if (this.textDecoration.indexOf('underline') > -1) {\n        offsets.push(0.85); // 1 - 3/16\n      }\n      if (this.textDecoration.indexOf('line-through') > -1) {\n        offsets.push(0.43);\n      }\n      if (this.textDecoration.indexOf('overline') > -1) {\n        offsets.push(-0.12);\n      }\n      if (offsets.length > 0) {\n        renderLinesAtOffset(offsets);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getFontDeclaration: function() {\n      return [\n        // node-canvas needs \"weight style\", while browsers need \"style weight\"\n        (fabric.isLikelyNode ? this.fontWeight : this.fontStyle),\n        (fabric.isLikelyNode ? this.fontStyle : this.fontWeight),\n        this.fontSize + 'px',\n        (fabric.isLikelyNode ? ('\"' + this.fontFamily + '\"') : this.fontFamily)\n      ].join(' ');\n    },\n\n    /**\n     * Renders text instance on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx, noTransform) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n\n      ctx.save();\n      this._setTextStyles(ctx);\n\n      if (this._shouldClearCache()) {\n        this._initDimensions(ctx);\n      }\n      if (!noTransform) {\n        this.transform(ctx);\n      }\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      if (this.group && this.group.type === 'path-group') {\n        ctx.translate(this.left, this.top);\n      }\n      this._render(ctx);\n      ctx.restore();\n    },\n\n    /**\n     * Returns the text as an array of lines.\n     * @returns {Array} Lines in the text\n     */\n    _splitTextIntoLines: function() {\n      return this.text.split(this._reNewline);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var object = extend(this.callSuper('toObject', propertiesToInclude), {\n        text:                 this.text,\n        fontSize:             this.fontSize,\n        fontWeight:           this.fontWeight,\n        fontFamily:           this.fontFamily,\n        fontStyle:            this.fontStyle,\n        lineHeight:           this.lineHeight,\n        textDecoration:       this.textDecoration,\n        textAlign:            this.textAlign,\n        textBackgroundColor:  this.textBackgroundColor\n      });\n      if (!this.includeDefaultValues) {\n        this._removeDefaultValues(object);\n      }\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var markup = this._createBaseSVGMarkup(),\n          offsets = this._getSVGLeftTopOffsets(this.ctx),\n          textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n      this._wrapSVGTextAndBg(markup, textAndBg);\n\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLeftTopOffsets: function(ctx) {\n      var lineTop = this._getHeightOfLine(ctx, 0),\n          textLeft = -this.width / 2,\n          textTop = 0;\n\n      return {\n        textLeft: textLeft + (this.group && this.group.type === 'path-group' ? this.left : 0),\n        textTop: textTop + (this.group && this.group.type === 'path-group' ? -this.top : 0),\n        lineTop: lineTop\n      };\n    },\n\n    /**\n     * @private\n     */\n    _wrapSVGTextAndBg: function(markup, textAndBg) {\n      markup.push(\n        '\\t<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n',\n          textAndBg.textBgRects.join(''),\n          '\\t\\t<text ',\n            (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ': ''),\n            (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ': ''),\n            (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ': ''),\n            (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ': ''),\n            (this.textDecoration ? 'text-decoration=\"' + this.textDecoration + '\" ': ''),\n            'style=\"', this.getSvgStyles(), '\" >',\n            textAndBg.textSpans.join(''),\n          '</text>\\n',\n        '\\t</g>\\n'\n      );\n    },\n\n    /**\n     * @private\n     * @param {Number} textTopOffset Text top offset\n     * @param {Number} textLeftOffset Text left offset\n     * @return {Object}\n     */\n    _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\n      var textSpans = [ ],\n          textBgRects = [ ],\n          height = 0;\n      // bounding-box background\n      this._setSVGBg(textBgRects);\n\n      // text and text-background\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        if (this.textBackgroundColor) {\n          this._setSVGTextLineBg(textBgRects, i, textLeftOffset, textTopOffset, height);\n        }\n        this._setSVGTextLineText(i, textSpans, height, textLeftOffset, textTopOffset, textBgRects);\n        height += this._getHeightOfLine(this.ctx, i);\n      }\n\n      return {\n        textSpans: textSpans,\n        textBgRects: textBgRects\n      };\n    },\n\n    _setSVGTextLineText: function(i, textSpans, height, textLeftOffset, textTopOffset) {\n      var yPos = this.fontSize * (this._fontSizeMult - this._fontSizeFraction)\n        - textTopOffset + height - this.height / 2;\n      textSpans.push(\n        '<tspan x=\"',\n          toFixed(textLeftOffset + this._getLineLeftOffset(this.__lineWidths[i]), NUM_FRACTION_DIGITS), '\" ',\n          'y=\"',\n          toFixed(yPos, NUM_FRACTION_DIGITS),\n          '\" ',\n          // doing this on <tspan> elements since setting opacity\n          // on containing <text> one doesn't work in Illustrator\n          this._getFillAttributes(this.fill), '>',\n          fabric.util.string.escapeXml(this._textLines[i]),\n        '</tspan>'\n      );\n    },\n\n    _setSVGTextLineBg: function(textBgRects, i, textLeftOffset, textTopOffset, height) {\n      textBgRects.push(\n        '\\t\\t<rect ',\n          this._getFillAttributes(this.textBackgroundColor),\n          ' x=\"',\n          toFixed(textLeftOffset + this._getLineLeftOffset(this.__lineWidths[i]), NUM_FRACTION_DIGITS),\n          '\" y=\"',\n          toFixed(height - this.height / 2, NUM_FRACTION_DIGITS),\n          '\" width=\"',\n          toFixed(this.__lineWidths[i], NUM_FRACTION_DIGITS),\n          '\" height=\"',\n          toFixed(this._getHeightOfLine(this.ctx, i) / this.lineHeight, NUM_FRACTION_DIGITS),\n        '\"></rect>\\n');\n    },\n\n    _setSVGBg: function(textBgRects) {\n      if (this.backgroundColor) {\n        textBgRects.push(\n          '\\t\\t<rect ',\n            this._getFillAttributes(this.backgroundColor),\n            ' x=\"',\n            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\n            '\" y=\"',\n            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\n            '\" width=\"',\n            toFixed(this.width, NUM_FRACTION_DIGITS),\n            '\" height=\"',\n            toFixed(this.height, NUM_FRACTION_DIGITS),\n          '\"></rect>\\n');\n      }\n    },\n\n    /**\n     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n     * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n     *\n     * @private\n     * @param {Any} value\n     * @return {String}\n     */\n    _getFillAttributes: function(value) {\n      var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\n      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\n        return 'fill=\"' + value + '\"';\n      }\n      return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Sets specified property to a specified value\n     * @param {String} key\n     * @param {Any} value\n     * @return {fabric.Text} thisArg\n     * @chainable\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n\n      if (key in this._dimensionAffectingProps) {\n        this._initDimensions();\n        this.setCoords();\n      }\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\n   * @static\n   * @memberOf fabric.Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\n    'x y dx dy font-family font-style font-weight font-size text-decoration text-anchor'.split(' '));\n\n  /**\n   * Default SVG font size\n   * @static\n   * @memberOf fabric.Text\n   */\n  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\n\n  /**\n   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf fabric.Text\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @return {fabric.Text} Instance of fabric.Text\n   */\n  fabric.Text.fromElement = function(element, options) {\n    if (!element) {\n      return null;\n    }\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES);\n    options = fabric.util.object.extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes);\n\n    options.top = options.top || 0;\n    options.left = options.left || 0;\n    if ('dx' in parsedAttributes) {\n      options.left += parsedAttributes.dx;\n    }\n    if ('dy' in parsedAttributes) {\n      options.top += parsedAttributes.dy;\n    }\n    if (!('fontSize' in options)) {\n      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n    }\n\n    if (!options.originX) {\n      options.originX = 'left';\n    }\n    var textContent = element.textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' '),\n        text = new fabric.Text(textContent, options),\n        /*\n          Adjust positioning:\n            x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n            top/left properties in Fabric correspond to center point of text bounding box\n        */\n        offX = 0;\n\n    if (text.originX === 'left') {\n      offX = text.getWidth() / 2;\n    }\n    if (text.originX === 'right') {\n      offX = -text.getWidth() / 2;\n    }\n    text.set({\n      left: text.getLeft() + offX,\n      top: text.getTop() - text.getHeight() / 2 + text.fontSize * (0.18 + text._fontSizeFraction) /* 0.3 is the old lineHeight */\n    });\n\n    return text;\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Text instance from an object representation\n   * @static\n   * @memberOf fabric.Text\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Text} Instance of fabric.Text\n   */\n  fabric.Text.fromObject = function(object) {\n    return new fabric.Text(object.text, clone(object));\n  };\n\n  fabric.util.createAccessors(fabric.Text);\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var clone = fabric.util.object.clone;\n\n  /**\n   * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\n   * prefix when observing canvas.\n   * @class fabric.IText\n   * @extends fabric.Text\n   * @mixes fabric.Observable\n   *\n   * @fires changed\n   * @fires selection:changed\n   * @fires editing:entered\n   * @fires editing:exited\n   *\n   * @return {fabric.IText} thisArg\n   * @see {@link fabric.IText#initialize} for constructor definition\n   *\n   * <p>Supported key combinations:</p>\n   * <pre>\n   *   Move cursor:                    left, right, up, down\n   *   Select character:               shift + left, shift + right\n   *   Select text vertically:         shift + up, shift + down\n   *   Move cursor by word:            alt + left, alt + right\n   *   Select words:                   shift + alt + left, shift + alt + right\n   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n   *   Jump to start/end of text:      cmd + up, cmd + down\n   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n   *   Delete character:               backspace\n   *   Delete word:                    alt + backspace\n   *   Delete line:                    cmd + backspace\n   *   Forward delete:                 delete\n   *   Copy text:                      ctrl/cmd + c\n   *   Paste text:                     ctrl/cmd + v\n   *   Cut text:                       ctrl/cmd + x\n   *   Select entire text:             ctrl/cmd + a\n   *   Quit editing                    tab or esc\n   * </pre>\n   *\n   * <p>Supported mouse/touch combination</p>\n   * <pre>\n   *   Position cursor:                click/touch\n   *   Create selection:               click/touch & drag\n   *   Create selection:               click & shift + click\n   *   Select word:                    double click\n   *   Select line:                    triple click\n   * </pre>\n   */\n  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'i-text',\n\n    /**\n     * Index where text selection starts (or where cursor is when there is no selection)\n     * @type Number\n     * @default\n     */\n    selectionStart: 0,\n\n    /**\n     * Index where text selection ends\n     * @type Number\n     * @default\n     */\n    selectionEnd: 0,\n\n    /**\n     * Color of text selection\n     * @type String\n     * @default\n     */\n    selectionColor: 'rgba(17,119,255,0.3)',\n\n    /**\n     * Indicates whether text is in editing mode\n     * @type Boolean\n     * @default\n     */\n    isEditing: false,\n\n    /**\n     * Indicates whether a text can be edited\n     * @type Boolean\n     * @default\n     */\n    editable: true,\n\n    /**\n     * Border color of text object while it's in editing mode\n     * @type String\n     * @default\n     */\n    editingBorderColor: 'rgba(102,153,255,0.25)',\n\n    /**\n     * Width of cursor (in px)\n     * @type Number\n     * @default\n     */\n    cursorWidth: 2,\n\n    /**\n     * Color of default cursor (when not overwritten by character style)\n     * @type String\n     * @default\n     */\n    cursorColor: '#333',\n\n    /**\n     * Delay between cursor blink (in ms)\n     * @type Number\n     * @default\n     */\n    cursorDelay: 1000,\n\n    /**\n     * Duration of cursor fadein (in ms)\n     * @type Number\n     * @default\n     */\n    cursorDuration: 600,\n\n    /**\n     * Object containing character styles\n     * (where top-level properties corresponds to line number and 2nd-level properties -- to char number in a line)\n     * @type Object\n     * @default\n     */\n    styles: null,\n\n    /**\n     * Indicates whether internal text char widths can be cached\n     * @type Boolean\n     * @default\n     */\n    caching: true,\n\n    /**\n     * @private\n     * @type Boolean\n     * @default\n     */\n    _skipFillStrokeCheck: false,\n\n    /**\n     * @private\n     */\n    _reSpace: /\\s|\\n/,\n\n    /**\n     * @private\n     */\n    _currentCursorOpacity: 0,\n\n    /**\n     * @private\n     */\n    _selectionDirection: null,\n\n    /**\n     * @private\n     */\n    _abortCursorAnimation: false,\n\n    /**\n     * @private\n     */\n    _charWidthsCache: { },\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.IText} thisArg\n     */\n    initialize: function(text, options) {\n      this.styles = options ? (options.styles || { }) : { };\n      this.callSuper('initialize', text, options);\n      this.initBehavior();\n    },\n\n    /**\n     * @private\n     */\n    _clearCache: function() {\n      this.callSuper('_clearCache');\n      this.__maxFontHeights = [ ];\n      this.__widthOfSpace = [ ];\n    },\n\n    /**\n     * Returns true if object has no styling\n     */\n    isEmptyStyles: function() {\n      if (!this.styles) {\n        return true;\n      }\n      var obj = this.styles;\n\n      for (var p1 in obj) {\n        for (var p2 in obj[p1]) {\n          /*jshint unused:false */\n          for (var p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Sets selection start (left boundary of a selection)\n     * @param {Number} index Index to set selection start to\n     */\n    setSelectionStart: function(index) {\n      index = Math.max(index, 0);\n      if (this.selectionStart !== index) {\n        this.fire('selection:changed');\n        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n        this.selectionStart = index;\n      }\n      this._updateTextarea();\n    },\n\n    /**\n     * Sets selection end (right boundary of a selection)\n     * @param {Number} index Index to set selection end to\n     */\n    setSelectionEnd: function(index) {\n      index = Math.min(index, this.text.length);\n      if (this.selectionEnd !== index) {\n        this.fire('selection:changed');\n        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n        this.selectionEnd = index;\n      }\n      this._updateTextarea();\n    },\n\n    /**\n     * Gets style of a current selection/cursor (at the start position)\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at\n     * @return {Object} styles Style object at a specified (or current) index\n     */\n    getSelectionStyles: function(startIndex, endIndex) {\n\n      if (arguments.length === 2) {\n        var styles = [ ];\n        for (var i = startIndex; i < endIndex; i++) {\n          styles.push(this.getSelectionStyles(i));\n        }\n        return styles;\n      }\n\n      var loc = this.get2DCursorLocation(startIndex),\n          style = this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n\n      return style || {};\n    },\n\n    /**\n     * Sets style of a current selection\n     * @param {Object} [styles] Styles object\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    setSelectionStyles: function(styles) {\n      if (this.selectionStart === this.selectionEnd) {\n        this._extendStyles(this.selectionStart, styles);\n      }\n      else {\n        for (var i = this.selectionStart; i < this.selectionEnd; i++) {\n          this._extendStyles(i, styles);\n        }\n      }\n      /* not included in _extendStyles to avoid clearing cache more than once */\n      this._forceClearCache = true;\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _extendStyles: function(index, styles) {\n      var loc = this.get2DCursorLocation(index);\n\n      if (!this._getLineStyle(loc.lineIndex)) {\n        this._setLineStyle(loc.lineIndex, {});\n      }\n\n      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n      }\n\n      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      this.callSuper('_render', ctx);\n      this.ctx = ctx;\n      this.isEditing && this.renderCursorOrSelection();\n    },\n\n    /**\n     * Renders cursor or selection (depending on what exists)\n     */\n    renderCursorOrSelection: function() {\n      if (!this.active) {\n        return;\n      }\n\n      var chars = this.text.split(''),\n          boundaries, ctx;\n\n      if (this.canvas.contextTop) {\n        ctx = this.canvas.contextTop;\n        ctx.save();\n        ctx.transform.apply(ctx, this.canvas.viewportTransform);\n        this.transform(ctx);\n        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      else {\n        ctx = this.ctx;\n        ctx.save();\n      }\n\n      if (this.selectionStart === this.selectionEnd) {\n        boundaries = this._getCursorBoundaries(chars, 'cursor');\n        this.renderCursor(boundaries, ctx);\n      }\n      else {\n        boundaries = this._getCursorBoundaries(chars, 'selection');\n        this.renderSelection(chars, boundaries, ctx);\n      }\n\n      ctx.restore();\n    },\n\n    /**\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n     */\n    get2DCursorLocation: function(selectionStart) {\n      if (typeof selectionStart === 'undefined') {\n        selectionStart = this.selectionStart;\n      }\n      var len = this._textLines.length;\n      for (var i = 0; i < len; i++) {\n        if (selectionStart <= this._textLines[i].length) {\n          return {\n            lineIndex: i,\n            charIndex: selectionStart\n          };\n        }\n        selectionStart -= this._textLines[i].length + 1;\n      }\n      return {\n        lineIndex: i - 1,\n        charIndex: this._textLines[i - 1].length < selectionStart ? this._textLines[i - 1].length : selectionStart\n      };\n    },\n\n    /**\n     * Returns complete style of char at the current cursor\n     * @param {Number} lineIndex Line index\n     * @param {Number} charIndex Char index\n     * @return {Object} Character style\n     */\n    getCurrentCharStyle: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n\n      return {\n        fontSize: style && style.fontSize || this.fontSize,\n        fill: style && style.fill || this.fill,\n        textBackgroundColor: style && style.textBackgroundColor || this.textBackgroundColor,\n        textDecoration: style && style.textDecoration || this.textDecoration,\n        fontFamily: style && style.fontFamily || this.fontFamily,\n        fontWeight: style && style.fontWeight || this.fontWeight,\n        fontStyle: style && style.fontStyle || this.fontStyle,\n        stroke: style && style.stroke || this.stroke,\n        strokeWidth: style && style.strokeWidth || this.strokeWidth\n      };\n    },\n\n    /**\n     * Returns fontSize of char at the current cursor\n     * @param {Number} lineIndex Line index\n     * @param {Number} charIndex Char index\n     * @return {Number} Character font size\n     */\n    getCurrentCharFontSize: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n      return style && style.fontSize ? style.fontSize : this.fontSize;\n    },\n\n    /**\n     * Returns color (fill) of char at the current cursor\n     * @param {Number} lineIndex Line index\n     * @param {Number} charIndex Char index\n     * @return {String} Character color (fill)\n     */\n    getCurrentCharColor: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);\n      return style && style.fill ? style.fill : this.cursorColor;\n    },\n\n    /**\n     * Returns cursor boundaries (left, top, leftOffset, topOffset)\n     * @private\n     * @param {Array} chars Array of characters\n     * @param {String} typeOfBoundaries\n     */\n    _getCursorBoundaries: function(chars, typeOfBoundaries) {\n\n      // left/top are left/top of entire text box\n      // leftOffset/topOffset are offset from that left/top point of a text box\n\n      var left = Math.round(this._getLeftOffset()),\n          top = this._getTopOffset(),\n\n          offsets = this._getCursorBoundariesOffsets(\n                      chars, typeOfBoundaries);\n\n      return {\n        left: left,\n        top: top,\n        leftOffset: offsets.left + offsets.lineLeft,\n        topOffset: offsets.top\n      };\n    },\n\n    /**\n     * @private\n     */\n    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {\n\n      var lineLeftOffset = 0,\n\n          lineIndex = 0,\n          charIndex = 0,\n          topOffset = 0,\n          leftOffset = 0;\n\n      for (var i = 0; i < this.selectionStart; i++) {\n        if (chars[i] === '\\n') {\n          leftOffset = 0;\n          topOffset += this._getHeightOfLine(this.ctx, lineIndex);\n\n          lineIndex++;\n          charIndex = 0;\n        }\n        else {\n          leftOffset += this._getWidthOfChar(this.ctx, chars[i], lineIndex, charIndex);\n          charIndex++;\n        }\n\n        lineLeftOffset = this._getCachedLineOffset(lineIndex);\n      }\n      if (typeOfBoundaries === 'cursor') {\n        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, lineIndex) / this.lineHeight\n          - this.getCurrentCharFontSize(lineIndex, charIndex) * (1 - this._fontSizeFraction);\n      }\n\n      return {\n        top: topOffset,\n        left: leftOffset,\n        lineLeft: lineLeftOffset\n      };\n    },\n\n    /**\n     * @private\n     */\n    _getCachedLineOffset: function(lineIndex) {\n      var widthOfLine = this._getLineWidth(this.ctx, lineIndex);\n\n      return this.__lineOffsets[lineIndex] ||\n        (this.__lineOffsets[lineIndex] = this._getLineLeftOffset(widthOfLine));\n    },\n\n    /**\n     * Renders cursor\n     * @param {Object} boundaries\n     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n     */\n    renderCursor: function(boundaries, ctx) {\n\n      var cursorLocation = this.get2DCursorLocation(),\n          lineIndex = cursorLocation.lineIndex,\n          charIndex = cursorLocation.charIndex,\n          charHeight = this.getCurrentCharFontSize(lineIndex, charIndex),\n          leftOffset = (lineIndex === 0 && charIndex === 0)\n                    ? this._getCachedLineOffset(lineIndex)\n                    : boundaries.leftOffset;\n\n      ctx.fillStyle = this.getCurrentCharColor(lineIndex, charIndex);\n      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\n\n      ctx.fillRect(\n        boundaries.left + leftOffset,\n        boundaries.top + boundaries.topOffset,\n        this.cursorWidth / this.scaleX,\n        charHeight);\n\n    },\n\n    /**\n     * Renders text selection\n     * @param {Array} chars Array of characters\n     * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n     */\n    renderSelection: function(chars, boundaries, ctx) {\n\n      ctx.fillStyle = this.selectionColor;\n\n      var start = this.get2DCursorLocation(this.selectionStart),\n          end = this.get2DCursorLocation(this.selectionEnd),\n          startLine = start.lineIndex,\n          endLine = end.lineIndex;\n\n      for (var i = startLine; i <= endLine; i++) {\n        var lineOffset = this._getCachedLineOffset(i) || 0,\n            lineHeight = this._getHeightOfLine(this.ctx, i),\n            boxWidth = 0, line = this._textLines[i];\n\n        if (i === startLine) {\n          for (var j = 0, len = line.length; j < len; j++) {\n            if (j >= start.charIndex && (i !== endLine || j < end.charIndex)) {\n              boxWidth += this._getWidthOfChar(ctx, line[j], i, j);\n            }\n            if (j < start.charIndex) {\n              lineOffset += this._getWidthOfChar(ctx, line[j], i, j);\n            }\n          }\n        }\n        else if (i > startLine && i < endLine) {\n          boxWidth += this._getLineWidth(ctx, i) || 5;\n        }\n        else if (i === endLine) {\n          for (var j2 = 0, j2len = end.charIndex; j2 < j2len; j2++) {\n            boxWidth += this._getWidthOfChar(ctx, line[j2], i, j2);\n          }\n        }\n\n        ctx.fillRect(\n          boundaries.left + lineOffset,\n          boundaries.top + boundaries.topOffset,\n          boxWidth,\n          lineHeight);\n\n        boundaries.topOffset += lineHeight;\n      }\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderChars: function(method, ctx, line, left, top, lineIndex) {\n\n      if (this.isEmptyStyles()) {\n        return this._renderCharsFast(method, ctx, line, left, top);\n      }\n\n      this.skipTextAlign = true;\n\n      // set proper box offset\n      left -= this.textAlign === 'center'\n        ? (this.width / 2)\n        : (this.textAlign === 'right')\n          ? this.width\n          : 0;\n\n      // set proper line offset\n      var lineHeight = this._getHeightOfLine(ctx, lineIndex),\n          lineLeftOffset = this._getCachedLineOffset(lineIndex),\n          prevStyle,\n          charsToRender = '';\n\n      left += lineLeftOffset || 0;\n\n      ctx.save();\n      top -= lineHeight / this.lineHeight * this._fontSizeFraction;\n      for (var i = 0, len = line.length; i <= len; i++) {\n        prevStyle = prevStyle || this.getCurrentCharStyle(lineIndex, i);\n        var thisStyle = this.getCurrentCharStyle(lineIndex, i + 1);\n\n        if (this._hasStyleChanged(prevStyle, thisStyle) || i === len) {\n          this._renderChar(method, ctx, lineIndex, i - 1, charsToRender, left, top, lineHeight);\n          charsToRender = '';\n          prevStyle = thisStyle;\n        }\n        charsToRender += line[i];\n      }\n\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Content of the line\n     * @param {Number} left Left coordinate\n     * @param {Number} top Top coordinate\n     */\n    _renderCharsFast: function(method, ctx, line, left, top) {\n      this.skipTextAlign = false;\n\n      if (method === 'fillText' && this.fill) {\n        this.callSuper('_renderChars', method, ctx, line, left, top);\n      }\n      if (method === 'strokeText' && ((this.stroke && this.strokeWidth > 0) || this.skipFillStrokeCheck)) {\n        this.callSuper('_renderChars', method, ctx, line, left, top);\n      }\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex\n     * @param {Number} i\n     * @param {String} _char\n     * @param {Number} left Left coordinate\n     * @param {Number} top Top coordinate\n     * @param {Number} lineHeight Height of the line\n     */\n    _renderChar: function(method, ctx, lineIndex, i, _char, left, top, lineHeight) {\n      var charWidth, charHeight,\n          decl = this._getStyleDeclaration(lineIndex, i),\n          offset = this._fontSizeFraction * lineHeight / this.lineHeight;\n\n      if (decl) {\n        var shouldStroke = decl.stroke || this.stroke,\n            shouldFill = decl.fill || this.fill;\n\n        ctx.save();\n        charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i, decl);\n        charHeight = this._getHeightOfChar(ctx, _char, lineIndex, i);\n\n        if (shouldFill) {\n          ctx.fillText(_char, left, top);\n        }\n        if (shouldStroke) {\n          ctx.strokeText(_char, left, top);\n        }\n\n        this._renderCharDecoration(ctx, decl, left, top, offset, charWidth, charHeight);\n        ctx.restore();\n\n        ctx.translate(charWidth, 0);\n      }\n      else {\n        if (method === 'strokeText' && this.stroke) {\n          ctx[method](_char, left, top);\n        }\n        if (method === 'fillText' && this.fill) {\n          ctx[method](_char, left, top);\n        }\n        charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i);\n        this._renderCharDecoration(ctx, null, left, top, offset, charWidth, this.fontSize);\n\n        ctx.translate(ctx.measureText(_char).width, 0);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} prevStyle\n     * @param {Object} thisStyle\n     */\n    _hasStyleChanged: function(prevStyle, thisStyle) {\n      return (prevStyle.fill !== thisStyle.fill ||\n              prevStyle.fontSize !== thisStyle.fontSize ||\n              prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n              prevStyle.textDecoration !== thisStyle.textDecoration ||\n              prevStyle.fontFamily !== thisStyle.fontFamily ||\n              prevStyle.fontWeight !== thisStyle.fontWeight ||\n              prevStyle.fontStyle !== thisStyle.fontStyle ||\n              prevStyle.stroke !== thisStyle.stroke ||\n              prevStyle.strokeWidth !== thisStyle.strokeWidth\n      );\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderCharDecoration: function(ctx, styleDeclaration, left, top, offset, charWidth, charHeight) {\n\n      var textDecoration = styleDeclaration\n            ? (styleDeclaration.textDecoration || this.textDecoration)\n            : this.textDecoration;\n\n      if (!textDecoration) {\n        return;\n      }\n\n      if (textDecoration.indexOf('underline') > -1) {\n        ctx.fillRect(\n          left,\n          top + charHeight / 10,\n          charWidth ,\n          charHeight / 15\n        );\n      }\n      if (textDecoration.indexOf('line-through') > -1) {\n        ctx.fillRect(\n          left,\n          top - charHeight * (this._fontSizeFraction + this._fontSizeMult - 1) + charHeight / 15,\n          charWidth,\n          charHeight / 15\n        );\n      }\n      if (textDecoration.indexOf('overline') > -1) {\n        ctx.fillRect(\n          left,\n          top - (this._fontSizeMult - this._fontSizeFraction) * charHeight,\n          charWidth,\n          charHeight / 15\n        );\n      }\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line\n     */\n    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n      // to \"cancel\" this.fontSize subtraction in fabric.Text#_renderTextLine\n      // the adding 0.03 is just to align text with itext by overlap test\n      if (!this.isEmptyStyles()) {\n        top += this.fontSize * (this._fontSizeFraction + 0.03);\n      }\n      this.callSuper('_renderTextLine', method, ctx, line, left, top, lineIndex);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextDecoration: function(ctx) {\n      if (this.isEmptyStyles()) {\n        return this.callSuper('_renderTextDecoration', ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextLinesBackground: function(ctx) {\n      if (!this.textBackgroundColor && !this.styles) {\n        return;\n      }\n\n      ctx.save();\n\n      if (this.textBackgroundColor) {\n        ctx.fillStyle = this.textBackgroundColor;\n      }\n\n      var lineHeights = 0;\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n\n        var heightOfLine = this._getHeightOfLine(ctx, i);\n        if (this._textLines[i] === '') {\n          lineHeights += heightOfLine;\n          continue;\n        }\n\n        var lineWidth = this._getLineWidth(ctx, i),\n            lineLeftOffset = this._getCachedLineOffset(i);\n\n        if (this.textBackgroundColor) {\n          ctx.fillStyle = this.textBackgroundColor;\n\n          ctx.fillRect(\n            this._getLeftOffset() + lineLeftOffset,\n            this._getTopOffset() + lineHeights,\n            lineWidth,\n            heightOfLine / this.lineHeight\n          );\n        }\n        if (this._getLineStyle(i)) {\n          for (var j = 0, jlen = this._textLines[i].length; j < jlen; j++) {\n            var style = this._getStyleDeclaration(i, j);\n            if (style && style.textBackgroundColor) {\n\n              var _char = this._textLines[i][j];\n\n              ctx.fillStyle = style.textBackgroundColor;\n\n              ctx.fillRect(\n                this._getLeftOffset() + lineLeftOffset + this._getWidthOfCharsAt(ctx, i, j),\n                this._getTopOffset() + lineHeights,\n                this._getWidthOfChar(ctx, _char, i, j) + 1,\n                heightOfLine / this.lineHeight\n              );\n            }\n          }\n        }\n        lineHeights += heightOfLine;\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     */\n    _getCacheProp: function(_char, styleDeclaration) {\n      return _char +\n             styleDeclaration.fontFamily +\n             styleDeclaration.fontSize +\n             styleDeclaration.fontWeight +\n             styleDeclaration.fontStyle +\n             styleDeclaration.shadow;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} _char\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} [decl]\n     */\n    _applyCharStylesGetWidth: function(ctx, _char, lineIndex, charIndex, decl) {\n      var styleDeclaration = decl || this._getStyleDeclaration(lineIndex, charIndex);\n\n      if (styleDeclaration) {\n        // cloning so that original style object is not polluted with following font declarations\n        styleDeclaration = clone(styleDeclaration);\n      }\n      else {\n        styleDeclaration = { };\n      }\n\n      this._applyFontStyles(styleDeclaration);\n\n      var cacheProp = this._getCacheProp(_char, styleDeclaration);\n\n      // short-circuit if no styles\n      if (this.isEmptyStyles() && this._charWidthsCache[cacheProp] && this.caching) {\n        return this._charWidthsCache[cacheProp];\n      }\n\n      if (typeof styleDeclaration.shadow === 'string') {\n        styleDeclaration.shadow = new fabric.Shadow(styleDeclaration.shadow);\n      }\n\n      var fill = styleDeclaration.fill || this.fill;\n      ctx.fillStyle = fill.toLive\n        ? fill.toLive(ctx, this)\n        : fill;\n\n      if (styleDeclaration.stroke) {\n        ctx.strokeStyle = (styleDeclaration.stroke && styleDeclaration.stroke.toLive)\n          ? styleDeclaration.stroke.toLive(ctx, this)\n          : styleDeclaration.stroke;\n      }\n\n      ctx.lineWidth = styleDeclaration.strokeWidth || this.strokeWidth;\n      ctx.font = this._getFontDeclaration.call(styleDeclaration);\n      this._setShadow.call(styleDeclaration, ctx);\n\n      if (!this.caching) {\n        return ctx.measureText(_char).width;\n      }\n\n      if (!this._charWidthsCache[cacheProp]) {\n        this._charWidthsCache[cacheProp] = ctx.measureText(_char).width;\n      }\n\n      return this._charWidthsCache[cacheProp];\n    },\n\n    /**\n     * @private\n     * @param {Object} styleDeclaration\n     */\n    _applyFontStyles: function(styleDeclaration) {\n      if (!styleDeclaration.fontFamily) {\n        styleDeclaration.fontFamily = this.fontFamily;\n      }\n      if (!styleDeclaration.fontSize) {\n        styleDeclaration.fontSize = this.fontSize;\n      }\n      if (!styleDeclaration.fontWeight) {\n        styleDeclaration.fontWeight = this.fontWeight;\n      }\n      if (!styleDeclaration.fontStyle) {\n        styleDeclaration.fontStyle = this.fontStyle;\n      }\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Boolean} [returnCloneOrEmpty=false]\n     * @private\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {\n      if (returnCloneOrEmpty) {\n        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])\n          ? clone(this.styles[lineIndex][charIndex])\n          : { };\n      }\n\n      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     *\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      return this.styles[lineIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Object} style\n     * @private\n     */\n    _setLineStyle: function(lineIndex, style) {\n      this.styles[lineIndex] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      delete this.styles[lineIndex];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getWidthOfChar: function(ctx, _char, lineIndex, charIndex) {\n      if (this.textAlign === 'justify' && this._reSpacesAndTabs.test(_char)) {\n        return this._getWidthOfSpace(ctx, lineIndex);\n      }\n\n      var styleDeclaration = this._getStyleDeclaration(lineIndex, charIndex, true);\n      this._applyFontStyles(styleDeclaration);\n      var cacheProp = this._getCacheProp(_char, styleDeclaration);\n\n      if (this._charWidthsCache[cacheProp] && this.caching) {\n        return this._charWidthsCache[cacheProp];\n      }\n      else if (ctx) {\n        ctx.save();\n        var width = this._applyCharStylesGetWidth(ctx, _char, lineIndex, charIndex);\n        ctx.restore();\n        return width;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getHeightOfChar: function(ctx, _char, lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex);\n      return style && style.fontSize ? style.fontSize : this.fontSize;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getHeightOfCharAt: function(ctx, lineIndex, charIndex) {\n      var _char = this._textLines[lineIndex][charIndex];\n      return this._getHeightOfChar(ctx, _char, lineIndex, charIndex);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getWidthOfCharsAt: function(ctx, lineIndex, charIndex) {\n      var width = 0, i, _char;\n      for (i = 0; i < charIndex; i++) {\n        _char = this._textLines[lineIndex][i];\n        width += this._getWidthOfChar(ctx, _char, lineIndex, i);\n      }\n      return width;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getLineWidth: function(ctx, lineIndex) {\n      if (this.__lineWidths[lineIndex]) {\n        return this.__lineWidths[lineIndex];\n      }\n      this.__lineWidths[lineIndex] = this._getWidthOfCharsAt(ctx, lineIndex, this._textLines[lineIndex].length);\n      return this.__lineWidths[lineIndex];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex\n     */\n    _getWidthOfSpace: function (ctx, lineIndex) {\n      if (this.__widthOfSpace[lineIndex]) {\n        return this.__widthOfSpace[lineIndex];\n      }\n      var line = this._textLines[lineIndex],\n          wordsWidth = this._getWidthOfWords(ctx, line, lineIndex),\n          widthDiff = this.width - wordsWidth,\n          numSpaces = line.length - line.replace(this._reSpacesAndTabs, '').length,\n          width = widthDiff / numSpaces;\n      this.__widthOfSpace[lineIndex] = width;\n      return width;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} line\n     * @param {Number} lineIndex\n     */\n    _getWidthOfWords: function (ctx, line, lineIndex) {\n      var width = 0;\n\n      for (var charIndex = 0; charIndex < line.length; charIndex++) {\n        var _char = line[charIndex];\n\n        if (!_char.match(/\\s/)) {\n          width += this._getWidthOfChar(ctx, _char, lineIndex, charIndex);\n        }\n      }\n\n      return width;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getHeightOfLine: function(ctx, lineIndex) {\n      if (this.__lineHeights[lineIndex]) {\n        return this.__lineHeights[lineIndex];\n      }\n\n      var line = this._textLines[lineIndex],\n          maxHeight = this._getHeightOfChar(ctx, line[0], lineIndex, 0);\n\n      for (var i = 1, len = line.length; i < len; i++) {\n        var currentCharHeight = this._getHeightOfChar(ctx, line[i], lineIndex, i);\n        if (currentCharHeight > maxHeight) {\n          maxHeight = currentCharHeight;\n        }\n      }\n      this.__maxFontHeights[lineIndex] = maxHeight;\n      this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n      return this.__lineHeights[lineIndex];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _getTextHeight: function(ctx) {\n      var height = 0;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        height += this._getHeightOfLine(ctx, i);\n      }\n      return height;\n    },\n\n    /**\n     * This method is overwritten to account for different top offset\n     * @private\n     */\n    _renderTextBoxBackground: function(ctx) {\n      if (!this.backgroundColor) {\n        return;\n      }\n\n      ctx.save();\n      ctx.fillStyle = this.backgroundColor;\n\n      ctx.fillRect(\n        this._getLeftOffset(),\n        this._getTopOffset(),\n        this.width,\n        this.height\n      );\n\n      ctx.restore();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @method toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {\n        styles: clone(this.styles)\n      });\n    }\n  });\n\n  /**\n   * Returns fabric.IText instance from an object representation\n   * @static\n   * @memberOf fabric.IText\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.IText} instance of fabric.IText\n   */\n  fabric.IText.fromObject = function(object) {\n    return new fabric.IText(object.text, clone(object));\n  };\n})();\n\n\n(function() {\n\n  var clone = fabric.util.object.clone;\n\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Initializes all the interactive behavior of IText\n     */\n    initBehavior: function() {\n      this.initAddedHandler();\n      this.initRemovedHandler();\n      this.initCursorSelectionHandlers();\n      this.initDoubleClickSimulation();\n    },\n\n    /**\n     * Initializes \"selected\" event handler\n     */\n    initSelectedHandler: function() {\n      this.on('selected', function() {\n\n        var _this = this;\n        setTimeout(function() {\n          _this.selected = true;\n        }, 100);\n      });\n    },\n\n    /**\n     * Initializes \"added\" event handler\n     */\n    initAddedHandler: function() {\n      var _this = this;\n      this.on('added', function() {\n        if (this.canvas && !this.canvas._hasITextHandlers) {\n          this.canvas._hasITextHandlers = true;\n          this._initCanvasHandlers();\n        }\n\n        // Track IText instances per-canvas. Only register in this array once added\n        // to a canvas; we don't want to leak a reference to the instance forever\n        // simply because it existed at some point.\n        // (Might be added to a collection, but not on a canvas.)\n        if (_this.canvas) {\n          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];\n          _this.canvas._iTextInstances.push(_this);\n        }\n      });\n    },\n\n    initRemovedHandler: function() {\n      var _this = this;\n      this.on('removed', function() {\n        // (Might be removed from a collection, but not on a canvas.)\n        if (_this.canvas) {\n          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];\n          fabric.util.removeFromArray(_this.canvas._iTextInstances, _this);\n        }\n      });\n    },\n\n    /**\n     * @private\n     */\n    _initCanvasHandlers: function() {\n      var _this = this;\n\n      this.canvas.on('selection:cleared', function() {\n        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);\n      });\n\n      this.canvas.on('mouse:up', function() {\n        if (_this.canvas._iTextInstances) {\n          _this.canvas._iTextInstances.forEach(function(obj) {\n            obj.__isMousedown = false;\n          });\n        }\n      });\n\n      this.canvas.on('object:selected', function() {\n        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);\n      });\n    },\n\n    /**\n     * @private\n     */\n    _tick: function() {\n      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\n    },\n\n    /**\n     * @private\n     */\n    _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\n\n      var tickState;\n\n      tickState = {\n        isAborted: false,\n        abort: function() {\n          this.isAborted = true;\n        },\n      };\n\n      obj.animate('_currentCursorOpacity', targetOpacity, {\n        duration: duration,\n        onComplete: function() {\n          if (!tickState.isAborted) {\n            obj[completeMethod]();\n          }\n        },\n        onChange: function() {\n          if (obj.canvas) {\n            obj.canvas.clearContext(obj.canvas.contextTop || obj.ctx);\n            obj.renderCursorOrSelection();\n          }\n        },\n        abort: function() {\n          return tickState.isAborted;\n        }\n      });\n      return tickState;\n    },\n\n    /**\n     * @private\n     */\n    _onTickComplete: function() {\n\n      var _this = this;\n\n      if (this._cursorTimeout1) {\n        clearTimeout(this._cursorTimeout1);\n      }\n      this._cursorTimeout1 = setTimeout(function() {\n        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\n      }, 100);\n    },\n\n    /**\n     * Initializes delayed cursor\n     */\n    initDelayedCursor: function(restart) {\n      var _this = this,\n          delay = restart ? 0 : this.cursorDelay;\n\n      this._currentTickState && this._currentTickState.abort();\n      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n      clearTimeout(this._cursorTimeout1);\n      this._currentCursorOpacity = 1;\n      if (this.canvas) {\n        this.canvas.clearContext(this.canvas.contextTop || this.ctx);\n        this.renderCursorOrSelection();\n      }\n      if (this._cursorTimeout2) {\n        clearTimeout(this._cursorTimeout2);\n      }\n      this._cursorTimeout2 = setTimeout(function() {\n        _this._tick();\n      }, delay);\n    },\n\n    /**\n     * Aborts cursor animation and clears all timeouts\n     */\n    abortCursorAnimation: function() {\n      this._currentTickState && this._currentTickState.abort();\n      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\n      clearTimeout(this._cursorTimeout1);\n      clearTimeout(this._cursorTimeout2);\n\n      this._currentCursorOpacity = 0;\n      this.canvas && this.canvas.clearContext(this.canvas.contextTop || this.ctx);\n    },\n\n    /**\n     * Selects entire text\n     */\n    selectAll: function() {\n      this.setSelectionStart(0);\n      this.setSelectionEnd(this.text.length);\n    },\n\n    /**\n     * Returns selected text\n     * @return {String}\n     */\n    getSelectedText: function() {\n      return this.text.slice(this.selectionStart, this.selectionEnd);\n    },\n\n    /**\n     * Find new selection index representing start of current word according to current selection index\n     * @param {Number} startFrom Surrent selection index\n     * @return {Number} New selection index\n     */\n    findWordBoundaryLeft: function(startFrom) {\n      var offset = 0, index = startFrom - 1;\n\n      // remove space before cursor first\n      if (this._reSpace.test(this.text.charAt(index))) {\n        while (this._reSpace.test(this.text.charAt(index))) {\n          offset++;\n          index--;\n        }\n      }\n      while (/\\S/.test(this.text.charAt(index)) && index > -1) {\n        offset++;\n        index--;\n      }\n\n      return startFrom - offset;\n    },\n\n    /**\n     * Find new selection index representing end of current word according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findWordBoundaryRight: function(startFrom) {\n      var offset = 0, index = startFrom;\n\n      // remove space after cursor first\n      if (this._reSpace.test(this.text.charAt(index))) {\n        while (this._reSpace.test(this.text.charAt(index))) {\n          offset++;\n          index++;\n        }\n      }\n      while (/\\S/.test(this.text.charAt(index)) && index < this.text.length) {\n        offset++;\n        index++;\n      }\n\n      return startFrom + offset;\n    },\n\n    /**\n     * Find new selection index representing start of current line according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findLineBoundaryLeft: function(startFrom) {\n      var offset = 0, index = startFrom - 1;\n\n      while (!/\\n/.test(this.text.charAt(index)) && index > -1) {\n        offset++;\n        index--;\n      }\n\n      return startFrom - offset;\n    },\n\n    /**\n     * Find new selection index representing end of current line according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findLineBoundaryRight: function(startFrom) {\n      var offset = 0, index = startFrom;\n\n      while (!/\\n/.test(this.text.charAt(index)) && index < this.text.length) {\n        offset++;\n        index++;\n      }\n\n      return startFrom + offset;\n    },\n\n    /**\n     * Returns number of newlines in selected text\n     * @return {Number} Number of newlines in selected text\n     */\n    getNumNewLinesInSelectedText: function() {\n      var selectedText = this.getSelectedText(),\n          numNewLines  = 0;\n\n      for (var i = 0, len = selectedText.length; i < len; i++) {\n        if (selectedText[i] === '\\n') {\n          numNewLines++;\n        }\n      }\n      return numNewLines;\n    },\n\n    /**\n     * Finds index corresponding to beginning or end of a word\n     * @param {Number} selectionStart Index of a character\n     * @param {Number} direction: 1 or -1\n     * @return {Number} Index of the beginning or end of a word\n     */\n    searchWordBoundary: function(selectionStart, direction) {\n      var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,\n          _char     = this.text.charAt(index),\n          reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\n      while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {\n        index += direction;\n        _char = this.text.charAt(index);\n      }\n      if (reNonWord.test(_char) && _char !== '\\n') {\n        index += direction === 1 ? 0 : 1;\n      }\n      return index;\n    },\n\n    /**\n     * Selects a word based on the index\n     * @param {Number} selectionStart Index of a character\n     */\n    selectWord: function(selectionStart) {\n      var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\n          newSelectionEnd   = this.searchWordBoundary(selectionStart, 1);\n      /* search forward */\n\n      this.setSelectionStart(newSelectionStart);\n      this.setSelectionEnd(newSelectionEnd);\n    },\n\n    /**\n     * Selects a line based on the index\n     * @param {Number} selectionStart Index of a character\n     */\n    selectLine: function(selectionStart) {\n      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n          newSelectionEnd   = this.findLineBoundaryRight(selectionStart);\n\n      this.setSelectionStart(newSelectionStart);\n      this.setSelectionEnd(newSelectionEnd);\n    },\n\n    /**\n     * Enters editing state\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    enterEditing: function() {\n      if (this.isEditing || !this.editable) {\n        return;\n      }\n\n      if (this.canvas) {\n        this.exitEditingOnOthers(this.canvas);\n      }\n\n      this.isEditing = true;\n\n      this.initHiddenTextarea();\n      this.hiddenTextarea.focus();\n      this._updateTextarea();\n      this._saveEditingProps();\n      this._setEditingProps();\n\n      this._tick();\n      this.fire('editing:entered');\n\n      if (!this.canvas) {\n        return this;\n      }\n\n      this.canvas.renderAll();\n      this.canvas.fire('text:editing:entered', { target: this });\n      this.initMouseMoveHandler();\n      return this;\n    },\n\n    exitEditingOnOthers: function(canvas) {\n      if (canvas._iTextInstances) {\n        canvas._iTextInstances.forEach(function(obj) {\n          obj.selected = false;\n          if (obj.isEditing) {\n            obj.exitEditing();\n          }\n        });\n      }\n    },\n\n    /**\n     * Initializes \"mousemove\" event handler\n     */\n    initMouseMoveHandler: function() {\n      var _this = this;\n      this.canvas.on('mouse:move', function(options) {\n        if (!_this.__isMousedown || !_this.isEditing) {\n          return;\n        }\n\n        var newSelectionStart = _this.getSelectionStartFromPointer(options.e);\n        if (newSelectionStart >= _this.__selectionStartOnMouseDown) {\n          _this.setSelectionStart(_this.__selectionStartOnMouseDown);\n          _this.setSelectionEnd(newSelectionStart);\n        }\n        else {\n          _this.setSelectionStart(newSelectionStart);\n          _this.setSelectionEnd(_this.__selectionStartOnMouseDown);\n        }\n      });\n    },\n\n    /**\n     * @private\n     */\n    _setEditingProps: function() {\n      this.hoverCursor = 'text';\n\n      if (this.canvas) {\n        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n      }\n\n      this.borderColor = this.editingBorderColor;\n\n      this.hasControls = this.selectable = false;\n      this.lockMovementX = this.lockMovementY = true;\n    },\n\n    /**\n     * @private\n     */\n    _updateTextarea: function() {\n      if (!this.hiddenTextarea) {\n        return;\n      }\n\n      this.hiddenTextarea.value = this.text;\n      this.hiddenTextarea.selectionStart = this.selectionStart;\n      this.hiddenTextarea.selectionEnd = this.selectionEnd;\n    },\n\n    /**\n     * @private\n     */\n    _saveEditingProps: function() {\n      this._savedProps = {\n        hasControls: this.hasControls,\n        borderColor: this.borderColor,\n        lockMovementX: this.lockMovementX,\n        lockMovementY: this.lockMovementY,\n        hoverCursor: this.hoverCursor,\n        defaultCursor: this.canvas && this.canvas.defaultCursor,\n        moveCursor: this.canvas && this.canvas.moveCursor\n      };\n    },\n\n    /**\n     * @private\n     */\n    _restoreEditingProps: function() {\n      if (!this._savedProps) {\n        return;\n      }\n\n      this.hoverCursor = this._savedProps.overCursor;\n      this.hasControls = this._savedProps.hasControls;\n      this.borderColor = this._savedProps.borderColor;\n      this.lockMovementX = this._savedProps.lockMovementX;\n      this.lockMovementY = this._savedProps.lockMovementY;\n\n      if (this.canvas) {\n        this.canvas.defaultCursor = this._savedProps.defaultCursor;\n        this.canvas.moveCursor = this._savedProps.moveCursor;\n      }\n    },\n\n    /**\n     * Exits from editing state\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    exitEditing: function() {\n\n      this.selected = false;\n      this.isEditing = false;\n      this.selectable = true;\n\n      this.selectionEnd = this.selectionStart;\n      this.hiddenTextarea && this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\n      this.hiddenTextarea = null;\n\n      this.abortCursorAnimation();\n      this._restoreEditingProps();\n      this._currentCursorOpacity = 0;\n\n      this.fire('editing:exited');\n      this.canvas && this.canvas.fire('text:editing:exited', { target: this });\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _removeExtraneousStyles: function() {\n      for (var prop in this.styles) {\n        if (!this._textLines[prop]) {\n          delete this.styles[prop];\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _removeCharsFromTo: function(start, end) {\n      while (end !== start) {\n        this._removeSingleCharAndStyle(start + 1);\n        end--;\n      }\n      this.setSelectionStart(start);\n    },\n\n    _removeSingleCharAndStyle: function(index) {\n      var isBeginningOfLine = this.text[index - 1] === '\\n',\n          indexStyle        = isBeginningOfLine ? index : index - 1;\n      this.removeStyleObject(isBeginningOfLine, indexStyle);\n      this.text = this.text.slice(0, index - 1) +\n        this.text.slice(index);\n\n      this._textLines = this._splitTextIntoLines();\n    },\n\n    /**\n     * Inserts characters where cursor is (replacing selection if one exists)\n     * @param {String} _chars Characters to insert\n     * @param {Boolean} useCopiedStyle use fabric.copiedTextStyle\n     */\n    insertChars: function(_chars, useCopiedStyle) {\n      var style;\n\n      if (this.selectionEnd - this.selectionStart > 1) {\n        this._removeCharsFromTo(this.selectionStart, this.selectionEnd);\n        this.setSelectionEnd(this.selectionStart);\n      }\n\n      for (var i = 0, len = _chars.length; i < len; i++) {\n        if (useCopiedStyle) {\n          style = fabric.copiedTextStyle[i];\n        }\n        this.insertChar(_chars[i], i < len - 1, style);\n      }\n    },\n\n    /**\n     * Inserts a character where cursor is\n     * @param {String} _char Characters to insert\n     * @param {Boolean} skipUpdate trigger rendering and updates at the end of text insert\n     * @param {Object} styleObject Style to be inserted for the new char\n     */\n    insertChar: function(_char, skipUpdate, styleObject) {\n      var isEndOfLine = this.text[this.selectionStart] === '\\n';\n      this.text = this.text.slice(0, this.selectionStart) +\n        _char + this.text.slice(this.selectionEnd);\n      this._textLines = this._splitTextIntoLines();\n      this.insertStyleObjects(_char, isEndOfLine, styleObject);\n      this.setSelectionStart(this.selectionStart + 1);\n      this.setSelectionEnd(this.selectionStart);\n      if (skipUpdate) {\n        return;\n      }\n      this.canvas && this.canvas.renderAll();\n      this.setCoords();\n      this.fire('changed');\n      this.canvas && this.canvas.fire('text:changed', { target: this });\n    },\n\n    /**\n     * Inserts new style object\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Boolean} isEndOfLine True if it's end of line\n     */\n    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {\n\n      this.shiftLineStyles(lineIndex, +1);\n\n      if (!this.styles[lineIndex + 1]) {\n        this.styles[lineIndex + 1] = {};\n      }\n\n      var currentCharStyle = {},\n          newLineStyles    = {};\n\n      if (this.styles[lineIndex] && this.styles[lineIndex][charIndex - 1]) {\n        currentCharStyle = this.styles[lineIndex][charIndex - 1];\n      }\n\n      // if there's nothing after cursor,\n      // we clone current char style onto the next (otherwise empty) line\n      if (isEndOfLine) {\n        newLineStyles[0] = clone(currentCharStyle);\n        this.styles[lineIndex + 1] = newLineStyles;\n      }\n      // otherwise we clone styles of all chars\n      // after cursor onto the next line, from the beginning\n      else {\n        for (var index in this.styles[lineIndex]) {\n          if (parseInt(index, 10) >= charIndex) {\n            newLineStyles[parseInt(index, 10) - charIndex] = this.styles[lineIndex][index];\n            // remove lines from the previous line since they're on a new line now\n            delete this.styles[lineIndex][index];\n          }\n        }\n        this.styles[lineIndex + 1] = newLineStyles;\n      }\n      this._forceClearCache = true;\n    },\n\n    /**\n     * Inserts style object for a given line/char index\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Object} [style] Style object to insert, if given\n     */\n    insertCharStyleObject: function(lineIndex, charIndex, style) {\n\n      var currentLineStyles       = this.styles[lineIndex],\n          currentLineStylesCloned = clone(currentLineStyles);\n\n      if (charIndex === 0 && !style) {\n        charIndex = 1;\n      }\n\n      // shift all char styles by 1 forward\n      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n      for (var index in currentLineStylesCloned) {\n        var numericIndex = parseInt(index, 10);\n\n        if (numericIndex >= charIndex) {\n          currentLineStyles[numericIndex + 1] = currentLineStylesCloned[numericIndex];\n\n          // only delete the style if there was nothing moved there\n          if (!currentLineStylesCloned[numericIndex - 1]) {\n            delete currentLineStyles[numericIndex];\n          }\n        }\n      }\n\n      this.styles[lineIndex][charIndex] =\n        style || clone(currentLineStyles[charIndex - 1]);\n      this._forceClearCache = true;\n    },\n\n    /**\n     * Inserts style object(s)\n     * @param {String} _chars Characters at the location where style is inserted\n     * @param {Boolean} isEndOfLine True if it's end of line\n     * @param {Object} [styleObject] Style to insert\n     */\n    insertStyleObjects: function(_chars, isEndOfLine, styleObject) {\n      // removed shortcircuit over isEmptyStyles\n\n      var cursorLocation = this.get2DCursorLocation(),\n          lineIndex      = cursorLocation.lineIndex,\n          charIndex      = cursorLocation.charIndex;\n\n      if (!this._getLineStyle(lineIndex)) {\n        this._setLineStyle(lineIndex, {});\n      }\n\n      if (_chars === '\\n') {\n        this.insertNewlineStyleObject(lineIndex, charIndex, isEndOfLine);\n      }\n      else {\n        this.insertCharStyleObject(lineIndex, charIndex, styleObject);\n      }\n    },\n\n    /**\n     * Shifts line styles up or down\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} offset Can be -1 or +1\n     */\n    shiftLineStyles: function(lineIndex, offset) {\n      // shift all line styles by 1 upward\n      var clonedStyles = clone(this.styles);\n      for (var line in this.styles) {\n        var numericLine = parseInt(line, 10);\n        if (numericLine > lineIndex) {\n          this.styles[numericLine + offset] = clonedStyles[numericLine];\n          if (!clonedStyles[numericLine - offset]) {\n            delete this.styles[numericLine];\n          }\n        }\n      }\n      //TODO: evaluate if delete old style lines with offset -1\n    },\n\n    /**\n     * Removes style object\n     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line\n     * @param {Number} [index] Optional index. When not given, current selectionStart is used.\n     */\n    removeStyleObject: function(isBeginningOfLine, index) {\n\n      var cursorLocation = this.get2DCursorLocation(index),\n          lineIndex      = cursorLocation.lineIndex,\n          charIndex      = cursorLocation.charIndex;\n\n      if (isBeginningOfLine) {\n\n        var textOnPreviousLine     = this._textLines[lineIndex - 1],\n            newCharIndexOnPrevLine = textOnPreviousLine\n              ? textOnPreviousLine.length\n              : 0;\n\n        if (!this.styles[lineIndex - 1]) {\n          this.styles[lineIndex - 1] = {};\n        }\n\n        for (charIndex in this.styles[lineIndex]) {\n          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]\n            = this.styles[lineIndex][charIndex];\n        }\n\n        this.shiftLineStyles(lineIndex, -1);\n\n      }\n      else {\n        var currentLineStyles = this.styles[lineIndex];\n\n        if (currentLineStyles) {\n          delete currentLineStyles[charIndex];\n          //console.log('deleting', lineIndex, charIndex + offset);\n        }\n\n        var currentLineStylesCloned = clone(currentLineStyles);\n\n        // shift all styles by 1 backwards\n        for (var i in currentLineStylesCloned) {\n          var numericIndex = parseInt(i, 10);\n          if (numericIndex >= charIndex && numericIndex !== 0) {\n            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];\n            delete currentLineStyles[numericIndex];\n          }\n        }\n      }\n    },\n\n    /**\n     * Inserts new line\n     */\n    insertNewline: function() {\n      this.insertChars('\\n');\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n  /**\n   * Initializes \"dbclick\" event handler\n   */\n  initDoubleClickSimulation: function() {\n\n    // for double click\n    this.__lastClickTime = +new Date();\n\n    // for triple click\n    this.__lastLastClickTime = +new Date();\n\n    this.__lastPointer = { };\n\n    this.on('mousedown', this.onMouseDown.bind(this));\n  },\n\n  onMouseDown: function(options) {\n\n    this.__newClickTime = +new Date();\n    var newPointer = this.canvas.getPointer(options.e);\n\n    if (this.isTripleClick(newPointer)) {\n      this.fire('tripleclick', options);\n      this._stopEvent(options.e);\n    }\n    else if (this.isDoubleClick(newPointer)) {\n      this.fire('dblclick', options);\n      this._stopEvent(options.e);\n    }\n\n    this.__lastLastClickTime = this.__lastClickTime;\n    this.__lastClickTime = this.__newClickTime;\n    this.__lastPointer = newPointer;\n    this.__lastIsEditing = this.isEditing;\n    this.__lastSelected = this.selected;\n  },\n\n  isDoubleClick: function(newPointer) {\n    return this.__newClickTime - this.__lastClickTime < 500 &&\n        this.__lastPointer.x === newPointer.x &&\n        this.__lastPointer.y === newPointer.y && this.__lastIsEditing;\n  },\n\n  isTripleClick: function(newPointer) {\n    return this.__newClickTime - this.__lastClickTime < 500 &&\n        this.__lastClickTime - this.__lastLastClickTime < 500 &&\n        this.__lastPointer.x === newPointer.x &&\n        this.__lastPointer.y === newPointer.y;\n  },\n\n  /**\n   * @private\n   */\n  _stopEvent: function(e) {\n    e.preventDefault && e.preventDefault();\n    e.stopPropagation && e.stopPropagation();\n  },\n\n  /**\n   * Initializes event handlers related to cursor or selection\n   */\n  initCursorSelectionHandlers: function() {\n    this.initSelectedHandler();\n    this.initMousedownHandler();\n    this.initMouseupHandler();\n    this.initClicks();\n  },\n\n  /**\n   * Initializes double and triple click event handlers\n   */\n  initClicks: function() {\n    this.on('dblclick', function(options) {\n      this.selectWord(this.getSelectionStartFromPointer(options.e));\n    });\n    this.on('tripleclick', function(options) {\n      this.selectLine(this.getSelectionStartFromPointer(options.e));\n    });\n  },\n\n  /**\n   * Initializes \"mousedown\" event handler\n   */\n  initMousedownHandler: function() {\n    this.on('mousedown', function(options) {\n\n      var pointer = this.canvas.getPointer(options.e);\n\n      this.__mousedownX = pointer.x;\n      this.__mousedownY = pointer.y;\n      this.__isMousedown = true;\n\n      if (this.hiddenTextarea && this.canvas) {\n        this.canvas.wrapperEl.appendChild(this.hiddenTextarea);\n      }\n\n      if (this.selected) {\n        this.setCursorByClick(options.e);\n      }\n\n      if (this.isEditing) {\n        this.__selectionStartOnMouseDown = this.selectionStart;\n        this.initDelayedCursor(true);\n      }\n    });\n  },\n\n  /**\n   * @private\n   */\n  _isObjectMoved: function(e) {\n    var pointer = this.canvas.getPointer(e);\n\n    return this.__mousedownX !== pointer.x ||\n           this.__mousedownY !== pointer.y;\n  },\n\n  /**\n   * Initializes \"mouseup\" event handler\n   */\n  initMouseupHandler: function() {\n    this.on('mouseup', function(options) {\n      this.__isMousedown = false;\n      if (this._isObjectMoved(options.e)) {\n        return;\n      }\n\n      if (this.__lastSelected) {\n        this.enterEditing();\n        this.initDelayedCursor(true);\n      }\n      this.selected = true;\n    });\n  },\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {Event} e Event object\n   */\n  setCursorByClick: function(e) {\n    var newSelectionStart = this.getSelectionStartFromPointer(e);\n\n    if (e.shiftKey) {\n      if (newSelectionStart < this.selectionStart) {\n        this.setSelectionEnd(this.selectionStart);\n        this.setSelectionStart(newSelectionStart);\n      }\n      else {\n        this.setSelectionEnd(newSelectionStart);\n      }\n    }\n    else {\n      this.setSelectionStart(newSelectionStart);\n      this.setSelectionEnd(newSelectionStart);\n    }\n  },\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {Event} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer: function(e) {\n    var mouseOffset = this.getLocalPointer(e),\n        prevWidth = 0,\n        width = 0,\n        height = 0,\n        charIndex = 0,\n        newSelectionStart,\n        line;\n\n    for (var i = 0, len = this._textLines.length; i < len; i++) {\n      line = this._textLines[i];\n      height += this._getHeightOfLine(this.ctx, i) * this.scaleY;\n\n      var widthOfLine = this._getLineWidth(this.ctx, i),\n          lineLeftOffset = this._getLineLeftOffset(widthOfLine);\n\n      width = lineLeftOffset * this.scaleX;\n\n      if (this.flipX) {\n        // when oject is horizontally flipped we reverse chars\n        // we should reverse also style or do not revers at all.\n        this._textLines[i] = line.reverse().join('');\n      }\n\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\n\n        prevWidth = width;\n\n        width += this._getWidthOfChar(this.ctx, line[j], i, this.flipX ? jlen - j : j) *\n                 this.scaleX;\n\n        if (height <= mouseOffset.y || width <= mouseOffset.x) {\n          charIndex++;\n          continue;\n        }\n\n        return this._getNewSelectionStartFromOffset(\n          mouseOffset, prevWidth, width, charIndex + i, jlen);\n      }\n\n      if (mouseOffset.y < height) {\n        //this happens just on end of lines.\n        return this._getNewSelectionStartFromOffset(\n          mouseOffset, prevWidth, width, charIndex + i - 1, jlen);\n      }\n    }\n\n    // clicked somewhere after all chars, so set at the end\n    if (typeof newSelectionStart === 'undefined') {\n      return this.text.length;\n    }\n  },\n\n  /**\n   * @private\n   */\n  _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\n\n    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\n        distanceBtwNextCharAndCursor = width - mouseOffset.x,\n        offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ? 0 : 1,\n        newSelectionStart = index + offset;\n\n    // if object is horizontally flipped, mirror cursor location from the end\n    if (this.flipX) {\n      newSelectionStart = jlen - newSelectionStart;\n    }\n\n    if (newSelectionStart > this.text.length) {\n      newSelectionStart = this.text.length;\n    }\n\n    return newSelectionStart;\n  }\n});\n\n\nfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea: function() {\n    this.hiddenTextarea = fabric.document.createElement('textarea');\n\n    this.hiddenTextarea.setAttribute('autocapitalize', 'off');\n    this.hiddenTextarea.style.cssText = 'position: fixed; bottom: 20px; left: 0px; opacity: 0;'\n                                        + ' width: 0px; height: 0px; z-index: -999;';\n    fabric.document.body.appendChild(this.hiddenTextarea);\n\n    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\n\n    if (!this._clickHandlerInitialized && this.canvas) {\n      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\n      this._clickHandlerInitialized = true;\n    }\n  },\n\n  /**\n   * @private\n   */\n  _keysMap: {\n    8:  'removeChars',\n    9:  'exitEditing',\n    27: 'exitEditing',\n    13: 'insertNewline',\n    33: 'moveCursorUp',\n    34: 'moveCursorDown',\n    35: 'moveCursorRight',\n    36: 'moveCursorLeft',\n    37: 'moveCursorLeft',\n    38: 'moveCursorUp',\n    39: 'moveCursorRight',\n    40: 'moveCursorDown',\n    46: 'forwardDelete'\n  },\n\n  /**\n   * @private\n   */\n  _ctrlKeysMap: {\n    65: 'selectAll',\n    88: 'cut'\n  },\n\n  onClick: function() {\n    // No need to trigger click event here, focus is enough to have the keyboard appear on Android\n    this.hiddenTextarea && this.hiddenTextarea.focus();\n  },\n\n  /**\n   * Handles keyup event\n   * @param {Event} e Event object\n   */\n  onKeyDown: function(e) {\n    if (!this.isEditing) {\n      return;\n    }\n    if (e.keyCode in this._keysMap) {\n      this[this._keysMap[e.keyCode]](e);\n    }\n    else if ((e.keyCode in this._ctrlKeysMap) && (e.ctrlKey || e.metaKey)) {\n      this[this._ctrlKeysMap[e.keyCode]](e);\n    }\n    else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.renderAll();\n  },\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput: function(e) {\n    if (!this.isEditing || this._cancelOnInput) {\n      this._cancelOnInput = false;\n      return;\n    }\n    var offset = this.selectionStart || 0,\n        textLength = this.text.length,\n        newTextLength = this.hiddenTextarea.value.length,\n        diff = newTextLength - textLength,\n        charsToInsert = this.hiddenTextarea.value.slice(offset, offset + diff);\n    this.insertChars(charsToInsert);\n    e.stopPropagation();\n  },\n\n  /**\n   * Forward delete\n   */\n  forwardDelete: function(e) {\n    if (this.selectionStart === this.selectionEnd) {\n      if (this.selectionStart === this.text.length) {\n        return;\n      }\n      this.moveCursorRight(e);\n    }\n    this.removeChars(e);\n  },\n\n  /**\n   * Copies selected text\n   * @param {Event} e Event object\n   */\n  copy: function(e) {\n    var selectedText = this.getSelectedText(),\n        clipboardData = this._getClipboardData(e);\n\n    // Check for backward compatibility with old browsers\n    if (clipboardData) {\n      clipboardData.setData('text', selectedText);\n    }\n\n    fabric.copiedText = selectedText;\n    fabric.copiedTextStyle = this.getSelectionStyles(\n                          this.selectionStart,\n                          this.selectionEnd);\n  },\n\n  /**\n   * Pastes text\n   * @param {Event} e Event object\n   */\n  paste: function(e) {\n    var copiedText = null,\n        clipboardData = this._getClipboardData(e),\n        useCopiedStyle = true;\n\n    // Check for backward compatibility with old browsers\n    if (clipboardData) {\n      copiedText = clipboardData.getData('text').replace(/\\r/g, '');\n      if (!fabric.copiedTextStyle || fabric.copiedText !== copiedText) {\n        useCopiedStyle = false;\n      }\n    }\n    else {\n      copiedText = fabric.copiedText;\n    }\n\n    if (copiedText) {\n      this.insertChars(copiedText, useCopiedStyle);\n    }\n    this._cancelOnInput = true;\n  },\n\n  /**\n   * Cuts text\n   * @param {Event} e Event object\n   */\n  cut: function(e) {\n    if (this.selectionStart === this.selectionEnd) {\n      return;\n    }\n\n    this.copy();\n    this.removeChars(e);\n  },\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @return {Object} Clipboard data object\n   */\n  _getClipboardData: function(e) {\n    return e && (e.clipboardData || fabric.window.clipboardData);\n  },\n\n  /**\n   * Gets start offset of a selection\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset: function(e, isRight) {\n    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,\n        cursorLocation = this.get2DCursorLocation(selectionProp),\n        _char, lineLeftOffset, lineIndex = cursorLocation.lineIndex,\n        textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),\n        textOnSameLineAfterCursor = this._textLines[lineIndex].slice(cursorLocation.charIndex),\n        textOnNextLine = this._textLines[lineIndex + 1] || '';\n\n    // if on last line, down cursor goes to end of line\n    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\n\n      // move to the end of a text\n      return this.text.length - selectionProp;\n    }\n\n    var widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, lineIndex);\n    lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor);\n\n    var widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;\n\n    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {\n      _char = textOnSameLineBeforeCursor[i];\n      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);\n    }\n\n    var indexOnNextLine = this._getIndexOnNextLine(\n      cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor);\n\n    return textOnSameLineAfterCursor.length + 1 + indexOnNextLine;\n  },\n\n  /**\n   * @private\n   */\n  _getIndexOnNextLine: function(cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor) {\n    var lineIndex = cursorLocation.lineIndex + 1,\n        widthOfNextLine = this._getLineWidth(this.ctx, lineIndex),\n        lineLeftOffset = this._getLineLeftOffset(widthOfNextLine),\n        widthOfCharsOnNextLine = lineLeftOffset,\n        indexOnNextLine = 0,\n        foundMatch;\n\n    for (var j = 0, jlen = textOnNextLine.length; j < jlen; j++) {\n\n      var _char = textOnNextLine[j],\n          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);\n\n      widthOfCharsOnNextLine += widthOfChar;\n\n      if (widthOfCharsOnNextLine > widthOfCharsOnSameLineBeforeCursor) {\n\n        foundMatch = true;\n\n        var leftEdge = widthOfCharsOnNextLine - widthOfChar,\n            rightEdge = widthOfCharsOnNextLine,\n            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),\n            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);\n\n        indexOnNextLine = offsetFromRightEdge < offsetFromLeftEdge ? j + 1 : j;\n\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnNextLine = textOnNextLine.length;\n    }\n\n    return indexOnNextLine;\n  },\n\n  /**\n   * Moves cursor down\n   * @param {Event} e Event object\n   */\n  moveCursorDown: function(e) {\n    this.abortCursorAnimation();\n    this._currentCursorOpacity = 1;\n\n    var offset = this.getDownCursorOffset(e, this._selectionDirection === 'right');\n\n    if (e.shiftKey) {\n      this.moveCursorDownWithShift(offset);\n    }\n    else {\n      this.moveCursorDownWithoutShift(offset);\n    }\n\n    this.initDelayedCursor();\n  },\n\n  /**\n   * Moves cursor down without keeping selection\n   * @param {Number} offset\n   */\n  moveCursorDownWithoutShift: function(offset) {\n    this._selectionDirection = 'right';\n    this.setSelectionStart(this.selectionStart + offset);\n    this.setSelectionEnd(this.selectionStart);\n  },\n\n  /**\n   * private\n   */\n  swapSelectionPoints: function() {\n    var swapSel = this.selectionEnd;\n    this.setSelectionEnd(this.selectionStart);\n    this.setSelectionStart(swapSel);\n  },\n\n  /**\n   * Moves cursor down while keeping selection\n   * @param {Number} offset\n   */\n  moveCursorDownWithShift: function(offset) {\n    if (this.selectionEnd === this.selectionStart) {\n      this._selectionDirection = 'right';\n    }\n    if (this._selectionDirection === 'right') {\n      this.setSelectionEnd(this.selectionEnd + offset);\n    }\n    else {\n      this.setSelectionStart(this.selectionStart + offset);\n    }\n    if (this.selectionEnd < this.selectionStart  && this._selectionDirection === 'left') {\n      this.swapSelectionPoints();\n      this._selectionDirection = 'right';\n    }\n    if (this.selectionEnd > this.text.length) {\n      this.setSelectionEnd(this.text.length);\n    }\n  },\n\n  /**\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset: function(e, isRight) {\n    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,\n        cursorLocation = this.get2DCursorLocation(selectionProp),\n        lineIndex = cursorLocation.lineIndex;\n    // if on first line, up cursor goes to start of line\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      return selectionProp;\n    }\n\n    var textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),\n        textOnPreviousLine = this._textLines[lineIndex - 1] || '',\n        _char,\n        widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, cursorLocation.lineIndex),\n        lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor),\n        widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;\n\n    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {\n      _char = textOnSameLineBeforeCursor[i];\n      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);\n    }\n\n    var indexOnPrevLine = this._getIndexOnPrevLine(\n      cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor);\n\n    return textOnPreviousLine.length - indexOnPrevLine + textOnSameLineBeforeCursor.length;\n  },\n\n  /**\n   * @private\n   */\n  _getIndexOnPrevLine: function(cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor) {\n\n    var lineIndex = cursorLocation.lineIndex - 1,\n        widthOfPreviousLine = this._getLineWidth(this.ctx, lineIndex),\n        lineLeftOffset = this._getLineLeftOffset(widthOfPreviousLine),\n        widthOfCharsOnPreviousLine = lineLeftOffset,\n        indexOnPrevLine = 0,\n        foundMatch;\n\n    for (var j = 0, jlen = textOnPreviousLine.length; j < jlen; j++) {\n\n      var _char = textOnPreviousLine[j],\n          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);\n\n      widthOfCharsOnPreviousLine += widthOfChar;\n\n      if (widthOfCharsOnPreviousLine > widthOfCharsOnSameLineBeforeCursor) {\n\n        foundMatch = true;\n\n        var leftEdge = widthOfCharsOnPreviousLine - widthOfChar,\n            rightEdge = widthOfCharsOnPreviousLine,\n            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),\n            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);\n\n        indexOnPrevLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\n\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnPrevLine = textOnPreviousLine.length - 1;\n    }\n\n    return indexOnPrevLine;\n  },\n\n  /**\n   * Moves cursor up\n   * @param {Event} e Event object\n   */\n  moveCursorUp: function(e) {\n\n    this.abortCursorAnimation();\n    this._currentCursorOpacity = 1;\n\n    var offset = this.getUpCursorOffset(e, this._selectionDirection === 'right');\n    if (e.shiftKey) {\n      this.moveCursorUpWithShift(offset);\n    }\n    else {\n      this.moveCursorUpWithoutShift(offset);\n    }\n\n    this.initDelayedCursor();\n  },\n\n  /**\n   * Moves cursor up with shift\n   * @param {Number} offset\n   */\n  moveCursorUpWithShift: function(offset) {\n    if (this.selectionEnd === this.selectionStart) {\n      this._selectionDirection = 'left';\n    }\n    if (this._selectionDirection === 'right') {\n      this.setSelectionEnd(this.selectionEnd - offset);\n    }\n    else {\n      this.setSelectionStart(this.selectionStart - offset);\n    }\n    if (this.selectionEnd < this.selectionStart && this._selectionDirection === 'right') {\n      this.swapSelectionPoints();\n      this._selectionDirection = 'left';\n    }\n  },\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorUpWithoutShift: function(offset) {\n    if (this.selectionStart === this.selectionEnd) {\n      this.setSelectionStart(this.selectionStart - offset);\n    }\n    this.setSelectionEnd(this.selectionStart);\n\n    this._selectionDirection = 'left';\n  },\n\n  /**\n   * Moves cursor left\n   * @param {Event} e Event object\n   */\n  moveCursorLeft: function(e) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n\n    this.abortCursorAnimation();\n    this._currentCursorOpacity = 1;\n\n    if (e.shiftKey) {\n      this.moveCursorLeftWithShift(e);\n    }\n    else {\n      this.moveCursorLeftWithoutShift(e);\n    }\n\n    this.initDelayedCursor();\n  },\n\n  /**\n   * @private\n   */\n  _move: function(e, prop, direction) {\n    var propMethod = (prop === 'selectionStart' ? 'setSelectionStart' : 'setSelectionEnd');\n    if (e.altKey) {\n      this[propMethod](this['findWordBoundary' + direction](this[prop]));\n    }\n    else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\n      this[propMethod](this['findLineBoundary' + direction](this[prop]));\n    }\n    else {\n      this[propMethod](this[prop] + (direction === 'Left' ? -1 : 1));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _moveLeft: function(e, prop) {\n    this._move(e, prop, 'Left');\n  },\n\n  /**\n   * @private\n   */\n  _moveRight: function(e, prop) {\n    this._move(e, prop, 'Right');\n  },\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {Event} e\n   */\n  moveCursorLeftWithoutShift: function(e) {\n    this._selectionDirection = 'left';\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (this.selectionEnd === this.selectionStart) {\n      this._moveLeft(e, 'selectionStart');\n    }\n    this.setSelectionEnd(this.selectionStart);\n  },\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {Event} e\n   */\n  moveCursorLeftWithShift: function(e) {\n    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\n      this._moveLeft(e, 'selectionEnd');\n    }\n    else {\n      this._selectionDirection = 'left';\n      this._moveLeft(e, 'selectionStart');\n    }\n  },\n\n  /**\n   * Moves cursor right\n   * @param {Event} e Event object\n   */\n  moveCursorRight: function(e) {\n    if (this.selectionStart >= this.text.length && this.selectionEnd >= this.text.length) {\n      return;\n    }\n\n    this.abortCursorAnimation();\n    this._currentCursorOpacity = 1;\n\n    if (e.shiftKey) {\n      this.moveCursorRightWithShift(e);\n    }\n    else {\n      this.moveCursorRightWithoutShift(e);\n    }\n\n    this.initDelayedCursor();\n  },\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {Event} e\n   */\n  moveCursorRightWithShift: function(e) {\n    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\n      this._moveRight(e, 'selectionStart');\n    }\n    else {\n      this._selectionDirection = 'right';\n      this._moveRight(e, 'selectionEnd');\n    }\n  },\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {Event} e Event object\n   */\n  moveCursorRightWithoutShift: function(e) {\n    this._selectionDirection = 'right';\n\n    if (this.selectionStart === this.selectionEnd) {\n      this._moveRight(e, 'selectionStart');\n      this.setSelectionEnd(this.selectionStart);\n    }\n    else {\n      this.setSelectionEnd(this.selectionEnd + this.getNumNewLinesInSelectedText());\n      this.setSelectionStart(this.selectionEnd);\n    }\n  },\n\n  /**\n   * Removes characters selected by selection\n   * @param {Event} e Event object\n   */\n  removeChars: function(e) {\n    if (this.selectionStart === this.selectionEnd) {\n      this._removeCharsNearCursor(e);\n    }\n    else {\n      this._removeCharsFromTo(this.selectionStart, this.selectionEnd);\n    }\n\n    this.setSelectionEnd(this.selectionStart);\n\n    this._removeExtraneousStyles();\n\n    this.canvas && this.canvas.renderAll();\n\n    this.setCoords();\n    this.fire('changed');\n    this.canvas && this.canvas.fire('text:changed', { target: this });\n  },\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   */\n  _removeCharsNearCursor: function(e) {\n    if (this.selectionStart === 0) {\n      return;\n    }\n    if (e.metaKey) {\n      // remove all till the start of current line\n      var leftLineBoundary = this.findLineBoundaryLeft(this.selectionStart);\n\n      this._removeCharsFromTo(leftLineBoundary, this.selectionStart);\n      this.setSelectionStart(leftLineBoundary);\n    }\n    else if (e.altKey) {\n      // remove all till the start of current word\n      var leftWordBoundary = this.findWordBoundaryLeft(this.selectionStart);\n\n      this._removeCharsFromTo(leftWordBoundary, this.selectionStart);\n      this.setSelectionStart(leftWordBoundary);\n    }\n    else {\n      this._removeSingleCharAndStyle(this.selectionStart);\n      this.setSelectionStart(this.selectionStart - 1);\n    }\n  }\n});\n\n\n/* _TO_SVG_START_ */\n(function() {\n  var toFixed = fabric.util.toFixed,\n      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * @private\n     */\n    _setSVGTextLineText: function(lineIndex, textSpans, height, textLeftOffset, textTopOffset, textBgRects) {\n      if (!this.styles[lineIndex]) {\n        fabric.Text.prototype._setSVGTextLineText.call(this,\n          lineIndex, textSpans, height, textLeftOffset, textTopOffset);\n      }\n      else {\n        this._setSVGTextLineChars(\n          lineIndex, textSpans, height, textLeftOffset, textBgRects);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGTextLineChars: function(lineIndex, textSpans, height, textLeftOffset, textBgRects) {\n\n      var chars = this._textLines[lineIndex],\n          charOffset = 0,\n          lineLeftOffset = this._getSVGLineLeftOffset(lineIndex) - this.width / 2,\n          lineOffset = this._getSVGLineTopOffset(lineIndex),\n          heightOfLine = this._getHeightOfLine(this.ctx, lineIndex);\n\n      for (var i = 0, len = chars.length; i < len; i++) {\n        var styleDecl = this.styles[lineIndex][i] || { };\n\n        textSpans.push(\n          this._createTextCharSpan(\n            chars[i], styleDecl, lineLeftOffset, lineOffset.lineTop + lineOffset.offset, charOffset));\n\n        var charWidth = this._getWidthOfChar(this.ctx, chars[i], lineIndex, i);\n\n        if (styleDecl.textBackgroundColor) {\n          textBgRects.push(\n            this._createTextCharBg(\n              styleDecl, lineLeftOffset, lineOffset.lineTop, heightOfLine, charWidth, charOffset));\n        }\n\n        charOffset += charWidth;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLineLeftOffset: function(lineIndex) {\n      return fabric.util.toFixed(this._getLineLeftOffset(this.__lineWidths[lineIndex]), 2);\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLineTopOffset: function(lineIndex) {\n      var lineTopOffset = 0, lastHeight = 0;\n      for (var j = 0; j < lineIndex; j++) {\n        lineTopOffset += this._getHeightOfLine(this.ctx, j);\n      }\n      lastHeight = this._getHeightOfLine(this.ctx, j);\n      return {\n        lineTop: lineTopOffset,\n        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\n      };\n    },\n\n    /**\n     * @private\n     */\n    _createTextCharBg: function(styleDecl, lineLeftOffset, lineTopOffset, heightOfLine, charWidth, charOffset) {\n      return [\n        //jscs:disable validateIndentation\n        '<rect fill=\"', styleDecl.textBackgroundColor,\n        '\" x=\"', toFixed(lineLeftOffset + charOffset, NUM_FRACTION_DIGITS),\n        '\" y=\"', toFixed(lineTopOffset - this.height/2, NUM_FRACTION_DIGITS),\n        '\" width=\"', toFixed(charWidth, NUM_FRACTION_DIGITS),\n        '\" height=\"', toFixed(heightOfLine / this.lineHeight, NUM_FRACTION_DIGITS),\n        '\"></rect>'\n        //jscs:enable validateIndentation\n      ].join('');\n    },\n\n    /**\n     * @private\n     */\n    _createTextCharSpan: function(_char, styleDecl, lineLeftOffset, lineTopOffset, charOffset) {\n\n      var fillStyles = this.getSvgStyles.call(fabric.util.object.extend({\n        visible: true,\n        fill: this.fill,\n        stroke: this.stroke,\n        type: 'text'\n      }, styleDecl));\n\n      return [\n        //jscs:disable validateIndentation\n        '<tspan x=\"', lineLeftOffset + charOffset, '\" y=\"',\n          lineTopOffset - this.height/2, '\" ',\n          (styleDecl.fontFamily ? 'font-family=\"' + styleDecl.fontFamily.replace(/\"/g, '\\'') + '\" ': ''),\n          (styleDecl.fontSize ? 'font-size=\"' + styleDecl.fontSize + '\" ': ''),\n          (styleDecl.fontStyle ? 'font-style=\"' + styleDecl.fontStyle + '\" ': ''),\n          (styleDecl.fontWeight ? 'font-weight=\"' + styleDecl.fontWeight + '\" ': ''),\n          (styleDecl.textDecoration ? 'text-decoration=\"' + styleDecl.textDecoration + '\" ': ''),\n          'style=\"', fillStyles, '\">',\n          fabric.util.string.escapeXml(_char),\n        '</tspan>'\n        //jscs:enable validateIndentation\n      ].join('');\n    }\n  });\n})();\n/* _TO_SVG_END_ */\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = {}),\n      clone  = fabric.util.object.clone;\n\n  /**\n   * Textbox class, based on IText, allows the user to resize the text rectangle\n   * and wraps lines automatically. Textboxes have their Y scaling locked, the\n   * user can only change width. Height is adjusted automatically based on the\n   * wrapping of lines.\n   * @class fabric.Textbox\n   * @extends fabric.IText\n   * @mixes fabric.Observable\n   * @return {fabric.Textbox} thisArg\n   * @see {@link fabric.Textbox#initialize} for constructor definition\n   */\n  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'textbox',\n    /**\n     * Minimum width of textbox, in pixels.\n     * @type Number\n     * @default\n     */\n    minWidth: 20,\n    /**\n     * Minimum calculated width of a textbox, in pixels.\n     * @type Number\n     * @default\n     */\n    dynamicMinWidth: 0,\n    /**\n     * Cached array of text wrapping.\n     * @type Array\n     */\n    __cachedLines: null,\n    /**\n     * Constructor. Some scaling related property values are forced. Visibility\n     * of controls is also fixed; only the rotation and width controls are\n     * made available.\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Textbox} thisArg\n     */\n    initialize: function(text, options) {\n      this.ctx = fabric.util.createCanvasElement().getContext('2d');\n\n      this.callSuper('initialize', text, options);\n      this.set({\n        lockUniScaling: false,\n        lockScalingY: true,\n        lockScalingFlip: true,\n        hasBorders: true\n      });\n      this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());\n\n      // add width to this list of props that effect line wrapping.\n      this._dimensionAffectingProps.width = true;\n    },\n\n    /**\n     * Unlike superclass's version of this function, Textbox does not update\n     * its width.\n     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n     * @private\n     * @override\n     */\n    _initDimensions: function(ctx) {\n      if (this.__skipDimension) {\n        return;\n      }\n\n      if (!ctx) {\n        ctx = fabric.util.createCanvasElement().getContext('2d');\n        this._setTextStyles(ctx);\n      }\n\n      // clear dynamicMinWidth as it will be different after we re-wrap line\n      this.dynamicMinWidth = 0;\n\n      // wrap lines\n      this._textLines = this._splitTextIntoLines();\n\n      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n      if (this.dynamicMinWidth > this.width) {\n        this._set('width', this.dynamicMinWidth);\n      }\n\n      // clear cache and re-calculate height\n      this._clearCache();\n      this.height = this._getTextHeight(ctx);\n      this._setLineWidths();\n    },\n\n    /**\n     * set the __lineWidths cache array to support\n     * functions that expect it to be filled\n     * @private\n     */\n    _setLineWidths: function() {\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        this.__lineWidths[i] = this.width;\n      }\n    },\n\n    /**\n     * Generate an object that translates the style object so that it is\n     * broken up by visual lines (new lines and automatic wrapping).\n     * The original text styles object is broken up by actual lines (new lines only),\n     * which is only sufficient for Text / IText\n     * @private\n     */\n    _generateStyleMap: function() {\n      var realLineCount     = 0,\n          realLineCharCount = 0,\n          charCount         = 0,\n          map               = {};\n\n      for (var i = 0; i < this._textLines.length; i++) {\n        if (this.text[charCount] === '\\n') {\n          realLineCharCount = 0;\n          charCount++;\n          realLineCount++;\n        }\n        else if (this.text[charCount] === ' ') {\n          // this case deals with space's that are removed from end of lines when wrapping\n          realLineCharCount++;\n          charCount++;\n        }\n\n        map[i] = { line: realLineCount, offset: realLineCharCount };\n\n        charCount += this._textLines[i].length;\n        realLineCharCount += this._textLines[i].length;\n      }\n\n      return map;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Boolean} [returnCloneOrEmpty=false]\n     * @private\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {\n      if (this._styleMap) {\n        var map = this._styleMap[lineIndex];\n        lineIndex = map.line;\n        charIndex = map.offset + charIndex;\n      }\n\n      if (returnCloneOrEmpty) {\n        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])\n          ? clone(this.styles[lineIndex][charIndex])\n          : {};\n      }\n\n      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      var map = this._styleMap[lineIndex];\n      return this.styles[map.line];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Object} style\n     * @private\n     */\n    _setLineStyle: function(lineIndex, style) {\n      var map = this._styleMap[lineIndex];\n      this.styles[map.line] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      var map = this._styleMap[lineIndex];\n      delete this.styles[map.line];\n    },\n\n    /**\n     * Wraps text using the 'width' property of Textbox. First this function\n     * splits text on newlines, so we preserve newlines entered by the user.\n     * Then it wraps each line using the width of the Textbox by calling\n     * _wrapLine().\n     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n     * @param {String} text The string of text that is split into lines\n     * @returns {Array} Array of lines\n     */\n    _wrapText: function(ctx, text) {\n      var lines = text.split(this._reNewline), wrapped = [], i;\n\n      for (i = 0; i < lines.length; i++) {\n        wrapped = wrapped.concat(this._wrapLine(ctx, lines[i], i));\n      }\n\n      return wrapped;\n    },\n\n    /**\n     * Helper function to measure a string of text, given its lineIndex and charIndex offset\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {String} text\n     * @param {number} lineIndex\n     * @param {number} charOffset\n     * @returns {number}\n     * @private\n     */\n    _measureText: function(ctx, text, lineIndex, charOffset) {\n      var width = 0, decl;\n      charOffset = charOffset || 0;\n\n      for (var i = 0; i < text.length; i++) {\n        if (this.styles && this.styles[lineIndex] && (decl = this.styles[lineIndex][i + charOffset])) {\n          ctx.save();\n          width += this._applyCharStylesGetWidth(ctx, text[i], lineIndex, i, decl);\n          ctx.restore();\n        }\n        else {\n          // @note: we intentionally pass in an empty style declaration, because if we pass in nothing, it will\n          // retry fetching style declaration\n          width += this._applyCharStylesGetWidth(ctx, text[i], lineIndex, i, {});\n        }\n      }\n\n      return width;\n    },\n\n    /**\n     * Wraps a line of text using the width of the Textbox and a context.\n     * @param {CanvasRenderingContext2D} ctx Context to use for measurements\n     * @param {String} text The string of text to split into lines\n     * @param {Number} lineIndex\n     * @returns {Array} Array of line(s) into which the given text is wrapped\n     * to.\n     */\n    _wrapLine: function(ctx, text, lineIndex) {\n      var maxWidth  = this.width,\n          lineWidth = this._measureText(ctx, text, lineIndex, 0);\n\n      // first case: does the whole line fit?\n      if (lineWidth < maxWidth) {\n        // if the current line is only one word, we need to keep track of it if it's a large word\n        if (text.indexOf(' ') === -1 && lineWidth > this.dynamicMinWidth) {\n          this.dynamicMinWidth = lineWidth;\n        }\n\n        return [text];\n      }\n\n      // if the whole line doesn't fit, we break it up into words\n      var lines            = [],\n          line             = '',\n          words            = text.split(' '),\n          offset           = 0,\n          infix            = '',\n          wordWidth        = 0,\n          largestWordWidth = 0;\n\n      while (words.length > 0) {\n        infix = line === '' ? '' : ' ';\n        wordWidth = this._measureText(ctx, words[0], lineIndex, line.length + infix.length + offset);\n        lineWidth = line === '' ? wordWidth : this._measureText(ctx, line + infix + words[0], lineIndex, offset);\n\n        if (lineWidth < maxWidth || (line === '' && wordWidth >= maxWidth)) {\n          line += infix + words.shift();\n        }\n        else {\n          offset += line.length + 1; // add 1 because each word is separated by a space\n          lines.push(line);\n          line = '';\n        }\n\n        if (words.length === 0) {\n          lines.push(line);\n        }\n\n        // keep track of largest word\n        if (wordWidth > largestWordWidth) {\n          largestWordWidth = wordWidth;\n        }\n      }\n\n      if (largestWordWidth > this.dynamicMinWidth) {\n        this.dynamicMinWidth = largestWordWidth;\n      }\n\n      return lines;\n    },\n\n    /**\n     * Gets lines of text to render in the Textbox. This function calculates\n     * text wrapping on the fly everytime it is called.\n     * @returns {Array} Array of lines in the Textbox.\n     * @override\n     */\n    _splitTextIntoLines: function() {\n      this.ctx.save();\n      this._setTextStyles(this.ctx);\n\n      var lines = this._wrapText(this.ctx, this.text);\n\n      this.ctx.restore();\n      this._textLines = lines;\n      this._styleMap = this._generateStyleMap();\n      return lines;\n    },\n\n    /**\n     * When part of a group, we don't want the Textbox's scale to increase if\n     * the group's increases. That's why we reduce the scale of the Textbox by\n     * the amount that the group's increases. This is to maintain the effective\n     * scale of the Textbox at 1, so that font-size values make sense. Otherwise\n     * the same font-size value would result in different actual size depending\n     * on the value of the scale.\n     * @param {String} key\n     * @param {Any} value\n     */\n    setOnGroup: function(key, value) {\n      if (key === 'scaleX') {\n        this.set('scaleX', Math.abs(1 / value));\n        this.set('width', (this.get('width') * value) /\n          (typeof this.__oldScaleX === 'undefined' ? 1 : this.__oldScaleX));\n        this.__oldScaleX = value;\n      }\n    },\n\n    /**\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start).\n     * Overrides the superclass function to take into account text wrapping.\n     *\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n     */\n    get2DCursorLocation: function(selectionStart) {\n      if (typeof selectionStart === 'undefined') {\n        selectionStart = this.selectionStart;\n      }\n\n      var numLines = this._textLines.length,\n          removed  = 0;\n\n      for (var i = 0; i < numLines; i++) {\n        var line    = this._textLines[i],\n            lineLen = line.length;\n\n        if (selectionStart <= removed + lineLen) {\n          return {\n            lineIndex: i,\n            charIndex: selectionStart - removed\n          };\n        }\n\n        removed += lineLen;\n\n        if (this.text[removed] === '\\n' || this.text[removed] === ' ') {\n          removed++;\n        }\n      }\n\n      return {\n        lineIndex: numLines - 1,\n        charIndex: this._textLines[numLines - 1].length\n      };\n    },\n\n    /**\n     * Overrides superclass function and uses text wrapping data to get cursor\n     * boundary offsets instead of the array of chars.\n     * @param {Array} chars Unused\n     * @param {String} typeOfBoundaries Can be 'cursor' or 'selection'\n     * @returns {Object} Object with 'top', 'left', and 'lineLeft' properties set.\n     */\n    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {\n      var topOffset      = 0,\n          leftOffset     = 0,\n          cursorLocation = this.get2DCursorLocation(),\n          lineChars      = this._textLines[cursorLocation.lineIndex].split(''),\n          lineLeftOffset = this._getCachedLineOffset(cursorLocation.lineIndex);\n\n      for (var i = 0; i < cursorLocation.charIndex; i++) {\n        leftOffset += this._getWidthOfChar(this.ctx, lineChars[i], cursorLocation.lineIndex, i);\n      }\n\n      for (i = 0; i < cursorLocation.lineIndex; i++) {\n        topOffset += this._getHeightOfLine(this.ctx, i);\n      }\n\n      if (typeOfBoundaries === 'cursor') {\n        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, cursorLocation.lineIndex)\n          / this.lineHeight - this.getCurrentCharFontSize(cursorLocation.lineIndex, cursorLocation.charIndex)\n          * (1 - this._fontSizeFraction);\n      }\n\n      return {\n        top: topOffset,\n        left: leftOffset,\n        lineLeft: lineLeftOffset\n      };\n    },\n\n    getMinWidth: function() {\n      return Math.max(this.minWidth, this.dynamicMinWidth);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @method toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {\n        minWidth: this.minWidth\n      });\n    }\n  });\n  /**\n   * Returns fabric.Textbox instance from an object representation\n   * @static\n   * @memberOf fabric.Textbox\n   * @param {Object} object Object to create an instance from\n   * @return {fabric.Textbox} instance of fabric.Textbox\n   */\n  fabric.Textbox.fromObject = function(object) {\n    return new fabric.Textbox(object.text, clone(object));\n  };\n  /**\n   * Returns the default controls visibility required for Textboxes.\n   * @returns {Object}\n   */\n  fabric.Textbox.getTextboxControlVisibility = function() {\n    return {\n      tl: false,\n      tr: false,\n      br: false,\n      bl: false,\n      ml: true,\n      mt: false,\n      mr: true,\n      mb: false,\n      mtr: true\n    };\n  };\n  /**\n   * Contains all fabric.Textbox objects that have been created\n   * @static\n   * @memberOf fabric.Textbox\n   * @type Array\n   */\n  fabric.Textbox.instances = [];\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  /**\n   * Override _setObjectScale and add Textbox specific resizing behavior. Resizing\n   * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.\n   */\n  var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;\n\n  fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,\n                                                     lockScalingX, lockScalingY, by, lockScalingFlip) {\n\n    var t = transform.target;\n    if (t instanceof fabric.Textbox) {\n      var w = t.width * ((localMouse.x / transform.scaleX) / (t.width + t.strokeWidth));\n      if (w >= t.getMinWidth()) {\n        t.set('width', w);\n      }\n    }\n    else {\n      setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,\n        lockScalingX, lockScalingY, by, lockScalingFlip);\n    }\n  };\n\n  /**\n   * Sets controls of this group to the Textbox's special configuration if\n   * one is present in the group. Deletes _controlsVisibility otherwise, so that\n   * it gets initialized to default value at runtime.\n   */\n  fabric.Group.prototype._refreshControlsVisibility = function() {\n    if (typeof fabric.Textbox === 'undefined') {\n      return;\n    }\n    for (var i = this._objects.length; i--;) {\n      if (this._objects[i] instanceof fabric.Textbox) {\n        this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());\n        return;\n      }\n    }\n  };\n\n  var clone = fabric.util.object.clone;\n\n  fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {\n    /**\n     * @private\n     */\n    _removeExtraneousStyles: function() {\n      for (var prop in this._styleMap) {\n        if (!this._textLines[prop]) {\n          delete this.styles[this._styleMap[prop].line];\n        }\n      }\n    },\n\n    /**\n     * Inserts style object for a given line/char index\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Object} [style] Style object to insert, if given\n     */\n    insertCharStyleObject: function(lineIndex, charIndex, style) {\n      // adjust lineIndex and charIndex\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      fabric.IText.prototype.insertCharStyleObject.apply(this, [lineIndex, charIndex, style]);\n    },\n\n    /**\n     * Inserts new style object\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Boolean} isEndOfLine True if it's end of line\n     */\n    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {\n      // adjust lineIndex and charIndex\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      fabric.IText.prototype.insertNewlineStyleObject.apply(this, [lineIndex, charIndex, isEndOfLine]);\n    },\n\n    /**\n     * Shifts line styles up or down. This function is slightly different than the one in\n     * itext_behaviour as it takes into account the styleMap.\n     *\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} offset Can be -1 or +1\n     */\n    shiftLineStyles: function(lineIndex, offset) {\n      // shift all line styles by 1 upward\n      var clonedStyles = clone(this.styles),\n          map          = this._styleMap[lineIndex];\n\n      // adjust line index\n      lineIndex = map.line;\n\n      for (var line in this.styles) {\n        var numericLine = parseInt(line, 10);\n\n        if (numericLine > lineIndex) {\n          this.styles[numericLine + offset] = clonedStyles[numericLine];\n\n          if (!clonedStyles[numericLine - offset]) {\n            delete this.styles[numericLine];\n          }\n        }\n      }\n      //TODO: evaluate if delete old style lines with offset -1\n    },\n\n    /**\n     * Figure out programatically the text on previous actual line (actual = separated by \\n);\n     *\n     * @param {Number} lIndex\n     * @returns {String}\n     * @private\n     */\n    _getTextOnPreviousLine: function(lIndex) {\n      var textOnPreviousLine = this._textLines[lIndex - 1];\n\n      while (this._styleMap[lIndex - 2] && this._styleMap[lIndex - 2].line === this._styleMap[lIndex - 1].line) {\n        textOnPreviousLine = this._textLines[lIndex - 2] + textOnPreviousLine;\n\n        lIndex--;\n      }\n\n      return textOnPreviousLine;\n    },\n\n    /**\n     * Removes style object\n     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line\n     * @param {Number} [index] Optional index. When not given, current selectionStart is used.\n     */\n    removeStyleObject: function(isBeginningOfLine, index) {\n\n      var cursorLocation = this.get2DCursorLocation(index),\n          map            = this._styleMap[cursorLocation.lineIndex],\n          lineIndex      = map.line,\n          charIndex      = map.offset + cursorLocation.charIndex;\n\n      if (isBeginningOfLine) {\n        var textOnPreviousLine     = this._getTextOnPreviousLine(cursorLocation.lineIndex),\n            newCharIndexOnPrevLine = textOnPreviousLine ? textOnPreviousLine.length : 0;\n\n        if (!this.styles[lineIndex - 1]) {\n          this.styles[lineIndex - 1] = {};\n        }\n\n        for (charIndex in this.styles[lineIndex]) {\n          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]\n            = this.styles[lineIndex][charIndex];\n        }\n\n        this.shiftLineStyles(cursorLocation.lineIndex, -1);\n\n      }\n      else {\n        var currentLineStyles = this.styles[lineIndex];\n\n        if (currentLineStyles) {\n          delete currentLineStyles[charIndex];\n          //console.log('deleting', lineIndex, charIndex + offset);\n        }\n\n        var currentLineStylesCloned = clone(currentLineStyles);\n\n        // shift all styles by 1 backwards\n        for (var i in currentLineStylesCloned) {\n          var numericIndex = parseInt(i, 10);\n          if (numericIndex >= charIndex && numericIndex !== 0) {\n            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];\n            delete currentLineStyles[numericIndex];\n          }\n        }\n      }\n    }\n  });\n})();\n\n\n(function() {\n  var override = fabric.IText.prototype._getNewSelectionStartFromOffset;\n  /**\n   * Overrides the IText implementation and adjusts character index as there is not always a linebreak\n   *\n   * @param {Number} mouseOffset\n   * @param {Number} prevWidth\n   * @param {Number} width\n   * @param {Number} index\n   * @param {Number} jlen\n   * @returns {Number}\n   */\n  fabric.IText.prototype._getNewSelectionStartFromOffset = function(mouseOffset, prevWidth, width, index, jlen) {\n    index = override.call(this, mouseOffset, prevWidth, width, index, jlen);\n\n    // the index passed into the function is padded by the amount of lines from _textLines (to account for \\n)\n    // we need to remove this padding, and pad it by actual lines, and / or spaces that are meant to be there\n    var tmp     = 0,\n        removed = 0;\n\n    // account for removed characters\n    for (var i = 0; i < this._textLines.length; i++) {\n      tmp += this._textLines[i].length;\n\n      if (tmp + removed >= index) {\n        break;\n      }\n\n      if (this.text[tmp + removed] === '\\n' || this.text[tmp + removed] === ' ') {\n        removed++;\n      }\n    }\n\n    return index - i + removed;\n  };\n})();\n\n\n(function() {\n\n  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\n    return;\n  }\n\n  var DOMParser = require('xmldom').DOMParser,\n      URL = require('url'),\n      HTTP = require('http'),\n      HTTPS = require('https'),\n\n      Canvas = require('canvas'),\n      Image = require('canvas').Image;\n\n  /** @private */\n  function request(url, encoding, callback) {\n    var oURL = URL.parse(url);\n\n    // detect if http or https is used\n    if ( !oURL.port ) {\n      oURL.port = ( oURL.protocol.indexOf('https:') === 0 ) ? 443 : 80;\n    }\n\n    // assign request handler based on protocol\n    var reqHandler = (oURL.protocol.indexOf('https:') === 0 ) ? HTTPS : HTTP,\n        req = reqHandler.request({\n          hostname: oURL.hostname,\n          port: oURL.port,\n          path: oURL.path,\n          method: 'GET'\n        }, function(response) {\n          var body = '';\n          if (encoding) {\n            response.setEncoding(encoding);\n          }\n          response.on('end', function () {\n            callback(body);\n          });\n          response.on('data', function (chunk) {\n            if (response.statusCode === 200) {\n              body += chunk;\n            }\n          });\n        });\n\n    req.on('error', function(err) {\n      if (err.errno === process.ECONNREFUSED) {\n        fabric.log('ECONNREFUSED: connection refused to ' + oURL.hostname + ':' + oURL.port);\n      }\n      else {\n        fabric.log(err.message);\n      }\n      callback(null);\n    });\n\n    req.end();\n  }\n\n  /** @private */\n  function requestFs(path, callback) {\n    var fs = require('fs');\n    fs.readFile(path, function (err, data) {\n      if (err) {\n        fabric.log(err);\n        throw err;\n      }\n      else {\n        callback(data);\n      }\n    });\n  }\n\n  fabric.util.loadImage = function(url, callback, context) {\n    function createImageAndCallBack(data) {\n      if (data) {\n        img.src = new Buffer(data, 'binary');\n        // preserving original url, which seems to be lost in node-canvas\n        img._src = url;\n        callback && callback.call(context, img);\n      }\n      else {\n        img = null;\n        callback && callback.call(context, null, true);\n      }\n    }\n    var img = new Image();\n    if (url && (url instanceof Buffer || url.indexOf('data') === 0)) {\n      img.src = img._src = url;\n      callback && callback.call(context, img);\n    }\n    else if (url && url.indexOf('http') !== 0) {\n      requestFs(url, createImageAndCallBack);\n    }\n    else if (url) {\n      request(url, 'binary', createImageAndCallBack);\n    }\n    else {\n      callback && callback.call(context, url);\n    }\n  };\n\n  fabric.loadSVGFromURL = function(url, callback, reviver) {\n    url = url.replace(/^\\n\\s*/, '').replace(/\\?.*$/, '').trim();\n    if (url.indexOf('http') !== 0) {\n      requestFs(url, function(body) {\n        fabric.loadSVGFromString(body.toString(), callback, reviver);\n      });\n    }\n    else {\n      request(url, '', function(body) {\n        fabric.loadSVGFromString(body, callback, reviver);\n      });\n    }\n  };\n\n  fabric.loadSVGFromString = function(string, callback, reviver) {\n    var doc = new DOMParser().parseFromString(string);\n    fabric.parseSVGDocument(doc.documentElement, function(results, options) {\n      callback && callback(results, options);\n    }, reviver);\n  };\n\n  fabric.util.getScript = function(url, callback) {\n    request(url, '', function(body) {\n      eval(body);\n      callback && callback();\n    });\n  };\n\n  fabric.Image.fromObject = function(object, callback) {\n    fabric.util.loadImage(object.src, function(img) {\n      var oImg = new fabric.Image(img);\n\n      oImg._initConfig(object);\n      oImg._initFilters(object.filters, function(filters) {\n        oImg.filters = filters || [ ];\n        oImg._initFilters(object.resizeFilters, function(resizeFilters) {\n          oImg.resizeFilters = resizeFilters || [ ];\n          callback && callback(oImg);\n        });\n      });\n    });\n  };\n  /**\n   * Only available when running fabric on node.js\n   * @param {Number} width Canvas width\n   * @param {Number} height Canvas height\n   * @param {Object} [options] Options to pass to FabricCanvas.\n   * @param {Object} [nodeCanvasOptions] Options to pass to NodeCanvas.\n   * @return {Object} wrapped canvas instance\n   */\n  fabric.createCanvasForNode = function(width, height, options, nodeCanvasOptions) {\n    nodeCanvasOptions = nodeCanvasOptions || options;\n\n    var canvasEl = fabric.document.createElement('canvas'),\n        nodeCanvas = new Canvas(width || 600, height || 600, nodeCanvasOptions);\n\n    // jsdom doesn't create style on canvas element, so here be temp. workaround\n    canvasEl.style = { };\n\n    canvasEl.width = nodeCanvas.width;\n    canvasEl.height = nodeCanvas.height;\n\n    var FabricCanvas = fabric.Canvas || fabric.StaticCanvas,\n        fabricCanvas = new FabricCanvas(canvasEl, options);\n\n    fabricCanvas.contextContainer = nodeCanvas.getContext('2d');\n    fabricCanvas.nodeCanvas = nodeCanvas;\n    fabricCanvas.Font = Canvas.Font;\n\n    return fabricCanvas;\n  };\n\n  /** @ignore */\n  fabric.StaticCanvas.prototype.createPNGStream = function() {\n    return this.nodeCanvas.createPNGStream();\n  };\n\n  fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n    return this.nodeCanvas.createJPEGStream(opts);\n  };\n\n  var origSetWidth = fabric.StaticCanvas.prototype.setWidth;\n  fabric.StaticCanvas.prototype.setWidth = function(width, options) {\n    origSetWidth.call(this, width, options);\n    this.nodeCanvas.width = width;\n    return this;\n  };\n  if (fabric.Canvas) {\n    fabric.Canvas.prototype.setWidth = fabric.StaticCanvas.prototype.setWidth;\n  }\n\n  var origSetHeight = fabric.StaticCanvas.prototype.setHeight;\n  fabric.StaticCanvas.prototype.setHeight = function(height, options) {\n    origSetHeight.call(this, height, options);\n    this.nodeCanvas.height = height;\n    return this;\n  };\n  if (fabric.Canvas) {\n    fabric.Canvas.prototype.setHeight = fabric.StaticCanvas.prototype.setHeight;\n  }\n\n})();\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/fabric-webpack/dist/fabric.js\n ** module id = 984\n ** module chunks = 2\n **/","var Stream = require('stream');\nvar Response = require('./response');\nvar Base64 = require('Base64');\nvar inherits = require('inherits');\n\nvar Request = module.exports = function (xhr, params) {\n    var self = this;\n    self.writable = true;\n    self.xhr = xhr;\n    self.body = [];\n    \n    self.uri = (params.protocol || 'http:') + '//'\n        + params.host\n        + (params.port ? ':' + params.port : '')\n        + (params.path || '/')\n    ;\n    \n    if (typeof params.withCredentials === 'undefined') {\n        params.withCredentials = true;\n    }\n\n    try { xhr.withCredentials = params.withCredentials }\n    catch (e) {}\n    \n    if (params.responseType) try { xhr.responseType = params.responseType }\n    catch (e) {}\n    \n    xhr.open(\n        params.method || 'GET',\n        self.uri,\n        true\n    );\n\n    xhr.onerror = function(event) {\n        self.emit('error', new Error('Network error'));\n    };\n\n    self._headers = {};\n    \n    if (params.headers) {\n        var keys = objectKeys(params.headers);\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            if (!self.isSafeRequestHeader(key)) continue;\n            var value = params.headers[key];\n            self.setHeader(key, value);\n        }\n    }\n    \n    if (params.auth) {\n        //basic auth\n        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));\n    }\n\n    var res = new Response;\n    res.on('close', function () {\n        self.emit('close');\n    });\n    \n    res.on('ready', function () {\n        self.emit('response', res);\n    });\n\n    res.on('error', function (err) {\n        self.emit('error', err);\n    });\n    \n    xhr.onreadystatechange = function () {\n        // Fix for IE9 bug\n        // SCRIPT575: Could not complete the operation due to error c00c023f\n        // It happens when a request is aborted, calling the success callback anyway with readyState === 4\n        if (xhr.__aborted) return;\n        res.handle(xhr);\n    };\n};\n\ninherits(Request, Stream);\n\nRequest.prototype.setHeader = function (key, value) {\n    this._headers[key.toLowerCase()] = value\n};\n\nRequest.prototype.getHeader = function (key) {\n    return this._headers[key.toLowerCase()]\n};\n\nRequest.prototype.removeHeader = function (key) {\n    delete this._headers[key.toLowerCase()]\n};\n\nRequest.prototype.write = function (s) {\n    this.body.push(s);\n};\n\nRequest.prototype.destroy = function (s) {\n    this.xhr.__aborted = true;\n    this.xhr.abort();\n    this.emit('close');\n};\n\nRequest.prototype.end = function (s) {\n    if (s !== undefined) this.body.push(s);\n\n    var keys = objectKeys(this._headers);\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var value = this._headers[key];\n        if (isArray(value)) {\n            for (var j = 0; j < value.length; j++) {\n                this.xhr.setRequestHeader(key, value[j]);\n            }\n        }\n        else this.xhr.setRequestHeader(key, value)\n    }\n\n    if (this.body.length === 0) {\n        this.xhr.send('');\n    }\n    else if (typeof this.body[0] === 'string') {\n        this.xhr.send(this.body.join(''));\n    }\n    else if (isArray(this.body[0])) {\n        var body = [];\n        for (var i = 0; i < this.body.length; i++) {\n            body.push.apply(body, this.body[i]);\n        }\n        this.xhr.send(body);\n    }\n    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {\n        var len = 0;\n        for (var i = 0; i < this.body.length; i++) {\n            len += this.body[i].length;\n        }\n        var body = new(this.body[0].constructor)(len);\n        var k = 0;\n        \n        for (var i = 0; i < this.body.length; i++) {\n            var b = this.body[i];\n            for (var j = 0; j < b.length; j++) {\n                body[k++] = b[j];\n            }\n        }\n        this.xhr.send(body);\n    }\n    else if (isXHR2Compatible(this.body[0])) {\n        this.xhr.send(this.body[0]);\n    }\n    else {\n        var body = '';\n        for (var i = 0; i < this.body.length; i++) {\n            body += this.body[i].toString();\n        }\n        this.xhr.send(body);\n    }\n};\n\n// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html\nRequest.unsafeHeaders = [\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"access-control-request-headers\",\n    \"access-control-request-method\",\n    \"connection\",\n    \"content-length\",\n    \"cookie\",\n    \"cookie2\",\n    \"content-transfer-encoding\",\n    \"date\",\n    \"expect\",\n    \"host\",\n    \"keep-alive\",\n    \"origin\",\n    \"referer\",\n    \"te\",\n    \"trailer\",\n    \"transfer-encoding\",\n    \"upgrade\",\n    \"user-agent\",\n    \"via\"\n];\n\nRequest.prototype.isSafeRequestHeader = function (headerName) {\n    if (!headerName) return false;\n    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;\n};\n\nvar objectKeys = Object.keys || function (obj) {\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    return keys;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nvar indexOf = function (xs, x) {\n    if (xs.indexOf) return xs.indexOf(x);\n    for (var i = 0; i < xs.length; i++) {\n        if (xs[i] === x) return i;\n    }\n    return -1;\n};\n\nvar isXHR2Compatible = function (obj) {\n    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;\n    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;\n    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/http-browserify/lib/request.js\n ** module id = 1092\n ** module chunks = 2\n **/","var Stream = require('stream');\nvar util = require('util');\n\nvar Response = module.exports = function (res) {\n    this.offset = 0;\n    this.readable = true;\n};\n\nutil.inherits(Response, Stream);\n\nvar capable = {\n    streaming : true,\n    status2 : true\n};\n\nfunction parseHeaders (res) {\n    var lines = res.getAllResponseHeaders().split(/\\r?\\n/);\n    var headers = {};\n    for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        if (line === '') continue;\n        \n        var m = line.match(/^([^:]+):\\s*(.*)/);\n        if (m) {\n            var key = m[1].toLowerCase(), value = m[2];\n            \n            if (headers[key] !== undefined) {\n            \n                if (isArray(headers[key])) {\n                    headers[key].push(value);\n                }\n                else {\n                    headers[key] = [ headers[key], value ];\n                }\n            }\n            else {\n                headers[key] = value;\n            }\n        }\n        else {\n            headers[line] = true;\n        }\n    }\n    return headers;\n}\n\nResponse.prototype.getResponse = function (xhr) {\n    var respType = String(xhr.responseType).toLowerCase();\n    if (respType === 'blob') return xhr.responseBlob || xhr.response;\n    if (respType === 'arraybuffer') return xhr.response;\n    return xhr.responseText;\n}\n\nResponse.prototype.getHeader = function (key) {\n    return this.headers[key.toLowerCase()];\n};\n\nResponse.prototype.handle = function (res) {\n    if (res.readyState === 2 && capable.status2) {\n        try {\n            this.statusCode = res.status;\n            this.headers = parseHeaders(res);\n        }\n        catch (err) {\n            capable.status2 = false;\n        }\n        \n        if (capable.status2) {\n            this.emit('ready');\n        }\n    }\n    else if (capable.streaming && res.readyState === 3) {\n        try {\n            if (!this.statusCode) {\n                this.statusCode = res.status;\n                this.headers = parseHeaders(res);\n                this.emit('ready');\n            }\n        }\n        catch (err) {}\n        \n        try {\n            this._emitData(res);\n        }\n        catch (err) {\n            capable.streaming = false;\n        }\n    }\n    else if (res.readyState === 4) {\n        if (!this.statusCode) {\n            this.statusCode = res.status;\n            this.emit('ready');\n        }\n        this._emitData(res);\n        \n        if (res.error) {\n            this.emit('error', this.getResponse(res));\n        }\n        else this.emit('end');\n        \n        this.emit('close');\n    }\n};\n\nResponse.prototype._emitData = function (res) {\n    var respBody = this.getResponse(res);\n    if (respBody.toString().match(/ArrayBuffer/)) {\n        this.emit('data', new Uint8Array(respBody, this.offset));\n        this.offset = respBody.byteLength;\n        return;\n    }\n    if (respBody.length > this.offset) {\n        this.emit('data', respBody.slice(this.offset));\n        this.offset = respBody.length;\n    }\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/http-browserify/lib/response.js\n ** module id = 1093\n ** module chunks = 2\n **/",";(function () {\n\n  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n  InvalidCharacterError.prototype = new Error;\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n  object.btoa || (\n  object.btoa = function (input) {\n    for (\n      // initialize result and counter\n      var block, charCode, idx = 0, map = chars, output = '';\n      // if the next input index does not exist:\n      //   change the mapping table to \"=\"\n      //   check if d has no fractional digits\n      input.charAt(idx | 0) || (map = '=', idx % 1);\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n    ) {\n      charCode = input.charCodeAt(idx += 3/4);\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  });\n\n  // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n  object.atob || (\n  object.atob = function (input) {\n    input = input.replace(/=+$/, '');\n    if (input.length % 4 == 1) {\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n      // initialize result and counters\n      var bc = 0, bs, buffer, idx = 0, output = '';\n      // get next character\n      buffer = input.charAt(idx++);\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  });\n\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/http-browserify/~/Base64/base64.js\n ** module id = 1094\n ** module chunks = 2\n **/","var http = require('http');\n\nvar https = module.exports;\n\nfor (var key in http) {\n    if (http.hasOwnProperty(key)) https[key] = http[key];\n};\n\nhttps.request = function (params, cb) {\n    if (!params) params = {};\n    params.scheme = 'https';\n    return http.request.call(this, params, cb);\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/https-browserify/index.js\n ** module id = 1096\n ** module chunks = 2\n **/","/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/url/~/punycode/punycode.js\n ** module id = 1104\n ** module chunks = 2\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/url/~/querystring/decode.js\n ** module id = 1105\n ** module chunks = 2\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/url/~/querystring/encode.js\n ** module id = 1106\n ** module chunks = 2\n **/","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/url/~/querystring/index.js\n ** module id = 1107\n ** module chunks = 2\n **/"],"sourceRoot":""}